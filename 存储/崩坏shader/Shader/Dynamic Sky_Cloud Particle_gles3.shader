//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Dynamic Sky/Cloud Particle" {
Properties {
[Header(Cloud Maps)] _SkyGradientTex ("Sky Gradient Tex", 2D) = "white" { }
_CloudParticleAtlas ("Cloud Particle Atlas", 2D) = "white" { }
[Header(Cloud Curl)] _CloudCurlTex ("Cloud Curl Tex", 2D) = "white" { }
_CloudCurlTiling ("Cloud Curl Tiling", Range(0, 30)) = 10
_CloudCurlAmplitude ("Cloud Curl Amplitude", Range(0, 0.02)) = 0.01
_CloudCurlSpeed ("Cloud Curl Speed", Range(0, 50)) = 20
[Header(Debug)] [Toggle(FIXED_SPRITE_ID)] _UseFixedSpriteId ("Fixed Sprite ID?", Float) = 0
_FixedSpriteId ("Sprite ID", Float) = 0
[Toggle(FIXED_EDGE_SMOOTHNESS)] _UseFixedEdgeSmoothness ("Fixed Edge Smoothness?", Float) = 0
_FixedEdgeSmoothness ("Fixed Edge Smoothness", Range(0, 1)) = 0.1
[Toggle(FIXED_RIMLIGHT_WIDTH)] _UseFixedRimLightWidth ("Fixed Rimlight Width?", Float) = 0
_FixedRimLightWidth ("Fixed Rimlight Width", Range(0, 1)) = 0.1
}
SubShader {
 Tags { "QUEUE" = "Background" "RenderType" = "Transparent" }
 Pass {
  Tags { "QUEUE" = "Background" "RenderType" = "Transparent" }
  ZWrite Off
  Cull Off
  GpuProgramID 2604
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat18 = in_COLOR0.y * u_xlat18 + 0.5;
    u_xlat18 = floor(u_xlat18);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.yz = in_COLOR0.zw;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat18 = in_COLOR0.y * u_xlat18 + 0.5;
    u_xlat18 = floor(u_xlat18);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.yz = in_COLOR0.zw;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat18 = in_COLOR0.y * u_xlat18 + 0.5;
    u_xlat18 = floor(u_xlat18);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.yz = in_COLOR0.zw;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat18 = in_COLOR0.y * u_xlat18 + 0.5;
    u_xlat18 = floor(u_xlat18);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.yz = in_COLOR0.zw;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat18 = in_COLOR0.y * u_xlat18 + 0.5;
    u_xlat18 = floor(u_xlat18);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.yz = in_COLOR0.zw;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat18 = in_COLOR0.y * u_xlat18 + 0.5;
    u_xlat18 = floor(u_xlat18);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.yz = in_COLOR0.zw;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
vec2 u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat21 = in_COLOR0.y * u_xlat21 + 0.5;
    u_xlat21 = floor(u_xlat21);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.yz = in_COLOR0.zw;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10 = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat7 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat14.x = u_xlat14.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat14.xxx * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.x>=u_xlat14.x);
#else
    u_xlatb14 = u_xlat0.x>=u_xlat14.x;
#endif
    u_xlat21 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta.w;
    u_xlat14.x = (u_xlatb14) ? u_xlat22 : u_xlat21;
    u_xlat14.x = log2(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * _Mihoyo_FogColor.w;
    u_xlat14.x = exp2(u_xlat14.x);
    u_xlat14.x = min(u_xlat14.x, _HeigtFogColDelta.w);
    u_xlat1.xyz = u_xlat14.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat7 * -1.44269502;
    u_xlat14.y = exp2(u_xlat21);
    u_xlat14.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat14.y / u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.00999999978<abs(u_xlat7));
#else
    u_xlatb7 = 0.00999999978<abs(u_xlat7);
#endif
    u_xlat16_4.x = (u_xlatb7) ? u_xlat21 : 1.0;
    u_xlat7 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta.w);
    u_xlat7 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat2.w = u_xlat7 * u_xlat14.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
vec2 u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat21 = in_COLOR0.y * u_xlat21 + 0.5;
    u_xlat21 = floor(u_xlat21);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.yz = in_COLOR0.zw;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10 = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat7 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat14.x = u_xlat14.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat14.xxx * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.x>=u_xlat14.x);
#else
    u_xlatb14 = u_xlat0.x>=u_xlat14.x;
#endif
    u_xlat21 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta.w;
    u_xlat14.x = (u_xlatb14) ? u_xlat22 : u_xlat21;
    u_xlat14.x = log2(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * _Mihoyo_FogColor.w;
    u_xlat14.x = exp2(u_xlat14.x);
    u_xlat14.x = min(u_xlat14.x, _HeigtFogColDelta.w);
    u_xlat1.xyz = u_xlat14.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat7 * -1.44269502;
    u_xlat14.y = exp2(u_xlat21);
    u_xlat14.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat14.y / u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.00999999978<abs(u_xlat7));
#else
    u_xlatb7 = 0.00999999978<abs(u_xlat7);
#endif
    u_xlat16_4.x = (u_xlatb7) ? u_xlat21 : 1.0;
    u_xlat7 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta.w);
    u_xlat7 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat2.w = u_xlat7 * u_xlat14.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
vec2 u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat21 = in_COLOR0.y * u_xlat21 + 0.5;
    u_xlat21 = floor(u_xlat21);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.yz = in_COLOR0.zw;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10 = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat7 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat14.x = u_xlat14.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat14.xxx * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.x>=u_xlat14.x);
#else
    u_xlatb14 = u_xlat0.x>=u_xlat14.x;
#endif
    u_xlat21 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta.w;
    u_xlat14.x = (u_xlatb14) ? u_xlat22 : u_xlat21;
    u_xlat14.x = log2(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * _Mihoyo_FogColor.w;
    u_xlat14.x = exp2(u_xlat14.x);
    u_xlat14.x = min(u_xlat14.x, _HeigtFogColDelta.w);
    u_xlat1.xyz = u_xlat14.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat7 * -1.44269502;
    u_xlat14.y = exp2(u_xlat21);
    u_xlat14.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat14.y / u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.00999999978<abs(u_xlat7));
#else
    u_xlatb7 = 0.00999999978<abs(u_xlat7);
#endif
    u_xlat16_4.x = (u_xlatb7) ? u_xlat21 : 1.0;
    u_xlat7 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta.w);
    u_xlat7 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat2.w = u_xlat7 * u_xlat14.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat21 = in_COLOR0.y * u_xlat21 + 0.5;
    u_xlat21 = floor(u_xlat21);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.yz = in_COLOR0.zw;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10.x = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10.x);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat3.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat0.x>=u_xlat3.x);
#else
    u_xlatb3 = u_xlat0.x>=u_xlat3.x;
#endif
    u_xlat21 = (u_xlatb3) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColDelta3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat10.x = u_xlat22 * -1.44269502;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = u_xlat10.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_4.x = (u_xlatb22) ? u_xlat10.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_11.x = (-u_xlat22) + 2.0;
    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;
    u_xlat22 = u_xlat16_11.x * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat22 = min(u_xlat16_4.x, _HeigtFogColDelta3.w);
    u_xlat10.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xxx;
    u_xlat2.w = u_xlat21 * u_xlat10.x;
    u_xlat2.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_4.x = (-u_xlat7.x) + 2.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat10.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb3) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColDelta2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_4.x = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.w = u_xlat14 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = u_xlat2 + (-u_xlat3);
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat3;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat21 = in_COLOR0.y * u_xlat21 + 0.5;
    u_xlat21 = floor(u_xlat21);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.yz = in_COLOR0.zw;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10.x = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10.x);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat3.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat0.x>=u_xlat3.x);
#else
    u_xlatb3 = u_xlat0.x>=u_xlat3.x;
#endif
    u_xlat21 = (u_xlatb3) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColDelta3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat10.x = u_xlat22 * -1.44269502;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = u_xlat10.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_4.x = (u_xlatb22) ? u_xlat10.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_11.x = (-u_xlat22) + 2.0;
    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;
    u_xlat22 = u_xlat16_11.x * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat22 = min(u_xlat16_4.x, _HeigtFogColDelta3.w);
    u_xlat10.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xxx;
    u_xlat2.w = u_xlat21 * u_xlat10.x;
    u_xlat2.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_4.x = (-u_xlat7.x) + 2.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat10.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb3) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColDelta2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_4.x = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.w = u_xlat14 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = u_xlat2 + (-u_xlat3);
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat3;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat21 = in_COLOR0.y * u_xlat21 + 0.5;
    u_xlat21 = floor(u_xlat21);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.yz = in_COLOR0.zw;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10.x = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10.x);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat3.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat0.x>=u_xlat3.x);
#else
    u_xlatb3 = u_xlat0.x>=u_xlat3.x;
#endif
    u_xlat21 = (u_xlatb3) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColDelta3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat10.x = u_xlat22 * -1.44269502;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = u_xlat10.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_4.x = (u_xlatb22) ? u_xlat10.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_11.x = (-u_xlat22) + 2.0;
    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;
    u_xlat22 = u_xlat16_11.x * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat22 = min(u_xlat16_4.x, _HeigtFogColDelta3.w);
    u_xlat10.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xxx;
    u_xlat2.w = u_xlat21 * u_xlat10.x;
    u_xlat2.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_4.x = (-u_xlat7.x) + 2.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat10.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb3) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColDelta2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_4.x = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.w = u_xlat14 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = u_xlat2 + (-u_xlat3);
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat3;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat18 = in_COLOR0.y * u_xlat18 + 0.5;
    u_xlat18 = floor(u_xlat18);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.y = in_COLOR0.z;
    vs_TEXCOORD3.z = _FixedRimLightWidth;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat18 = in_COLOR0.y * u_xlat18 + 0.5;
    u_xlat18 = floor(u_xlat18);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.y = in_COLOR0.z;
    vs_TEXCOORD3.z = _FixedRimLightWidth;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat18 = in_COLOR0.y * u_xlat18 + 0.5;
    u_xlat18 = floor(u_xlat18);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.y = in_COLOR0.z;
    vs_TEXCOORD3.z = _FixedRimLightWidth;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat18 = in_COLOR0.y * u_xlat18 + 0.5;
    u_xlat18 = floor(u_xlat18);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.y = in_COLOR0.z;
    vs_TEXCOORD3.z = _FixedRimLightWidth;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat18 = in_COLOR0.y * u_xlat18 + 0.5;
    u_xlat18 = floor(u_xlat18);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.y = in_COLOR0.z;
    vs_TEXCOORD3.z = _FixedRimLightWidth;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat18 = in_COLOR0.y * u_xlat18 + 0.5;
    u_xlat18 = floor(u_xlat18);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.y = in_COLOR0.z;
    vs_TEXCOORD3.z = _FixedRimLightWidth;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
vec2 u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat21 = in_COLOR0.y * u_xlat21 + 0.5;
    u_xlat21 = floor(u_xlat21);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.y = in_COLOR0.z;
    vs_TEXCOORD3.z = _FixedRimLightWidth;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10 = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat7 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat14.x = u_xlat14.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat14.xxx * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.x>=u_xlat14.x);
#else
    u_xlatb14 = u_xlat0.x>=u_xlat14.x;
#endif
    u_xlat21 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta.w;
    u_xlat14.x = (u_xlatb14) ? u_xlat22 : u_xlat21;
    u_xlat14.x = log2(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * _Mihoyo_FogColor.w;
    u_xlat14.x = exp2(u_xlat14.x);
    u_xlat14.x = min(u_xlat14.x, _HeigtFogColDelta.w);
    u_xlat1.xyz = u_xlat14.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat7 * -1.44269502;
    u_xlat14.y = exp2(u_xlat21);
    u_xlat14.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat14.y / u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.00999999978<abs(u_xlat7));
#else
    u_xlatb7 = 0.00999999978<abs(u_xlat7);
#endif
    u_xlat16_4.x = (u_xlatb7) ? u_xlat21 : 1.0;
    u_xlat7 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta.w);
    u_xlat7 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat2.w = u_xlat7 * u_xlat14.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
vec2 u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat21 = in_COLOR0.y * u_xlat21 + 0.5;
    u_xlat21 = floor(u_xlat21);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.y = in_COLOR0.z;
    vs_TEXCOORD3.z = _FixedRimLightWidth;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10 = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat7 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat14.x = u_xlat14.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat14.xxx * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.x>=u_xlat14.x);
#else
    u_xlatb14 = u_xlat0.x>=u_xlat14.x;
#endif
    u_xlat21 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta.w;
    u_xlat14.x = (u_xlatb14) ? u_xlat22 : u_xlat21;
    u_xlat14.x = log2(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * _Mihoyo_FogColor.w;
    u_xlat14.x = exp2(u_xlat14.x);
    u_xlat14.x = min(u_xlat14.x, _HeigtFogColDelta.w);
    u_xlat1.xyz = u_xlat14.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat7 * -1.44269502;
    u_xlat14.y = exp2(u_xlat21);
    u_xlat14.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat14.y / u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.00999999978<abs(u_xlat7));
#else
    u_xlatb7 = 0.00999999978<abs(u_xlat7);
#endif
    u_xlat16_4.x = (u_xlatb7) ? u_xlat21 : 1.0;
    u_xlat7 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta.w);
    u_xlat7 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat2.w = u_xlat7 * u_xlat14.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
vec2 u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat21 = in_COLOR0.y * u_xlat21 + 0.5;
    u_xlat21 = floor(u_xlat21);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.y = in_COLOR0.z;
    vs_TEXCOORD3.z = _FixedRimLightWidth;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10 = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat7 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat14.x = u_xlat14.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat14.xxx * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.x>=u_xlat14.x);
#else
    u_xlatb14 = u_xlat0.x>=u_xlat14.x;
#endif
    u_xlat21 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta.w;
    u_xlat14.x = (u_xlatb14) ? u_xlat22 : u_xlat21;
    u_xlat14.x = log2(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * _Mihoyo_FogColor.w;
    u_xlat14.x = exp2(u_xlat14.x);
    u_xlat14.x = min(u_xlat14.x, _HeigtFogColDelta.w);
    u_xlat1.xyz = u_xlat14.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat7 * -1.44269502;
    u_xlat14.y = exp2(u_xlat21);
    u_xlat14.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat14.y / u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.00999999978<abs(u_xlat7));
#else
    u_xlatb7 = 0.00999999978<abs(u_xlat7);
#endif
    u_xlat16_4.x = (u_xlatb7) ? u_xlat21 : 1.0;
    u_xlat7 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta.w);
    u_xlat7 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat2.w = u_xlat7 * u_xlat14.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat21 = in_COLOR0.y * u_xlat21 + 0.5;
    u_xlat21 = floor(u_xlat21);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.y = in_COLOR0.z;
    vs_TEXCOORD3.z = _FixedRimLightWidth;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10.x = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10.x);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat3.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat0.x>=u_xlat3.x);
#else
    u_xlatb3 = u_xlat0.x>=u_xlat3.x;
#endif
    u_xlat21 = (u_xlatb3) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColDelta3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat10.x = u_xlat22 * -1.44269502;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = u_xlat10.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_4.x = (u_xlatb22) ? u_xlat10.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_11.x = (-u_xlat22) + 2.0;
    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;
    u_xlat22 = u_xlat16_11.x * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat22 = min(u_xlat16_4.x, _HeigtFogColDelta3.w);
    u_xlat10.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xxx;
    u_xlat2.w = u_xlat21 * u_xlat10.x;
    u_xlat2.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_4.x = (-u_xlat7.x) + 2.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat10.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb3) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColDelta2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_4.x = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.w = u_xlat14 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = u_xlat2 + (-u_xlat3);
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat3;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat21 = in_COLOR0.y * u_xlat21 + 0.5;
    u_xlat21 = floor(u_xlat21);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.y = in_COLOR0.z;
    vs_TEXCOORD3.z = _FixedRimLightWidth;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10.x = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10.x);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat3.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat0.x>=u_xlat3.x);
#else
    u_xlatb3 = u_xlat0.x>=u_xlat3.x;
#endif
    u_xlat21 = (u_xlatb3) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColDelta3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat10.x = u_xlat22 * -1.44269502;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = u_xlat10.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_4.x = (u_xlatb22) ? u_xlat10.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_11.x = (-u_xlat22) + 2.0;
    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;
    u_xlat22 = u_xlat16_11.x * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat22 = min(u_xlat16_4.x, _HeigtFogColDelta3.w);
    u_xlat10.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xxx;
    u_xlat2.w = u_xlat21 * u_xlat10.x;
    u_xlat2.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_4.x = (-u_xlat7.x) + 2.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat10.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb3) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColDelta2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_4.x = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.w = u_xlat14 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = u_xlat2 + (-u_xlat3);
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat3;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat21 = in_COLOR0.y * u_xlat21 + 0.5;
    u_xlat21 = floor(u_xlat21);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.y = in_COLOR0.z;
    vs_TEXCOORD3.z = _FixedRimLightWidth;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10.x = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10.x);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat3.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat0.x>=u_xlat3.x);
#else
    u_xlatb3 = u_xlat0.x>=u_xlat3.x;
#endif
    u_xlat21 = (u_xlatb3) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColDelta3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat10.x = u_xlat22 * -1.44269502;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = u_xlat10.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_4.x = (u_xlatb22) ? u_xlat10.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_11.x = (-u_xlat22) + 2.0;
    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;
    u_xlat22 = u_xlat16_11.x * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat22 = min(u_xlat16_4.x, _HeigtFogColDelta3.w);
    u_xlat10.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xxx;
    u_xlat2.w = u_xlat21 * u_xlat10.x;
    u_xlat2.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_4.x = (-u_xlat7.x) + 2.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat10.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb3) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColDelta2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_4.x = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.w = u_xlat14 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = u_xlat2 + (-u_xlat3);
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat3;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FIXED_EDGE_SMOOTHNESS" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedEdgeSmoothness;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat18 = in_COLOR0.y * u_xlat18 + 0.5;
    u_xlat18 = floor(u_xlat18);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.y = _FixedEdgeSmoothness;
    vs_TEXCOORD3.z = in_COLOR0.w;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FIXED_EDGE_SMOOTHNESS" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedEdgeSmoothness;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat18 = in_COLOR0.y * u_xlat18 + 0.5;
    u_xlat18 = floor(u_xlat18);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.y = _FixedEdgeSmoothness;
    vs_TEXCOORD3.z = in_COLOR0.w;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FIXED_EDGE_SMOOTHNESS" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedEdgeSmoothness;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat18 = in_COLOR0.y * u_xlat18 + 0.5;
    u_xlat18 = floor(u_xlat18);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.y = _FixedEdgeSmoothness;
    vs_TEXCOORD3.z = in_COLOR0.w;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "FIXED_EDGE_SMOOTHNESS" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedEdgeSmoothness;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat18 = in_COLOR0.y * u_xlat18 + 0.5;
    u_xlat18 = floor(u_xlat18);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.y = _FixedEdgeSmoothness;
    vs_TEXCOORD3.z = in_COLOR0.w;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "FIXED_EDGE_SMOOTHNESS" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedEdgeSmoothness;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat18 = in_COLOR0.y * u_xlat18 + 0.5;
    u_xlat18 = floor(u_xlat18);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.y = _FixedEdgeSmoothness;
    vs_TEXCOORD3.z = in_COLOR0.w;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "FIXED_EDGE_SMOOTHNESS" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedEdgeSmoothness;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat18 = in_COLOR0.y * u_xlat18 + 0.5;
    u_xlat18 = floor(u_xlat18);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.y = _FixedEdgeSmoothness;
    vs_TEXCOORD3.z = in_COLOR0.w;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FIXED_EDGE_SMOOTHNESS" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedEdgeSmoothness;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
vec2 u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat21 = in_COLOR0.y * u_xlat21 + 0.5;
    u_xlat21 = floor(u_xlat21);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.y = _FixedEdgeSmoothness;
    vs_TEXCOORD3.z = in_COLOR0.w;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10 = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat7 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat14.x = u_xlat14.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat14.xxx * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.x>=u_xlat14.x);
#else
    u_xlatb14 = u_xlat0.x>=u_xlat14.x;
#endif
    u_xlat21 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta.w;
    u_xlat14.x = (u_xlatb14) ? u_xlat22 : u_xlat21;
    u_xlat14.x = log2(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * _Mihoyo_FogColor.w;
    u_xlat14.x = exp2(u_xlat14.x);
    u_xlat14.x = min(u_xlat14.x, _HeigtFogColDelta.w);
    u_xlat1.xyz = u_xlat14.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat7 * -1.44269502;
    u_xlat14.y = exp2(u_xlat21);
    u_xlat14.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat14.y / u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.00999999978<abs(u_xlat7));
#else
    u_xlatb7 = 0.00999999978<abs(u_xlat7);
#endif
    u_xlat16_4.x = (u_xlatb7) ? u_xlat21 : 1.0;
    u_xlat7 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta.w);
    u_xlat7 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat2.w = u_xlat7 * u_xlat14.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FIXED_EDGE_SMOOTHNESS" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedEdgeSmoothness;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
vec2 u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat21 = in_COLOR0.y * u_xlat21 + 0.5;
    u_xlat21 = floor(u_xlat21);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.y = _FixedEdgeSmoothness;
    vs_TEXCOORD3.z = in_COLOR0.w;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10 = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat7 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat14.x = u_xlat14.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat14.xxx * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.x>=u_xlat14.x);
#else
    u_xlatb14 = u_xlat0.x>=u_xlat14.x;
#endif
    u_xlat21 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta.w;
    u_xlat14.x = (u_xlatb14) ? u_xlat22 : u_xlat21;
    u_xlat14.x = log2(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * _Mihoyo_FogColor.w;
    u_xlat14.x = exp2(u_xlat14.x);
    u_xlat14.x = min(u_xlat14.x, _HeigtFogColDelta.w);
    u_xlat1.xyz = u_xlat14.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat7 * -1.44269502;
    u_xlat14.y = exp2(u_xlat21);
    u_xlat14.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat14.y / u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.00999999978<abs(u_xlat7));
#else
    u_xlatb7 = 0.00999999978<abs(u_xlat7);
#endif
    u_xlat16_4.x = (u_xlatb7) ? u_xlat21 : 1.0;
    u_xlat7 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta.w);
    u_xlat7 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat2.w = u_xlat7 * u_xlat14.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FIXED_EDGE_SMOOTHNESS" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedEdgeSmoothness;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
vec2 u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat21 = in_COLOR0.y * u_xlat21 + 0.5;
    u_xlat21 = floor(u_xlat21);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.y = _FixedEdgeSmoothness;
    vs_TEXCOORD3.z = in_COLOR0.w;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10 = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat7 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat14.x = u_xlat14.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat14.xxx * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.x>=u_xlat14.x);
#else
    u_xlatb14 = u_xlat0.x>=u_xlat14.x;
#endif
    u_xlat21 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta.w;
    u_xlat14.x = (u_xlatb14) ? u_xlat22 : u_xlat21;
    u_xlat14.x = log2(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * _Mihoyo_FogColor.w;
    u_xlat14.x = exp2(u_xlat14.x);
    u_xlat14.x = min(u_xlat14.x, _HeigtFogColDelta.w);
    u_xlat1.xyz = u_xlat14.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat7 * -1.44269502;
    u_xlat14.y = exp2(u_xlat21);
    u_xlat14.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat14.y / u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.00999999978<abs(u_xlat7));
#else
    u_xlatb7 = 0.00999999978<abs(u_xlat7);
#endif
    u_xlat16_4.x = (u_xlatb7) ? u_xlat21 : 1.0;
    u_xlat7 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta.w);
    u_xlat7 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat2.w = u_xlat7 * u_xlat14.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_EDGE_SMOOTHNESS" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedEdgeSmoothness;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat21 = in_COLOR0.y * u_xlat21 + 0.5;
    u_xlat21 = floor(u_xlat21);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.y = _FixedEdgeSmoothness;
    vs_TEXCOORD3.z = in_COLOR0.w;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10.x = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10.x);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat3.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat0.x>=u_xlat3.x);
#else
    u_xlatb3 = u_xlat0.x>=u_xlat3.x;
#endif
    u_xlat21 = (u_xlatb3) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColDelta3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat10.x = u_xlat22 * -1.44269502;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = u_xlat10.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_4.x = (u_xlatb22) ? u_xlat10.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_11.x = (-u_xlat22) + 2.0;
    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;
    u_xlat22 = u_xlat16_11.x * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat22 = min(u_xlat16_4.x, _HeigtFogColDelta3.w);
    u_xlat10.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xxx;
    u_xlat2.w = u_xlat21 * u_xlat10.x;
    u_xlat2.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_4.x = (-u_xlat7.x) + 2.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat10.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb3) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColDelta2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_4.x = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.w = u_xlat14 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = u_xlat2 + (-u_xlat3);
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat3;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_EDGE_SMOOTHNESS" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedEdgeSmoothness;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat21 = in_COLOR0.y * u_xlat21 + 0.5;
    u_xlat21 = floor(u_xlat21);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.y = _FixedEdgeSmoothness;
    vs_TEXCOORD3.z = in_COLOR0.w;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10.x = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10.x);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat3.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat0.x>=u_xlat3.x);
#else
    u_xlatb3 = u_xlat0.x>=u_xlat3.x;
#endif
    u_xlat21 = (u_xlatb3) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColDelta3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat10.x = u_xlat22 * -1.44269502;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = u_xlat10.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_4.x = (u_xlatb22) ? u_xlat10.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_11.x = (-u_xlat22) + 2.0;
    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;
    u_xlat22 = u_xlat16_11.x * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat22 = min(u_xlat16_4.x, _HeigtFogColDelta3.w);
    u_xlat10.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xxx;
    u_xlat2.w = u_xlat21 * u_xlat10.x;
    u_xlat2.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_4.x = (-u_xlat7.x) + 2.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat10.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb3) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColDelta2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_4.x = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.w = u_xlat14 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = u_xlat2 + (-u_xlat3);
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat3;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_EDGE_SMOOTHNESS" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedEdgeSmoothness;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat21 = in_COLOR0.y * u_xlat21 + 0.5;
    u_xlat21 = floor(u_xlat21);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.y = _FixedEdgeSmoothness;
    vs_TEXCOORD3.z = in_COLOR0.w;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10.x = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10.x);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat3.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat0.x>=u_xlat3.x);
#else
    u_xlatb3 = u_xlat0.x>=u_xlat3.x;
#endif
    u_xlat21 = (u_xlatb3) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColDelta3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat10.x = u_xlat22 * -1.44269502;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = u_xlat10.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_4.x = (u_xlatb22) ? u_xlat10.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_11.x = (-u_xlat22) + 2.0;
    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;
    u_xlat22 = u_xlat16_11.x * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat22 = min(u_xlat16_4.x, _HeigtFogColDelta3.w);
    u_xlat10.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xxx;
    u_xlat2.w = u_xlat21 * u_xlat10.x;
    u_xlat2.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_4.x = (-u_xlat7.x) + 2.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat10.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb3) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColDelta2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_4.x = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.w = u_xlat14 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = u_xlat2 + (-u_xlat3);
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat3;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedEdgeSmoothness;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat18 = in_COLOR0.y * u_xlat18 + 0.5;
    u_xlat18 = floor(u_xlat18);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.yz = vec2(_FixedEdgeSmoothness, _FixedRimLightWidth);
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedEdgeSmoothness;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat18 = in_COLOR0.y * u_xlat18 + 0.5;
    u_xlat18 = floor(u_xlat18);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.yz = vec2(_FixedEdgeSmoothness, _FixedRimLightWidth);
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedEdgeSmoothness;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat18 = in_COLOR0.y * u_xlat18 + 0.5;
    u_xlat18 = floor(u_xlat18);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.yz = vec2(_FixedEdgeSmoothness, _FixedRimLightWidth);
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedEdgeSmoothness;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat18 = in_COLOR0.y * u_xlat18 + 0.5;
    u_xlat18 = floor(u_xlat18);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.yz = vec2(_FixedEdgeSmoothness, _FixedRimLightWidth);
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedEdgeSmoothness;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat18 = in_COLOR0.y * u_xlat18 + 0.5;
    u_xlat18 = floor(u_xlat18);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.yz = vec2(_FixedEdgeSmoothness, _FixedRimLightWidth);
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedEdgeSmoothness;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat18 = in_COLOR0.y * u_xlat18 + 0.5;
    u_xlat18 = floor(u_xlat18);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.yz = vec2(_FixedEdgeSmoothness, _FixedRimLightWidth);
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedEdgeSmoothness;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
vec2 u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat21 = in_COLOR0.y * u_xlat21 + 0.5;
    u_xlat21 = floor(u_xlat21);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.yz = vec2(_FixedEdgeSmoothness, _FixedRimLightWidth);
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10 = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat7 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat14.x = u_xlat14.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat14.xxx * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.x>=u_xlat14.x);
#else
    u_xlatb14 = u_xlat0.x>=u_xlat14.x;
#endif
    u_xlat21 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta.w;
    u_xlat14.x = (u_xlatb14) ? u_xlat22 : u_xlat21;
    u_xlat14.x = log2(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * _Mihoyo_FogColor.w;
    u_xlat14.x = exp2(u_xlat14.x);
    u_xlat14.x = min(u_xlat14.x, _HeigtFogColDelta.w);
    u_xlat1.xyz = u_xlat14.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat7 * -1.44269502;
    u_xlat14.y = exp2(u_xlat21);
    u_xlat14.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat14.y / u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.00999999978<abs(u_xlat7));
#else
    u_xlatb7 = 0.00999999978<abs(u_xlat7);
#endif
    u_xlat16_4.x = (u_xlatb7) ? u_xlat21 : 1.0;
    u_xlat7 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta.w);
    u_xlat7 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat2.w = u_xlat7 * u_xlat14.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedEdgeSmoothness;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
vec2 u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat21 = in_COLOR0.y * u_xlat21 + 0.5;
    u_xlat21 = floor(u_xlat21);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.yz = vec2(_FixedEdgeSmoothness, _FixedRimLightWidth);
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10 = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat7 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat14.x = u_xlat14.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat14.xxx * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.x>=u_xlat14.x);
#else
    u_xlatb14 = u_xlat0.x>=u_xlat14.x;
#endif
    u_xlat21 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta.w;
    u_xlat14.x = (u_xlatb14) ? u_xlat22 : u_xlat21;
    u_xlat14.x = log2(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * _Mihoyo_FogColor.w;
    u_xlat14.x = exp2(u_xlat14.x);
    u_xlat14.x = min(u_xlat14.x, _HeigtFogColDelta.w);
    u_xlat1.xyz = u_xlat14.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat7 * -1.44269502;
    u_xlat14.y = exp2(u_xlat21);
    u_xlat14.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat14.y / u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.00999999978<abs(u_xlat7));
#else
    u_xlatb7 = 0.00999999978<abs(u_xlat7);
#endif
    u_xlat16_4.x = (u_xlatb7) ? u_xlat21 : 1.0;
    u_xlat7 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta.w);
    u_xlat7 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat2.w = u_xlat7 * u_xlat14.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedEdgeSmoothness;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
vec2 u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat21 = in_COLOR0.y * u_xlat21 + 0.5;
    u_xlat21 = floor(u_xlat21);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.yz = vec2(_FixedEdgeSmoothness, _FixedRimLightWidth);
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10 = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat7 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat14.x = u_xlat14.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat14.xxx * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.x>=u_xlat14.x);
#else
    u_xlatb14 = u_xlat0.x>=u_xlat14.x;
#endif
    u_xlat21 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta.w;
    u_xlat14.x = (u_xlatb14) ? u_xlat22 : u_xlat21;
    u_xlat14.x = log2(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * _Mihoyo_FogColor.w;
    u_xlat14.x = exp2(u_xlat14.x);
    u_xlat14.x = min(u_xlat14.x, _HeigtFogColDelta.w);
    u_xlat1.xyz = u_xlat14.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat7 * -1.44269502;
    u_xlat14.y = exp2(u_xlat21);
    u_xlat14.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat14.y / u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.00999999978<abs(u_xlat7));
#else
    u_xlatb7 = 0.00999999978<abs(u_xlat7);
#endif
    u_xlat16_4.x = (u_xlatb7) ? u_xlat21 : 1.0;
    u_xlat7 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta.w);
    u_xlat7 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat2.w = u_xlat7 * u_xlat14.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedEdgeSmoothness;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat21 = in_COLOR0.y * u_xlat21 + 0.5;
    u_xlat21 = floor(u_xlat21);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.yz = vec2(_FixedEdgeSmoothness, _FixedRimLightWidth);
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10.x = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10.x);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat3.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat0.x>=u_xlat3.x);
#else
    u_xlatb3 = u_xlat0.x>=u_xlat3.x;
#endif
    u_xlat21 = (u_xlatb3) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColDelta3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat10.x = u_xlat22 * -1.44269502;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = u_xlat10.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_4.x = (u_xlatb22) ? u_xlat10.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_11.x = (-u_xlat22) + 2.0;
    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;
    u_xlat22 = u_xlat16_11.x * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat22 = min(u_xlat16_4.x, _HeigtFogColDelta3.w);
    u_xlat10.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xxx;
    u_xlat2.w = u_xlat21 * u_xlat10.x;
    u_xlat2.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_4.x = (-u_xlat7.x) + 2.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat10.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb3) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColDelta2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_4.x = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.w = u_xlat14 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = u_xlat2 + (-u_xlat3);
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat3;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedEdgeSmoothness;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat21 = in_COLOR0.y * u_xlat21 + 0.5;
    u_xlat21 = floor(u_xlat21);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.yz = vec2(_FixedEdgeSmoothness, _FixedRimLightWidth);
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10.x = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10.x);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat3.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat0.x>=u_xlat3.x);
#else
    u_xlatb3 = u_xlat0.x>=u_xlat3.x;
#endif
    u_xlat21 = (u_xlatb3) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColDelta3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat10.x = u_xlat22 * -1.44269502;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = u_xlat10.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_4.x = (u_xlatb22) ? u_xlat10.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_11.x = (-u_xlat22) + 2.0;
    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;
    u_xlat22 = u_xlat16_11.x * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat22 = min(u_xlat16_4.x, _HeigtFogColDelta3.w);
    u_xlat10.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xxx;
    u_xlat2.w = u_xlat21 * u_xlat10.x;
    u_xlat2.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_4.x = (-u_xlat7.x) + 2.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat10.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb3) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColDelta2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_4.x = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.w = u_xlat14 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = u_xlat2 + (-u_xlat3);
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat3;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	mediump float _FixedEdgeSmoothness;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = _AtlasTiles.xxyx.y * _AtlasTiles.xxyx.z + -1.0;
    u_xlat21 = in_COLOR0.y * u_xlat21 + 0.5;
    u_xlat21 = floor(u_xlat21);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.yz = vec2(_FixedEdgeSmoothness, _FixedRimLightWidth);
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10.x = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10.x);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat3.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat0.x>=u_xlat3.x);
#else
    u_xlatb3 = u_xlat0.x>=u_xlat3.x;
#endif
    u_xlat21 = (u_xlatb3) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColDelta3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat10.x = u_xlat22 * -1.44269502;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = u_xlat10.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_4.x = (u_xlatb22) ? u_xlat10.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_11.x = (-u_xlat22) + 2.0;
    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;
    u_xlat22 = u_xlat16_11.x * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat22 = min(u_xlat16_4.x, _HeigtFogColDelta3.w);
    u_xlat10.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xxx;
    u_xlat2.w = u_xlat21 * u_xlat10.x;
    u_xlat2.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_4.x = (-u_xlat7.x) + 2.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat10.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb3) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColDelta2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_4.x = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.w = u_xlat14 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = u_xlat2 + (-u_xlat3);
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat3;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FIXED_SPRITE_ID" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = float(_FixedSpriteId);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.yz = in_COLOR0.zw;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FIXED_SPRITE_ID" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = float(_FixedSpriteId);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.yz = in_COLOR0.zw;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FIXED_SPRITE_ID" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = float(_FixedSpriteId);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.yz = in_COLOR0.zw;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "FIXED_SPRITE_ID" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = float(_FixedSpriteId);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.yz = in_COLOR0.zw;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "FIXED_SPRITE_ID" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = float(_FixedSpriteId);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.yz = in_COLOR0.zw;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "FIXED_SPRITE_ID" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = float(_FixedSpriteId);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.yz = in_COLOR0.zw;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FIXED_SPRITE_ID" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
vec2 u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = float(_FixedSpriteId);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.yz = in_COLOR0.zw;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10 = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat7 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat14.x = u_xlat14.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat14.xxx * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.x>=u_xlat14.x);
#else
    u_xlatb14 = u_xlat0.x>=u_xlat14.x;
#endif
    u_xlat21 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta.w;
    u_xlat14.x = (u_xlatb14) ? u_xlat22 : u_xlat21;
    u_xlat14.x = log2(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * _Mihoyo_FogColor.w;
    u_xlat14.x = exp2(u_xlat14.x);
    u_xlat14.x = min(u_xlat14.x, _HeigtFogColDelta.w);
    u_xlat1.xyz = u_xlat14.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat7 * -1.44269502;
    u_xlat14.y = exp2(u_xlat21);
    u_xlat14.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat14.y / u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.00999999978<abs(u_xlat7));
#else
    u_xlatb7 = 0.00999999978<abs(u_xlat7);
#endif
    u_xlat16_4.x = (u_xlatb7) ? u_xlat21 : 1.0;
    u_xlat7 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta.w);
    u_xlat7 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat2.w = u_xlat7 * u_xlat14.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FIXED_SPRITE_ID" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
vec2 u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = float(_FixedSpriteId);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.yz = in_COLOR0.zw;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10 = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat7 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat14.x = u_xlat14.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat14.xxx * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.x>=u_xlat14.x);
#else
    u_xlatb14 = u_xlat0.x>=u_xlat14.x;
#endif
    u_xlat21 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta.w;
    u_xlat14.x = (u_xlatb14) ? u_xlat22 : u_xlat21;
    u_xlat14.x = log2(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * _Mihoyo_FogColor.w;
    u_xlat14.x = exp2(u_xlat14.x);
    u_xlat14.x = min(u_xlat14.x, _HeigtFogColDelta.w);
    u_xlat1.xyz = u_xlat14.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat7 * -1.44269502;
    u_xlat14.y = exp2(u_xlat21);
    u_xlat14.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat14.y / u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.00999999978<abs(u_xlat7));
#else
    u_xlatb7 = 0.00999999978<abs(u_xlat7);
#endif
    u_xlat16_4.x = (u_xlatb7) ? u_xlat21 : 1.0;
    u_xlat7 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta.w);
    u_xlat7 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat2.w = u_xlat7 * u_xlat14.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FIXED_SPRITE_ID" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
vec2 u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = float(_FixedSpriteId);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.yz = in_COLOR0.zw;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10 = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat7 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat14.x = u_xlat14.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat14.xxx * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.x>=u_xlat14.x);
#else
    u_xlatb14 = u_xlat0.x>=u_xlat14.x;
#endif
    u_xlat21 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta.w;
    u_xlat14.x = (u_xlatb14) ? u_xlat22 : u_xlat21;
    u_xlat14.x = log2(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * _Mihoyo_FogColor.w;
    u_xlat14.x = exp2(u_xlat14.x);
    u_xlat14.x = min(u_xlat14.x, _HeigtFogColDelta.w);
    u_xlat1.xyz = u_xlat14.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat7 * -1.44269502;
    u_xlat14.y = exp2(u_xlat21);
    u_xlat14.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat14.y / u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.00999999978<abs(u_xlat7));
#else
    u_xlatb7 = 0.00999999978<abs(u_xlat7);
#endif
    u_xlat16_4.x = (u_xlatb7) ? u_xlat21 : 1.0;
    u_xlat7 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta.w);
    u_xlat7 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat2.w = u_xlat7 * u_xlat14.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_SPRITE_ID" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = float(_FixedSpriteId);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.yz = in_COLOR0.zw;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10.x = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10.x);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat3.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat0.x>=u_xlat3.x);
#else
    u_xlatb3 = u_xlat0.x>=u_xlat3.x;
#endif
    u_xlat21 = (u_xlatb3) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColDelta3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat10.x = u_xlat22 * -1.44269502;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = u_xlat10.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_4.x = (u_xlatb22) ? u_xlat10.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_11.x = (-u_xlat22) + 2.0;
    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;
    u_xlat22 = u_xlat16_11.x * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat22 = min(u_xlat16_4.x, _HeigtFogColDelta3.w);
    u_xlat10.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xxx;
    u_xlat2.w = u_xlat21 * u_xlat10.x;
    u_xlat2.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_4.x = (-u_xlat7.x) + 2.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat10.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb3) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColDelta2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_4.x = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.w = u_xlat14 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = u_xlat2 + (-u_xlat3);
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat3;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_SPRITE_ID" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = float(_FixedSpriteId);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.yz = in_COLOR0.zw;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10.x = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10.x);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat3.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat0.x>=u_xlat3.x);
#else
    u_xlatb3 = u_xlat0.x>=u_xlat3.x;
#endif
    u_xlat21 = (u_xlatb3) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColDelta3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat10.x = u_xlat22 * -1.44269502;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = u_xlat10.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_4.x = (u_xlatb22) ? u_xlat10.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_11.x = (-u_xlat22) + 2.0;
    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;
    u_xlat22 = u_xlat16_11.x * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat22 = min(u_xlat16_4.x, _HeigtFogColDelta3.w);
    u_xlat10.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xxx;
    u_xlat2.w = u_xlat21 * u_xlat10.x;
    u_xlat2.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_4.x = (-u_xlat7.x) + 2.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat10.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb3) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColDelta2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_4.x = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.w = u_xlat14 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = u_xlat2 + (-u_xlat3);
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat3;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_SPRITE_ID" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = float(_FixedSpriteId);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.yz = in_COLOR0.zw;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10.x = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10.x);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat3.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat0.x>=u_xlat3.x);
#else
    u_xlatb3 = u_xlat0.x>=u_xlat3.x;
#endif
    u_xlat21 = (u_xlatb3) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColDelta3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat10.x = u_xlat22 * -1.44269502;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = u_xlat10.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_4.x = (u_xlatb22) ? u_xlat10.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_11.x = (-u_xlat22) + 2.0;
    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;
    u_xlat22 = u_xlat16_11.x * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat22 = min(u_xlat16_4.x, _HeigtFogColDelta3.w);
    u_xlat10.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xxx;
    u_xlat2.w = u_xlat21 * u_xlat10.x;
    u_xlat2.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_4.x = (-u_xlat7.x) + 2.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat10.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb3) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColDelta2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_4.x = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.w = u_xlat14 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = u_xlat2 + (-u_xlat3);
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat3;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FIXED_SPRITE_ID" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = float(_FixedSpriteId);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.y = in_COLOR0.z;
    vs_TEXCOORD3.z = _FixedRimLightWidth;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FIXED_SPRITE_ID" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = float(_FixedSpriteId);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.y = in_COLOR0.z;
    vs_TEXCOORD3.z = _FixedRimLightWidth;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FIXED_SPRITE_ID" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = float(_FixedSpriteId);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.y = in_COLOR0.z;
    vs_TEXCOORD3.z = _FixedRimLightWidth;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = float(_FixedSpriteId);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.y = in_COLOR0.z;
    vs_TEXCOORD3.z = _FixedRimLightWidth;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = float(_FixedSpriteId);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.y = in_COLOR0.z;
    vs_TEXCOORD3.z = _FixedRimLightWidth;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = float(_FixedSpriteId);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.y = in_COLOR0.z;
    vs_TEXCOORD3.z = _FixedRimLightWidth;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FIXED_SPRITE_ID" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
vec2 u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = float(_FixedSpriteId);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.y = in_COLOR0.z;
    vs_TEXCOORD3.z = _FixedRimLightWidth;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10 = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat7 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat14.x = u_xlat14.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat14.xxx * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.x>=u_xlat14.x);
#else
    u_xlatb14 = u_xlat0.x>=u_xlat14.x;
#endif
    u_xlat21 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta.w;
    u_xlat14.x = (u_xlatb14) ? u_xlat22 : u_xlat21;
    u_xlat14.x = log2(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * _Mihoyo_FogColor.w;
    u_xlat14.x = exp2(u_xlat14.x);
    u_xlat14.x = min(u_xlat14.x, _HeigtFogColDelta.w);
    u_xlat1.xyz = u_xlat14.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat7 * -1.44269502;
    u_xlat14.y = exp2(u_xlat21);
    u_xlat14.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat14.y / u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.00999999978<abs(u_xlat7));
#else
    u_xlatb7 = 0.00999999978<abs(u_xlat7);
#endif
    u_xlat16_4.x = (u_xlatb7) ? u_xlat21 : 1.0;
    u_xlat7 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta.w);
    u_xlat7 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat2.w = u_xlat7 * u_xlat14.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FIXED_SPRITE_ID" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
vec2 u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = float(_FixedSpriteId);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.y = in_COLOR0.z;
    vs_TEXCOORD3.z = _FixedRimLightWidth;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10 = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat7 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat14.x = u_xlat14.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat14.xxx * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.x>=u_xlat14.x);
#else
    u_xlatb14 = u_xlat0.x>=u_xlat14.x;
#endif
    u_xlat21 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta.w;
    u_xlat14.x = (u_xlatb14) ? u_xlat22 : u_xlat21;
    u_xlat14.x = log2(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * _Mihoyo_FogColor.w;
    u_xlat14.x = exp2(u_xlat14.x);
    u_xlat14.x = min(u_xlat14.x, _HeigtFogColDelta.w);
    u_xlat1.xyz = u_xlat14.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat7 * -1.44269502;
    u_xlat14.y = exp2(u_xlat21);
    u_xlat14.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat14.y / u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.00999999978<abs(u_xlat7));
#else
    u_xlatb7 = 0.00999999978<abs(u_xlat7);
#endif
    u_xlat16_4.x = (u_xlatb7) ? u_xlat21 : 1.0;
    u_xlat7 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta.w);
    u_xlat7 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat2.w = u_xlat7 * u_xlat14.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FIXED_SPRITE_ID" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
vec2 u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = float(_FixedSpriteId);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.y = in_COLOR0.z;
    vs_TEXCOORD3.z = _FixedRimLightWidth;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10 = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat7 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat14.x = u_xlat14.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat14.xxx * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.x>=u_xlat14.x);
#else
    u_xlatb14 = u_xlat0.x>=u_xlat14.x;
#endif
    u_xlat21 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta.w;
    u_xlat14.x = (u_xlatb14) ? u_xlat22 : u_xlat21;
    u_xlat14.x = log2(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * _Mihoyo_FogColor.w;
    u_xlat14.x = exp2(u_xlat14.x);
    u_xlat14.x = min(u_xlat14.x, _HeigtFogColDelta.w);
    u_xlat1.xyz = u_xlat14.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat7 * -1.44269502;
    u_xlat14.y = exp2(u_xlat21);
    u_xlat14.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat14.y / u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.00999999978<abs(u_xlat7));
#else
    u_xlatb7 = 0.00999999978<abs(u_xlat7);
#endif
    u_xlat16_4.x = (u_xlatb7) ? u_xlat21 : 1.0;
    u_xlat7 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta.w);
    u_xlat7 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat2.w = u_xlat7 * u_xlat14.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = float(_FixedSpriteId);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.y = in_COLOR0.z;
    vs_TEXCOORD3.z = _FixedRimLightWidth;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10.x = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10.x);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat3.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat0.x>=u_xlat3.x);
#else
    u_xlatb3 = u_xlat0.x>=u_xlat3.x;
#endif
    u_xlat21 = (u_xlatb3) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColDelta3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat10.x = u_xlat22 * -1.44269502;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = u_xlat10.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_4.x = (u_xlatb22) ? u_xlat10.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_11.x = (-u_xlat22) + 2.0;
    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;
    u_xlat22 = u_xlat16_11.x * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat22 = min(u_xlat16_4.x, _HeigtFogColDelta3.w);
    u_xlat10.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xxx;
    u_xlat2.w = u_xlat21 * u_xlat10.x;
    u_xlat2.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_4.x = (-u_xlat7.x) + 2.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat10.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb3) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColDelta2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_4.x = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.w = u_xlat14 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = u_xlat2 + (-u_xlat3);
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat3;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = float(_FixedSpriteId);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.y = in_COLOR0.z;
    vs_TEXCOORD3.z = _FixedRimLightWidth;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10.x = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10.x);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat3.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat0.x>=u_xlat3.x);
#else
    u_xlatb3 = u_xlat0.x>=u_xlat3.x;
#endif
    u_xlat21 = (u_xlatb3) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColDelta3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat10.x = u_xlat22 * -1.44269502;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = u_xlat10.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_4.x = (u_xlatb22) ? u_xlat10.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_11.x = (-u_xlat22) + 2.0;
    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;
    u_xlat22 = u_xlat16_11.x * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat22 = min(u_xlat16_4.x, _HeigtFogColDelta3.w);
    u_xlat10.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xxx;
    u_xlat2.w = u_xlat21 * u_xlat10.x;
    u_xlat2.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_4.x = (-u_xlat7.x) + 2.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat10.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb3) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColDelta2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_4.x = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.w = u_xlat14 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = u_xlat2 + (-u_xlat3);
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat3;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = float(_FixedSpriteId);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.y = in_COLOR0.z;
    vs_TEXCOORD3.z = _FixedRimLightWidth;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10.x = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10.x);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat3.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat0.x>=u_xlat3.x);
#else
    u_xlatb3 = u_xlat0.x>=u_xlat3.x;
#endif
    u_xlat21 = (u_xlatb3) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColDelta3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat10.x = u_xlat22 * -1.44269502;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = u_xlat10.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_4.x = (u_xlatb22) ? u_xlat10.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_11.x = (-u_xlat22) + 2.0;
    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;
    u_xlat22 = u_xlat16_11.x * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat22 = min(u_xlat16_4.x, _HeigtFogColDelta3.w);
    u_xlat10.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xxx;
    u_xlat2.w = u_xlat21 * u_xlat10.x;
    u_xlat2.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_4.x = (-u_xlat7.x) + 2.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat10.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb3) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColDelta2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_4.x = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.w = u_xlat14 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = u_xlat2 + (-u_xlat3);
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat3;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedEdgeSmoothness;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = float(_FixedSpriteId);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.y = _FixedEdgeSmoothness;
    vs_TEXCOORD3.z = in_COLOR0.w;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedEdgeSmoothness;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = float(_FixedSpriteId);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.y = _FixedEdgeSmoothness;
    vs_TEXCOORD3.z = in_COLOR0.w;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedEdgeSmoothness;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = float(_FixedSpriteId);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.y = _FixedEdgeSmoothness;
    vs_TEXCOORD3.z = in_COLOR0.w;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedEdgeSmoothness;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = float(_FixedSpriteId);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.y = _FixedEdgeSmoothness;
    vs_TEXCOORD3.z = in_COLOR0.w;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedEdgeSmoothness;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = float(_FixedSpriteId);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.y = _FixedEdgeSmoothness;
    vs_TEXCOORD3.z = in_COLOR0.w;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedEdgeSmoothness;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = float(_FixedSpriteId);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.y = _FixedEdgeSmoothness;
    vs_TEXCOORD3.z = in_COLOR0.w;
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedEdgeSmoothness;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
vec2 u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = float(_FixedSpriteId);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.y = _FixedEdgeSmoothness;
    vs_TEXCOORD3.z = in_COLOR0.w;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10 = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat7 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat14.x = u_xlat14.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat14.xxx * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.x>=u_xlat14.x);
#else
    u_xlatb14 = u_xlat0.x>=u_xlat14.x;
#endif
    u_xlat21 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta.w;
    u_xlat14.x = (u_xlatb14) ? u_xlat22 : u_xlat21;
    u_xlat14.x = log2(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * _Mihoyo_FogColor.w;
    u_xlat14.x = exp2(u_xlat14.x);
    u_xlat14.x = min(u_xlat14.x, _HeigtFogColDelta.w);
    u_xlat1.xyz = u_xlat14.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat7 * -1.44269502;
    u_xlat14.y = exp2(u_xlat21);
    u_xlat14.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat14.y / u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.00999999978<abs(u_xlat7));
#else
    u_xlatb7 = 0.00999999978<abs(u_xlat7);
#endif
    u_xlat16_4.x = (u_xlatb7) ? u_xlat21 : 1.0;
    u_xlat7 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta.w);
    u_xlat7 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat2.w = u_xlat7 * u_xlat14.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedEdgeSmoothness;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
vec2 u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = float(_FixedSpriteId);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.y = _FixedEdgeSmoothness;
    vs_TEXCOORD3.z = in_COLOR0.w;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10 = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat7 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat14.x = u_xlat14.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat14.xxx * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.x>=u_xlat14.x);
#else
    u_xlatb14 = u_xlat0.x>=u_xlat14.x;
#endif
    u_xlat21 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta.w;
    u_xlat14.x = (u_xlatb14) ? u_xlat22 : u_xlat21;
    u_xlat14.x = log2(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * _Mihoyo_FogColor.w;
    u_xlat14.x = exp2(u_xlat14.x);
    u_xlat14.x = min(u_xlat14.x, _HeigtFogColDelta.w);
    u_xlat1.xyz = u_xlat14.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat7 * -1.44269502;
    u_xlat14.y = exp2(u_xlat21);
    u_xlat14.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat14.y / u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.00999999978<abs(u_xlat7));
#else
    u_xlatb7 = 0.00999999978<abs(u_xlat7);
#endif
    u_xlat16_4.x = (u_xlatb7) ? u_xlat21 : 1.0;
    u_xlat7 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta.w);
    u_xlat7 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat2.w = u_xlat7 * u_xlat14.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedEdgeSmoothness;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
vec2 u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = float(_FixedSpriteId);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.y = _FixedEdgeSmoothness;
    vs_TEXCOORD3.z = in_COLOR0.w;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10 = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat7 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat14.x = u_xlat14.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat14.xxx * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.x>=u_xlat14.x);
#else
    u_xlatb14 = u_xlat0.x>=u_xlat14.x;
#endif
    u_xlat21 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta.w;
    u_xlat14.x = (u_xlatb14) ? u_xlat22 : u_xlat21;
    u_xlat14.x = log2(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * _Mihoyo_FogColor.w;
    u_xlat14.x = exp2(u_xlat14.x);
    u_xlat14.x = min(u_xlat14.x, _HeigtFogColDelta.w);
    u_xlat1.xyz = u_xlat14.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat7 * -1.44269502;
    u_xlat14.y = exp2(u_xlat21);
    u_xlat14.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat14.y / u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.00999999978<abs(u_xlat7));
#else
    u_xlatb7 = 0.00999999978<abs(u_xlat7);
#endif
    u_xlat16_4.x = (u_xlatb7) ? u_xlat21 : 1.0;
    u_xlat7 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta.w);
    u_xlat7 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat2.w = u_xlat7 * u_xlat14.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedEdgeSmoothness;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = float(_FixedSpriteId);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.y = _FixedEdgeSmoothness;
    vs_TEXCOORD3.z = in_COLOR0.w;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10.x = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10.x);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat3.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat0.x>=u_xlat3.x);
#else
    u_xlatb3 = u_xlat0.x>=u_xlat3.x;
#endif
    u_xlat21 = (u_xlatb3) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColDelta3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat10.x = u_xlat22 * -1.44269502;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = u_xlat10.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_4.x = (u_xlatb22) ? u_xlat10.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_11.x = (-u_xlat22) + 2.0;
    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;
    u_xlat22 = u_xlat16_11.x * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat22 = min(u_xlat16_4.x, _HeigtFogColDelta3.w);
    u_xlat10.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xxx;
    u_xlat2.w = u_xlat21 * u_xlat10.x;
    u_xlat2.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_4.x = (-u_xlat7.x) + 2.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat10.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb3) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColDelta2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_4.x = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.w = u_xlat14 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = u_xlat2 + (-u_xlat3);
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat3;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedEdgeSmoothness;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = float(_FixedSpriteId);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.y = _FixedEdgeSmoothness;
    vs_TEXCOORD3.z = in_COLOR0.w;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10.x = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10.x);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat3.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat0.x>=u_xlat3.x);
#else
    u_xlatb3 = u_xlat0.x>=u_xlat3.x;
#endif
    u_xlat21 = (u_xlatb3) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColDelta3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat10.x = u_xlat22 * -1.44269502;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = u_xlat10.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_4.x = (u_xlatb22) ? u_xlat10.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_11.x = (-u_xlat22) + 2.0;
    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;
    u_xlat22 = u_xlat16_11.x * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat22 = min(u_xlat16_4.x, _HeigtFogColDelta3.w);
    u_xlat10.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xxx;
    u_xlat2.w = u_xlat21 * u_xlat10.x;
    u_xlat2.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_4.x = (-u_xlat7.x) + 2.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat10.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb3) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColDelta2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_4.x = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.w = u_xlat14 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = u_xlat2 + (-u_xlat3);
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat3;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedEdgeSmoothness;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = float(_FixedSpriteId);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.y = _FixedEdgeSmoothness;
    vs_TEXCOORD3.z = in_COLOR0.w;
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10.x = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10.x);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat3.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat0.x>=u_xlat3.x);
#else
    u_xlatb3 = u_xlat0.x>=u_xlat3.x;
#endif
    u_xlat21 = (u_xlatb3) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColDelta3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat10.x = u_xlat22 * -1.44269502;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = u_xlat10.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_4.x = (u_xlatb22) ? u_xlat10.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_11.x = (-u_xlat22) + 2.0;
    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;
    u_xlat22 = u_xlat16_11.x * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat22 = min(u_xlat16_4.x, _HeigtFogColDelta3.w);
    u_xlat10.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xxx;
    u_xlat2.w = u_xlat21 * u_xlat10.x;
    u_xlat2.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_4.x = (-u_xlat7.x) + 2.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat10.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb3) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColDelta2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_4.x = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.w = u_xlat14 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = u_xlat2 + (-u_xlat3);
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat3;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedEdgeSmoothness;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = float(_FixedSpriteId);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.yz = vec2(_FixedEdgeSmoothness, _FixedRimLightWidth);
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedEdgeSmoothness;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = float(_FixedSpriteId);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.yz = vec2(_FixedEdgeSmoothness, _FixedRimLightWidth);
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedEdgeSmoothness;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = float(_FixedSpriteId);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.yz = vec2(_FixedEdgeSmoothness, _FixedRimLightWidth);
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedEdgeSmoothness;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = float(_FixedSpriteId);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.yz = vec2(_FixedEdgeSmoothness, _FixedRimLightWidth);
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedEdgeSmoothness;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = float(_FixedSpriteId);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.yz = vec2(_FixedEdgeSmoothness, _FixedRimLightWidth);
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedEdgeSmoothness;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat13;
mediump vec2 u_xlat16_13;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat18;
float u_xlat20;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat0.wwww + u_xlat1;
    u_xlat0.xyz = u_xlat0.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat1;
    u_xlat18 = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat18 * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat1.ww;
    vs_TEXCOORD0.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat18 = float(_FixedSpriteId);
    u_xlat1.x = u_xlat18 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = (u_xlatb1) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat7 = float(1.0) / u_xlat1.x;
    u_xlat7 = u_xlat18 * u_xlat7;
    u_xlat18 = u_xlat18 / _AtlasTiles.xxyx.y;
    u_xlat2.y = floor(u_xlat18);
    u_xlat18 = fract(u_xlat7);
    u_xlat2.x = u_xlat18 * u_xlat1.x;
    u_xlat1.xy = u_xlat2.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat1.x / _AtlasTiles.xxyx.y, u_xlat1.y / float(_AtlasTiles.y));
    u_xlat18 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat1.xy = vec2(u_xlat18) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat1.xy;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat16_3.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat0.xyz);
    u_xlat18 = abs(u_xlat16_3.x) * -0.0187292993 + 0.0742610022;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + -0.212114394;
    u_xlat18 = u_xlat18 * abs(u_xlat16_3.x) + 1.57072878;
    u_xlat1.x = -abs(u_xlat16_3.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_3.x<(-u_xlat16_3.x));
#else
    u_xlatb7 = u_xlat16_3.x<(-u_xlat16_3.x);
#endif
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat13 = u_xlat18 * u_xlat1.x;
    u_xlat13 = u_xlat13 * -2.0 + 3.14159274;
    u_xlat7 = u_xlatb7 ? u_xlat13 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat1.x + u_xlat7;
    u_xlat18 = (-u_xlat18) + 1.57079637;
    u_xlat16_3.x = u_xlat18 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_3.x;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat1.x = in_TEXCOORD1.y / u_xlat1.x;
    u_xlat7 = u_xlat1.x * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat1.x = u_xlat1.x * _ES_CloudAgePercent;
    u_xlat18 = u_xlat18 * u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = (-u_xlat7) * u_xlat18 + 1.0;
    u_xlat7 = float(1.0) / in_TEXCOORD1.z;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat7;
    u_xlat18 = (-u_xlat1.x) * u_xlat18 + 1.0;
    vs_TEXCOORD3.w = u_xlat18;
    vs_TEXCOORD3.yz = vec2(_FixedEdgeSmoothness, _FixedRimLightWidth);
    u_xlat16_9.x = dot(u_xlat0.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_3.z = u_xlat16_9.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_3.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_21 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_1.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat16_1.y = float(0.5);
    u_xlat16_13.y = float(0.5);
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_1.xy, 0.0).x;
    u_xlat16_9.z = u_xlat16_9.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_9.x = u_xlat16_9.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_9.xz = u_xlat16_9.xz + vec2(1.0, 1.0);
    u_xlat16_9.xz = max(u_xlat16_9.xz, vec2(0.0, 0.0));
    u_xlat16_4.x = u_xlat16_9.z * u_xlat16_9.z;
    u_xlat16_21 = u_xlat16_9.z * u_xlat16_4.x;
    u_xlat16_4.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_5.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyz + _ES_TopBackColor.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_5.xyz);
    u_xlat16_4.xyz = vec3(u_xlat18) * u_xlat16_4.xyz + u_xlat16_5.xyz;
    u_xlat16_21 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_13.x = abs(u_xlat16_3.x) / u_xlat16_21;
    u_xlat18 = textureLod(_SkyGradientTex, u_xlat16_13.xy, 0.0).y;
    u_xlat16_5.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;
    u_xlat16_3.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_3.x = u_xlat16_3.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_3.z, 0.0);
    u_xlat16_21 = u_xlat16_21 + -0.300000012;
    u_xlat16_21 = u_xlat16_21 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_23 = u_xlat16_21 * u_xlat16_22;
    u_xlat16_21 = (-u_xlat16_22) * u_xlat16_21 + 1.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_21 + u_xlat16_23;
    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    u_xlat18 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat0.xyz);
    u_xlat18 = u_xlat18 * 0.5 + 0.5;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat2.x = min(u_xlat18, 1.0);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat18 = u_xlat18 + u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat8.x = log2(u_xlat2.x);
    u_xlat16_3.x = log2(u_xlat2.x);
    u_xlat2.x = dot(u_xlat0.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_21 = abs(u_xlat2.x) * _ES_SunHaloSize;
    u_xlat14 = u_xlat8.x * u_xlat16_21;
    u_xlat16_5.xyz = vec3(u_xlat16_21) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat2.z = exp2(u_xlat14);
    u_xlat8.xz = u_xlat8.xx * u_xlat16_5.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_5.z;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat16_3.x = u_xlat2.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunHaloIntensity;
    u_xlat16_5.xyz = u_xlat16_3.xxx * _ES_SunColor.xyz;
    u_xlat2.xy = exp2(u_xlat8.xz);
    u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat2.x = u_xlat2.x * 0.119999997 + u_xlat2.z;
    u_xlat2.x = u_xlat2.y * 0.0299999993 + u_xlat2.x;
    u_xlat2.x = u_xlat2.x * _ES_SunHaloIntensity;
    u_xlat2.xyz = u_xlat2.xxx * _ES_SunHaloColor.xyz;
    u_xlat20 = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat18 = u_xlat18 * u_xlat20;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat16_4.xyz;
    vs_TEXCOORD4.xyz = u_xlat2.xyz;
    u_xlat18 = dot(_ES_MoonDirection.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_3.x = dot(u_xlat0.xyz, _ES_MoonDirection.xyz);
    u_xlat16_3.x = u_xlat16_3.x * 0.5 + 0.5;
    u_xlat16_3.xz = u_xlat16_3.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_21 = u_xlat18 * u_xlat18;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat18 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat18 + -0.5;
    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
    u_xlat16_21 = max(u_xlat16_21, 0.0);
    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_21 * _ES_MoonGlowIntensity;
    u_xlat16_4.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_4.x = -abs(u_xlat16_4.x) * 2.0 + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
    u_xlat16_4.xyz = vec3(u_xlat16_21) * _ES_MoonColor.xyz;
    u_xlat16_21 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_21 = min(u_xlat16_21, 0.800000012);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat16_21) + u_xlat16_5.xyz;
    u_xlat16_21 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_21 = u_xlat16_21 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_21 * -2.0 + 3.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_22;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_4.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_3.xz = u_xlat16_3.xz * u_xlat16_4.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xz = min(max(u_xlat16_3.xz, 0.0), 1.0);
#else
    u_xlat16_3.xz = clamp(u_xlat16_3.xz, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_3.x * -2.0 + 3.0;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_4.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_MoonBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.100000001;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = u_xlat16_3.xxx * _ES_MoonColor.xyz;
    u_xlat16_3.x = u_xlat16_3.z * -2.0 + 3.0;
    u_xlat16_15 = u_xlat16_3.z * u_xlat16_3.z;
    u_xlat16_3.x = u_xlat16_15 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat16_3.x * _ES_SunBrightness;
    u_xlat16_3.x = u_xlat16_3.x * 0.125;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;
    u_xlat16_4.xyz = _ES_SunHaloColor.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_9.x * u_xlat16_3.x;
    u_xlat16_9.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_9.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_3.xxx * u_xlat16_9.xyz + _ES_CloudDarkBackColor.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedEdgeSmoothness;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
vec2 u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = float(_FixedSpriteId);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.yz = vec2(_FixedEdgeSmoothness, _FixedRimLightWidth);
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10 = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat7 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat14.x = u_xlat14.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat14.xxx * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.x>=u_xlat14.x);
#else
    u_xlatb14 = u_xlat0.x>=u_xlat14.x;
#endif
    u_xlat21 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta.w;
    u_xlat14.x = (u_xlatb14) ? u_xlat22 : u_xlat21;
    u_xlat14.x = log2(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * _Mihoyo_FogColor.w;
    u_xlat14.x = exp2(u_xlat14.x);
    u_xlat14.x = min(u_xlat14.x, _HeigtFogColDelta.w);
    u_xlat1.xyz = u_xlat14.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat7 * -1.44269502;
    u_xlat14.y = exp2(u_xlat21);
    u_xlat14.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat14.y / u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.00999999978<abs(u_xlat7));
#else
    u_xlatb7 = 0.00999999978<abs(u_xlat7);
#endif
    u_xlat16_4.x = (u_xlatb7) ? u_xlat21 : 1.0;
    u_xlat7 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta.w);
    u_xlat7 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat2.w = u_xlat7 * u_xlat14.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedEdgeSmoothness;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
vec2 u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = float(_FixedSpriteId);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.yz = vec2(_FixedEdgeSmoothness, _FixedRimLightWidth);
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10 = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat7 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat14.x = u_xlat14.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat14.xxx * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.x>=u_xlat14.x);
#else
    u_xlatb14 = u_xlat0.x>=u_xlat14.x;
#endif
    u_xlat21 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta.w;
    u_xlat14.x = (u_xlatb14) ? u_xlat22 : u_xlat21;
    u_xlat14.x = log2(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * _Mihoyo_FogColor.w;
    u_xlat14.x = exp2(u_xlat14.x);
    u_xlat14.x = min(u_xlat14.x, _HeigtFogColDelta.w);
    u_xlat1.xyz = u_xlat14.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat7 * -1.44269502;
    u_xlat14.y = exp2(u_xlat21);
    u_xlat14.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat14.y / u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.00999999978<abs(u_xlat7));
#else
    u_xlatb7 = 0.00999999978<abs(u_xlat7);
#endif
    u_xlat16_4.x = (u_xlatb7) ? u_xlat21 : 1.0;
    u_xlat7 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta.w);
    u_xlat7 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat2.w = u_xlat7 * u_xlat14.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	vec4 _HeigtFogParams;
uniform 	vec4 _HeigtFogRamp;
uniform 	vec4 _HeigtFogColBase;
uniform 	vec4 _HeigtFogColDelta;
uniform 	vec4 _HeigtFogColParams;
uniform 	vec4 _HeigtFogRadialCol;
uniform 	vec4 _Mihoyo_FogColor;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedEdgeSmoothness;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
bool u_xlatb7;
float u_xlat9;
float u_xlat10;
mediump vec3 u_xlat16_11;
vec2 u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = float(_FixedSpriteId);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.yz = vec2(_FixedEdgeSmoothness, _FixedRimLightWidth);
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10 = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams.x + _HeigtFogColParams.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta.xyz + _HeigtFogColBase.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat7 = u_xlat0.y * _HeigtFogParams.x;
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat14.x = u_xlat0.x + (-_HeigtFogRamp.w);
    u_xlat14.x = u_xlat14.x * _HeigtFogColParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat14.x = min(max(u_xlat14.x, 0.0), 1.0);
#else
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat14.xxx * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat14.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(u_xlat0.x>=u_xlat14.x);
#else
    u_xlatb14 = u_xlat0.x>=u_xlat14.x;
#endif
    u_xlat21 = u_xlat0.x * _HeigtFogParams.z + _HeigtFogParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta.w;
    u_xlat14.x = (u_xlatb14) ? u_xlat22 : u_xlat21;
    u_xlat14.x = log2(u_xlat14.x);
    u_xlat14.x = u_xlat14.x * _Mihoyo_FogColor.w;
    u_xlat14.x = exp2(u_xlat14.x);
    u_xlat14.x = min(u_xlat14.x, _HeigtFogColDelta.w);
    u_xlat1.xyz = u_xlat14.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat7 * -1.44269502;
    u_xlat14.y = exp2(u_xlat21);
    u_xlat14.xy = (-u_xlat14.xy) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat14.y / u_xlat7;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.00999999978<abs(u_xlat7));
#else
    u_xlatb7 = 0.00999999978<abs(u_xlat7);
#endif
    u_xlat16_4.x = (u_xlatb7) ? u_xlat21 : 1.0;
    u_xlat7 = u_xlat0.x * _HeigtFogParams.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp.x + _HeigtFogRamp.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat7 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp.z + (-_HeigtFogRamp.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta.w);
    u_xlat7 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat2.w = u_xlat7 * u_xlat14.x;
    u_xlat2.xyz = _Mihoyo_FogColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
    vs_COLOR1 = u_xlat2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedEdgeSmoothness;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = float(_FixedSpriteId);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.yz = vec2(_FixedEdgeSmoothness, _FixedRimLightWidth);
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10.x = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10.x);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat3.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat0.x>=u_xlat3.x);
#else
    u_xlatb3 = u_xlat0.x>=u_xlat3.x;
#endif
    u_xlat21 = (u_xlatb3) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColDelta3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat10.x = u_xlat22 * -1.44269502;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = u_xlat10.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_4.x = (u_xlatb22) ? u_xlat10.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_11.x = (-u_xlat22) + 2.0;
    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;
    u_xlat22 = u_xlat16_11.x * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat22 = min(u_xlat16_4.x, _HeigtFogColDelta3.w);
    u_xlat10.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xxx;
    u_xlat2.w = u_xlat21 * u_xlat10.x;
    u_xlat2.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_4.x = (-u_xlat7.x) + 2.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat10.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb3) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColDelta2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_4.x = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.w = u_xlat14 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = u_xlat2 + (-u_xlat3);
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat3;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedEdgeSmoothness;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = float(_FixedSpriteId);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.yz = vec2(_FixedEdgeSmoothness, _FixedRimLightWidth);
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10.x = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10.x);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat3.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat0.x>=u_xlat3.x);
#else
    u_xlatb3 = u_xlat0.x>=u_xlat3.x;
#endif
    u_xlat21 = (u_xlatb3) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColDelta3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat10.x = u_xlat22 * -1.44269502;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = u_xlat10.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_4.x = (u_xlatb22) ? u_xlat10.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_11.x = (-u_xlat22) + 2.0;
    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;
    u_xlat22 = u_xlat16_11.x * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat22 = min(u_xlat16_4.x, _HeigtFogColDelta3.w);
    u_xlat10.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xxx;
    u_xlat2.w = u_xlat21 * u_xlat10.x;
    u_xlat2.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_4.x = (-u_xlat7.x) + 2.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat10.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb3) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColDelta2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_4.x = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.w = u_xlat14 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = u_xlat2 + (-u_xlat3);
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat3;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec3 _ES_SkyCenterWorldPos;
uniform 	mediump vec3 _ES_SkyWorldUpDir;
uniform 	mediump vec4 _ES_TopFrontColor;
uniform 	mediump vec4 _ES_TopBackColor;
uniform 	mediump vec4 _ES_BottomFrontColor;
uniform 	mediump vec4 _ES_BottomBackColor;
uniform 	mediump float _ES_SkyFrontAndBackBlendFactor;
uniform 	mediump float _ES_BottomColorHeight;
uniform 	mediump vec3 _ES_HorizonHaloColor;
uniform 	mediump float _ES_HorizonHaloIntensity;
uniform 	mediump float _ES_HorizonHaloHeight;
uniform 	mediump vec3 _ES_SunDirection;
uniform 	mediump vec3 _ES_SunColor;
uniform 	mediump float _ES_SunBrightness;
uniform 	mediump float _ES_SunRimLightRadius;
uniform 	mediump float _ES_SunHaloSize;
uniform 	mediump vec3 _ES_SunHaloColor;
uniform 	mediump float _ES_SunHaloIntensity;
uniform 	mediump vec3 _ES_MoonDirection;
uniform 	mediump vec3 _ES_MoonColor;
uniform 	mediump float _ES_MoonBrightness;
uniform 	mediump float _ES_MoonGlowIntensity;
uniform 	mediump float _ES_MoonLunarPhase;
uniform 	float _ES_CloudElapsedTime;
uniform 	mediump vec3 _ES_CloudLightFrontColor;
uniform 	mediump vec3 _ES_CloudLightBackColor;
uniform 	mediump vec3 _ES_CloudDarkFrontColor;
uniform 	mediump vec3 _ES_CloudDarkBackColor;
uniform 	mediump float _ES_CloudFrontAndBackBlendFactor;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _ES_CloudAgePercent;
uniform 	mediump float _ES_CloudSunBrightenIntensity;
uniform 	mediump float _LerpFactor;
uniform 	vec4 _HeigtFogParams2;
uniform 	vec4 _HeigtFogParams3;
uniform 	vec4 _HeigtFogRamp2;
uniform 	vec4 _HeigtFogRamp3;
uniform 	vec4 _HeigtFogColBase2;
uniform 	vec4 _HeigtFogColBase3;
uniform 	vec4 _HeigtFogColDelta2;
uniform 	vec4 _HeigtFogColDelta3;
uniform 	vec4 _HeigtFogColParams2;
uniform 	vec4 _HeigtFogColParams3;
uniform 	vec4 _HeigtFogRadialCol2;
uniform 	vec4 _HeigtFogRadialCol3;
uniform 	vec4 _Mihoyo_FogColor2;
uniform 	vec4 _Mihoyo_FogColor3;
uniform 	vec2 _AtlasTiles;
uniform 	float _CloudCurlTiling;
uniform 	float _CloudCurlSpeed;
uniform 	int _FixedSpriteId;
uniform 	mediump float _FixedEdgeSmoothness;
uniform 	mediump float _FixedRimLightWidth;
uniform lowp sampler2D _SkyGradientTex;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
out mediump vec4 vs_COLOR1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat9;
vec3 u_xlat10;
mediump vec3 u_xlat16_11;
float u_xlat14;
bool u_xlatb14;
mediump vec2 u_xlat16_16;
mediump float u_xlat16_18;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_25;
mediump float u_xlat16_26;
mediump float u_xlat16_27;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1].xyww;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0].xyww * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2].xyww * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3].xyww * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat1.xyz + (-_ES_SkyCenterWorldPos.xyz);
    gl_Position = u_xlat2;
    u_xlat21 = u_xlat2.y * _ProjectionParams.x;
    u_xlat3.w = u_xlat21 * 0.5;
    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat2.ww;
    vs_TEXCOORD0.xy = u_xlat3.zz + u_xlat3.xw;
    u_xlat21 = float(_FixedSpriteId);
    u_xlat22 = u_xlat21 * _AtlasTiles.xxyx.y;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat22>=(-u_xlat22));
#else
    u_xlatb22 = u_xlat22>=(-u_xlat22);
#endif
    u_xlat22 = (u_xlatb22) ? _AtlasTiles.xxyx.y : (-_AtlasTiles.xxyx.y);
    u_xlat2.x = float(1.0) / u_xlat22;
    u_xlat2.x = u_xlat21 * u_xlat2.x;
    u_xlat21 = u_xlat21 / _AtlasTiles.xxyx.y;
    u_xlat3.y = floor(u_xlat21);
    u_xlat21 = fract(u_xlat2.x);
    u_xlat3.x = u_xlat21 * u_xlat22;
    u_xlat2.xy = u_xlat3.xy + in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = vec2(u_xlat2.x / _AtlasTiles.xxyx.y, u_xlat2.y / float(_AtlasTiles.y));
    u_xlat21 = _ES_CloudElapsedTime * _CloudCurlSpeed;
    u_xlat2.xy = vec2(u_xlat21) * vec2(1.20000005, 0.800000012);
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * vec2(vec2(_CloudCurlTiling, _CloudCurlTiling)) + u_xlat2.xy;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat16_4.x = dot(_ES_SkyWorldUpDir.xyz, u_xlat1.xyz);
    u_xlat21 = abs(u_xlat16_4.x) * -0.0187292993 + 0.0742610022;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + -0.212114394;
    u_xlat21 = u_xlat21 * abs(u_xlat16_4.x) + 1.57072878;
    u_xlat22 = -abs(u_xlat16_4.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_4.x<(-u_xlat16_4.x));
#else
    u_xlatb2 = u_xlat16_4.x<(-u_xlat16_4.x);
#endif
    u_xlat22 = sqrt(u_xlat22);
    u_xlat9 = u_xlat21 * u_xlat22;
    u_xlat9 = u_xlat9 * -2.0 + 3.14159274;
    u_xlat2.x = u_xlatb2 ? u_xlat9 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat22 + u_xlat2.x;
    u_xlat21 = (-u_xlat21) + 1.57079637;
    u_xlat16_4.x = u_xlat21 * 0.636619806;
    vs_TEXCOORD2.w = u_xlat16_4.x;
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    u_xlat21 = (-in_TEXCOORD1.w) + 1.0;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat22 = max(in_TEXCOORD1.x, 9.99999975e-06);
    u_xlat22 = in_TEXCOORD1.y / u_xlat22;
    u_xlat2.x = u_xlat22 * _ES_CloudAgePercent + (-in_TEXCOORD1.w);
    u_xlat22 = u_xlat22 * _ES_CloudAgePercent;
    u_xlat21 = u_xlat21 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = (-u_xlat2.x) * u_xlat21 + 1.0;
    u_xlat2.x = float(1.0) / in_TEXCOORD1.z;
    u_xlat22 = u_xlat22 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat2.x = u_xlat22 * -2.0 + 3.0;
    u_xlat22 = u_xlat22 * u_xlat22;
    u_xlat22 = u_xlat22 * u_xlat2.x;
    u_xlat21 = (-u_xlat22) * u_xlat21 + 1.0;
    vs_TEXCOORD3.w = u_xlat21;
    vs_TEXCOORD3.yz = vec2(_FixedEdgeSmoothness, _FixedRimLightWidth);
    u_xlat16_11.x = dot(u_xlat1.xyz, vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z));
    u_xlat16_4.z = u_xlat16_11.x * 0.5 + 0.5;
    vs_TEXCOORD3.x = u_xlat16_4.z * _ES_CloudSunBrightenIntensity;
    u_xlat16_25 = max(_ES_BottomColorHeight, 9.99999975e-05);
    u_xlat16_2.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat16_2.y = float(0.5);
    u_xlat16_16.y = float(0.5);
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_2.xy, 0.0).x;
    u_xlat16_11.z = u_xlat16_11.x * _ES_SkyFrontAndBackBlendFactor + (-_ES_SkyFrontAndBackBlendFactor);
    u_xlat16_11.x = u_xlat16_11.x * _ES_CloudFrontAndBackBlendFactor + (-_ES_CloudFrontAndBackBlendFactor);
    u_xlat16_11.xz = u_xlat16_11.xz + vec2(1.0, 1.0);
    u_xlat16_11.xz = max(u_xlat16_11.xz, vec2(0.0, 0.0));
    u_xlat16_5.x = u_xlat16_11.z * u_xlat16_11.z;
    u_xlat16_25 = u_xlat16_11.z * u_xlat16_5.x;
    u_xlat16_5.xyz = _ES_BottomFrontColor.xyz + (-_ES_BottomBackColor.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz + _ES_BottomBackColor.xyz;
    u_xlat16_6.xyz = _ES_TopFrontColor.xyz + (-_ES_TopBackColor.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz + _ES_TopBackColor.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_25 = max(_ES_HorizonHaloHeight, 9.99999975e-05);
    u_xlat16_16.x = abs(u_xlat16_4.x) / u_xlat16_25;
    u_xlat21 = textureLod(_SkyGradientTex, u_xlat16_16.xy, 0.0).y;
    u_xlat16_6.xyz = vec3(_ES_HorizonHaloColor.xxyz.y * _ES_HorizonHaloIntensity, _ES_HorizonHaloColor.xxyz.z * _ES_HorizonHaloIntensity, float(_ES_HorizonHaloColor.z) * _ES_HorizonHaloIntensity);
    u_xlat16_6.xyz = vec3(u_xlat21) * u_xlat16_6.xyz;
    u_xlat16_4.x = abs(_ES_SunDirection.xxyz.z) + -0.200000003;
    u_xlat16_4.x = u_xlat16_4.x * 3.33333325;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_25 = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_4.z, 0.0);
    u_xlat16_25 = u_xlat16_25 + -0.300000012;
    u_xlat16_25 = u_xlat16_25 * 1.42857146;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_27 = u_xlat16_25 * u_xlat16_26;
    u_xlat16_25 = (-u_xlat16_26) * u_xlat16_25 + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_25 + u_xlat16_27;
    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    u_xlat21 = dot(vec3(_ES_SunDirection.x, _ES_SunDirection.y, _ES_SunDirection.z), u_xlat1.xyz);
    u_xlat21 = u_xlat21 * 0.5 + 0.5;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat22 = min(u_xlat21, 1.0);
    u_xlat21 = u_xlat21 + -0.5;
    u_xlat21 = u_xlat21 + u_xlat21;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.x = log2(u_xlat22);
    u_xlat16_4.x = log2(u_xlat22);
    u_xlat22 = dot(u_xlat1.xyz, _ES_SkyWorldUpDir.xyz);
    u_xlat16_25 = abs(u_xlat22) * _ES_SunHaloSize;
    u_xlat10.x = u_xlat3.x * u_xlat16_25;
    u_xlat16_6.xyz = vec3(u_xlat16_25) * vec3(0.100000001, 0.00999999978, 0.5);
    u_xlat3.y = exp2(u_xlat10.x);
    u_xlat3.xz = u_xlat3.xx * u_xlat16_6.xy;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_6.z;
    u_xlat16_4.x = exp2(u_xlat16_4.x);
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunHaloIntensity;
    u_xlat16_6.xyz = u_xlat16_4.xxx * _ES_SunColor.xyz;
    u_xlat3.xz = exp2(u_xlat3.xz);
    u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
    u_xlat22 = u_xlat3.x * 0.119999997 + u_xlat3.y;
    u_xlat22 = u_xlat3.z * 0.0299999993 + u_xlat22;
    u_xlat22 = u_xlat22 * _ES_SunHaloIntensity;
    u_xlat3.xyz = vec3(u_xlat22) * _ES_SunHaloColor.xyz;
    u_xlat22 = u_xlat21 * -2.0 + 3.0;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat16_5.xyz;
    vs_TEXCOORD4.xyz = u_xlat3.xyz;
    u_xlat21 = dot(_ES_MoonDirection.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = dot(u_xlat1.xyz, _ES_MoonDirection.xyz);
    u_xlat16_4.x = u_xlat16_4.x * 0.5 + 0.5;
    u_xlat16_4.xz = u_xlat16_4.xz + (-vec2(vec2(_ES_SunRimLightRadius, _ES_SunRimLightRadius)));
    u_xlat16_25 = u_xlat21 * u_xlat21;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat21 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat21 + -0.5;
    u_xlat16_25 = u_xlat16_25 + u_xlat16_25;
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_25 = u_xlat16_25 * _ES_MoonGlowIntensity;
    u_xlat16_5.x = _ES_MoonLunarPhase + -0.5;
    u_xlat16_5.x = -abs(u_xlat16_5.x) * 2.0 + 1.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
    u_xlat16_5.xyz = vec3(u_xlat16_25) * _ES_MoonColor.xyz;
    u_xlat16_25 = max(_ES_MoonBrightness, 0.0);
    u_xlat16_25 = min(u_xlat16_25, 0.800000012);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_25) + u_xlat16_6.xyz;
    u_xlat16_25 = (-_ES_CloudCoverage) + 0.699999988;
    u_xlat16_25 = u_xlat16_25 * 2.50000024;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
#else
    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
#endif
    u_xlat16_26 = u_xlat16_25 * -2.0 + 3.0;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
    u_xlat16_25 = u_xlat16_25 * u_xlat16_26;
    vs_TEXCOORD5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_5.x = (-_ES_SunRimLightRadius) + 1.0;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_4.xz = u_xlat16_4.xz * u_xlat16_5.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xz = min(max(u_xlat16_4.xz, 0.0), 1.0);
#else
    u_xlat16_4.xz = clamp(u_xlat16_4.xz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_4.x * -2.0 + 3.0;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_5.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_MoonBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.100000001;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = u_xlat16_4.xxx * _ES_MoonColor.xyz;
    u_xlat16_4.x = u_xlat16_4.z * -2.0 + 3.0;
    u_xlat16_18 = u_xlat16_4.z * u_xlat16_4.z;
    u_xlat16_4.x = u_xlat16_18 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * _ES_SunBrightness;
    u_xlat16_4.x = u_xlat16_4.x * 0.125;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_5.xyz = _ES_SunHaloColor.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
    vs_TEXCOORD6.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_11.x;
    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;
    u_xlat16_11.xyz = _ES_CloudLightFrontColor.xyz + (-_ES_CloudLightBackColor.xyz);
    vs_TEXCOORD7.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudLightBackColor.xyz;
    u_xlat16_11.xyz = _ES_CloudDarkFrontColor.xyz + (-_ES_CloudDarkBackColor.xyz);
    vs_TEXCOORD8.xyz = u_xlat16_4.xxx * u_xlat16_11.xyz + _ES_CloudDarkBackColor.xyz;
    u_xlat21 = u_xlat0.y * _HeigtFogColParams3.x + _HeigtFogColParams3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_4.x = (-u_xlat21) + 2.0;
    u_xlat16_4.x = u_xlat21 * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta3.xyz + _HeigtFogColBase3.xyz;
    u_xlat3.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol3.xyz;
    u_xlat0.xzw = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = u_xlat0.y * _HeigtFogColParams2.x + _HeigtFogColParams2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat21 = u_xlat0.x + (-_HeigtFogRamp3.w);
    u_xlat21 = u_xlat21 * _HeigtFogColParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat1.xyz;
    u_xlat21 = u_xlat0.x * _HeigtFogParams3.z + _HeigtFogParams3.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat22 = (-u_xlat21) + 2.0;
    u_xlat21 = u_xlat21 * u_xlat22;
    u_xlat22 = u_xlat21 * _HeigtFogColDelta3.w;
    u_xlat3.x = _ProjectionParams.z * 0.999899983;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat0.x>=u_xlat3.x);
#else
    u_xlatb3 = u_xlat0.x>=u_xlat3.x;
#endif
    u_xlat21 = (u_xlatb3) ? u_xlat22 : u_xlat21;
    u_xlat21 = log2(u_xlat21);
    u_xlat21 = u_xlat21 * _Mihoyo_FogColor3.w;
    u_xlat21 = exp2(u_xlat21);
    u_xlat21 = min(u_xlat21, _HeigtFogColDelta3.w);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat22 = u_xlat0.z * _HeigtFogParams3.x;
    u_xlat14 = u_xlat0.z * _HeigtFogParams2.x;
    u_xlat10.x = u_xlat22 * -1.44269502;
    u_xlat10.x = exp2(u_xlat10.x);
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat10.x = u_xlat10.x / u_xlat22;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(0.00999999978<abs(u_xlat22));
#else
    u_xlatb22 = 0.00999999978<abs(u_xlat22);
#endif
    u_xlat16_4.x = (u_xlatb22) ? u_xlat10.x : 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogParams3.y;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat22 = u_xlat0.x * _HeigtFogRamp3.x + _HeigtFogRamp3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
#else
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
#endif
    u_xlat16_11.x = (-u_xlat22) + 2.0;
    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;
    u_xlat22 = u_xlat16_11.x * _HeigtFogRamp3.z + (-_HeigtFogRamp3.z);
    u_xlat22 = u_xlat22 + 1.0;
    u_xlat16_4.x = u_xlat22 * u_xlat16_4.x;
    u_xlat22 = min(u_xlat16_4.x, _HeigtFogColDelta3.w);
    u_xlat10.x = (-u_xlat22) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat10.xxx;
    u_xlat2.w = u_xlat21 * u_xlat10.x;
    u_xlat2.xyz = _Mihoyo_FogColor3.xyz * vec3(u_xlat22) + u_xlat1.xyz;
    u_xlat16_4.x = (-u_xlat7.x) + 2.0;
    u_xlat16_4.x = u_xlat7.x * u_xlat16_4.x;
    u_xlat1.xyz = u_xlat16_4.xxx * _HeigtFogColDelta2.xyz + _HeigtFogColBase2.xyz;
    u_xlat10.xyz = (-u_xlat1.xyz) + _HeigtFogRadialCol2.xyz;
    u_xlat7.x = u_xlat0.x + (-_HeigtFogRamp2.w);
    u_xlat7.x = u_xlat7.x * _HeigtFogColParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat7.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat7.x = u_xlat0.x * _HeigtFogParams2.z + _HeigtFogParams2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 2.0;
    u_xlat7.x = u_xlat21 * u_xlat7.x;
    u_xlat21 = u_xlat7.x * _HeigtFogColDelta2.w;
    u_xlat7.x = (u_xlatb3) ? u_xlat21 : u_xlat7.x;
    u_xlat7.x = log2(u_xlat7.x);
    u_xlat7.x = u_xlat7.x * _Mihoyo_FogColor2.w;
    u_xlat7.x = exp2(u_xlat7.x);
    u_xlat7.x = min(u_xlat7.x, _HeigtFogColDelta2.w);
    u_xlat1.xyz = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat21 = u_xlat14 * -1.44269502;
    u_xlat7.z = exp2(u_xlat21);
    u_xlat7.xz = (-u_xlat7.xz) + vec2(1.0, 1.0);
    u_xlat21 = u_xlat7.z / u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlatb14 = !!(0.00999999978<abs(u_xlat14));
#else
    u_xlatb14 = 0.00999999978<abs(u_xlat14);
#endif
    u_xlat16_4.x = (u_xlatb14) ? u_xlat21 : 1.0;
    u_xlat14 = u_xlat0.x * _HeigtFogParams2.y;
    u_xlat0.x = u_xlat0.x * _HeigtFogRamp2.x + _HeigtFogRamp2.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat14 * u_xlat16_4.x;
    u_xlat16_4.x = exp2((-u_xlat16_4.x));
    u_xlat16_4.x = min(u_xlat16_4.x, 1.0);
    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
    u_xlat16_11.x = (-u_xlat0.x) + 2.0;
    u_xlat16_11.x = u_xlat0.x * u_xlat16_11.x;
    u_xlat0.x = u_xlat16_11.x * _HeigtFogRamp2.z + (-_HeigtFogRamp2.z);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
    u_xlat0.x = min(u_xlat16_4.x, _HeigtFogColDelta2.w);
    u_xlat14 = (-u_xlat0.x) + 1.0;
    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
    u_xlat3.w = u_xlat14 * u_xlat7.x;
    u_xlat3.xyz = _Mihoyo_FogColor2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0 = u_xlat2 + (-u_xlat3);
    u_xlat0 = vec4(vec4(_LerpFactor, _LerpFactor, _LerpFactor, _LerpFactor)) * u_xlat0 + u_xlat3;
    vs_COLOR1 = u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _ES_CloudCoverage;
uniform 	float _CloudCurlAmplitude;
uniform lowp sampler2D _CloudCurlTex;
uniform lowp sampler2D _CloudParticleAtlas;
in highp vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec3 vs_TEXCOORD8;
in mediump vec4 vs_COLOR1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec2 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec2 u_xlat16_3;
bool u_xlatb4;
mediump float u_xlat16_5;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.x = vs_TEXCOORD2.w + 0.100000001;
    u_xlat16_0.x = u_xlat16_0.x * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    u_xlat16_3.xy = vec2(vs_TEXCOORD3.y + vs_TEXCOORD3.w, vs_TEXCOORD3.z + vs_TEXCOORD3.w);
    u_xlat16_3.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
    u_xlat16_9 = (-vs_TEXCOORD3.y) + vs_TEXCOORD3.w;
    u_xlat16_9 = max(u_xlat16_9, 0.0);
    u_xlat16_3.xy = (-vec2(u_xlat16_9)) + u_xlat16_3.xy;
    u_xlat16_3.xy = vec2(1.0, 1.0) / u_xlat16_3.xy;
    u_xlat10_1.xyz = texture(_CloudCurlTex, vs_TEXCOORD1.zw).xyz;
    u_xlat16_1.xy = u_xlat10_1.xy + vec2(-0.5, -0.5);
    u_xlat16_1.xy = u_xlat10_1.zz * u_xlat16_1.xy;
    u_xlat1.xy = u_xlat16_1.xy * vec2(_CloudCurlAmplitude) + vs_TEXCOORD1.xy;
    u_xlat10_1 = texture(_CloudParticleAtlas, u_xlat1.xy);
    u_xlat16_9 = (-u_xlat16_9) + u_xlat10_1.z;
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(u_xlat16_9);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_2.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_2.x;
    u_xlat16_6 = (-u_xlat16_2.y) * u_xlat16_3.y + 1.0;
    u_xlat16_6 = u_xlat16_6 * 4.0 + (-u_xlat10_1.y);
    u_xlat16_6 = vs_TEXCOORD3.w * u_xlat16_6 + u_xlat10_1.y;
    u_xlat16_3.x = u_xlat16_3.x * u_xlat10_1.w;
    u_xlat16_9 = u_xlat16_3.x * u_xlat16_0.x + -0.00999999978;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_3.x;
    SV_Target0.w = u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_9<0.0);
#else
    u_xlatb4 = u_xlat16_9<0.0;
#endif
    if((int(u_xlatb4) * int(0xffffffffu))!=0){discard;}
    u_xlat16_0.xyw = vs_TEXCOORD7.xyz + (-vs_TEXCOORD8.xyz);
    u_xlat16_0.xyw = u_xlat10_1.xxx * u_xlat16_0.xyw + vs_TEXCOORD8.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD6.xyz * vec3(u_xlat16_6) + u_xlat16_0.xyw;
    u_xlat16_2.xyz = vs_TEXCOORD7.xyz * vec3(_ES_CloudCoverage);
    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat16_0.xyz;
    u_xlat16_0.xyz = vs_TEXCOORD5.xyz * u_xlat10_1.xxx + u_xlat16_0.xyz;
    u_xlat16_9 = vs_TEXCOORD3.x + 1.0;
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + (-vs_TEXCOORD4.xyz);
    u_xlat16_9 = _ES_CloudCoverage + -0.400000006;
    u_xlat16_9 = u_xlat16_9 * 3.33333349;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_2.x = u_xlat16_9 * -2.0 + 3.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_2.x;
    u_xlat16_2.x = vs_TEXCOORD2.w * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_2.x * -2.0 + 3.0;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_5;
    u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
    u_xlat16_5 = (-u_xlat16_2.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_5 + u_xlat16_2.x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_9 = vs_COLOR1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_9) + vs_COLOR1.xyz;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FIXED_EDGE_SMOOTHNESS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FIXED_EDGE_SMOOTHNESS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FIXED_EDGE_SMOOTHNESS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "FIXED_EDGE_SMOOTHNESS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "FIXED_EDGE_SMOOTHNESS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "FIXED_EDGE_SMOOTHNESS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FIXED_EDGE_SMOOTHNESS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FIXED_EDGE_SMOOTHNESS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FIXED_EDGE_SMOOTHNESS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_EDGE_SMOOTHNESS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_EDGE_SMOOTHNESS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_EDGE_SMOOTHNESS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FIXED_SPRITE_ID" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FIXED_SPRITE_ID" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FIXED_SPRITE_ID" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "FIXED_SPRITE_ID" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "FIXED_SPRITE_ID" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "FIXED_SPRITE_ID" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FIXED_SPRITE_ID" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FIXED_SPRITE_ID" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FIXED_SPRITE_ID" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_SPRITE_ID" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_SPRITE_ID" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_SPRITE_ID" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FIXED_SPRITE_ID" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FIXED_SPRITE_ID" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FIXED_SPRITE_ID" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FIXED_SPRITE_ID" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FIXED_SPRITE_ID" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FIXED_SPRITE_ID" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FIXED_SPRITE_ID" "FIXED_EDGE_SMOOTHNESS" "FIXED_RIMLIGHT_WIDTH" }
""
}
}
}
}
}