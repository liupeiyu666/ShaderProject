//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/miHoYo_Character/Character_Avatar/Avatar_Alpha_Transparent_Clip" {
Properties {
_Color ("Main Color", Color) = (1,1,1,1)
_EnvColor ("Env Color", Color) = (1,1,1,1)
_Scale ("Scale Compared to Maya", Float) = 0.01
_BloomFactor ("Bloom Factor", Float) = 0.25
_MainTex ("Main Tex (RGB)", 2D) = "white" { }
_LightMapTex ("Light Map Tex (RGB)", 2D) = "gray" { }
_LightSpecColor ("Light Specular Color", Color) = (1,1,1,1)
_LightArea ("Light Area Threshold", Range(0, 1)) = 0.51
_SecondShadow ("Second Shadow Threshold", Range(0, 1)) = 0.51
_FirstShadowMultColor ("First Shadow Multiply Color", Color) = (0.9,0.7,0.75,1)
_SecondShadowMultColor ("Second Shadow Multiply Color", Color) = (0.75,0.6,0.65,1)
_Shininess ("Specular Shininess", Range(0.1, 100)) = 10
_SpecMulti ("Specular Multiply Factor", Range(0, 1)) = 0.1
_OutlineWidth ("Outline Width", Range(0, 100)) = 0.2
_OutlineColor ("Outline Color", Color) = (0,0,0,1)
_MaxOutlineZOffset ("Max Outline Z Offset", Range(0, 100)) = 1
_OutlineCamStart ("Outline Camera Adjustment Start Distance", Range(0, 10000)) = 1000
_Opaqueness ("Opaqueness", Range(0, 1)) = 1
_FadeDistance ("Fade Start Distance", Range(0, 10)) = 0
_FadeOffset ("Fade Start Offset", Range(0, 10)) = 0
_FadeDistanceScale ("Fade Distance Scale(turn this up to stop fading)", Range(0, 1)) = 1
_AlphaClipThreshold ("Alpha Clip Threshold", Float) = 0
[Toggle(LOOKUP_COLOR)] _LookupColor ("Lookup Color", Float) = 0
[Toggle(LOOKUP_COLOR_BILINEAR)] _LookupColorBilinear ("Lookup Color Bilinear", Float) = 0
_factorTex ("Factor Tex", 2D) = "white" { }
_indexTex ("Index Tex", 2D) = "white" { }
_tableTex ("Lookup Tex", 2D) = "white" { }
[Toggle(SPECIAL_STATE)] _SpecialState ("Special State", Float) = 0
_SPTex ("SP Tex", 2D) = "white" { }
_SPNoiseTex ("SP Noise Tex", 2D) = "white" { }
_SPNoiseScaler ("SP Noise Scaler", Range(0, 10)) = 1
_SPIntensity ("SP Intensity", Range(0, 1)) = 0.5
_SPTransition ("SP Transition", Range(0, 1)) = 0
_SPTransitionColor ("SP Transition Color", Color) = (1,1,1,1)
_SPOpaqueness ("SP Opaqueness", Range(0, 1)) = 1
_SPOutlineColor ("SP Outline Color", Color) = (1,1,1,1)
_SPTransitionEmissionScaler ("SP Transition Emission Scaler", Range(1, 100)) = 1
_SPTransitionBloomFactor ("SP Transition Bloom Factor", Float) = 1
_SPCubeMap ("SP CubeMap", Cube) = "white" { }
_SPCubeMapColor ("SP CubeMap Color", Color) = (1,1,1,0)
_SPCubeMapOffset ("SP CubeMap Offset", Vector) = (0,0,0,0)
_SPCubeMapIntensity ("SP CubeMap Intensity", Range(0, 1)) = 0
_SPCubeMapNoiseIntensity ("SP CubeMap Noise Intensity", Range(0, 5)) = 0
_SPCubeMapBrightness ("SP CubeMap Brightness", Float) = 1.26
_SPOldColor ("SP Old Color", Color) = (1,1,1,0)
[Toggle(RIM_GLOW)] _RimGlow ("Rim Glow", Float) = 0
_RGColor ("Rim Glow Color", Color) = (1,1,1,1)
_RGShininess ("Rim Glow Shininess", Float) = 1
_RGScale ("Rim Glow Scale", Float) = 1
_RGBias ("Rim Glow Bias", Float) = 0
_RGRatio ("Rim Glow Ratio", Range(0, 1)) = 0.5
_RGBloomFactor ("Rim Glow Bloom Factor", Float) = 1
[Toggle(DISTORTION)] _Distortion ("Distortion", Float) = 0
_DTTex ("Distortion Tex", 2D) = "gray" { }
_DTIntensity ("Distortion Intensity", Range(1, 9)) = 5
_DTPlaySpeed ("Distortion Play Speed", Float) = 0
_DTNormalDisplacment ("Distortion Normal Displacment", Float) = 0
_DTUVScaleInX ("Distortion UV Scale in X", Float) = 1
_DTUVScaleInY ("Distortion UV Scale in Y", Float) = 1
_DTFresnel ("Distortion Fresnel Params", Vector) = (1,1,0,0)
_VertexAlphaFactor ("Alpha From Vertex Factor (0: not use)", Range(0, 1)) = 0
[Toggle(USINGDITHERALPAH)] _UsingDitherAlpha ("UsingDitherAlpha", Float) = 0
_DitherAlpha ("Dither Alpha Value", Range(0, 1)) = 1
}
SubShader {
 LOD 200
 Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "OutlineType" = "Complex" "QUEUE" = "Transparent" "Reflected" = "Reflected" "RenderType" = "Transparent" }
 Pass {
  Name "COMPLEX_TRANS"
  LOD 200
  Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "OutlineType" = "Complex" "QUEUE" = "Transparent" "Reflected" = "Reflected" "RenderType" = "Transparent" }
  GpuProgramID 31608
Program "vp" {
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_75;
    scrpos_75 = xlv_TEXCOORD3;
    mediump float a_76;
    a_76 = xlv_TEXCOORD3.z;
    if ((a_76 < 0.95)) {
      scrpos_75.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_76 = (a_76 * 17.0);
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_75.y / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_75.x / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float x_83;
      x_83 = ((a_76 - _DITHERMATRIX[
        int(tmpvar_79)
      ][
        int(tmpvar_82)
      ]) - 0.01);
      if ((x_83 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_75;
    scrpos_75 = xlv_TEXCOORD3;
    mediump float a_76;
    a_76 = xlv_TEXCOORD3.z;
    if ((a_76 < 0.95)) {
      scrpos_75.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_76 = (a_76 * 17.0);
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_75.y / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_75.x / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float x_83;
      x_83 = ((a_76 - _DITHERMATRIX[
        int(tmpvar_79)
      ][
        int(tmpvar_82)
      ]) - 0.01);
      if ((x_83 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_75;
    scrpos_75 = xlv_TEXCOORD3;
    mediump float a_76;
    a_76 = xlv_TEXCOORD3.z;
    if ((a_76 < 0.95)) {
      scrpos_75.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_76 = (a_76 * 17.0);
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_75.y / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_75.x / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float x_83;
      x_83 = ((a_76 - _DITHERMATRIX[
        int(tmpvar_79)
      ][
        int(tmpvar_82)
      ]) - 0.01);
      if ((x_83 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_14;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_14;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_14;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_14;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_14;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_14;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = tmpvar_24;
  highp vec3 V_34;
  V_34 = V_2;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (outColor_4.xyz, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_4.xyz = tmpvar_32;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = tmpvar_24;
  highp vec3 V_34;
  V_34 = V_2;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (outColor_4.xyz, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_4.xyz = tmpvar_32;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = tmpvar_24;
  highp vec3 V_34;
  V_34 = V_2;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (outColor_4.xyz, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_4.xyz = tmpvar_32;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 tmpvar_75;
  highp vec3 N_76;
  N_76 = tmpvar_67;
  highp vec3 V_77;
  V_77 = V_2;
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = pow (clamp ((1.001 - 
    dot (V_77, N_76)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_78 = (_RGBias + (tmpvar_79 * _RGScale));
  mediump vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_78 * _RGColor).xyz;
  mediump float tmpvar_81;
  tmpvar_81 = clamp (tmpvar_78, 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (outColor_4.xyz, tmpvar_80, vec3((tmpvar_81 * _RGRatio)));
  tmpvar_75 = tmpvar_82;
  outColor_4.xyz = tmpvar_75;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD3;
    mediump float a_84;
    a_84 = xlv_TEXCOORD3.z;
    if ((a_84 < 0.95)) {
      scrpos_83.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.y / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_83.x / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float x_91;
      x_91 = ((a_84 - _DITHERMATRIX[
        int(tmpvar_87)
      ][
        int(tmpvar_90)
      ]) - 0.01);
      if ((x_91 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 tmpvar_75;
  highp vec3 N_76;
  N_76 = tmpvar_67;
  highp vec3 V_77;
  V_77 = V_2;
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = pow (clamp ((1.001 - 
    dot (V_77, N_76)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_78 = (_RGBias + (tmpvar_79 * _RGScale));
  mediump vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_78 * _RGColor).xyz;
  mediump float tmpvar_81;
  tmpvar_81 = clamp (tmpvar_78, 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (outColor_4.xyz, tmpvar_80, vec3((tmpvar_81 * _RGRatio)));
  tmpvar_75 = tmpvar_82;
  outColor_4.xyz = tmpvar_75;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD3;
    mediump float a_84;
    a_84 = xlv_TEXCOORD3.z;
    if ((a_84 < 0.95)) {
      scrpos_83.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.y / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_83.x / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float x_91;
      x_91 = ((a_84 - _DITHERMATRIX[
        int(tmpvar_87)
      ][
        int(tmpvar_90)
      ]) - 0.01);
      if ((x_91 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 tmpvar_75;
  highp vec3 N_76;
  N_76 = tmpvar_67;
  highp vec3 V_77;
  V_77 = V_2;
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = pow (clamp ((1.001 - 
    dot (V_77, N_76)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_78 = (_RGBias + (tmpvar_79 * _RGScale));
  mediump vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_78 * _RGColor).xyz;
  mediump float tmpvar_81;
  tmpvar_81 = clamp (tmpvar_78, 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (outColor_4.xyz, tmpvar_80, vec3((tmpvar_81 * _RGRatio)));
  tmpvar_75 = tmpvar_82;
  outColor_4.xyz = tmpvar_75;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD3;
    mediump float a_84;
    a_84 = xlv_TEXCOORD3.z;
    if ((a_84 < 0.95)) {
      scrpos_83.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.y / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_83.x / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float x_91;
      x_91 = ((a_84 - _DITHERMATRIX[
        int(tmpvar_87)
      ][
        int(tmpvar_90)
      ]) - 0.01);
      if ((x_91 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (tmpvar_24, I_41)
   * tmpvar_24)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_4, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_4 = spColor_36;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_47;
    scrpos_47 = xlv_TEXCOORD3;
    mediump float a_48;
    a_48 = xlv_TEXCOORD3.z;
    if ((a_48 < 0.95)) {
      scrpos_47.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_48 = (a_48 * 17.0);
      highp float tmpvar_49;
      tmpvar_49 = (scrpos_47.y / 4.0);
      highp float tmpvar_50;
      tmpvar_50 = (fract(abs(tmpvar_49)) * 4.0);
      highp float tmpvar_51;
      if ((tmpvar_49 >= 0.0)) {
        tmpvar_51 = tmpvar_50;
      } else {
        tmpvar_51 = -(tmpvar_50);
      };
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_47.x / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float x_55;
      x_55 = ((a_48 - _DITHERMATRIX[
        int(tmpvar_51)
      ][
        int(tmpvar_54)
      ]) - 0.01);
      if ((x_55 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_36.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (tmpvar_24, I_41)
   * tmpvar_24)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_4, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_4 = spColor_36;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_47;
    scrpos_47 = xlv_TEXCOORD3;
    mediump float a_48;
    a_48 = xlv_TEXCOORD3.z;
    if ((a_48 < 0.95)) {
      scrpos_47.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_48 = (a_48 * 17.0);
      highp float tmpvar_49;
      tmpvar_49 = (scrpos_47.y / 4.0);
      highp float tmpvar_50;
      tmpvar_50 = (fract(abs(tmpvar_49)) * 4.0);
      highp float tmpvar_51;
      if ((tmpvar_49 >= 0.0)) {
        tmpvar_51 = tmpvar_50;
      } else {
        tmpvar_51 = -(tmpvar_50);
      };
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_47.x / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float x_55;
      x_55 = ((a_48 - _DITHERMATRIX[
        int(tmpvar_51)
      ][
        int(tmpvar_54)
      ]) - 0.01);
      if ((x_55 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_36.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (tmpvar_24, I_41)
   * tmpvar_24)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_4, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_4 = spColor_36;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_47;
    scrpos_47 = xlv_TEXCOORD3;
    mediump float a_48;
    a_48 = xlv_TEXCOORD3.z;
    if ((a_48 < 0.95)) {
      scrpos_47.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_48 = (a_48 * 17.0);
      highp float tmpvar_49;
      tmpvar_49 = (scrpos_47.y / 4.0);
      highp float tmpvar_50;
      tmpvar_50 = (fract(abs(tmpvar_49)) * 4.0);
      highp float tmpvar_51;
      if ((tmpvar_49 >= 0.0)) {
        tmpvar_51 = tmpvar_50;
      } else {
        tmpvar_51 = -(tmpvar_50);
      };
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_47.x / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float x_55;
      x_55 = ((a_48 - _DITHERMATRIX[
        int(tmpvar_51)
      ][
        int(tmpvar_54)
      ]) - 0.01);
      if ((x_55 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_36.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_75;
  mediump vec3 R_76;
  mediump float intensity_77;
  mediump vec4 noiseTex_78;
  mediump vec4 spColor_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_79 = tmpvar_80;
  spColor_79.w = (spColor_79.w * _SPOpaqueness);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_78 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((1.99 * tmpvar_81.x) * _SPNoiseScaler) - 1.0);
  intensity_77 = tmpvar_82;
  highp vec3 tmpvar_83;
  highp vec3 I_84;
  I_84 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_78 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_83 = (I_84 - (2.0 * (
    dot (tmpvar_67, I_84)
   * tmpvar_67)));
  R_76 = tmpvar_83;
  lowp vec3 tmpvar_85;
  tmpvar_85 = textureCube (_SPCubeMap, R_76).xyz;
  reflection_75 = tmpvar_85;
  highp vec3 tmpvar_86;
  mediump vec3 x_87;
  x_87 = (spColor_79.xyz * _SPOldColor.xyz);
  tmpvar_86 = mix (x_87, ((reflection_75 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_79.xyz = tmpvar_86;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_77 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_77 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_88;
      tmpvar_88 = mix (spColor_79.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_77) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_79.xyz = tmpvar_88;
    };
  };
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (outColor_4, spColor_79, vec4(xlat_mutable_SPIntensity));
  spColor_79 = tmpvar_89;
  outColor_4 = spColor_79;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_90;
    scrpos_90 = xlv_TEXCOORD3;
    mediump float a_91;
    a_91 = xlv_TEXCOORD3.z;
    if ((a_91 < 0.95)) {
      scrpos_90.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_91 = (a_91 * 17.0);
      highp float tmpvar_92;
      tmpvar_92 = (scrpos_90.y / 4.0);
      highp float tmpvar_93;
      tmpvar_93 = (fract(abs(tmpvar_92)) * 4.0);
      highp float tmpvar_94;
      if ((tmpvar_92 >= 0.0)) {
        tmpvar_94 = tmpvar_93;
      } else {
        tmpvar_94 = -(tmpvar_93);
      };
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_90.x / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float x_98;
      x_98 = ((a_91 - _DITHERMATRIX[
        int(tmpvar_94)
      ][
        int(tmpvar_97)
      ]) - 0.01);
      if ((x_98 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_79.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_75;
  mediump vec3 R_76;
  mediump float intensity_77;
  mediump vec4 noiseTex_78;
  mediump vec4 spColor_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_79 = tmpvar_80;
  spColor_79.w = (spColor_79.w * _SPOpaqueness);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_78 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((1.99 * tmpvar_81.x) * _SPNoiseScaler) - 1.0);
  intensity_77 = tmpvar_82;
  highp vec3 tmpvar_83;
  highp vec3 I_84;
  I_84 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_78 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_83 = (I_84 - (2.0 * (
    dot (tmpvar_67, I_84)
   * tmpvar_67)));
  R_76 = tmpvar_83;
  lowp vec3 tmpvar_85;
  tmpvar_85 = textureCube (_SPCubeMap, R_76).xyz;
  reflection_75 = tmpvar_85;
  highp vec3 tmpvar_86;
  mediump vec3 x_87;
  x_87 = (spColor_79.xyz * _SPOldColor.xyz);
  tmpvar_86 = mix (x_87, ((reflection_75 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_79.xyz = tmpvar_86;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_77 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_77 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_88;
      tmpvar_88 = mix (spColor_79.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_77) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_79.xyz = tmpvar_88;
    };
  };
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (outColor_4, spColor_79, vec4(xlat_mutable_SPIntensity));
  spColor_79 = tmpvar_89;
  outColor_4 = spColor_79;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_90;
    scrpos_90 = xlv_TEXCOORD3;
    mediump float a_91;
    a_91 = xlv_TEXCOORD3.z;
    if ((a_91 < 0.95)) {
      scrpos_90.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_91 = (a_91 * 17.0);
      highp float tmpvar_92;
      tmpvar_92 = (scrpos_90.y / 4.0);
      highp float tmpvar_93;
      tmpvar_93 = (fract(abs(tmpvar_92)) * 4.0);
      highp float tmpvar_94;
      if ((tmpvar_92 >= 0.0)) {
        tmpvar_94 = tmpvar_93;
      } else {
        tmpvar_94 = -(tmpvar_93);
      };
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_90.x / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float x_98;
      x_98 = ((a_91 - _DITHERMATRIX[
        int(tmpvar_94)
      ][
        int(tmpvar_97)
      ]) - 0.01);
      if ((x_98 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_79.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_75;
  mediump vec3 R_76;
  mediump float intensity_77;
  mediump vec4 noiseTex_78;
  mediump vec4 spColor_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_79 = tmpvar_80;
  spColor_79.w = (spColor_79.w * _SPOpaqueness);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_78 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((1.99 * tmpvar_81.x) * _SPNoiseScaler) - 1.0);
  intensity_77 = tmpvar_82;
  highp vec3 tmpvar_83;
  highp vec3 I_84;
  I_84 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_78 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_83 = (I_84 - (2.0 * (
    dot (tmpvar_67, I_84)
   * tmpvar_67)));
  R_76 = tmpvar_83;
  lowp vec3 tmpvar_85;
  tmpvar_85 = textureCube (_SPCubeMap, R_76).xyz;
  reflection_75 = tmpvar_85;
  highp vec3 tmpvar_86;
  mediump vec3 x_87;
  x_87 = (spColor_79.xyz * _SPOldColor.xyz);
  tmpvar_86 = mix (x_87, ((reflection_75 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_79.xyz = tmpvar_86;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_77 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_77 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_88;
      tmpvar_88 = mix (spColor_79.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_77) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_79.xyz = tmpvar_88;
    };
  };
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (outColor_4, spColor_79, vec4(xlat_mutable_SPIntensity));
  spColor_79 = tmpvar_89;
  outColor_4 = spColor_79;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_90;
    scrpos_90 = xlv_TEXCOORD3;
    mediump float a_91;
    a_91 = xlv_TEXCOORD3.z;
    if ((a_91 < 0.95)) {
      scrpos_90.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_91 = (a_91 * 17.0);
      highp float tmpvar_92;
      tmpvar_92 = (scrpos_90.y / 4.0);
      highp float tmpvar_93;
      tmpvar_93 = (fract(abs(tmpvar_92)) * 4.0);
      highp float tmpvar_94;
      if ((tmpvar_92 >= 0.0)) {
        tmpvar_94 = tmpvar_93;
      } else {
        tmpvar_94 = -(tmpvar_93);
      };
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_90.x / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float x_98;
      x_98 = ((a_91 - _DITHERMATRIX[
        int(tmpvar_94)
      ][
        int(tmpvar_97)
      ]) - 0.01);
      if ((x_98 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_79.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_14;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_14;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_14;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_14;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_14;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_14;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (tmpvar_24, I_41)
   * tmpvar_24)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_4, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_4.w = spColor_36.w;
  mediump vec3 tmpvar_47;
  highp vec3 N_48;
  N_48 = tmpvar_24;
  highp vec3 V_49;
  V_49 = V_2;
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = pow (clamp ((1.001 - 
    dot (V_49, N_48)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_50 = (_RGBias + (tmpvar_51 * _RGScale));
  mediump vec3 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * _RGColor).xyz;
  mediump float tmpvar_53;
  tmpvar_53 = clamp (tmpvar_50, 0.0, 1.0);
  highp vec3 tmpvar_54;
  tmpvar_54 = mix (spColor_36.xyz, tmpvar_52, vec3((tmpvar_53 * _RGRatio)));
  tmpvar_47 = tmpvar_54;
  outColor_4.xyz = tmpvar_47;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_55;
    scrpos_55 = xlv_TEXCOORD3;
    mediump float a_56;
    a_56 = xlv_TEXCOORD3.z;
    if ((a_56 < 0.95)) {
      scrpos_55.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_56 = (a_56 * 17.0);
      highp float tmpvar_57;
      tmpvar_57 = (scrpos_55.y / 4.0);
      highp float tmpvar_58;
      tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
      highp float tmpvar_59;
      if ((tmpvar_57 >= 0.0)) {
        tmpvar_59 = tmpvar_58;
      } else {
        tmpvar_59 = -(tmpvar_58);
      };
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_55.x / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float x_63;
      x_63 = ((a_56 - _DITHERMATRIX[
        int(tmpvar_59)
      ][
        int(tmpvar_62)
      ]) - 0.01);
      if ((x_63 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_36.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (tmpvar_24, I_41)
   * tmpvar_24)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_4, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_4.w = spColor_36.w;
  mediump vec3 tmpvar_47;
  highp vec3 N_48;
  N_48 = tmpvar_24;
  highp vec3 V_49;
  V_49 = V_2;
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = pow (clamp ((1.001 - 
    dot (V_49, N_48)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_50 = (_RGBias + (tmpvar_51 * _RGScale));
  mediump vec3 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * _RGColor).xyz;
  mediump float tmpvar_53;
  tmpvar_53 = clamp (tmpvar_50, 0.0, 1.0);
  highp vec3 tmpvar_54;
  tmpvar_54 = mix (spColor_36.xyz, tmpvar_52, vec3((tmpvar_53 * _RGRatio)));
  tmpvar_47 = tmpvar_54;
  outColor_4.xyz = tmpvar_47;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_55;
    scrpos_55 = xlv_TEXCOORD3;
    mediump float a_56;
    a_56 = xlv_TEXCOORD3.z;
    if ((a_56 < 0.95)) {
      scrpos_55.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_56 = (a_56 * 17.0);
      highp float tmpvar_57;
      tmpvar_57 = (scrpos_55.y / 4.0);
      highp float tmpvar_58;
      tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
      highp float tmpvar_59;
      if ((tmpvar_57 >= 0.0)) {
        tmpvar_59 = tmpvar_58;
      } else {
        tmpvar_59 = -(tmpvar_58);
      };
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_55.x / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float x_63;
      x_63 = ((a_56 - _DITHERMATRIX[
        int(tmpvar_59)
      ][
        int(tmpvar_62)
      ]) - 0.01);
      if ((x_63 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_36.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (tmpvar_24, I_41)
   * tmpvar_24)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_4, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_4.w = spColor_36.w;
  mediump vec3 tmpvar_47;
  highp vec3 N_48;
  N_48 = tmpvar_24;
  highp vec3 V_49;
  V_49 = V_2;
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = pow (clamp ((1.001 - 
    dot (V_49, N_48)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_50 = (_RGBias + (tmpvar_51 * _RGScale));
  mediump vec3 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * _RGColor).xyz;
  mediump float tmpvar_53;
  tmpvar_53 = clamp (tmpvar_50, 0.0, 1.0);
  highp vec3 tmpvar_54;
  tmpvar_54 = mix (spColor_36.xyz, tmpvar_52, vec3((tmpvar_53 * _RGRatio)));
  tmpvar_47 = tmpvar_54;
  outColor_4.xyz = tmpvar_47;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_55;
    scrpos_55 = xlv_TEXCOORD3;
    mediump float a_56;
    a_56 = xlv_TEXCOORD3.z;
    if ((a_56 < 0.95)) {
      scrpos_55.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_56 = (a_56 * 17.0);
      highp float tmpvar_57;
      tmpvar_57 = (scrpos_55.y / 4.0);
      highp float tmpvar_58;
      tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
      highp float tmpvar_59;
      if ((tmpvar_57 >= 0.0)) {
        tmpvar_59 = tmpvar_58;
      } else {
        tmpvar_59 = -(tmpvar_58);
      };
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_55.x / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float x_63;
      x_63 = ((a_56 - _DITHERMATRIX[
        int(tmpvar_59)
      ][
        int(tmpvar_62)
      ]) - 0.01);
      if ((x_63 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_36.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_75;
  mediump vec3 R_76;
  mediump float intensity_77;
  mediump vec4 noiseTex_78;
  mediump vec4 spColor_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_79 = tmpvar_80;
  spColor_79.w = (spColor_79.w * _SPOpaqueness);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_78 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((1.99 * tmpvar_81.x) * _SPNoiseScaler) - 1.0);
  intensity_77 = tmpvar_82;
  highp vec3 tmpvar_83;
  highp vec3 I_84;
  I_84 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_78 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_83 = (I_84 - (2.0 * (
    dot (tmpvar_67, I_84)
   * tmpvar_67)));
  R_76 = tmpvar_83;
  lowp vec3 tmpvar_85;
  tmpvar_85 = textureCube (_SPCubeMap, R_76).xyz;
  reflection_75 = tmpvar_85;
  highp vec3 tmpvar_86;
  mediump vec3 x_87;
  x_87 = (spColor_79.xyz * _SPOldColor.xyz);
  tmpvar_86 = mix (x_87, ((reflection_75 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_79.xyz = tmpvar_86;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_77 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_77 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_88;
      tmpvar_88 = mix (spColor_79.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_77) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_79.xyz = tmpvar_88;
    };
  };
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (outColor_4, spColor_79, vec4(xlat_mutable_SPIntensity));
  spColor_79 = tmpvar_89;
  outColor_4.w = spColor_79.w;
  mediump vec3 tmpvar_90;
  highp vec3 N_91;
  N_91 = tmpvar_67;
  highp vec3 V_92;
  V_92 = V_2;
  mediump float tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = pow (clamp ((1.001 - 
    dot (V_92, N_91)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_93 = (_RGBias + (tmpvar_94 * _RGScale));
  mediump vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_93 * _RGColor).xyz;
  mediump float tmpvar_96;
  tmpvar_96 = clamp (tmpvar_93, 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = mix (spColor_79.xyz, tmpvar_95, vec3((tmpvar_96 * _RGRatio)));
  tmpvar_90 = tmpvar_97;
  outColor_4.xyz = tmpvar_90;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_98;
    scrpos_98 = xlv_TEXCOORD3;
    mediump float a_99;
    a_99 = xlv_TEXCOORD3.z;
    if ((a_99 < 0.95)) {
      scrpos_98.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_99 = (a_99 * 17.0);
      highp float tmpvar_100;
      tmpvar_100 = (scrpos_98.y / 4.0);
      highp float tmpvar_101;
      tmpvar_101 = (fract(abs(tmpvar_100)) * 4.0);
      highp float tmpvar_102;
      if ((tmpvar_100 >= 0.0)) {
        tmpvar_102 = tmpvar_101;
      } else {
        tmpvar_102 = -(tmpvar_101);
      };
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_98.x / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float x_106;
      x_106 = ((a_99 - _DITHERMATRIX[
        int(tmpvar_102)
      ][
        int(tmpvar_105)
      ]) - 0.01);
      if ((x_106 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_79.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_75;
  mediump vec3 R_76;
  mediump float intensity_77;
  mediump vec4 noiseTex_78;
  mediump vec4 spColor_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_79 = tmpvar_80;
  spColor_79.w = (spColor_79.w * _SPOpaqueness);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_78 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((1.99 * tmpvar_81.x) * _SPNoiseScaler) - 1.0);
  intensity_77 = tmpvar_82;
  highp vec3 tmpvar_83;
  highp vec3 I_84;
  I_84 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_78 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_83 = (I_84 - (2.0 * (
    dot (tmpvar_67, I_84)
   * tmpvar_67)));
  R_76 = tmpvar_83;
  lowp vec3 tmpvar_85;
  tmpvar_85 = textureCube (_SPCubeMap, R_76).xyz;
  reflection_75 = tmpvar_85;
  highp vec3 tmpvar_86;
  mediump vec3 x_87;
  x_87 = (spColor_79.xyz * _SPOldColor.xyz);
  tmpvar_86 = mix (x_87, ((reflection_75 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_79.xyz = tmpvar_86;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_77 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_77 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_88;
      tmpvar_88 = mix (spColor_79.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_77) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_79.xyz = tmpvar_88;
    };
  };
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (outColor_4, spColor_79, vec4(xlat_mutable_SPIntensity));
  spColor_79 = tmpvar_89;
  outColor_4.w = spColor_79.w;
  mediump vec3 tmpvar_90;
  highp vec3 N_91;
  N_91 = tmpvar_67;
  highp vec3 V_92;
  V_92 = V_2;
  mediump float tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = pow (clamp ((1.001 - 
    dot (V_92, N_91)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_93 = (_RGBias + (tmpvar_94 * _RGScale));
  mediump vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_93 * _RGColor).xyz;
  mediump float tmpvar_96;
  tmpvar_96 = clamp (tmpvar_93, 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = mix (spColor_79.xyz, tmpvar_95, vec3((tmpvar_96 * _RGRatio)));
  tmpvar_90 = tmpvar_97;
  outColor_4.xyz = tmpvar_90;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_98;
    scrpos_98 = xlv_TEXCOORD3;
    mediump float a_99;
    a_99 = xlv_TEXCOORD3.z;
    if ((a_99 < 0.95)) {
      scrpos_98.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_99 = (a_99 * 17.0);
      highp float tmpvar_100;
      tmpvar_100 = (scrpos_98.y / 4.0);
      highp float tmpvar_101;
      tmpvar_101 = (fract(abs(tmpvar_100)) * 4.0);
      highp float tmpvar_102;
      if ((tmpvar_100 >= 0.0)) {
        tmpvar_102 = tmpvar_101;
      } else {
        tmpvar_102 = -(tmpvar_101);
      };
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_98.x / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float x_106;
      x_106 = ((a_99 - _DITHERMATRIX[
        int(tmpvar_102)
      ][
        int(tmpvar_105)
      ]) - 0.01);
      if ((x_106 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_79.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_75;
  mediump vec3 R_76;
  mediump float intensity_77;
  mediump vec4 noiseTex_78;
  mediump vec4 spColor_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_79 = tmpvar_80;
  spColor_79.w = (spColor_79.w * _SPOpaqueness);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_78 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((1.99 * tmpvar_81.x) * _SPNoiseScaler) - 1.0);
  intensity_77 = tmpvar_82;
  highp vec3 tmpvar_83;
  highp vec3 I_84;
  I_84 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_78 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_83 = (I_84 - (2.0 * (
    dot (tmpvar_67, I_84)
   * tmpvar_67)));
  R_76 = tmpvar_83;
  lowp vec3 tmpvar_85;
  tmpvar_85 = textureCube (_SPCubeMap, R_76).xyz;
  reflection_75 = tmpvar_85;
  highp vec3 tmpvar_86;
  mediump vec3 x_87;
  x_87 = (spColor_79.xyz * _SPOldColor.xyz);
  tmpvar_86 = mix (x_87, ((reflection_75 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_79.xyz = tmpvar_86;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_77 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_77 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_88;
      tmpvar_88 = mix (spColor_79.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_77) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_79.xyz = tmpvar_88;
    };
  };
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (outColor_4, spColor_79, vec4(xlat_mutable_SPIntensity));
  spColor_79 = tmpvar_89;
  outColor_4.w = spColor_79.w;
  mediump vec3 tmpvar_90;
  highp vec3 N_91;
  N_91 = tmpvar_67;
  highp vec3 V_92;
  V_92 = V_2;
  mediump float tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = pow (clamp ((1.001 - 
    dot (V_92, N_91)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_93 = (_RGBias + (tmpvar_94 * _RGScale));
  mediump vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_93 * _RGColor).xyz;
  mediump float tmpvar_96;
  tmpvar_96 = clamp (tmpvar_93, 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = mix (spColor_79.xyz, tmpvar_95, vec3((tmpvar_96 * _RGRatio)));
  tmpvar_90 = tmpvar_97;
  outColor_4.xyz = tmpvar_90;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_98;
    scrpos_98 = xlv_TEXCOORD3;
    mediump float a_99;
    a_99 = xlv_TEXCOORD3.z;
    if ((a_99 < 0.95)) {
      scrpos_98.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_99 = (a_99 * 17.0);
      highp float tmpvar_100;
      tmpvar_100 = (scrpos_98.y / 4.0);
      highp float tmpvar_101;
      tmpvar_101 = (fract(abs(tmpvar_100)) * 4.0);
      highp float tmpvar_102;
      if ((tmpvar_100 >= 0.0)) {
        tmpvar_102 = tmpvar_101;
      } else {
        tmpvar_102 = -(tmpvar_101);
      };
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_98.x / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float x_106;
      x_106 = ((a_99 - _DITHERMATRIX[
        int(tmpvar_102)
      ][
        int(tmpvar_105)
      ]) - 0.01);
      if ((x_106 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_79.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_75;
    scrpos_75 = xlv_TEXCOORD3;
    mediump float a_76;
    a_76 = xlv_TEXCOORD3.z;
    if ((a_76 < 0.95)) {
      scrpos_75.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_76 = (a_76 * 17.0);
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_75.y / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_75.x / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float x_83;
      x_83 = ((a_76 - _DITHERMATRIX[
        int(tmpvar_79)
      ][
        int(tmpvar_82)
      ]) - 0.01);
      if ((x_83 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_75;
    scrpos_75 = xlv_TEXCOORD3;
    mediump float a_76;
    a_76 = xlv_TEXCOORD3.z;
    if ((a_76 < 0.95)) {
      scrpos_75.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_76 = (a_76 * 17.0);
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_75.y / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_75.x / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float x_83;
      x_83 = ((a_76 - _DITHERMATRIX[
        int(tmpvar_79)
      ][
        int(tmpvar_82)
      ]) - 0.01);
      if ((x_83 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_75;
    scrpos_75 = xlv_TEXCOORD3;
    mediump float a_76;
    a_76 = xlv_TEXCOORD3.z;
    if ((a_76 < 0.95)) {
      scrpos_75.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_76 = (a_76 * 17.0);
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_75.y / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_75.x / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float x_83;
      x_83 = ((a_76 - _DITHERMATRIX[
        int(tmpvar_79)
      ][
        int(tmpvar_82)
      ]) - 0.01);
      if ((x_83 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_14;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_14;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_14;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_14;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_14;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_14;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = tmpvar_24;
  highp vec3 V_34;
  V_34 = V_2;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (outColor_4.xyz, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_4.xyz = tmpvar_32;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = tmpvar_24;
  highp vec3 V_34;
  V_34 = V_2;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (outColor_4.xyz, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_4.xyz = tmpvar_32;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = tmpvar_24;
  highp vec3 V_34;
  V_34 = V_2;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (outColor_4.xyz, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_4.xyz = tmpvar_32;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 tmpvar_75;
  highp vec3 N_76;
  N_76 = tmpvar_67;
  highp vec3 V_77;
  V_77 = V_2;
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = pow (clamp ((1.001 - 
    dot (V_77, N_76)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_78 = (_RGBias + (tmpvar_79 * _RGScale));
  mediump vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_78 * _RGColor).xyz;
  mediump float tmpvar_81;
  tmpvar_81 = clamp (tmpvar_78, 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (outColor_4.xyz, tmpvar_80, vec3((tmpvar_81 * _RGRatio)));
  tmpvar_75 = tmpvar_82;
  outColor_4.xyz = tmpvar_75;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD3;
    mediump float a_84;
    a_84 = xlv_TEXCOORD3.z;
    if ((a_84 < 0.95)) {
      scrpos_83.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.y / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_83.x / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float x_91;
      x_91 = ((a_84 - _DITHERMATRIX[
        int(tmpvar_87)
      ][
        int(tmpvar_90)
      ]) - 0.01);
      if ((x_91 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 tmpvar_75;
  highp vec3 N_76;
  N_76 = tmpvar_67;
  highp vec3 V_77;
  V_77 = V_2;
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = pow (clamp ((1.001 - 
    dot (V_77, N_76)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_78 = (_RGBias + (tmpvar_79 * _RGScale));
  mediump vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_78 * _RGColor).xyz;
  mediump float tmpvar_81;
  tmpvar_81 = clamp (tmpvar_78, 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (outColor_4.xyz, tmpvar_80, vec3((tmpvar_81 * _RGRatio)));
  tmpvar_75 = tmpvar_82;
  outColor_4.xyz = tmpvar_75;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD3;
    mediump float a_84;
    a_84 = xlv_TEXCOORD3.z;
    if ((a_84 < 0.95)) {
      scrpos_83.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.y / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_83.x / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float x_91;
      x_91 = ((a_84 - _DITHERMATRIX[
        int(tmpvar_87)
      ][
        int(tmpvar_90)
      ]) - 0.01);
      if ((x_91 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 tmpvar_75;
  highp vec3 N_76;
  N_76 = tmpvar_67;
  highp vec3 V_77;
  V_77 = V_2;
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = pow (clamp ((1.001 - 
    dot (V_77, N_76)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_78 = (_RGBias + (tmpvar_79 * _RGScale));
  mediump vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_78 * _RGColor).xyz;
  mediump float tmpvar_81;
  tmpvar_81 = clamp (tmpvar_78, 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (outColor_4.xyz, tmpvar_80, vec3((tmpvar_81 * _RGRatio)));
  tmpvar_75 = tmpvar_82;
  outColor_4.xyz = tmpvar_75;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD3;
    mediump float a_84;
    a_84 = xlv_TEXCOORD3.z;
    if ((a_84 < 0.95)) {
      scrpos_83.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.y / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_83.x / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float x_91;
      x_91 = ((a_84 - _DITHERMATRIX[
        int(tmpvar_87)
      ][
        int(tmpvar_90)
      ]) - 0.01);
      if ((x_91 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (tmpvar_24, I_41)
   * tmpvar_24)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_4, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_4 = spColor_36;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_47;
    scrpos_47 = xlv_TEXCOORD3;
    mediump float a_48;
    a_48 = xlv_TEXCOORD3.z;
    if ((a_48 < 0.95)) {
      scrpos_47.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_48 = (a_48 * 17.0);
      highp float tmpvar_49;
      tmpvar_49 = (scrpos_47.y / 4.0);
      highp float tmpvar_50;
      tmpvar_50 = (fract(abs(tmpvar_49)) * 4.0);
      highp float tmpvar_51;
      if ((tmpvar_49 >= 0.0)) {
        tmpvar_51 = tmpvar_50;
      } else {
        tmpvar_51 = -(tmpvar_50);
      };
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_47.x / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float x_55;
      x_55 = ((a_48 - _DITHERMATRIX[
        int(tmpvar_51)
      ][
        int(tmpvar_54)
      ]) - 0.01);
      if ((x_55 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_36.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (tmpvar_24, I_41)
   * tmpvar_24)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_4, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_4 = spColor_36;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_47;
    scrpos_47 = xlv_TEXCOORD3;
    mediump float a_48;
    a_48 = xlv_TEXCOORD3.z;
    if ((a_48 < 0.95)) {
      scrpos_47.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_48 = (a_48 * 17.0);
      highp float tmpvar_49;
      tmpvar_49 = (scrpos_47.y / 4.0);
      highp float tmpvar_50;
      tmpvar_50 = (fract(abs(tmpvar_49)) * 4.0);
      highp float tmpvar_51;
      if ((tmpvar_49 >= 0.0)) {
        tmpvar_51 = tmpvar_50;
      } else {
        tmpvar_51 = -(tmpvar_50);
      };
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_47.x / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float x_55;
      x_55 = ((a_48 - _DITHERMATRIX[
        int(tmpvar_51)
      ][
        int(tmpvar_54)
      ]) - 0.01);
      if ((x_55 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_36.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (tmpvar_24, I_41)
   * tmpvar_24)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_4, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_4 = spColor_36;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_47;
    scrpos_47 = xlv_TEXCOORD3;
    mediump float a_48;
    a_48 = xlv_TEXCOORD3.z;
    if ((a_48 < 0.95)) {
      scrpos_47.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_48 = (a_48 * 17.0);
      highp float tmpvar_49;
      tmpvar_49 = (scrpos_47.y / 4.0);
      highp float tmpvar_50;
      tmpvar_50 = (fract(abs(tmpvar_49)) * 4.0);
      highp float tmpvar_51;
      if ((tmpvar_49 >= 0.0)) {
        tmpvar_51 = tmpvar_50;
      } else {
        tmpvar_51 = -(tmpvar_50);
      };
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_47.x / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float x_55;
      x_55 = ((a_48 - _DITHERMATRIX[
        int(tmpvar_51)
      ][
        int(tmpvar_54)
      ]) - 0.01);
      if ((x_55 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_36.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_75;
  mediump vec3 R_76;
  mediump float intensity_77;
  mediump vec4 noiseTex_78;
  mediump vec4 spColor_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_79 = tmpvar_80;
  spColor_79.w = (spColor_79.w * _SPOpaqueness);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_78 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((1.99 * tmpvar_81.x) * _SPNoiseScaler) - 1.0);
  intensity_77 = tmpvar_82;
  highp vec3 tmpvar_83;
  highp vec3 I_84;
  I_84 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_78 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_83 = (I_84 - (2.0 * (
    dot (tmpvar_67, I_84)
   * tmpvar_67)));
  R_76 = tmpvar_83;
  lowp vec3 tmpvar_85;
  tmpvar_85 = textureCube (_SPCubeMap, R_76).xyz;
  reflection_75 = tmpvar_85;
  highp vec3 tmpvar_86;
  mediump vec3 x_87;
  x_87 = (spColor_79.xyz * _SPOldColor.xyz);
  tmpvar_86 = mix (x_87, ((reflection_75 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_79.xyz = tmpvar_86;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_77 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_77 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_88;
      tmpvar_88 = mix (spColor_79.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_77) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_79.xyz = tmpvar_88;
    };
  };
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (outColor_4, spColor_79, vec4(xlat_mutable_SPIntensity));
  spColor_79 = tmpvar_89;
  outColor_4 = spColor_79;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_90;
    scrpos_90 = xlv_TEXCOORD3;
    mediump float a_91;
    a_91 = xlv_TEXCOORD3.z;
    if ((a_91 < 0.95)) {
      scrpos_90.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_91 = (a_91 * 17.0);
      highp float tmpvar_92;
      tmpvar_92 = (scrpos_90.y / 4.0);
      highp float tmpvar_93;
      tmpvar_93 = (fract(abs(tmpvar_92)) * 4.0);
      highp float tmpvar_94;
      if ((tmpvar_92 >= 0.0)) {
        tmpvar_94 = tmpvar_93;
      } else {
        tmpvar_94 = -(tmpvar_93);
      };
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_90.x / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float x_98;
      x_98 = ((a_91 - _DITHERMATRIX[
        int(tmpvar_94)
      ][
        int(tmpvar_97)
      ]) - 0.01);
      if ((x_98 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_79.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_75;
  mediump vec3 R_76;
  mediump float intensity_77;
  mediump vec4 noiseTex_78;
  mediump vec4 spColor_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_79 = tmpvar_80;
  spColor_79.w = (spColor_79.w * _SPOpaqueness);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_78 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((1.99 * tmpvar_81.x) * _SPNoiseScaler) - 1.0);
  intensity_77 = tmpvar_82;
  highp vec3 tmpvar_83;
  highp vec3 I_84;
  I_84 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_78 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_83 = (I_84 - (2.0 * (
    dot (tmpvar_67, I_84)
   * tmpvar_67)));
  R_76 = tmpvar_83;
  lowp vec3 tmpvar_85;
  tmpvar_85 = textureCube (_SPCubeMap, R_76).xyz;
  reflection_75 = tmpvar_85;
  highp vec3 tmpvar_86;
  mediump vec3 x_87;
  x_87 = (spColor_79.xyz * _SPOldColor.xyz);
  tmpvar_86 = mix (x_87, ((reflection_75 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_79.xyz = tmpvar_86;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_77 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_77 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_88;
      tmpvar_88 = mix (spColor_79.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_77) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_79.xyz = tmpvar_88;
    };
  };
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (outColor_4, spColor_79, vec4(xlat_mutable_SPIntensity));
  spColor_79 = tmpvar_89;
  outColor_4 = spColor_79;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_90;
    scrpos_90 = xlv_TEXCOORD3;
    mediump float a_91;
    a_91 = xlv_TEXCOORD3.z;
    if ((a_91 < 0.95)) {
      scrpos_90.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_91 = (a_91 * 17.0);
      highp float tmpvar_92;
      tmpvar_92 = (scrpos_90.y / 4.0);
      highp float tmpvar_93;
      tmpvar_93 = (fract(abs(tmpvar_92)) * 4.0);
      highp float tmpvar_94;
      if ((tmpvar_92 >= 0.0)) {
        tmpvar_94 = tmpvar_93;
      } else {
        tmpvar_94 = -(tmpvar_93);
      };
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_90.x / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float x_98;
      x_98 = ((a_91 - _DITHERMATRIX[
        int(tmpvar_94)
      ][
        int(tmpvar_97)
      ]) - 0.01);
      if ((x_98 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_79.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_75;
  mediump vec3 R_76;
  mediump float intensity_77;
  mediump vec4 noiseTex_78;
  mediump vec4 spColor_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_79 = tmpvar_80;
  spColor_79.w = (spColor_79.w * _SPOpaqueness);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_78 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((1.99 * tmpvar_81.x) * _SPNoiseScaler) - 1.0);
  intensity_77 = tmpvar_82;
  highp vec3 tmpvar_83;
  highp vec3 I_84;
  I_84 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_78 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_83 = (I_84 - (2.0 * (
    dot (tmpvar_67, I_84)
   * tmpvar_67)));
  R_76 = tmpvar_83;
  lowp vec3 tmpvar_85;
  tmpvar_85 = textureCube (_SPCubeMap, R_76).xyz;
  reflection_75 = tmpvar_85;
  highp vec3 tmpvar_86;
  mediump vec3 x_87;
  x_87 = (spColor_79.xyz * _SPOldColor.xyz);
  tmpvar_86 = mix (x_87, ((reflection_75 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_79.xyz = tmpvar_86;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_77 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_77 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_88;
      tmpvar_88 = mix (spColor_79.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_77) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_79.xyz = tmpvar_88;
    };
  };
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (outColor_4, spColor_79, vec4(xlat_mutable_SPIntensity));
  spColor_79 = tmpvar_89;
  outColor_4 = spColor_79;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_90;
    scrpos_90 = xlv_TEXCOORD3;
    mediump float a_91;
    a_91 = xlv_TEXCOORD3.z;
    if ((a_91 < 0.95)) {
      scrpos_90.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_91 = (a_91 * 17.0);
      highp float tmpvar_92;
      tmpvar_92 = (scrpos_90.y / 4.0);
      highp float tmpvar_93;
      tmpvar_93 = (fract(abs(tmpvar_92)) * 4.0);
      highp float tmpvar_94;
      if ((tmpvar_92 >= 0.0)) {
        tmpvar_94 = tmpvar_93;
      } else {
        tmpvar_94 = -(tmpvar_93);
      };
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_90.x / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float x_98;
      x_98 = ((a_91 - _DITHERMATRIX[
        int(tmpvar_94)
      ][
        int(tmpvar_97)
      ]) - 0.01);
      if ((x_98 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_79.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_14;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_14;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_14;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_14;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_14;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_14;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (tmpvar_24, I_41)
   * tmpvar_24)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_4, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_4.w = spColor_36.w;
  mediump vec3 tmpvar_47;
  highp vec3 N_48;
  N_48 = tmpvar_24;
  highp vec3 V_49;
  V_49 = V_2;
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = pow (clamp ((1.001 - 
    dot (V_49, N_48)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_50 = (_RGBias + (tmpvar_51 * _RGScale));
  mediump vec3 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * _RGColor).xyz;
  mediump float tmpvar_53;
  tmpvar_53 = clamp (tmpvar_50, 0.0, 1.0);
  highp vec3 tmpvar_54;
  tmpvar_54 = mix (spColor_36.xyz, tmpvar_52, vec3((tmpvar_53 * _RGRatio)));
  tmpvar_47 = tmpvar_54;
  outColor_4.xyz = tmpvar_47;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_55;
    scrpos_55 = xlv_TEXCOORD3;
    mediump float a_56;
    a_56 = xlv_TEXCOORD3.z;
    if ((a_56 < 0.95)) {
      scrpos_55.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_56 = (a_56 * 17.0);
      highp float tmpvar_57;
      tmpvar_57 = (scrpos_55.y / 4.0);
      highp float tmpvar_58;
      tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
      highp float tmpvar_59;
      if ((tmpvar_57 >= 0.0)) {
        tmpvar_59 = tmpvar_58;
      } else {
        tmpvar_59 = -(tmpvar_58);
      };
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_55.x / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float x_63;
      x_63 = ((a_56 - _DITHERMATRIX[
        int(tmpvar_59)
      ][
        int(tmpvar_62)
      ]) - 0.01);
      if ((x_63 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_36.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (tmpvar_24, I_41)
   * tmpvar_24)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_4, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_4.w = spColor_36.w;
  mediump vec3 tmpvar_47;
  highp vec3 N_48;
  N_48 = tmpvar_24;
  highp vec3 V_49;
  V_49 = V_2;
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = pow (clamp ((1.001 - 
    dot (V_49, N_48)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_50 = (_RGBias + (tmpvar_51 * _RGScale));
  mediump vec3 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * _RGColor).xyz;
  mediump float tmpvar_53;
  tmpvar_53 = clamp (tmpvar_50, 0.0, 1.0);
  highp vec3 tmpvar_54;
  tmpvar_54 = mix (spColor_36.xyz, tmpvar_52, vec3((tmpvar_53 * _RGRatio)));
  tmpvar_47 = tmpvar_54;
  outColor_4.xyz = tmpvar_47;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_55;
    scrpos_55 = xlv_TEXCOORD3;
    mediump float a_56;
    a_56 = xlv_TEXCOORD3.z;
    if ((a_56 < 0.95)) {
      scrpos_55.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_56 = (a_56 * 17.0);
      highp float tmpvar_57;
      tmpvar_57 = (scrpos_55.y / 4.0);
      highp float tmpvar_58;
      tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
      highp float tmpvar_59;
      if ((tmpvar_57 >= 0.0)) {
        tmpvar_59 = tmpvar_58;
      } else {
        tmpvar_59 = -(tmpvar_58);
      };
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_55.x / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float x_63;
      x_63 = ((a_56 - _DITHERMATRIX[
        int(tmpvar_59)
      ][
        int(tmpvar_62)
      ]) - 0.01);
      if ((x_63 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_36.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (tmpvar_24, I_41)
   * tmpvar_24)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_4, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_4.w = spColor_36.w;
  mediump vec3 tmpvar_47;
  highp vec3 N_48;
  N_48 = tmpvar_24;
  highp vec3 V_49;
  V_49 = V_2;
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = pow (clamp ((1.001 - 
    dot (V_49, N_48)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_50 = (_RGBias + (tmpvar_51 * _RGScale));
  mediump vec3 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * _RGColor).xyz;
  mediump float tmpvar_53;
  tmpvar_53 = clamp (tmpvar_50, 0.0, 1.0);
  highp vec3 tmpvar_54;
  tmpvar_54 = mix (spColor_36.xyz, tmpvar_52, vec3((tmpvar_53 * _RGRatio)));
  tmpvar_47 = tmpvar_54;
  outColor_4.xyz = tmpvar_47;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_55;
    scrpos_55 = xlv_TEXCOORD3;
    mediump float a_56;
    a_56 = xlv_TEXCOORD3.z;
    if ((a_56 < 0.95)) {
      scrpos_55.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_56 = (a_56 * 17.0);
      highp float tmpvar_57;
      tmpvar_57 = (scrpos_55.y / 4.0);
      highp float tmpvar_58;
      tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
      highp float tmpvar_59;
      if ((tmpvar_57 >= 0.0)) {
        tmpvar_59 = tmpvar_58;
      } else {
        tmpvar_59 = -(tmpvar_58);
      };
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_55.x / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float x_63;
      x_63 = ((a_56 - _DITHERMATRIX[
        int(tmpvar_59)
      ][
        int(tmpvar_62)
      ]) - 0.01);
      if ((x_63 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_36.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_75;
  mediump vec3 R_76;
  mediump float intensity_77;
  mediump vec4 noiseTex_78;
  mediump vec4 spColor_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_79 = tmpvar_80;
  spColor_79.w = (spColor_79.w * _SPOpaqueness);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_78 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((1.99 * tmpvar_81.x) * _SPNoiseScaler) - 1.0);
  intensity_77 = tmpvar_82;
  highp vec3 tmpvar_83;
  highp vec3 I_84;
  I_84 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_78 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_83 = (I_84 - (2.0 * (
    dot (tmpvar_67, I_84)
   * tmpvar_67)));
  R_76 = tmpvar_83;
  lowp vec3 tmpvar_85;
  tmpvar_85 = textureCube (_SPCubeMap, R_76).xyz;
  reflection_75 = tmpvar_85;
  highp vec3 tmpvar_86;
  mediump vec3 x_87;
  x_87 = (spColor_79.xyz * _SPOldColor.xyz);
  tmpvar_86 = mix (x_87, ((reflection_75 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_79.xyz = tmpvar_86;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_77 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_77 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_88;
      tmpvar_88 = mix (spColor_79.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_77) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_79.xyz = tmpvar_88;
    };
  };
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (outColor_4, spColor_79, vec4(xlat_mutable_SPIntensity));
  spColor_79 = tmpvar_89;
  outColor_4.w = spColor_79.w;
  mediump vec3 tmpvar_90;
  highp vec3 N_91;
  N_91 = tmpvar_67;
  highp vec3 V_92;
  V_92 = V_2;
  mediump float tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = pow (clamp ((1.001 - 
    dot (V_92, N_91)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_93 = (_RGBias + (tmpvar_94 * _RGScale));
  mediump vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_93 * _RGColor).xyz;
  mediump float tmpvar_96;
  tmpvar_96 = clamp (tmpvar_93, 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = mix (spColor_79.xyz, tmpvar_95, vec3((tmpvar_96 * _RGRatio)));
  tmpvar_90 = tmpvar_97;
  outColor_4.xyz = tmpvar_90;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_98;
    scrpos_98 = xlv_TEXCOORD3;
    mediump float a_99;
    a_99 = xlv_TEXCOORD3.z;
    if ((a_99 < 0.95)) {
      scrpos_98.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_99 = (a_99 * 17.0);
      highp float tmpvar_100;
      tmpvar_100 = (scrpos_98.y / 4.0);
      highp float tmpvar_101;
      tmpvar_101 = (fract(abs(tmpvar_100)) * 4.0);
      highp float tmpvar_102;
      if ((tmpvar_100 >= 0.0)) {
        tmpvar_102 = tmpvar_101;
      } else {
        tmpvar_102 = -(tmpvar_101);
      };
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_98.x / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float x_106;
      x_106 = ((a_99 - _DITHERMATRIX[
        int(tmpvar_102)
      ][
        int(tmpvar_105)
      ]) - 0.01);
      if ((x_106 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_79.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_75;
  mediump vec3 R_76;
  mediump float intensity_77;
  mediump vec4 noiseTex_78;
  mediump vec4 spColor_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_79 = tmpvar_80;
  spColor_79.w = (spColor_79.w * _SPOpaqueness);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_78 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((1.99 * tmpvar_81.x) * _SPNoiseScaler) - 1.0);
  intensity_77 = tmpvar_82;
  highp vec3 tmpvar_83;
  highp vec3 I_84;
  I_84 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_78 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_83 = (I_84 - (2.0 * (
    dot (tmpvar_67, I_84)
   * tmpvar_67)));
  R_76 = tmpvar_83;
  lowp vec3 tmpvar_85;
  tmpvar_85 = textureCube (_SPCubeMap, R_76).xyz;
  reflection_75 = tmpvar_85;
  highp vec3 tmpvar_86;
  mediump vec3 x_87;
  x_87 = (spColor_79.xyz * _SPOldColor.xyz);
  tmpvar_86 = mix (x_87, ((reflection_75 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_79.xyz = tmpvar_86;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_77 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_77 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_88;
      tmpvar_88 = mix (spColor_79.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_77) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_79.xyz = tmpvar_88;
    };
  };
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (outColor_4, spColor_79, vec4(xlat_mutable_SPIntensity));
  spColor_79 = tmpvar_89;
  outColor_4.w = spColor_79.w;
  mediump vec3 tmpvar_90;
  highp vec3 N_91;
  N_91 = tmpvar_67;
  highp vec3 V_92;
  V_92 = V_2;
  mediump float tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = pow (clamp ((1.001 - 
    dot (V_92, N_91)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_93 = (_RGBias + (tmpvar_94 * _RGScale));
  mediump vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_93 * _RGColor).xyz;
  mediump float tmpvar_96;
  tmpvar_96 = clamp (tmpvar_93, 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = mix (spColor_79.xyz, tmpvar_95, vec3((tmpvar_96 * _RGRatio)));
  tmpvar_90 = tmpvar_97;
  outColor_4.xyz = tmpvar_90;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_98;
    scrpos_98 = xlv_TEXCOORD3;
    mediump float a_99;
    a_99 = xlv_TEXCOORD3.z;
    if ((a_99 < 0.95)) {
      scrpos_98.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_99 = (a_99 * 17.0);
      highp float tmpvar_100;
      tmpvar_100 = (scrpos_98.y / 4.0);
      highp float tmpvar_101;
      tmpvar_101 = (fract(abs(tmpvar_100)) * 4.0);
      highp float tmpvar_102;
      if ((tmpvar_100 >= 0.0)) {
        tmpvar_102 = tmpvar_101;
      } else {
        tmpvar_102 = -(tmpvar_101);
      };
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_98.x / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float x_106;
      x_106 = ((a_99 - _DITHERMATRIX[
        int(tmpvar_102)
      ][
        int(tmpvar_105)
      ]) - 0.01);
      if ((x_106 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_79.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_75;
  mediump vec3 R_76;
  mediump float intensity_77;
  mediump vec4 noiseTex_78;
  mediump vec4 spColor_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_79 = tmpvar_80;
  spColor_79.w = (spColor_79.w * _SPOpaqueness);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_78 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((1.99 * tmpvar_81.x) * _SPNoiseScaler) - 1.0);
  intensity_77 = tmpvar_82;
  highp vec3 tmpvar_83;
  highp vec3 I_84;
  I_84 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_78 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_83 = (I_84 - (2.0 * (
    dot (tmpvar_67, I_84)
   * tmpvar_67)));
  R_76 = tmpvar_83;
  lowp vec3 tmpvar_85;
  tmpvar_85 = textureCube (_SPCubeMap, R_76).xyz;
  reflection_75 = tmpvar_85;
  highp vec3 tmpvar_86;
  mediump vec3 x_87;
  x_87 = (spColor_79.xyz * _SPOldColor.xyz);
  tmpvar_86 = mix (x_87, ((reflection_75 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_79.xyz = tmpvar_86;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_77 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_77 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_88;
      tmpvar_88 = mix (spColor_79.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_77) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_79.xyz = tmpvar_88;
    };
  };
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (outColor_4, spColor_79, vec4(xlat_mutable_SPIntensity));
  spColor_79 = tmpvar_89;
  outColor_4.w = spColor_79.w;
  mediump vec3 tmpvar_90;
  highp vec3 N_91;
  N_91 = tmpvar_67;
  highp vec3 V_92;
  V_92 = V_2;
  mediump float tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = pow (clamp ((1.001 - 
    dot (V_92, N_91)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_93 = (_RGBias + (tmpvar_94 * _RGScale));
  mediump vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_93 * _RGColor).xyz;
  mediump float tmpvar_96;
  tmpvar_96 = clamp (tmpvar_93, 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = mix (spColor_79.xyz, tmpvar_95, vec3((tmpvar_96 * _RGRatio)));
  tmpvar_90 = tmpvar_97;
  outColor_4.xyz = tmpvar_90;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_98;
    scrpos_98 = xlv_TEXCOORD3;
    mediump float a_99;
    a_99 = xlv_TEXCOORD3.z;
    if ((a_99 < 0.95)) {
      scrpos_98.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_99 = (a_99 * 17.0);
      highp float tmpvar_100;
      tmpvar_100 = (scrpos_98.y / 4.0);
      highp float tmpvar_101;
      tmpvar_101 = (fract(abs(tmpvar_100)) * 4.0);
      highp float tmpvar_102;
      if ((tmpvar_100 >= 0.0)) {
        tmpvar_102 = tmpvar_101;
      } else {
        tmpvar_102 = -(tmpvar_101);
      };
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_98.x / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float x_106;
      x_106 = ((a_99 - _DITHERMATRIX[
        int(tmpvar_102)
      ][
        int(tmpvar_105)
      ]) - 0.01);
      if ((x_106 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_79.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_75;
    scrpos_75 = xlv_TEXCOORD3;
    mediump float a_76;
    a_76 = xlv_TEXCOORD3.z;
    if ((a_76 < 0.95)) {
      scrpos_75.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_76 = (a_76 * 17.0);
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_75.y / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_75.x / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float x_83;
      x_83 = ((a_76 - _DITHERMATRIX[
        int(tmpvar_79)
      ][
        int(tmpvar_82)
      ]) - 0.01);
      if ((x_83 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_75;
    scrpos_75 = xlv_TEXCOORD3;
    mediump float a_76;
    a_76 = xlv_TEXCOORD3.z;
    if ((a_76 < 0.95)) {
      scrpos_75.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_76 = (a_76 * 17.0);
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_75.y / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_75.x / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float x_83;
      x_83 = ((a_76 - _DITHERMATRIX[
        int(tmpvar_79)
      ][
        int(tmpvar_82)
      ]) - 0.01);
      if ((x_83 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_75;
    scrpos_75 = xlv_TEXCOORD3;
    mediump float a_76;
    a_76 = xlv_TEXCOORD3.z;
    if ((a_76 < 0.95)) {
      scrpos_75.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_76 = (a_76 * 17.0);
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_75.y / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_75.x / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float x_83;
      x_83 = ((a_76 - _DITHERMATRIX[
        int(tmpvar_79)
      ][
        int(tmpvar_82)
      ]) - 0.01);
      if ((x_83 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_14;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_14;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_14;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_14;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_14;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_14;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = tmpvar_24;
  highp vec3 V_34;
  V_34 = V_2;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (outColor_4.xyz, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_4.xyz = tmpvar_32;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = tmpvar_24;
  highp vec3 V_34;
  V_34 = V_2;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (outColor_4.xyz, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_4.xyz = tmpvar_32;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = tmpvar_24;
  highp vec3 V_34;
  V_34 = V_2;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (outColor_4.xyz, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_4.xyz = tmpvar_32;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 tmpvar_75;
  highp vec3 N_76;
  N_76 = tmpvar_67;
  highp vec3 V_77;
  V_77 = V_2;
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = pow (clamp ((1.001 - 
    dot (V_77, N_76)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_78 = (_RGBias + (tmpvar_79 * _RGScale));
  mediump vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_78 * _RGColor).xyz;
  mediump float tmpvar_81;
  tmpvar_81 = clamp (tmpvar_78, 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (outColor_4.xyz, tmpvar_80, vec3((tmpvar_81 * _RGRatio)));
  tmpvar_75 = tmpvar_82;
  outColor_4.xyz = tmpvar_75;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD3;
    mediump float a_84;
    a_84 = xlv_TEXCOORD3.z;
    if ((a_84 < 0.95)) {
      scrpos_83.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.y / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_83.x / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float x_91;
      x_91 = ((a_84 - _DITHERMATRIX[
        int(tmpvar_87)
      ][
        int(tmpvar_90)
      ]) - 0.01);
      if ((x_91 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 tmpvar_75;
  highp vec3 N_76;
  N_76 = tmpvar_67;
  highp vec3 V_77;
  V_77 = V_2;
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = pow (clamp ((1.001 - 
    dot (V_77, N_76)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_78 = (_RGBias + (tmpvar_79 * _RGScale));
  mediump vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_78 * _RGColor).xyz;
  mediump float tmpvar_81;
  tmpvar_81 = clamp (tmpvar_78, 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (outColor_4.xyz, tmpvar_80, vec3((tmpvar_81 * _RGRatio)));
  tmpvar_75 = tmpvar_82;
  outColor_4.xyz = tmpvar_75;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD3;
    mediump float a_84;
    a_84 = xlv_TEXCOORD3.z;
    if ((a_84 < 0.95)) {
      scrpos_83.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.y / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_83.x / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float x_91;
      x_91 = ((a_84 - _DITHERMATRIX[
        int(tmpvar_87)
      ][
        int(tmpvar_90)
      ]) - 0.01);
      if ((x_91 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 tmpvar_75;
  highp vec3 N_76;
  N_76 = tmpvar_67;
  highp vec3 V_77;
  V_77 = V_2;
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = pow (clamp ((1.001 - 
    dot (V_77, N_76)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_78 = (_RGBias + (tmpvar_79 * _RGScale));
  mediump vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_78 * _RGColor).xyz;
  mediump float tmpvar_81;
  tmpvar_81 = clamp (tmpvar_78, 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (outColor_4.xyz, tmpvar_80, vec3((tmpvar_81 * _RGRatio)));
  tmpvar_75 = tmpvar_82;
  outColor_4.xyz = tmpvar_75;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD3;
    mediump float a_84;
    a_84 = xlv_TEXCOORD3.z;
    if ((a_84 < 0.95)) {
      scrpos_83.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.y / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_83.x / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float x_91;
      x_91 = ((a_84 - _DITHERMATRIX[
        int(tmpvar_87)
      ][
        int(tmpvar_90)
      ]) - 0.01);
      if ((x_91 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (tmpvar_24, I_41)
   * tmpvar_24)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_4, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_4 = spColor_36;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_47;
    scrpos_47 = xlv_TEXCOORD3;
    mediump float a_48;
    a_48 = xlv_TEXCOORD3.z;
    if ((a_48 < 0.95)) {
      scrpos_47.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_48 = (a_48 * 17.0);
      highp float tmpvar_49;
      tmpvar_49 = (scrpos_47.y / 4.0);
      highp float tmpvar_50;
      tmpvar_50 = (fract(abs(tmpvar_49)) * 4.0);
      highp float tmpvar_51;
      if ((tmpvar_49 >= 0.0)) {
        tmpvar_51 = tmpvar_50;
      } else {
        tmpvar_51 = -(tmpvar_50);
      };
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_47.x / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float x_55;
      x_55 = ((a_48 - _DITHERMATRIX[
        int(tmpvar_51)
      ][
        int(tmpvar_54)
      ]) - 0.01);
      if ((x_55 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_36.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (tmpvar_24, I_41)
   * tmpvar_24)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_4, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_4 = spColor_36;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_47;
    scrpos_47 = xlv_TEXCOORD3;
    mediump float a_48;
    a_48 = xlv_TEXCOORD3.z;
    if ((a_48 < 0.95)) {
      scrpos_47.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_48 = (a_48 * 17.0);
      highp float tmpvar_49;
      tmpvar_49 = (scrpos_47.y / 4.0);
      highp float tmpvar_50;
      tmpvar_50 = (fract(abs(tmpvar_49)) * 4.0);
      highp float tmpvar_51;
      if ((tmpvar_49 >= 0.0)) {
        tmpvar_51 = tmpvar_50;
      } else {
        tmpvar_51 = -(tmpvar_50);
      };
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_47.x / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float x_55;
      x_55 = ((a_48 - _DITHERMATRIX[
        int(tmpvar_51)
      ][
        int(tmpvar_54)
      ]) - 0.01);
      if ((x_55 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_36.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (tmpvar_24, I_41)
   * tmpvar_24)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_4, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_4 = spColor_36;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_47;
    scrpos_47 = xlv_TEXCOORD3;
    mediump float a_48;
    a_48 = xlv_TEXCOORD3.z;
    if ((a_48 < 0.95)) {
      scrpos_47.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_48 = (a_48 * 17.0);
      highp float tmpvar_49;
      tmpvar_49 = (scrpos_47.y / 4.0);
      highp float tmpvar_50;
      tmpvar_50 = (fract(abs(tmpvar_49)) * 4.0);
      highp float tmpvar_51;
      if ((tmpvar_49 >= 0.0)) {
        tmpvar_51 = tmpvar_50;
      } else {
        tmpvar_51 = -(tmpvar_50);
      };
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_47.x / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float x_55;
      x_55 = ((a_48 - _DITHERMATRIX[
        int(tmpvar_51)
      ][
        int(tmpvar_54)
      ]) - 0.01);
      if ((x_55 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_36.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_75;
  mediump vec3 R_76;
  mediump float intensity_77;
  mediump vec4 noiseTex_78;
  mediump vec4 spColor_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_79 = tmpvar_80;
  spColor_79.w = (spColor_79.w * _SPOpaqueness);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_78 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((1.99 * tmpvar_81.x) * _SPNoiseScaler) - 1.0);
  intensity_77 = tmpvar_82;
  highp vec3 tmpvar_83;
  highp vec3 I_84;
  I_84 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_78 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_83 = (I_84 - (2.0 * (
    dot (tmpvar_67, I_84)
   * tmpvar_67)));
  R_76 = tmpvar_83;
  lowp vec3 tmpvar_85;
  tmpvar_85 = textureCube (_SPCubeMap, R_76).xyz;
  reflection_75 = tmpvar_85;
  highp vec3 tmpvar_86;
  mediump vec3 x_87;
  x_87 = (spColor_79.xyz * _SPOldColor.xyz);
  tmpvar_86 = mix (x_87, ((reflection_75 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_79.xyz = tmpvar_86;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_77 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_77 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_88;
      tmpvar_88 = mix (spColor_79.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_77) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_79.xyz = tmpvar_88;
    };
  };
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (outColor_4, spColor_79, vec4(xlat_mutable_SPIntensity));
  spColor_79 = tmpvar_89;
  outColor_4 = spColor_79;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_90;
    scrpos_90 = xlv_TEXCOORD3;
    mediump float a_91;
    a_91 = xlv_TEXCOORD3.z;
    if ((a_91 < 0.95)) {
      scrpos_90.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_91 = (a_91 * 17.0);
      highp float tmpvar_92;
      tmpvar_92 = (scrpos_90.y / 4.0);
      highp float tmpvar_93;
      tmpvar_93 = (fract(abs(tmpvar_92)) * 4.0);
      highp float tmpvar_94;
      if ((tmpvar_92 >= 0.0)) {
        tmpvar_94 = tmpvar_93;
      } else {
        tmpvar_94 = -(tmpvar_93);
      };
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_90.x / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float x_98;
      x_98 = ((a_91 - _DITHERMATRIX[
        int(tmpvar_94)
      ][
        int(tmpvar_97)
      ]) - 0.01);
      if ((x_98 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_79.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_75;
  mediump vec3 R_76;
  mediump float intensity_77;
  mediump vec4 noiseTex_78;
  mediump vec4 spColor_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_79 = tmpvar_80;
  spColor_79.w = (spColor_79.w * _SPOpaqueness);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_78 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((1.99 * tmpvar_81.x) * _SPNoiseScaler) - 1.0);
  intensity_77 = tmpvar_82;
  highp vec3 tmpvar_83;
  highp vec3 I_84;
  I_84 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_78 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_83 = (I_84 - (2.0 * (
    dot (tmpvar_67, I_84)
   * tmpvar_67)));
  R_76 = tmpvar_83;
  lowp vec3 tmpvar_85;
  tmpvar_85 = textureCube (_SPCubeMap, R_76).xyz;
  reflection_75 = tmpvar_85;
  highp vec3 tmpvar_86;
  mediump vec3 x_87;
  x_87 = (spColor_79.xyz * _SPOldColor.xyz);
  tmpvar_86 = mix (x_87, ((reflection_75 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_79.xyz = tmpvar_86;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_77 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_77 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_88;
      tmpvar_88 = mix (spColor_79.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_77) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_79.xyz = tmpvar_88;
    };
  };
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (outColor_4, spColor_79, vec4(xlat_mutable_SPIntensity));
  spColor_79 = tmpvar_89;
  outColor_4 = spColor_79;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_90;
    scrpos_90 = xlv_TEXCOORD3;
    mediump float a_91;
    a_91 = xlv_TEXCOORD3.z;
    if ((a_91 < 0.95)) {
      scrpos_90.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_91 = (a_91 * 17.0);
      highp float tmpvar_92;
      tmpvar_92 = (scrpos_90.y / 4.0);
      highp float tmpvar_93;
      tmpvar_93 = (fract(abs(tmpvar_92)) * 4.0);
      highp float tmpvar_94;
      if ((tmpvar_92 >= 0.0)) {
        tmpvar_94 = tmpvar_93;
      } else {
        tmpvar_94 = -(tmpvar_93);
      };
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_90.x / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float x_98;
      x_98 = ((a_91 - _DITHERMATRIX[
        int(tmpvar_94)
      ][
        int(tmpvar_97)
      ]) - 0.01);
      if ((x_98 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_79.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_75;
  mediump vec3 R_76;
  mediump float intensity_77;
  mediump vec4 noiseTex_78;
  mediump vec4 spColor_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_79 = tmpvar_80;
  spColor_79.w = (spColor_79.w * _SPOpaqueness);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_78 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((1.99 * tmpvar_81.x) * _SPNoiseScaler) - 1.0);
  intensity_77 = tmpvar_82;
  highp vec3 tmpvar_83;
  highp vec3 I_84;
  I_84 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_78 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_83 = (I_84 - (2.0 * (
    dot (tmpvar_67, I_84)
   * tmpvar_67)));
  R_76 = tmpvar_83;
  lowp vec3 tmpvar_85;
  tmpvar_85 = textureCube (_SPCubeMap, R_76).xyz;
  reflection_75 = tmpvar_85;
  highp vec3 tmpvar_86;
  mediump vec3 x_87;
  x_87 = (spColor_79.xyz * _SPOldColor.xyz);
  tmpvar_86 = mix (x_87, ((reflection_75 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_79.xyz = tmpvar_86;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_77 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_77 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_88;
      tmpvar_88 = mix (spColor_79.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_77) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_79.xyz = tmpvar_88;
    };
  };
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (outColor_4, spColor_79, vec4(xlat_mutable_SPIntensity));
  spColor_79 = tmpvar_89;
  outColor_4 = spColor_79;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_90;
    scrpos_90 = xlv_TEXCOORD3;
    mediump float a_91;
    a_91 = xlv_TEXCOORD3.z;
    if ((a_91 < 0.95)) {
      scrpos_90.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_91 = (a_91 * 17.0);
      highp float tmpvar_92;
      tmpvar_92 = (scrpos_90.y / 4.0);
      highp float tmpvar_93;
      tmpvar_93 = (fract(abs(tmpvar_92)) * 4.0);
      highp float tmpvar_94;
      if ((tmpvar_92 >= 0.0)) {
        tmpvar_94 = tmpvar_93;
      } else {
        tmpvar_94 = -(tmpvar_93);
      };
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_90.x / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float x_98;
      x_98 = ((a_91 - _DITHERMATRIX[
        int(tmpvar_94)
      ][
        int(tmpvar_97)
      ]) - 0.01);
      if ((x_98 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_79.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_14;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_14;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_14;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_14;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_14;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_14;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (tmpvar_24, I_41)
   * tmpvar_24)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_4, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_4.w = spColor_36.w;
  mediump vec3 tmpvar_47;
  highp vec3 N_48;
  N_48 = tmpvar_24;
  highp vec3 V_49;
  V_49 = V_2;
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = pow (clamp ((1.001 - 
    dot (V_49, N_48)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_50 = (_RGBias + (tmpvar_51 * _RGScale));
  mediump vec3 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * _RGColor).xyz;
  mediump float tmpvar_53;
  tmpvar_53 = clamp (tmpvar_50, 0.0, 1.0);
  highp vec3 tmpvar_54;
  tmpvar_54 = mix (spColor_36.xyz, tmpvar_52, vec3((tmpvar_53 * _RGRatio)));
  tmpvar_47 = tmpvar_54;
  outColor_4.xyz = tmpvar_47;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_55;
    scrpos_55 = xlv_TEXCOORD3;
    mediump float a_56;
    a_56 = xlv_TEXCOORD3.z;
    if ((a_56 < 0.95)) {
      scrpos_55.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_56 = (a_56 * 17.0);
      highp float tmpvar_57;
      tmpvar_57 = (scrpos_55.y / 4.0);
      highp float tmpvar_58;
      tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
      highp float tmpvar_59;
      if ((tmpvar_57 >= 0.0)) {
        tmpvar_59 = tmpvar_58;
      } else {
        tmpvar_59 = -(tmpvar_58);
      };
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_55.x / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float x_63;
      x_63 = ((a_56 - _DITHERMATRIX[
        int(tmpvar_59)
      ][
        int(tmpvar_62)
      ]) - 0.01);
      if ((x_63 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_36.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (tmpvar_24, I_41)
   * tmpvar_24)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_4, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_4.w = spColor_36.w;
  mediump vec3 tmpvar_47;
  highp vec3 N_48;
  N_48 = tmpvar_24;
  highp vec3 V_49;
  V_49 = V_2;
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = pow (clamp ((1.001 - 
    dot (V_49, N_48)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_50 = (_RGBias + (tmpvar_51 * _RGScale));
  mediump vec3 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * _RGColor).xyz;
  mediump float tmpvar_53;
  tmpvar_53 = clamp (tmpvar_50, 0.0, 1.0);
  highp vec3 tmpvar_54;
  tmpvar_54 = mix (spColor_36.xyz, tmpvar_52, vec3((tmpvar_53 * _RGRatio)));
  tmpvar_47 = tmpvar_54;
  outColor_4.xyz = tmpvar_47;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_55;
    scrpos_55 = xlv_TEXCOORD3;
    mediump float a_56;
    a_56 = xlv_TEXCOORD3.z;
    if ((a_56 < 0.95)) {
      scrpos_55.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_56 = (a_56 * 17.0);
      highp float tmpvar_57;
      tmpvar_57 = (scrpos_55.y / 4.0);
      highp float tmpvar_58;
      tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
      highp float tmpvar_59;
      if ((tmpvar_57 >= 0.0)) {
        tmpvar_59 = tmpvar_58;
      } else {
        tmpvar_59 = -(tmpvar_58);
      };
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_55.x / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float x_63;
      x_63 = ((a_56 - _DITHERMATRIX[
        int(tmpvar_59)
      ][
        int(tmpvar_62)
      ]) - 0.01);
      if ((x_63 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_36.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (tmpvar_24, I_41)
   * tmpvar_24)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_4, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_4.w = spColor_36.w;
  mediump vec3 tmpvar_47;
  highp vec3 N_48;
  N_48 = tmpvar_24;
  highp vec3 V_49;
  V_49 = V_2;
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = pow (clamp ((1.001 - 
    dot (V_49, N_48)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_50 = (_RGBias + (tmpvar_51 * _RGScale));
  mediump vec3 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * _RGColor).xyz;
  mediump float tmpvar_53;
  tmpvar_53 = clamp (tmpvar_50, 0.0, 1.0);
  highp vec3 tmpvar_54;
  tmpvar_54 = mix (spColor_36.xyz, tmpvar_52, vec3((tmpvar_53 * _RGRatio)));
  tmpvar_47 = tmpvar_54;
  outColor_4.xyz = tmpvar_47;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_55;
    scrpos_55 = xlv_TEXCOORD3;
    mediump float a_56;
    a_56 = xlv_TEXCOORD3.z;
    if ((a_56 < 0.95)) {
      scrpos_55.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_56 = (a_56 * 17.0);
      highp float tmpvar_57;
      tmpvar_57 = (scrpos_55.y / 4.0);
      highp float tmpvar_58;
      tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
      highp float tmpvar_59;
      if ((tmpvar_57 >= 0.0)) {
        tmpvar_59 = tmpvar_58;
      } else {
        tmpvar_59 = -(tmpvar_58);
      };
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_55.x / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float x_63;
      x_63 = ((a_56 - _DITHERMATRIX[
        int(tmpvar_59)
      ][
        int(tmpvar_62)
      ]) - 0.01);
      if ((x_63 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_36.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_75;
  mediump vec3 R_76;
  mediump float intensity_77;
  mediump vec4 noiseTex_78;
  mediump vec4 spColor_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_79 = tmpvar_80;
  spColor_79.w = (spColor_79.w * _SPOpaqueness);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_78 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((1.99 * tmpvar_81.x) * _SPNoiseScaler) - 1.0);
  intensity_77 = tmpvar_82;
  highp vec3 tmpvar_83;
  highp vec3 I_84;
  I_84 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_78 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_83 = (I_84 - (2.0 * (
    dot (tmpvar_67, I_84)
   * tmpvar_67)));
  R_76 = tmpvar_83;
  lowp vec3 tmpvar_85;
  tmpvar_85 = textureCube (_SPCubeMap, R_76).xyz;
  reflection_75 = tmpvar_85;
  highp vec3 tmpvar_86;
  mediump vec3 x_87;
  x_87 = (spColor_79.xyz * _SPOldColor.xyz);
  tmpvar_86 = mix (x_87, ((reflection_75 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_79.xyz = tmpvar_86;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_77 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_77 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_88;
      tmpvar_88 = mix (spColor_79.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_77) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_79.xyz = tmpvar_88;
    };
  };
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (outColor_4, spColor_79, vec4(xlat_mutable_SPIntensity));
  spColor_79 = tmpvar_89;
  outColor_4.w = spColor_79.w;
  mediump vec3 tmpvar_90;
  highp vec3 N_91;
  N_91 = tmpvar_67;
  highp vec3 V_92;
  V_92 = V_2;
  mediump float tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = pow (clamp ((1.001 - 
    dot (V_92, N_91)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_93 = (_RGBias + (tmpvar_94 * _RGScale));
  mediump vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_93 * _RGColor).xyz;
  mediump float tmpvar_96;
  tmpvar_96 = clamp (tmpvar_93, 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = mix (spColor_79.xyz, tmpvar_95, vec3((tmpvar_96 * _RGRatio)));
  tmpvar_90 = tmpvar_97;
  outColor_4.xyz = tmpvar_90;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_98;
    scrpos_98 = xlv_TEXCOORD3;
    mediump float a_99;
    a_99 = xlv_TEXCOORD3.z;
    if ((a_99 < 0.95)) {
      scrpos_98.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_99 = (a_99 * 17.0);
      highp float tmpvar_100;
      tmpvar_100 = (scrpos_98.y / 4.0);
      highp float tmpvar_101;
      tmpvar_101 = (fract(abs(tmpvar_100)) * 4.0);
      highp float tmpvar_102;
      if ((tmpvar_100 >= 0.0)) {
        tmpvar_102 = tmpvar_101;
      } else {
        tmpvar_102 = -(tmpvar_101);
      };
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_98.x / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float x_106;
      x_106 = ((a_99 - _DITHERMATRIX[
        int(tmpvar_102)
      ][
        int(tmpvar_105)
      ]) - 0.01);
      if ((x_106 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_79.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_75;
  mediump vec3 R_76;
  mediump float intensity_77;
  mediump vec4 noiseTex_78;
  mediump vec4 spColor_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_79 = tmpvar_80;
  spColor_79.w = (spColor_79.w * _SPOpaqueness);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_78 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((1.99 * tmpvar_81.x) * _SPNoiseScaler) - 1.0);
  intensity_77 = tmpvar_82;
  highp vec3 tmpvar_83;
  highp vec3 I_84;
  I_84 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_78 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_83 = (I_84 - (2.0 * (
    dot (tmpvar_67, I_84)
   * tmpvar_67)));
  R_76 = tmpvar_83;
  lowp vec3 tmpvar_85;
  tmpvar_85 = textureCube (_SPCubeMap, R_76).xyz;
  reflection_75 = tmpvar_85;
  highp vec3 tmpvar_86;
  mediump vec3 x_87;
  x_87 = (spColor_79.xyz * _SPOldColor.xyz);
  tmpvar_86 = mix (x_87, ((reflection_75 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_79.xyz = tmpvar_86;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_77 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_77 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_88;
      tmpvar_88 = mix (spColor_79.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_77) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_79.xyz = tmpvar_88;
    };
  };
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (outColor_4, spColor_79, vec4(xlat_mutable_SPIntensity));
  spColor_79 = tmpvar_89;
  outColor_4.w = spColor_79.w;
  mediump vec3 tmpvar_90;
  highp vec3 N_91;
  N_91 = tmpvar_67;
  highp vec3 V_92;
  V_92 = V_2;
  mediump float tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = pow (clamp ((1.001 - 
    dot (V_92, N_91)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_93 = (_RGBias + (tmpvar_94 * _RGScale));
  mediump vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_93 * _RGColor).xyz;
  mediump float tmpvar_96;
  tmpvar_96 = clamp (tmpvar_93, 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = mix (spColor_79.xyz, tmpvar_95, vec3((tmpvar_96 * _RGRatio)));
  tmpvar_90 = tmpvar_97;
  outColor_4.xyz = tmpvar_90;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_98;
    scrpos_98 = xlv_TEXCOORD3;
    mediump float a_99;
    a_99 = xlv_TEXCOORD3.z;
    if ((a_99 < 0.95)) {
      scrpos_98.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_99 = (a_99 * 17.0);
      highp float tmpvar_100;
      tmpvar_100 = (scrpos_98.y / 4.0);
      highp float tmpvar_101;
      tmpvar_101 = (fract(abs(tmpvar_100)) * 4.0);
      highp float tmpvar_102;
      if ((tmpvar_100 >= 0.0)) {
        tmpvar_102 = tmpvar_101;
      } else {
        tmpvar_102 = -(tmpvar_101);
      };
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_98.x / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float x_106;
      x_106 = ((a_99 - _DITHERMATRIX[
        int(tmpvar_102)
      ][
        int(tmpvar_105)
      ]) - 0.01);
      if ((x_106 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_79.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_75;
  mediump vec3 R_76;
  mediump float intensity_77;
  mediump vec4 noiseTex_78;
  mediump vec4 spColor_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_79 = tmpvar_80;
  spColor_79.w = (spColor_79.w * _SPOpaqueness);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_78 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((1.99 * tmpvar_81.x) * _SPNoiseScaler) - 1.0);
  intensity_77 = tmpvar_82;
  highp vec3 tmpvar_83;
  highp vec3 I_84;
  I_84 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_78 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_83 = (I_84 - (2.0 * (
    dot (tmpvar_67, I_84)
   * tmpvar_67)));
  R_76 = tmpvar_83;
  lowp vec3 tmpvar_85;
  tmpvar_85 = textureCube (_SPCubeMap, R_76).xyz;
  reflection_75 = tmpvar_85;
  highp vec3 tmpvar_86;
  mediump vec3 x_87;
  x_87 = (spColor_79.xyz * _SPOldColor.xyz);
  tmpvar_86 = mix (x_87, ((reflection_75 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_79.xyz = tmpvar_86;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_77 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_77 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_88;
      tmpvar_88 = mix (spColor_79.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_77) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_79.xyz = tmpvar_88;
    };
  };
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (outColor_4, spColor_79, vec4(xlat_mutable_SPIntensity));
  spColor_79 = tmpvar_89;
  outColor_4.w = spColor_79.w;
  mediump vec3 tmpvar_90;
  highp vec3 N_91;
  N_91 = tmpvar_67;
  highp vec3 V_92;
  V_92 = V_2;
  mediump float tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = pow (clamp ((1.001 - 
    dot (V_92, N_91)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_93 = (_RGBias + (tmpvar_94 * _RGScale));
  mediump vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_93 * _RGColor).xyz;
  mediump float tmpvar_96;
  tmpvar_96 = clamp (tmpvar_93, 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = mix (spColor_79.xyz, tmpvar_95, vec3((tmpvar_96 * _RGRatio)));
  tmpvar_90 = tmpvar_97;
  outColor_4.xyz = tmpvar_90;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_98;
    scrpos_98 = xlv_TEXCOORD3;
    mediump float a_99;
    a_99 = xlv_TEXCOORD3.z;
    if ((a_99 < 0.95)) {
      scrpos_98.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_99 = (a_99 * 17.0);
      highp float tmpvar_100;
      tmpvar_100 = (scrpos_98.y / 4.0);
      highp float tmpvar_101;
      tmpvar_101 = (fract(abs(tmpvar_100)) * 4.0);
      highp float tmpvar_102;
      if ((tmpvar_100 >= 0.0)) {
        tmpvar_102 = tmpvar_101;
      } else {
        tmpvar_102 = -(tmpvar_101);
      };
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_98.x / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float x_106;
      x_106 = ((a_99 - _DITHERMATRIX[
        int(tmpvar_102)
      ][
        int(tmpvar_105)
      ]) - 0.01);
      if ((x_106 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_79.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_32;
    scrpos_32 = xlv_TEXCOORD3;
    mediump float a_33;
    a_33 = xlv_TEXCOORD3.z;
    if ((a_33 < 0.95)) {
      scrpos_32.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_33 = (a_33 * 17.0);
      highp float tmpvar_34;
      tmpvar_34 = (scrpos_32.y / 4.0);
      highp float tmpvar_35;
      tmpvar_35 = (fract(abs(tmpvar_34)) * 4.0);
      highp float tmpvar_36;
      if ((tmpvar_34 >= 0.0)) {
        tmpvar_36 = tmpvar_35;
      } else {
        tmpvar_36 = -(tmpvar_35);
      };
      highp float tmpvar_37;
      tmpvar_37 = (scrpos_32.x / 4.0);
      highp float tmpvar_38;
      tmpvar_38 = (fract(abs(tmpvar_37)) * 4.0);
      highp float tmpvar_39;
      if ((tmpvar_37 >= 0.0)) {
        tmpvar_39 = tmpvar_38;
      } else {
        tmpvar_39 = -(tmpvar_38);
      };
      highp float x_40;
      x_40 = ((a_33 - _DITHERMATRIX[
        int(tmpvar_36)
      ][
        int(tmpvar_39)
      ]) - 0.01);
      if ((x_40 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_75;
    scrpos_75 = xlv_TEXCOORD3;
    mediump float a_76;
    a_76 = xlv_TEXCOORD3.z;
    if ((a_76 < 0.95)) {
      scrpos_75.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_76 = (a_76 * 17.0);
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_75.y / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_75.x / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float x_83;
      x_83 = ((a_76 - _DITHERMATRIX[
        int(tmpvar_79)
      ][
        int(tmpvar_82)
      ]) - 0.01);
      if ((x_83 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_75;
    scrpos_75 = xlv_TEXCOORD3;
    mediump float a_76;
    a_76 = xlv_TEXCOORD3.z;
    if ((a_76 < 0.95)) {
      scrpos_75.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_76 = (a_76 * 17.0);
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_75.y / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_75.x / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float x_83;
      x_83 = ((a_76 - _DITHERMATRIX[
        int(tmpvar_79)
      ][
        int(tmpvar_82)
      ]) - 0.01);
      if ((x_83 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_75;
    scrpos_75 = xlv_TEXCOORD3;
    mediump float a_76;
    a_76 = xlv_TEXCOORD3.z;
    if ((a_76 < 0.95)) {
      scrpos_75.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_76 = (a_76 * 17.0);
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_75.y / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float tmpvar_80;
      tmpvar_80 = (scrpos_75.x / 4.0);
      highp float tmpvar_81;
      tmpvar_81 = (fract(abs(tmpvar_80)) * 4.0);
      highp float tmpvar_82;
      if ((tmpvar_80 >= 0.0)) {
        tmpvar_82 = tmpvar_81;
      } else {
        tmpvar_82 = -(tmpvar_81);
      };
      highp float x_83;
      x_83 = ((a_76 - _DITHERMATRIX[
        int(tmpvar_79)
      ][
        int(tmpvar_82)
      ]) - 0.01);
      if ((x_83 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_14;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_14;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_14;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_14;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_14;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_14;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = tmpvar_24;
  highp vec3 V_34;
  V_34 = V_2;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (outColor_4.xyz, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_4.xyz = tmpvar_32;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = tmpvar_24;
  highp vec3 V_34;
  V_34 = V_2;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (outColor_4.xyz, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_4.xyz = tmpvar_32;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 tmpvar_32;
  highp vec3 N_33;
  N_33 = tmpvar_24;
  highp vec3 V_34;
  V_34 = V_2;
  mediump float tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = pow (clamp ((1.001 - 
    dot (V_34, N_33)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_35 = (_RGBias + (tmpvar_36 * _RGScale));
  mediump vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_35 * _RGColor).xyz;
  mediump float tmpvar_38;
  tmpvar_38 = clamp (tmpvar_35, 0.0, 1.0);
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (outColor_4.xyz, tmpvar_37, vec3((tmpvar_38 * _RGRatio)));
  tmpvar_32 = tmpvar_39;
  outColor_4.xyz = tmpvar_32;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_40;
    scrpos_40 = xlv_TEXCOORD3;
    mediump float a_41;
    a_41 = xlv_TEXCOORD3.z;
    if ((a_41 < 0.95)) {
      scrpos_40.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_41 = (a_41 * 17.0);
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_40.y / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float tmpvar_45;
      tmpvar_45 = (scrpos_40.x / 4.0);
      highp float tmpvar_46;
      tmpvar_46 = (fract(abs(tmpvar_45)) * 4.0);
      highp float tmpvar_47;
      if ((tmpvar_45 >= 0.0)) {
        tmpvar_47 = tmpvar_46;
      } else {
        tmpvar_47 = -(tmpvar_46);
      };
      highp float x_48;
      x_48 = ((a_41 - _DITHERMATRIX[
        int(tmpvar_44)
      ][
        int(tmpvar_47)
      ]) - 0.01);
      if ((x_48 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 tmpvar_75;
  highp vec3 N_76;
  N_76 = tmpvar_67;
  highp vec3 V_77;
  V_77 = V_2;
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = pow (clamp ((1.001 - 
    dot (V_77, N_76)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_78 = (_RGBias + (tmpvar_79 * _RGScale));
  mediump vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_78 * _RGColor).xyz;
  mediump float tmpvar_81;
  tmpvar_81 = clamp (tmpvar_78, 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (outColor_4.xyz, tmpvar_80, vec3((tmpvar_81 * _RGRatio)));
  tmpvar_75 = tmpvar_82;
  outColor_4.xyz = tmpvar_75;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD3;
    mediump float a_84;
    a_84 = xlv_TEXCOORD3.z;
    if ((a_84 < 0.95)) {
      scrpos_83.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.y / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_83.x / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float x_91;
      x_91 = ((a_84 - _DITHERMATRIX[
        int(tmpvar_87)
      ][
        int(tmpvar_90)
      ]) - 0.01);
      if ((x_91 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 tmpvar_75;
  highp vec3 N_76;
  N_76 = tmpvar_67;
  highp vec3 V_77;
  V_77 = V_2;
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = pow (clamp ((1.001 - 
    dot (V_77, N_76)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_78 = (_RGBias + (tmpvar_79 * _RGScale));
  mediump vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_78 * _RGColor).xyz;
  mediump float tmpvar_81;
  tmpvar_81 = clamp (tmpvar_78, 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (outColor_4.xyz, tmpvar_80, vec3((tmpvar_81 * _RGRatio)));
  tmpvar_75 = tmpvar_82;
  outColor_4.xyz = tmpvar_75;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD3;
    mediump float a_84;
    a_84 = xlv_TEXCOORD3.z;
    if ((a_84 < 0.95)) {
      scrpos_83.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.y / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_83.x / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float x_91;
      x_91 = ((a_84 - _DITHERMATRIX[
        int(tmpvar_87)
      ][
        int(tmpvar_90)
      ]) - 0.01);
      if ((x_91 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 tmpvar_75;
  highp vec3 N_76;
  N_76 = tmpvar_67;
  highp vec3 V_77;
  V_77 = V_2;
  mediump float tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = pow (clamp ((1.001 - 
    dot (V_77, N_76)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_78 = (_RGBias + (tmpvar_79 * _RGScale));
  mediump vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_78 * _RGColor).xyz;
  mediump float tmpvar_81;
  tmpvar_81 = clamp (tmpvar_78, 0.0, 1.0);
  highp vec3 tmpvar_82;
  tmpvar_82 = mix (outColor_4.xyz, tmpvar_80, vec3((tmpvar_81 * _RGRatio)));
  tmpvar_75 = tmpvar_82;
  outColor_4.xyz = tmpvar_75;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_83;
    scrpos_83 = xlv_TEXCOORD3;
    mediump float a_84;
    a_84 = xlv_TEXCOORD3.z;
    if ((a_84 < 0.95)) {
      scrpos_83.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_84 = (a_84 * 17.0);
      highp float tmpvar_85;
      tmpvar_85 = (scrpos_83.y / 4.0);
      highp float tmpvar_86;
      tmpvar_86 = (fract(abs(tmpvar_85)) * 4.0);
      highp float tmpvar_87;
      if ((tmpvar_85 >= 0.0)) {
        tmpvar_87 = tmpvar_86;
      } else {
        tmpvar_87 = -(tmpvar_86);
      };
      highp float tmpvar_88;
      tmpvar_88 = (scrpos_83.x / 4.0);
      highp float tmpvar_89;
      tmpvar_89 = (fract(abs(tmpvar_88)) * 4.0);
      highp float tmpvar_90;
      if ((tmpvar_88 >= 0.0)) {
        tmpvar_90 = tmpvar_89;
      } else {
        tmpvar_90 = -(tmpvar_89);
      };
      highp float x_91;
      x_91 = ((a_84 - _DITHERMATRIX[
        int(tmpvar_87)
      ][
        int(tmpvar_90)
      ]) - 0.01);
      if ((x_91 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (tmpvar_24, I_41)
   * tmpvar_24)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_4, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_4 = spColor_36;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_47;
    scrpos_47 = xlv_TEXCOORD3;
    mediump float a_48;
    a_48 = xlv_TEXCOORD3.z;
    if ((a_48 < 0.95)) {
      scrpos_47.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_48 = (a_48 * 17.0);
      highp float tmpvar_49;
      tmpvar_49 = (scrpos_47.y / 4.0);
      highp float tmpvar_50;
      tmpvar_50 = (fract(abs(tmpvar_49)) * 4.0);
      highp float tmpvar_51;
      if ((tmpvar_49 >= 0.0)) {
        tmpvar_51 = tmpvar_50;
      } else {
        tmpvar_51 = -(tmpvar_50);
      };
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_47.x / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float x_55;
      x_55 = ((a_48 - _DITHERMATRIX[
        int(tmpvar_51)
      ][
        int(tmpvar_54)
      ]) - 0.01);
      if ((x_55 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_36.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (tmpvar_24, I_41)
   * tmpvar_24)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_4, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_4 = spColor_36;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_47;
    scrpos_47 = xlv_TEXCOORD3;
    mediump float a_48;
    a_48 = xlv_TEXCOORD3.z;
    if ((a_48 < 0.95)) {
      scrpos_47.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_48 = (a_48 * 17.0);
      highp float tmpvar_49;
      tmpvar_49 = (scrpos_47.y / 4.0);
      highp float tmpvar_50;
      tmpvar_50 = (fract(abs(tmpvar_49)) * 4.0);
      highp float tmpvar_51;
      if ((tmpvar_49 >= 0.0)) {
        tmpvar_51 = tmpvar_50;
      } else {
        tmpvar_51 = -(tmpvar_50);
      };
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_47.x / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float x_55;
      x_55 = ((a_48 - _DITHERMATRIX[
        int(tmpvar_51)
      ][
        int(tmpvar_54)
      ]) - 0.01);
      if ((x_55 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_36.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (tmpvar_24, I_41)
   * tmpvar_24)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_4, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_4 = spColor_36;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_47;
    scrpos_47 = xlv_TEXCOORD3;
    mediump float a_48;
    a_48 = xlv_TEXCOORD3.z;
    if ((a_48 < 0.95)) {
      scrpos_47.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_48 = (a_48 * 17.0);
      highp float tmpvar_49;
      tmpvar_49 = (scrpos_47.y / 4.0);
      highp float tmpvar_50;
      tmpvar_50 = (fract(abs(tmpvar_49)) * 4.0);
      highp float tmpvar_51;
      if ((tmpvar_49 >= 0.0)) {
        tmpvar_51 = tmpvar_50;
      } else {
        tmpvar_51 = -(tmpvar_50);
      };
      highp float tmpvar_52;
      tmpvar_52 = (scrpos_47.x / 4.0);
      highp float tmpvar_53;
      tmpvar_53 = (fract(abs(tmpvar_52)) * 4.0);
      highp float tmpvar_54;
      if ((tmpvar_52 >= 0.0)) {
        tmpvar_54 = tmpvar_53;
      } else {
        tmpvar_54 = -(tmpvar_53);
      };
      highp float x_55;
      x_55 = ((a_48 - _DITHERMATRIX[
        int(tmpvar_51)
      ][
        int(tmpvar_54)
      ]) - 0.01);
      if ((x_55 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_36.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_75;
  mediump vec3 R_76;
  mediump float intensity_77;
  mediump vec4 noiseTex_78;
  mediump vec4 spColor_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_79 = tmpvar_80;
  spColor_79.w = (spColor_79.w * _SPOpaqueness);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_78 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((1.99 * tmpvar_81.x) * _SPNoiseScaler) - 1.0);
  intensity_77 = tmpvar_82;
  highp vec3 tmpvar_83;
  highp vec3 I_84;
  I_84 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_78 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_83 = (I_84 - (2.0 * (
    dot (tmpvar_67, I_84)
   * tmpvar_67)));
  R_76 = tmpvar_83;
  lowp vec3 tmpvar_85;
  tmpvar_85 = textureCube (_SPCubeMap, R_76).xyz;
  reflection_75 = tmpvar_85;
  highp vec3 tmpvar_86;
  mediump vec3 x_87;
  x_87 = (spColor_79.xyz * _SPOldColor.xyz);
  tmpvar_86 = mix (x_87, ((reflection_75 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_79.xyz = tmpvar_86;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_77 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_77 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_88;
      tmpvar_88 = mix (spColor_79.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_77) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_79.xyz = tmpvar_88;
    };
  };
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (outColor_4, spColor_79, vec4(xlat_mutable_SPIntensity));
  spColor_79 = tmpvar_89;
  outColor_4 = spColor_79;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_90;
    scrpos_90 = xlv_TEXCOORD3;
    mediump float a_91;
    a_91 = xlv_TEXCOORD3.z;
    if ((a_91 < 0.95)) {
      scrpos_90.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_91 = (a_91 * 17.0);
      highp float tmpvar_92;
      tmpvar_92 = (scrpos_90.y / 4.0);
      highp float tmpvar_93;
      tmpvar_93 = (fract(abs(tmpvar_92)) * 4.0);
      highp float tmpvar_94;
      if ((tmpvar_92 >= 0.0)) {
        tmpvar_94 = tmpvar_93;
      } else {
        tmpvar_94 = -(tmpvar_93);
      };
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_90.x / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float x_98;
      x_98 = ((a_91 - _DITHERMATRIX[
        int(tmpvar_94)
      ][
        int(tmpvar_97)
      ]) - 0.01);
      if ((x_98 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_79.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_75;
  mediump vec3 R_76;
  mediump float intensity_77;
  mediump vec4 noiseTex_78;
  mediump vec4 spColor_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_79 = tmpvar_80;
  spColor_79.w = (spColor_79.w * _SPOpaqueness);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_78 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((1.99 * tmpvar_81.x) * _SPNoiseScaler) - 1.0);
  intensity_77 = tmpvar_82;
  highp vec3 tmpvar_83;
  highp vec3 I_84;
  I_84 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_78 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_83 = (I_84 - (2.0 * (
    dot (tmpvar_67, I_84)
   * tmpvar_67)));
  R_76 = tmpvar_83;
  lowp vec3 tmpvar_85;
  tmpvar_85 = textureCube (_SPCubeMap, R_76).xyz;
  reflection_75 = tmpvar_85;
  highp vec3 tmpvar_86;
  mediump vec3 x_87;
  x_87 = (spColor_79.xyz * _SPOldColor.xyz);
  tmpvar_86 = mix (x_87, ((reflection_75 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_79.xyz = tmpvar_86;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_77 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_77 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_88;
      tmpvar_88 = mix (spColor_79.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_77) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_79.xyz = tmpvar_88;
    };
  };
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (outColor_4, spColor_79, vec4(xlat_mutable_SPIntensity));
  spColor_79 = tmpvar_89;
  outColor_4 = spColor_79;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_90;
    scrpos_90 = xlv_TEXCOORD3;
    mediump float a_91;
    a_91 = xlv_TEXCOORD3.z;
    if ((a_91 < 0.95)) {
      scrpos_90.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_91 = (a_91 * 17.0);
      highp float tmpvar_92;
      tmpvar_92 = (scrpos_90.y / 4.0);
      highp float tmpvar_93;
      tmpvar_93 = (fract(abs(tmpvar_92)) * 4.0);
      highp float tmpvar_94;
      if ((tmpvar_92 >= 0.0)) {
        tmpvar_94 = tmpvar_93;
      } else {
        tmpvar_94 = -(tmpvar_93);
      };
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_90.x / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float x_98;
      x_98 = ((a_91 - _DITHERMATRIX[
        int(tmpvar_94)
      ][
        int(tmpvar_97)
      ]) - 0.01);
      if ((x_98 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_79.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_75;
  mediump vec3 R_76;
  mediump float intensity_77;
  mediump vec4 noiseTex_78;
  mediump vec4 spColor_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_79 = tmpvar_80;
  spColor_79.w = (spColor_79.w * _SPOpaqueness);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_78 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((1.99 * tmpvar_81.x) * _SPNoiseScaler) - 1.0);
  intensity_77 = tmpvar_82;
  highp vec3 tmpvar_83;
  highp vec3 I_84;
  I_84 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_78 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_83 = (I_84 - (2.0 * (
    dot (tmpvar_67, I_84)
   * tmpvar_67)));
  R_76 = tmpvar_83;
  lowp vec3 tmpvar_85;
  tmpvar_85 = textureCube (_SPCubeMap, R_76).xyz;
  reflection_75 = tmpvar_85;
  highp vec3 tmpvar_86;
  mediump vec3 x_87;
  x_87 = (spColor_79.xyz * _SPOldColor.xyz);
  tmpvar_86 = mix (x_87, ((reflection_75 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_79.xyz = tmpvar_86;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_77 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_77 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_88;
      tmpvar_88 = mix (spColor_79.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_77) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_79.xyz = tmpvar_88;
    };
  };
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (outColor_4, spColor_79, vec4(xlat_mutable_SPIntensity));
  spColor_79 = tmpvar_89;
  outColor_4 = spColor_79;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_90;
    scrpos_90 = xlv_TEXCOORD3;
    mediump float a_91;
    a_91 = xlv_TEXCOORD3.z;
    if ((a_91 < 0.95)) {
      scrpos_90.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_91 = (a_91 * 17.0);
      highp float tmpvar_92;
      tmpvar_92 = (scrpos_90.y / 4.0);
      highp float tmpvar_93;
      tmpvar_93 = (fract(abs(tmpvar_92)) * 4.0);
      highp float tmpvar_94;
      if ((tmpvar_92 >= 0.0)) {
        tmpvar_94 = tmpvar_93;
      } else {
        tmpvar_94 = -(tmpvar_93);
      };
      highp float tmpvar_95;
      tmpvar_95 = (scrpos_90.x / 4.0);
      highp float tmpvar_96;
      tmpvar_96 = (fract(abs(tmpvar_95)) * 4.0);
      highp float tmpvar_97;
      if ((tmpvar_95 >= 0.0)) {
        tmpvar_97 = tmpvar_96;
      } else {
        tmpvar_97 = -(tmpvar_96);
      };
      highp float x_98;
      x_98 = ((a_91 - _DITHERMATRIX[
        int(tmpvar_94)
      ][
        int(tmpvar_97)
      ]) - 0.01);
      if ((x_98 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_79.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_14;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_14;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_14;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_14;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_14;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump float x_8;
  x_8 = (baseTexColor_3.w - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_9;
  baseTexColor_9 = baseTexColor_3.xyz;
  mediump float threshold_10;
  mediump float D_11;
  mediump vec3 diffColor_12;
  diffColor_12 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_13;
  tmpvar_13 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_11 = tmpvar_13;
  threshold_10 = 0.0;
  if ((tmpvar_13 < 0.09)) {
    threshold_10 = ((xlv_COLOR1.x + tmpvar_13) * 0.5);
    if ((threshold_10 < _SecondShadow)) {
      diffColor_12 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_13 >= 0.5)) {
      D_11 = ((tmpvar_13 * 1.2) - 0.1);
    } else {
      D_11 = ((D_11 * 1.25) - 0.125);
    };
    threshold_10 = ((xlv_COLOR1.x + D_11) * 0.5);
    if ((threshold_10 < _LightArea)) {
      diffColor_12 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_12 = baseTexColor_9;
    };
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 H_18;
  H_18 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_19 = tmpvar_20;
    H_18 = normalize((_CustomLightDir.xyz + V_19));
  };
  mediump float tmpvar_21;
  tmpvar_21 = pow (max (dot (tmpvar_14, H_18), 0.0), _Shininess);
  if ((tmpvar_21 >= (1.0 - tex_Light_Color_4.z))) {
    color_17 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_17 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_12 * _Color.xyz) * _EnvColor.xyz) + color_17);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_14, I_31)
   * tmpvar_14)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_14;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (tmpvar_24, I_41)
   * tmpvar_24)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_4, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_4.w = spColor_36.w;
  mediump vec3 tmpvar_47;
  highp vec3 N_48;
  N_48 = tmpvar_24;
  highp vec3 V_49;
  V_49 = V_2;
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = pow (clamp ((1.001 - 
    dot (V_49, N_48)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_50 = (_RGBias + (tmpvar_51 * _RGScale));
  mediump vec3 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * _RGColor).xyz;
  mediump float tmpvar_53;
  tmpvar_53 = clamp (tmpvar_50, 0.0, 1.0);
  highp vec3 tmpvar_54;
  tmpvar_54 = mix (spColor_36.xyz, tmpvar_52, vec3((tmpvar_53 * _RGRatio)));
  tmpvar_47 = tmpvar_54;
  outColor_4.xyz = tmpvar_47;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_55;
    scrpos_55 = xlv_TEXCOORD3;
    mediump float a_56;
    a_56 = xlv_TEXCOORD3.z;
    if ((a_56 < 0.95)) {
      scrpos_55.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_56 = (a_56 * 17.0);
      highp float tmpvar_57;
      tmpvar_57 = (scrpos_55.y / 4.0);
      highp float tmpvar_58;
      tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
      highp float tmpvar_59;
      if ((tmpvar_57 >= 0.0)) {
        tmpvar_59 = tmpvar_58;
      } else {
        tmpvar_59 = -(tmpvar_58);
      };
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_55.x / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float x_63;
      x_63 = ((a_56 - _DITHERMATRIX[
        int(tmpvar_59)
      ][
        int(tmpvar_62)
      ]) - 0.01);
      if ((x_63 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_36.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (tmpvar_24, I_41)
   * tmpvar_24)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_4, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_4.w = spColor_36.w;
  mediump vec3 tmpvar_47;
  highp vec3 N_48;
  N_48 = tmpvar_24;
  highp vec3 V_49;
  V_49 = V_2;
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = pow (clamp ((1.001 - 
    dot (V_49, N_48)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_50 = (_RGBias + (tmpvar_51 * _RGScale));
  mediump vec3 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * _RGColor).xyz;
  mediump float tmpvar_53;
  tmpvar_53 = clamp (tmpvar_50, 0.0, 1.0);
  highp vec3 tmpvar_54;
  tmpvar_54 = mix (spColor_36.xyz, tmpvar_52, vec3((tmpvar_53 * _RGRatio)));
  tmpvar_47 = tmpvar_54;
  outColor_4.xyz = tmpvar_47;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_55;
    scrpos_55 = xlv_TEXCOORD3;
    mediump float a_56;
    a_56 = xlv_TEXCOORD3.z;
    if ((a_56 < 0.95)) {
      scrpos_55.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_56 = (a_56 * 17.0);
      highp float tmpvar_57;
      tmpvar_57 = (scrpos_55.y / 4.0);
      highp float tmpvar_58;
      tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
      highp float tmpvar_59;
      if ((tmpvar_57 >= 0.0)) {
        tmpvar_59 = tmpvar_58;
      } else {
        tmpvar_59 = -(tmpvar_58);
      };
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_55.x / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float x_63;
      x_63 = ((a_56 - _DITHERMATRIX[
        int(tmpvar_59)
      ][
        int(tmpvar_62)
      ]) - 0.01);
      if ((x_63 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_36.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump float x_18;
  x_18 = (tmpvar_8.y - _AlphaClipThreshold);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_17.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1.x + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1.x + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_3.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_22 * _Color.xyz) * _EnvColor.xyz) + color_27);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_32;
  mediump vec3 R_33;
  mediump float intensity_34;
  mediump vec4 noiseTex_35;
  mediump vec4 spColor_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_36 = tmpvar_37;
  spColor_36.w = (spColor_36.w * _SPOpaqueness);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_35 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = (((1.99 * tmpvar_38.x) * _SPNoiseScaler) - 1.0);
  intensity_34 = tmpvar_39;
  highp vec3 tmpvar_40;
  highp vec3 I_41;
  I_41 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_35 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_40 = (I_41 - (2.0 * (
    dot (tmpvar_24, I_41)
   * tmpvar_24)));
  R_33 = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = textureCube (_SPCubeMap, R_33).xyz;
  reflection_32 = tmpvar_42;
  highp vec3 tmpvar_43;
  mediump vec3 x_44;
  x_44 = (spColor_36.xyz * _SPOldColor.xyz);
  tmpvar_43 = mix (x_44, ((reflection_32 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_36.xyz = tmpvar_43;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_34 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_34 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_45;
      tmpvar_45 = mix (spColor_36.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_34) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_36.xyz = tmpvar_45;
    };
  };
  highp vec4 tmpvar_46;
  tmpvar_46 = mix (outColor_4, spColor_36, vec4(xlat_mutable_SPIntensity));
  spColor_36 = tmpvar_46;
  outColor_4.w = spColor_36.w;
  mediump vec3 tmpvar_47;
  highp vec3 N_48;
  N_48 = tmpvar_24;
  highp vec3 V_49;
  V_49 = V_2;
  mediump float tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = pow (clamp ((1.001 - 
    dot (V_49, N_48)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_50 = (_RGBias + (tmpvar_51 * _RGScale));
  mediump vec3 tmpvar_52;
  tmpvar_52 = (tmpvar_50 * _RGColor).xyz;
  mediump float tmpvar_53;
  tmpvar_53 = clamp (tmpvar_50, 0.0, 1.0);
  highp vec3 tmpvar_54;
  tmpvar_54 = mix (spColor_36.xyz, tmpvar_52, vec3((tmpvar_53 * _RGRatio)));
  tmpvar_47 = tmpvar_54;
  outColor_4.xyz = tmpvar_47;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_55;
    scrpos_55 = xlv_TEXCOORD3;
    mediump float a_56;
    a_56 = xlv_TEXCOORD3.z;
    if ((a_56 < 0.95)) {
      scrpos_55.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_56 = (a_56 * 17.0);
      highp float tmpvar_57;
      tmpvar_57 = (scrpos_55.y / 4.0);
      highp float tmpvar_58;
      tmpvar_58 = (fract(abs(tmpvar_57)) * 4.0);
      highp float tmpvar_59;
      if ((tmpvar_57 >= 0.0)) {
        tmpvar_59 = tmpvar_58;
      } else {
        tmpvar_59 = -(tmpvar_58);
      };
      highp float tmpvar_60;
      tmpvar_60 = (scrpos_55.x / 4.0);
      highp float tmpvar_61;
      tmpvar_61 = (fract(abs(tmpvar_60)) * 4.0);
      highp float tmpvar_62;
      if ((tmpvar_60 >= 0.0)) {
        tmpvar_62 = tmpvar_61;
      } else {
        tmpvar_62 = -(tmpvar_61);
      };
      highp float x_63;
      x_63 = ((a_56 - _DITHERMATRIX[
        int(tmpvar_59)
      ][
        int(tmpvar_62)
      ]) - 0.01);
      if ((x_63 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_36.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_75;
  mediump vec3 R_76;
  mediump float intensity_77;
  mediump vec4 noiseTex_78;
  mediump vec4 spColor_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_79 = tmpvar_80;
  spColor_79.w = (spColor_79.w * _SPOpaqueness);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_78 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((1.99 * tmpvar_81.x) * _SPNoiseScaler) - 1.0);
  intensity_77 = tmpvar_82;
  highp vec3 tmpvar_83;
  highp vec3 I_84;
  I_84 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_78 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_83 = (I_84 - (2.0 * (
    dot (tmpvar_67, I_84)
   * tmpvar_67)));
  R_76 = tmpvar_83;
  lowp vec3 tmpvar_85;
  tmpvar_85 = textureCube (_SPCubeMap, R_76).xyz;
  reflection_75 = tmpvar_85;
  highp vec3 tmpvar_86;
  mediump vec3 x_87;
  x_87 = (spColor_79.xyz * _SPOldColor.xyz);
  tmpvar_86 = mix (x_87, ((reflection_75 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_79.xyz = tmpvar_86;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_77 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_77 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_88;
      tmpvar_88 = mix (spColor_79.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_77) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_79.xyz = tmpvar_88;
    };
  };
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (outColor_4, spColor_79, vec4(xlat_mutable_SPIntensity));
  spColor_79 = tmpvar_89;
  outColor_4.w = spColor_79.w;
  mediump vec3 tmpvar_90;
  highp vec3 N_91;
  N_91 = tmpvar_67;
  highp vec3 V_92;
  V_92 = V_2;
  mediump float tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = pow (clamp ((1.001 - 
    dot (V_92, N_91)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_93 = (_RGBias + (tmpvar_94 * _RGScale));
  mediump vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_93 * _RGColor).xyz;
  mediump float tmpvar_96;
  tmpvar_96 = clamp (tmpvar_93, 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = mix (spColor_79.xyz, tmpvar_95, vec3((tmpvar_96 * _RGRatio)));
  tmpvar_90 = tmpvar_97;
  outColor_4.xyz = tmpvar_90;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_98;
    scrpos_98 = xlv_TEXCOORD3;
    mediump float a_99;
    a_99 = xlv_TEXCOORD3.z;
    if ((a_99 < 0.95)) {
      scrpos_98.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_99 = (a_99 * 17.0);
      highp float tmpvar_100;
      tmpvar_100 = (scrpos_98.y / 4.0);
      highp float tmpvar_101;
      tmpvar_101 = (fract(abs(tmpvar_100)) * 4.0);
      highp float tmpvar_102;
      if ((tmpvar_100 >= 0.0)) {
        tmpvar_102 = tmpvar_101;
      } else {
        tmpvar_102 = -(tmpvar_101);
      };
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_98.x / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float x_106;
      x_106 = ((a_99 - _DITHERMATRIX[
        int(tmpvar_102)
      ][
        int(tmpvar_105)
      ]) - 0.01);
      if ((x_106 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_79.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_75;
  mediump vec3 R_76;
  mediump float intensity_77;
  mediump vec4 noiseTex_78;
  mediump vec4 spColor_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_79 = tmpvar_80;
  spColor_79.w = (spColor_79.w * _SPOpaqueness);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_78 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((1.99 * tmpvar_81.x) * _SPNoiseScaler) - 1.0);
  intensity_77 = tmpvar_82;
  highp vec3 tmpvar_83;
  highp vec3 I_84;
  I_84 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_78 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_83 = (I_84 - (2.0 * (
    dot (tmpvar_67, I_84)
   * tmpvar_67)));
  R_76 = tmpvar_83;
  lowp vec3 tmpvar_85;
  tmpvar_85 = textureCube (_SPCubeMap, R_76).xyz;
  reflection_75 = tmpvar_85;
  highp vec3 tmpvar_86;
  mediump vec3 x_87;
  x_87 = (spColor_79.xyz * _SPOldColor.xyz);
  tmpvar_86 = mix (x_87, ((reflection_75 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_79.xyz = tmpvar_86;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_77 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_77 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_88;
      tmpvar_88 = mix (spColor_79.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_77) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_79.xyz = tmpvar_88;
    };
  };
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (outColor_4, spColor_79, vec4(xlat_mutable_SPIntensity));
  spColor_79 = tmpvar_89;
  outColor_4.w = spColor_79.w;
  mediump vec3 tmpvar_90;
  highp vec3 N_91;
  N_91 = tmpvar_67;
  highp vec3 V_92;
  V_92 = V_2;
  mediump float tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = pow (clamp ((1.001 - 
    dot (V_92, N_91)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_93 = (_RGBias + (tmpvar_94 * _RGScale));
  mediump vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_93 * _RGColor).xyz;
  mediump float tmpvar_96;
  tmpvar_96 = clamp (tmpvar_93, 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = mix (spColor_79.xyz, tmpvar_95, vec3((tmpvar_96 * _RGRatio)));
  tmpvar_90 = tmpvar_97;
  outColor_4.xyz = tmpvar_90;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_98;
    scrpos_98 = xlv_TEXCOORD3;
    mediump float a_99;
    a_99 = xlv_TEXCOORD3.z;
    if ((a_99 < 0.95)) {
      scrpos_98.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_99 = (a_99 * 17.0);
      highp float tmpvar_100;
      tmpvar_100 = (scrpos_98.y / 4.0);
      highp float tmpvar_101;
      tmpvar_101 = (fract(abs(tmpvar_100)) * 4.0);
      highp float tmpvar_102;
      if ((tmpvar_100 >= 0.0)) {
        tmpvar_102 = tmpvar_101;
      } else {
        tmpvar_102 = -(tmpvar_101);
      };
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_98.x / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float x_106;
      x_106 = ((a_99 - _DITHERMATRIX[
        int(tmpvar_102)
      ][
        int(tmpvar_105)
      ]) - 0.01);
      if ((x_106 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_79.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec3 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump float x_61;
  x_61 = (tmpvar_6.w - _AlphaClipThreshold);
  if ((x_61 < 0.0)) {
    discard;
  };
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_6.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1.x + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1.x + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_3.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_65 * _Color.xyz) * _EnvColor.xyz) + color_70);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_75;
  mediump vec3 R_76;
  mediump float intensity_77;
  mediump vec4 noiseTex_78;
  mediump vec4 spColor_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_79 = tmpvar_80;
  spColor_79.w = (spColor_79.w * _SPOpaqueness);
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_78 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((1.99 * tmpvar_81.x) * _SPNoiseScaler) - 1.0);
  intensity_77 = tmpvar_82;
  highp vec3 tmpvar_83;
  highp vec3 I_84;
  I_84 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_78 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_83 = (I_84 - (2.0 * (
    dot (tmpvar_67, I_84)
   * tmpvar_67)));
  R_76 = tmpvar_83;
  lowp vec3 tmpvar_85;
  tmpvar_85 = textureCube (_SPCubeMap, R_76).xyz;
  reflection_75 = tmpvar_85;
  highp vec3 tmpvar_86;
  mediump vec3 x_87;
  x_87 = (spColor_79.xyz * _SPOldColor.xyz);
  tmpvar_86 = mix (x_87, ((reflection_75 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_79.xyz = tmpvar_86;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_77 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_77 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_88;
      tmpvar_88 = mix (spColor_79.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_77) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_79.xyz = tmpvar_88;
    };
  };
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (outColor_4, spColor_79, vec4(xlat_mutable_SPIntensity));
  spColor_79 = tmpvar_89;
  outColor_4.w = spColor_79.w;
  mediump vec3 tmpvar_90;
  highp vec3 N_91;
  N_91 = tmpvar_67;
  highp vec3 V_92;
  V_92 = V_2;
  mediump float tmpvar_93;
  highp float tmpvar_94;
  tmpvar_94 = pow (clamp ((1.001 - 
    dot (V_92, N_91)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_93 = (_RGBias + (tmpvar_94 * _RGScale));
  mediump vec3 tmpvar_95;
  tmpvar_95 = (tmpvar_93 * _RGColor).xyz;
  mediump float tmpvar_96;
  tmpvar_96 = clamp (tmpvar_93, 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = mix (spColor_79.xyz, tmpvar_95, vec3((tmpvar_96 * _RGRatio)));
  tmpvar_90 = tmpvar_97;
  outColor_4.xyz = tmpvar_90;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_98;
    scrpos_98 = xlv_TEXCOORD3;
    mediump float a_99;
    a_99 = xlv_TEXCOORD3.z;
    if ((a_99 < 0.95)) {
      scrpos_98.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_99 = (a_99 * 17.0);
      highp float tmpvar_100;
      tmpvar_100 = (scrpos_98.y / 4.0);
      highp float tmpvar_101;
      tmpvar_101 = (fract(abs(tmpvar_100)) * 4.0);
      highp float tmpvar_102;
      if ((tmpvar_100 >= 0.0)) {
        tmpvar_102 = tmpvar_101;
      } else {
        tmpvar_102 = -(tmpvar_101);
      };
      highp float tmpvar_103;
      tmpvar_103 = (scrpos_98.x / 4.0);
      highp float tmpvar_104;
      tmpvar_104 = (fract(abs(tmpvar_103)) * 4.0);
      highp float tmpvar_105;
      if ((tmpvar_103 >= 0.0)) {
        tmpvar_105 = tmpvar_104;
      } else {
        tmpvar_105 = -(tmpvar_104);
      };
      highp float x_106;
      x_106 = ((a_99 - _DITHERMATRIX[
        int(tmpvar_102)
      ][
        int(tmpvar_105)
      ]) - 0.01);
      if ((x_106 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_79.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
}
}
 Pass {
  Name "COMPLEX"
  LOD 200
  Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "OutlineType" = "Complex" "QUEUE" = "Transparent" "Reflected" = "Reflected" "RenderType" = "Transparent" }
  Cull Front
  GpuProgramID 124582
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_7;
  tmpvar_7 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_7;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_MatrixMV[0].xyz;
  tmpvar_8[1] = unity_MatrixMV[1].xyz;
  tmpvar_8[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_9.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(N_1);
  N_1 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_11));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_10.xy * tmpvar_12));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_3.zw;
    tmpvar_6.xyw = o_13.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _Opaqueness;
uniform sampler2D _MainTex;
uniform mediump float _AlphaClipThreshold;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2.xyz = (xlv_COLOR0.xyz * _Color.xyz);
  lowp float tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0).w;
  alpha_1 = tmpvar_3;
  mediump float x_4;
  x_4 = (alpha_1 - _AlphaClipThreshold);
  if ((x_4 < 0.0)) {
    discard;
  };
  color_2.w = (xlv_COLOR0.w * (alpha_1 * _Opaqueness));
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_5;
    scrpos_5 = xlv_TEXCOORD3;
    mediump float a_6;
    a_6 = xlv_TEXCOORD3.z;
    if ((a_6 < 0.95)) {
      scrpos_5.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_6 = (a_6 * 17.0);
      highp float tmpvar_7;
      tmpvar_7 = (scrpos_5.y / 4.0);
      highp float tmpvar_8;
      tmpvar_8 = (fract(abs(tmpvar_7)) * 4.0);
      highp float tmpvar_9;
      if ((tmpvar_7 >= 0.0)) {
        tmpvar_9 = tmpvar_8;
      } else {
        tmpvar_9 = -(tmpvar_8);
      };
      highp float tmpvar_10;
      tmpvar_10 = (scrpos_5.x / 4.0);
      highp float tmpvar_11;
      tmpvar_11 = (fract(abs(tmpvar_10)) * 4.0);
      highp float tmpvar_12;
      if ((tmpvar_10 >= 0.0)) {
        tmpvar_12 = tmpvar_11;
      } else {
        tmpvar_12 = -(tmpvar_11);
      };
      highp float x_13;
      x_13 = ((a_6 - _DITHERMATRIX[
        int(tmpvar_9)
      ][
        int(tmpvar_12)
      ]) - 0.01);
      if ((x_13 < 0.0)) {
        discard;
      };
    };
  };
  color_2.w = clamp (color_2.w, 0.0, 1.0);
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_7;
  tmpvar_7 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_7;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_MatrixMV[0].xyz;
  tmpvar_8[1] = unity_MatrixMV[1].xyz;
  tmpvar_8[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_9.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(N_1);
  N_1 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_11));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_10.xy * tmpvar_12));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_3.zw;
    tmpvar_6.xyw = o_13.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _Opaqueness;
uniform sampler2D _MainTex;
uniform mediump float _AlphaClipThreshold;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2.xyz = (xlv_COLOR0.xyz * _Color.xyz);
  lowp float tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0).w;
  alpha_1 = tmpvar_3;
  mediump float x_4;
  x_4 = (alpha_1 - _AlphaClipThreshold);
  if ((x_4 < 0.0)) {
    discard;
  };
  color_2.w = (xlv_COLOR0.w * (alpha_1 * _Opaqueness));
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_5;
    scrpos_5 = xlv_TEXCOORD3;
    mediump float a_6;
    a_6 = xlv_TEXCOORD3.z;
    if ((a_6 < 0.95)) {
      scrpos_5.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_6 = (a_6 * 17.0);
      highp float tmpvar_7;
      tmpvar_7 = (scrpos_5.y / 4.0);
      highp float tmpvar_8;
      tmpvar_8 = (fract(abs(tmpvar_7)) * 4.0);
      highp float tmpvar_9;
      if ((tmpvar_7 >= 0.0)) {
        tmpvar_9 = tmpvar_8;
      } else {
        tmpvar_9 = -(tmpvar_8);
      };
      highp float tmpvar_10;
      tmpvar_10 = (scrpos_5.x / 4.0);
      highp float tmpvar_11;
      tmpvar_11 = (fract(abs(tmpvar_10)) * 4.0);
      highp float tmpvar_12;
      if ((tmpvar_10 >= 0.0)) {
        tmpvar_12 = tmpvar_11;
      } else {
        tmpvar_12 = -(tmpvar_11);
      };
      highp float x_13;
      x_13 = ((a_6 - _DITHERMATRIX[
        int(tmpvar_9)
      ][
        int(tmpvar_12)
      ]) - 0.01);
      if ((x_13 < 0.0)) {
        discard;
      };
    };
  };
  color_2.w = clamp (color_2.w, 0.0, 1.0);
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_7;
  tmpvar_7 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_7;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_MatrixMV[0].xyz;
  tmpvar_8[1] = unity_MatrixMV[1].xyz;
  tmpvar_8[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_9.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(N_1);
  N_1 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_11));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_10.xy * tmpvar_12));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_3.zw;
    tmpvar_6.xyw = o_13.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _Opaqueness;
uniform sampler2D _MainTex;
uniform mediump float _AlphaClipThreshold;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2.xyz = (xlv_COLOR0.xyz * _Color.xyz);
  lowp float tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0).w;
  alpha_1 = tmpvar_3;
  mediump float x_4;
  x_4 = (alpha_1 - _AlphaClipThreshold);
  if ((x_4 < 0.0)) {
    discard;
  };
  color_2.w = (xlv_COLOR0.w * (alpha_1 * _Opaqueness));
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_5;
    scrpos_5 = xlv_TEXCOORD3;
    mediump float a_6;
    a_6 = xlv_TEXCOORD3.z;
    if ((a_6 < 0.95)) {
      scrpos_5.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_6 = (a_6 * 17.0);
      highp float tmpvar_7;
      tmpvar_7 = (scrpos_5.y / 4.0);
      highp float tmpvar_8;
      tmpvar_8 = (fract(abs(tmpvar_7)) * 4.0);
      highp float tmpvar_9;
      if ((tmpvar_7 >= 0.0)) {
        tmpvar_9 = tmpvar_8;
      } else {
        tmpvar_9 = -(tmpvar_8);
      };
      highp float tmpvar_10;
      tmpvar_10 = (scrpos_5.x / 4.0);
      highp float tmpvar_11;
      tmpvar_11 = (fract(abs(tmpvar_10)) * 4.0);
      highp float tmpvar_12;
      if ((tmpvar_10 >= 0.0)) {
        tmpvar_12 = tmpvar_11;
      } else {
        tmpvar_12 = -(tmpvar_11);
      };
      highp float x_13;
      x_13 = ((a_6 - _DITHERMATRIX[
        int(tmpvar_9)
      ][
        int(tmpvar_12)
      ]) - 0.01);
      if ((x_13 < 0.0)) {
        discard;
      };
    };
  };
  color_2.w = clamp (color_2.w, 0.0, 1.0);
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_7;
  tmpvar_7 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_7;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_MatrixMV[0].xyz;
  tmpvar_8[1] = unity_MatrixMV[1].xyz;
  tmpvar_8[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_9.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(N_1);
  N_1 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_11));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_10.xy * tmpvar_12));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_3.zw;
    tmpvar_6.xyw = o_13.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _Opaqueness;
uniform mediump float _AlphaClipThreshold;
uniform highp float _UsingDitherAlpha;
uniform sampler2D _factorTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2.xyz = (xlv_COLOR0.xyz * _Color.xyz);
  lowp float tmpvar_3;
  tmpvar_3 = texture2D (_factorTex, xlv_TEXCOORD0).y;
  alpha_1 = tmpvar_3;
  mediump float x_4;
  x_4 = (alpha_1 - _AlphaClipThreshold);
  if ((x_4 < 0.0)) {
    discard;
  };
  color_2.w = (xlv_COLOR0.w * (alpha_1 * _Opaqueness));
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_5;
    scrpos_5 = xlv_TEXCOORD3;
    mediump float a_6;
    a_6 = xlv_TEXCOORD3.z;
    if ((a_6 < 0.95)) {
      scrpos_5.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_6 = (a_6 * 17.0);
      highp float tmpvar_7;
      tmpvar_7 = (scrpos_5.y / 4.0);
      highp float tmpvar_8;
      tmpvar_8 = (fract(abs(tmpvar_7)) * 4.0);
      highp float tmpvar_9;
      if ((tmpvar_7 >= 0.0)) {
        tmpvar_9 = tmpvar_8;
      } else {
        tmpvar_9 = -(tmpvar_8);
      };
      highp float tmpvar_10;
      tmpvar_10 = (scrpos_5.x / 4.0);
      highp float tmpvar_11;
      tmpvar_11 = (fract(abs(tmpvar_10)) * 4.0);
      highp float tmpvar_12;
      if ((tmpvar_10 >= 0.0)) {
        tmpvar_12 = tmpvar_11;
      } else {
        tmpvar_12 = -(tmpvar_11);
      };
      highp float x_13;
      x_13 = ((a_6 - _DITHERMATRIX[
        int(tmpvar_9)
      ][
        int(tmpvar_12)
      ]) - 0.01);
      if ((x_13 < 0.0)) {
        discard;
      };
    };
  };
  color_2.w = clamp (color_2.w, 0.0, 1.0);
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_7;
  tmpvar_7 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_7;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_MatrixMV[0].xyz;
  tmpvar_8[1] = unity_MatrixMV[1].xyz;
  tmpvar_8[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_9.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(N_1);
  N_1 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_11));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_10.xy * tmpvar_12));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_3.zw;
    tmpvar_6.xyw = o_13.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _Opaqueness;
uniform mediump float _AlphaClipThreshold;
uniform highp float _UsingDitherAlpha;
uniform sampler2D _factorTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2.xyz = (xlv_COLOR0.xyz * _Color.xyz);
  lowp float tmpvar_3;
  tmpvar_3 = texture2D (_factorTex, xlv_TEXCOORD0).y;
  alpha_1 = tmpvar_3;
  mediump float x_4;
  x_4 = (alpha_1 - _AlphaClipThreshold);
  if ((x_4 < 0.0)) {
    discard;
  };
  color_2.w = (xlv_COLOR0.w * (alpha_1 * _Opaqueness));
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_5;
    scrpos_5 = xlv_TEXCOORD3;
    mediump float a_6;
    a_6 = xlv_TEXCOORD3.z;
    if ((a_6 < 0.95)) {
      scrpos_5.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_6 = (a_6 * 17.0);
      highp float tmpvar_7;
      tmpvar_7 = (scrpos_5.y / 4.0);
      highp float tmpvar_8;
      tmpvar_8 = (fract(abs(tmpvar_7)) * 4.0);
      highp float tmpvar_9;
      if ((tmpvar_7 >= 0.0)) {
        tmpvar_9 = tmpvar_8;
      } else {
        tmpvar_9 = -(tmpvar_8);
      };
      highp float tmpvar_10;
      tmpvar_10 = (scrpos_5.x / 4.0);
      highp float tmpvar_11;
      tmpvar_11 = (fract(abs(tmpvar_10)) * 4.0);
      highp float tmpvar_12;
      if ((tmpvar_10 >= 0.0)) {
        tmpvar_12 = tmpvar_11;
      } else {
        tmpvar_12 = -(tmpvar_11);
      };
      highp float x_13;
      x_13 = ((a_6 - _DITHERMATRIX[
        int(tmpvar_9)
      ][
        int(tmpvar_12)
      ]) - 0.01);
      if ((x_13 < 0.0)) {
        discard;
      };
    };
  };
  color_2.w = clamp (color_2.w, 0.0, 1.0);
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_7;
  tmpvar_7 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_7;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_MatrixMV[0].xyz;
  tmpvar_8[1] = unity_MatrixMV[1].xyz;
  tmpvar_8[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_9.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(N_1);
  N_1 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_11));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_10.xy * tmpvar_12));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_13;
    highp vec4 tmpvar_14;
    tmpvar_14 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_15;
    tmpvar_15.x = tmpvar_14.x;
    tmpvar_15.y = (tmpvar_14.y * _ProjectionParams.x);
    o_13.xy = (tmpvar_15 + tmpvar_14.w);
    o_13.zw = tmpvar_3.zw;
    tmpvar_6.xyw = o_13.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _Opaqueness;
uniform mediump float _AlphaClipThreshold;
uniform highp float _UsingDitherAlpha;
uniform sampler2D _factorTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2.xyz = (xlv_COLOR0.xyz * _Color.xyz);
  lowp float tmpvar_3;
  tmpvar_3 = texture2D (_factorTex, xlv_TEXCOORD0).y;
  alpha_1 = tmpvar_3;
  mediump float x_4;
  x_4 = (alpha_1 - _AlphaClipThreshold);
  if ((x_4 < 0.0)) {
    discard;
  };
  color_2.w = (xlv_COLOR0.w * (alpha_1 * _Opaqueness));
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_5;
    scrpos_5 = xlv_TEXCOORD3;
    mediump float a_6;
    a_6 = xlv_TEXCOORD3.z;
    if ((a_6 < 0.95)) {
      scrpos_5.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_6 = (a_6 * 17.0);
      highp float tmpvar_7;
      tmpvar_7 = (scrpos_5.y / 4.0);
      highp float tmpvar_8;
      tmpvar_8 = (fract(abs(tmpvar_7)) * 4.0);
      highp float tmpvar_9;
      if ((tmpvar_7 >= 0.0)) {
        tmpvar_9 = tmpvar_8;
      } else {
        tmpvar_9 = -(tmpvar_8);
      };
      highp float tmpvar_10;
      tmpvar_10 = (scrpos_5.x / 4.0);
      highp float tmpvar_11;
      tmpvar_11 = (fract(abs(tmpvar_10)) * 4.0);
      highp float tmpvar_12;
      if ((tmpvar_10 >= 0.0)) {
        tmpvar_12 = tmpvar_11;
      } else {
        tmpvar_12 = -(tmpvar_11);
      };
      highp float x_13;
      x_13 = ((a_6 - _DITHERMATRIX[
        int(tmpvar_9)
      ][
        int(tmpvar_12)
      ]) - 0.01);
      if ((x_13 < 0.0)) {
        discard;
      };
    };
  };
  color_2.w = clamp (color_2.w, 0.0, 1.0);
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_7;
  tmpvar_7 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_7;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_MatrixMV[0].xyz;
  tmpvar_8[1] = unity_MatrixMV[1].xyz;
  tmpvar_8[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_9.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(N_1);
  N_1 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_11));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_10.xy * tmpvar_12));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  highp vec2 spnoiseuv_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spnoiseuv_13 = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_3.zw;
    tmpvar_6.xyw = o_16.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = spnoiseuv_13;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _Opaqueness;
uniform sampler2D _MainTex;
uniform mediump float _AlphaClipThreshold;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2 = xlv_COLOR0;
  mediump float intensity_3;
  mediump vec4 outColor_4;
  outColor_4 = _SPOutlineColor;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_6;
  tmpvar_6 = (((1.99 * tmpvar_5.x) * _SPNoiseScaler) - 1.0);
  intensity_3 = tmpvar_6;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_3 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_4 = xlv_COLOR0;
  };
  color_2.xyz = (outColor_4.xyz * _Color.xyz);
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0).w;
  alpha_1 = tmpvar_7;
  mediump float x_8;
  x_8 = (alpha_1 - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  color_2.w = (outColor_4.w * (alpha_1 * _Opaqueness));
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_9;
    scrpos_9 = xlv_TEXCOORD3;
    mediump float a_10;
    a_10 = xlv_TEXCOORD3.z;
    if ((a_10 < 0.95)) {
      scrpos_9.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_10 = (a_10 * 17.0);
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_9.y / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float tmpvar_14;
      tmpvar_14 = (scrpos_9.x / 4.0);
      highp float tmpvar_15;
      tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
      highp float tmpvar_16;
      if ((tmpvar_14 >= 0.0)) {
        tmpvar_16 = tmpvar_15;
      } else {
        tmpvar_16 = -(tmpvar_15);
      };
      highp float x_17;
      x_17 = ((a_10 - _DITHERMATRIX[
        int(tmpvar_13)
      ][
        int(tmpvar_16)
      ]) - 0.01);
      if ((x_17 < 0.0)) {
        discard;
      };
    };
  };
  color_2.w = clamp (color_2.w, 0.0, 1.0);
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_7;
  tmpvar_7 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_7;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_MatrixMV[0].xyz;
  tmpvar_8[1] = unity_MatrixMV[1].xyz;
  tmpvar_8[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_9.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(N_1);
  N_1 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_11));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_10.xy * tmpvar_12));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  highp vec2 spnoiseuv_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spnoiseuv_13 = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_3.zw;
    tmpvar_6.xyw = o_16.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = spnoiseuv_13;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _Opaqueness;
uniform sampler2D _MainTex;
uniform mediump float _AlphaClipThreshold;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2 = xlv_COLOR0;
  mediump float intensity_3;
  mediump vec4 outColor_4;
  outColor_4 = _SPOutlineColor;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_6;
  tmpvar_6 = (((1.99 * tmpvar_5.x) * _SPNoiseScaler) - 1.0);
  intensity_3 = tmpvar_6;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_3 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_4 = xlv_COLOR0;
  };
  color_2.xyz = (outColor_4.xyz * _Color.xyz);
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0).w;
  alpha_1 = tmpvar_7;
  mediump float x_8;
  x_8 = (alpha_1 - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  color_2.w = (outColor_4.w * (alpha_1 * _Opaqueness));
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_9;
    scrpos_9 = xlv_TEXCOORD3;
    mediump float a_10;
    a_10 = xlv_TEXCOORD3.z;
    if ((a_10 < 0.95)) {
      scrpos_9.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_10 = (a_10 * 17.0);
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_9.y / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float tmpvar_14;
      tmpvar_14 = (scrpos_9.x / 4.0);
      highp float tmpvar_15;
      tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
      highp float tmpvar_16;
      if ((tmpvar_14 >= 0.0)) {
        tmpvar_16 = tmpvar_15;
      } else {
        tmpvar_16 = -(tmpvar_15);
      };
      highp float x_17;
      x_17 = ((a_10 - _DITHERMATRIX[
        int(tmpvar_13)
      ][
        int(tmpvar_16)
      ]) - 0.01);
      if ((x_17 < 0.0)) {
        discard;
      };
    };
  };
  color_2.w = clamp (color_2.w, 0.0, 1.0);
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_7;
  tmpvar_7 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_7;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_MatrixMV[0].xyz;
  tmpvar_8[1] = unity_MatrixMV[1].xyz;
  tmpvar_8[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_9.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(N_1);
  N_1 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_11));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_10.xy * tmpvar_12));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  highp vec2 spnoiseuv_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spnoiseuv_13 = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_3.zw;
    tmpvar_6.xyw = o_16.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = spnoiseuv_13;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _Opaqueness;
uniform sampler2D _MainTex;
uniform mediump float _AlphaClipThreshold;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2 = xlv_COLOR0;
  mediump float intensity_3;
  mediump vec4 outColor_4;
  outColor_4 = _SPOutlineColor;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_6;
  tmpvar_6 = (((1.99 * tmpvar_5.x) * _SPNoiseScaler) - 1.0);
  intensity_3 = tmpvar_6;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_3 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_4 = xlv_COLOR0;
  };
  color_2.xyz = (outColor_4.xyz * _Color.xyz);
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0).w;
  alpha_1 = tmpvar_7;
  mediump float x_8;
  x_8 = (alpha_1 - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  color_2.w = (outColor_4.w * (alpha_1 * _Opaqueness));
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_9;
    scrpos_9 = xlv_TEXCOORD3;
    mediump float a_10;
    a_10 = xlv_TEXCOORD3.z;
    if ((a_10 < 0.95)) {
      scrpos_9.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_10 = (a_10 * 17.0);
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_9.y / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float tmpvar_14;
      tmpvar_14 = (scrpos_9.x / 4.0);
      highp float tmpvar_15;
      tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
      highp float tmpvar_16;
      if ((tmpvar_14 >= 0.0)) {
        tmpvar_16 = tmpvar_15;
      } else {
        tmpvar_16 = -(tmpvar_15);
      };
      highp float x_17;
      x_17 = ((a_10 - _DITHERMATRIX[
        int(tmpvar_13)
      ][
        int(tmpvar_16)
      ]) - 0.01);
      if ((x_17 < 0.0)) {
        discard;
      };
    };
  };
  color_2.w = clamp (color_2.w, 0.0, 1.0);
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_7;
  tmpvar_7 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_7;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_MatrixMV[0].xyz;
  tmpvar_8[1] = unity_MatrixMV[1].xyz;
  tmpvar_8[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_9.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(N_1);
  N_1 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_11));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_10.xy * tmpvar_12));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  highp vec2 spnoiseuv_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spnoiseuv_13 = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_3.zw;
    tmpvar_6.xyw = o_16.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = spnoiseuv_13;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _Opaqueness;
uniform mediump float _AlphaClipThreshold;
uniform highp float _UsingDitherAlpha;
uniform sampler2D _factorTex;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2 = xlv_COLOR0;
  mediump float intensity_3;
  mediump vec4 outColor_4;
  outColor_4 = _SPOutlineColor;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_6;
  tmpvar_6 = (((1.99 * tmpvar_5.x) * _SPNoiseScaler) - 1.0);
  intensity_3 = tmpvar_6;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_3 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_4 = xlv_COLOR0;
  };
  color_2.xyz = (outColor_4.xyz * _Color.xyz);
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0).y;
  alpha_1 = tmpvar_7;
  mediump float x_8;
  x_8 = (alpha_1 - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  color_2.w = (outColor_4.w * (alpha_1 * _Opaqueness));
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_9;
    scrpos_9 = xlv_TEXCOORD3;
    mediump float a_10;
    a_10 = xlv_TEXCOORD3.z;
    if ((a_10 < 0.95)) {
      scrpos_9.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_10 = (a_10 * 17.0);
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_9.y / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float tmpvar_14;
      tmpvar_14 = (scrpos_9.x / 4.0);
      highp float tmpvar_15;
      tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
      highp float tmpvar_16;
      if ((tmpvar_14 >= 0.0)) {
        tmpvar_16 = tmpvar_15;
      } else {
        tmpvar_16 = -(tmpvar_15);
      };
      highp float x_17;
      x_17 = ((a_10 - _DITHERMATRIX[
        int(tmpvar_13)
      ][
        int(tmpvar_16)
      ]) - 0.01);
      if ((x_17 < 0.0)) {
        discard;
      };
    };
  };
  color_2.w = clamp (color_2.w, 0.0, 1.0);
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_7;
  tmpvar_7 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_7;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_MatrixMV[0].xyz;
  tmpvar_8[1] = unity_MatrixMV[1].xyz;
  tmpvar_8[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_9.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(N_1);
  N_1 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_11));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_10.xy * tmpvar_12));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  highp vec2 spnoiseuv_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spnoiseuv_13 = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_3.zw;
    tmpvar_6.xyw = o_16.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = spnoiseuv_13;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _Opaqueness;
uniform mediump float _AlphaClipThreshold;
uniform highp float _UsingDitherAlpha;
uniform sampler2D _factorTex;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2 = xlv_COLOR0;
  mediump float intensity_3;
  mediump vec4 outColor_4;
  outColor_4 = _SPOutlineColor;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_6;
  tmpvar_6 = (((1.99 * tmpvar_5.x) * _SPNoiseScaler) - 1.0);
  intensity_3 = tmpvar_6;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_3 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_4 = xlv_COLOR0;
  };
  color_2.xyz = (outColor_4.xyz * _Color.xyz);
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0).y;
  alpha_1 = tmpvar_7;
  mediump float x_8;
  x_8 = (alpha_1 - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  color_2.w = (outColor_4.w * (alpha_1 * _Opaqueness));
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_9;
    scrpos_9 = xlv_TEXCOORD3;
    mediump float a_10;
    a_10 = xlv_TEXCOORD3.z;
    if ((a_10 < 0.95)) {
      scrpos_9.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_10 = (a_10 * 17.0);
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_9.y / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float tmpvar_14;
      tmpvar_14 = (scrpos_9.x / 4.0);
      highp float tmpvar_15;
      tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
      highp float tmpvar_16;
      if ((tmpvar_14 >= 0.0)) {
        tmpvar_16 = tmpvar_15;
      } else {
        tmpvar_16 = -(tmpvar_15);
      };
      highp float x_17;
      x_17 = ((a_10 - _DITHERMATRIX[
        int(tmpvar_13)
      ][
        int(tmpvar_16)
      ]) - 0.01);
      if ((x_17 < 0.0)) {
        discard;
      };
    };
  };
  color_2.w = clamp (color_2.w, 0.0, 1.0);
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec2 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_7;
  tmpvar_7 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_7;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_MatrixMV[0].xyz;
  tmpvar_8[1] = unity_MatrixMV[1].xyz;
  tmpvar_8[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_9.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_10;
  tmpvar_10 = normalize(N_1);
  N_1 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_11));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_10.xy * tmpvar_12));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  highp vec2 spnoiseuv_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = (_glesVertex * 0.5);
  highp vec2 tmpvar_15;
  tmpvar_15.x = (tmpvar_14.x + (tmpvar_14.z * tmpvar_14.z));
  tmpvar_15.y = ((tmpvar_14.y + (0.5 * tmpvar_14.z)) + ((0.5 * tmpvar_14.x) * tmpvar_14.x));
  spnoiseuv_13 = ((tmpvar_15 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_3.zw;
    tmpvar_6.xyw = o_16.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = spnoiseuv_13;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _Opaqueness;
uniform mediump float _AlphaClipThreshold;
uniform highp float _UsingDitherAlpha;
uniform sampler2D _factorTex;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2 = xlv_COLOR0;
  mediump float intensity_3;
  mediump vec4 outColor_4;
  outColor_4 = _SPOutlineColor;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_6;
  tmpvar_6 = (((1.99 * tmpvar_5.x) * _SPNoiseScaler) - 1.0);
  intensity_3 = tmpvar_6;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_3 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_4 = xlv_COLOR0;
  };
  color_2.xyz = (outColor_4.xyz * _Color.xyz);
  lowp float tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, xlv_TEXCOORD0).y;
  alpha_1 = tmpvar_7;
  mediump float x_8;
  x_8 = (alpha_1 - _AlphaClipThreshold);
  if ((x_8 < 0.0)) {
    discard;
  };
  color_2.w = (outColor_4.w * (alpha_1 * _Opaqueness));
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_9;
    scrpos_9 = xlv_TEXCOORD3;
    mediump float a_10;
    a_10 = xlv_TEXCOORD3.z;
    if ((a_10 < 0.95)) {
      scrpos_9.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_10 = (a_10 * 17.0);
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_9.y / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float tmpvar_14;
      tmpvar_14 = (scrpos_9.x / 4.0);
      highp float tmpvar_15;
      tmpvar_15 = (fract(abs(tmpvar_14)) * 4.0);
      highp float tmpvar_16;
      if ((tmpvar_14 >= 0.0)) {
        tmpvar_16 = tmpvar_15;
      } else {
        tmpvar_16 = -(tmpvar_15);
      };
      highp float x_17;
      x_17 = ((a_10 - _DITHERMATRIX[
        int(tmpvar_13)
      ][
        int(tmpvar_16)
      ]) - 0.01);
      if ((x_17 < 0.0)) {
        discard;
      };
    };
  };
  color_2.w = clamp (color_2.w, 0.0, 1.0);
  gl_FragData[0] = color_2;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
}
}
 Pass {
  LOD 200
  Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "OutlineType" = "Complex" "QUEUE" = "Transparent" "Reflected" = "Reflected" "RenderType" = "Transparent" }
  GpuProgramID 186179
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec2 tmpvar_1;
  mediump vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  tmpvar_1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  if (bool(_UsingBloomMask)) {
    tmpvar_2 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump float _BloomFactor;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2.xyz = vec3(0.0, 0.0, 0.0);
  lowp float tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0).w;
  alpha_1 = tmpvar_3;
  mediump float x_4;
  x_4 = (alpha_1 - _AlphaClipThreshold);
  if ((x_4 < 0.0)) {
    discard;
  };
  color_2.w = _BloomFactor;
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec2 tmpvar_1;
  mediump vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  tmpvar_1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  if (bool(_UsingBloomMask)) {
    tmpvar_2 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump float _BloomFactor;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2.xyz = vec3(0.0, 0.0, 0.0);
  lowp float tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0).w;
  alpha_1 = tmpvar_3;
  mediump float x_4;
  x_4 = (alpha_1 - _AlphaClipThreshold);
  if ((x_4 < 0.0)) {
    discard;
  };
  color_2.w = _BloomFactor;
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec2 tmpvar_1;
  mediump vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  tmpvar_1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  if (bool(_UsingBloomMask)) {
    tmpvar_2 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump float _BloomFactor;
uniform mediump float _AlphaClipThreshold;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2.xyz = vec3(0.0, 0.0, 0.0);
  lowp float tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0).w;
  alpha_1 = tmpvar_3;
  mediump float x_4;
  x_4 = (alpha_1 - _AlphaClipThreshold);
  if ((x_4 < 0.0)) {
    discard;
  };
  color_2.w = _BloomFactor;
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec2 tmpvar_1;
  mediump vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  tmpvar_1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  if (bool(_UsingBloomMask)) {
    tmpvar_2 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  highp vec4 tmpvar_5;
  tmpvar_5 = (_glesVertex * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = (tmpvar_5.x + (tmpvar_5.z * tmpvar_5.z));
  tmpvar_6.y = ((tmpvar_5.y + (0.5 * tmpvar_5.z)) + ((0.5 * tmpvar_5.x) * tmpvar_5.x));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((tmpvar_6 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  xlv_TEXCOORD2 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionBloomFactor;
uniform sampler2D _MainTex;
uniform mediump float _BloomFactor;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPTransition;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2.xyz = vec3(0.0, 0.0, 0.0);
  lowp float tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0).w;
  alpha_1 = tmpvar_3;
  mediump float x_4;
  x_4 = (alpha_1 - _AlphaClipThreshold);
  if ((x_4 < 0.0)) {
    discard;
  };
  color_2.w = _BloomFactor;
  mediump float intensity_5;
  mediump float outBloomFactor_6;
  outBloomFactor_6 = color_2.w;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_8;
  tmpvar_8 = (((1.99 * tmpvar_7.x) * _SPNoiseScaler) - 1.0);
  intensity_5 = tmpvar_8;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if (((intensity_5 >= (1.5 * xlat_mutable_SPTransition)) && (intensity_5 < (1.7 * xlat_mutable_SPTransition)))) {
    highp float tmpvar_9;
    tmpvar_9 = mix (_BloomFactor, _SPTransitionBloomFactor, clamp ((10.0 * 
      (-(intensity_5) + (1.7 * xlat_mutable_SPTransition))
    ), 0.0, 1.0));
    outBloomFactor_6 = tmpvar_9;
  } else {
    if ((intensity_5 < (1.5 * xlat_mutable_SPTransition))) {
      outBloomFactor_6 = (outBloomFactor_6 * _SPOpaqueness);
    };
  };
  color_2.w = outBloomFactor_6;
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec2 tmpvar_1;
  mediump vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  tmpvar_1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  if (bool(_UsingBloomMask)) {
    tmpvar_2 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  highp vec4 tmpvar_5;
  tmpvar_5 = (_glesVertex * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = (tmpvar_5.x + (tmpvar_5.z * tmpvar_5.z));
  tmpvar_6.y = ((tmpvar_5.y + (0.5 * tmpvar_5.z)) + ((0.5 * tmpvar_5.x) * tmpvar_5.x));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((tmpvar_6 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  xlv_TEXCOORD2 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionBloomFactor;
uniform sampler2D _MainTex;
uniform mediump float _BloomFactor;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPTransition;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2.xyz = vec3(0.0, 0.0, 0.0);
  lowp float tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0).w;
  alpha_1 = tmpvar_3;
  mediump float x_4;
  x_4 = (alpha_1 - _AlphaClipThreshold);
  if ((x_4 < 0.0)) {
    discard;
  };
  color_2.w = _BloomFactor;
  mediump float intensity_5;
  mediump float outBloomFactor_6;
  outBloomFactor_6 = color_2.w;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_8;
  tmpvar_8 = (((1.99 * tmpvar_7.x) * _SPNoiseScaler) - 1.0);
  intensity_5 = tmpvar_8;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if (((intensity_5 >= (1.5 * xlat_mutable_SPTransition)) && (intensity_5 < (1.7 * xlat_mutable_SPTransition)))) {
    highp float tmpvar_9;
    tmpvar_9 = mix (_BloomFactor, _SPTransitionBloomFactor, clamp ((10.0 * 
      (-(intensity_5) + (1.7 * xlat_mutable_SPTransition))
    ), 0.0, 1.0));
    outBloomFactor_6 = tmpvar_9;
  } else {
    if ((intensity_5 < (1.5 * xlat_mutable_SPTransition))) {
      outBloomFactor_6 = (outBloomFactor_6 * _SPOpaqueness);
    };
  };
  color_2.w = outBloomFactor_6;
  gl_FragData[0] = color_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec2 tmpvar_1;
  mediump vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  tmpvar_1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  if (bool(_UsingBloomMask)) {
    tmpvar_2 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  highp vec4 tmpvar_5;
  tmpvar_5 = (_glesVertex * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = (tmpvar_5.x + (tmpvar_5.z * tmpvar_5.z));
  tmpvar_6.y = ((tmpvar_5.y + (0.5 * tmpvar_5.z)) + ((0.5 * tmpvar_5.x) * tmpvar_5.x));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((tmpvar_6 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  xlv_TEXCOORD2 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionBloomFactor;
uniform sampler2D _MainTex;
uniform mediump float _BloomFactor;
uniform mediump float _AlphaClipThreshold;
highp float xlat_mutable_SPTransition;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  mediump float alpha_1;
  mediump vec4 color_2;
  color_2.xyz = vec3(0.0, 0.0, 0.0);
  lowp float tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0).w;
  alpha_1 = tmpvar_3;
  mediump float x_4;
  x_4 = (alpha_1 - _AlphaClipThreshold);
  if ((x_4 < 0.0)) {
    discard;
  };
  color_2.w = _BloomFactor;
  mediump float intensity_5;
  mediump float outBloomFactor_6;
  outBloomFactor_6 = color_2.w;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_8;
  tmpvar_8 = (((1.99 * tmpvar_7.x) * _SPNoiseScaler) - 1.0);
  intensity_5 = tmpvar_8;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if (((intensity_5 >= (1.5 * xlat_mutable_SPTransition)) && (intensity_5 < (1.7 * xlat_mutable_SPTransition)))) {
    highp float tmpvar_9;
    tmpvar_9 = mix (_BloomFactor, _SPTransitionBloomFactor, clamp ((10.0 * 
      (-(intensity_5) + (1.7 * xlat_mutable_SPTransition))
    ), 0.0, 1.0));
    outBloomFactor_6 = tmpvar_9;
  } else {
    if ((intensity_5 < (1.5 * xlat_mutable_SPTransition))) {
      outBloomFactor_6 = (outBloomFactor_6 * _SPOpaqueness);
    };
  };
  color_2.w = outBloomFactor_6;
  gl_FragData[0] = color_2;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
""
}
}
}
}
CustomEditor "MoleMole.CharacterShaderEditorBase"
}