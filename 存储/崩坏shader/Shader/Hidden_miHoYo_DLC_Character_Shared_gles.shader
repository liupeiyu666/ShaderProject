//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Hidden/miHoYo/DLC/Character/Shared" {
Properties {
}
SubShader {
 Tags { "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
 Pass {
  Name "TRANSPARENTALPHA"
  Tags { "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  ZWrite Off
  Cull Off
  GpuProgramID 41222
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainMaps_ST;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  tmpvar_3 = o_7;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_glesNormal * tmpvar_10));
  if (bool(_UsingDitherAlpha)) {
    tmpvar_3.z = _DitherAlpha;
  };
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _LightMap;
uniform mediump float _BloomIntensity0;
uniform mediump float _BloomIntensity1;
uniform mediump float _BloomIntensity2;
uniform mediump float _BloomIntensity3;
uniform mediump float _BloomIntensity4;
uniform mediump float _BloomIntensity5;
uniform mediump float _BloomIntensity6;
uniform mediump float _BloomIntensity7;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 lightmap_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_2 = tmpvar_3;
  mediump float tmpvar_4;
  tmpvar_4 = floor(((lightmap_2.w * 8.0) + 0.5));
  bool tmpvar_5;
  if (((-0.5 < tmpvar_4) && (tmpvar_4 < 0.5))) {
    tmpvar_5 = bool(1);
  } else {
    tmpvar_5 = bool(0);
  };
  if (tmpvar_5) {
    tmpvar_1 = vec4(_BloomIntensity0);
  } else {
    bool tmpvar_6;
    if (((0.5 < tmpvar_4) && (tmpvar_4 < 1.5))) {
      tmpvar_6 = bool(1);
    } else {
      tmpvar_6 = bool(0);
    };
    if (tmpvar_6) {
      tmpvar_1 = vec4(_BloomIntensity1);
    } else {
      bool tmpvar_7;
      if (((1.5 < tmpvar_4) && (tmpvar_4 < 2.5))) {
        tmpvar_7 = bool(1);
      } else {
        tmpvar_7 = bool(0);
      };
      if (tmpvar_7) {
        tmpvar_1 = vec4(_BloomIntensity2);
      } else {
        bool tmpvar_8;
        if (((2.5 < tmpvar_4) && (tmpvar_4 < 3.5))) {
          tmpvar_8 = bool(1);
        } else {
          tmpvar_8 = bool(0);
        };
        if (tmpvar_8) {
          tmpvar_1 = vec4(_BloomIntensity3);
        } else {
          bool tmpvar_9;
          if (((3.5 < tmpvar_4) && (tmpvar_4 < 4.5))) {
            tmpvar_9 = bool(1);
          } else {
            tmpvar_9 = bool(0);
          };
          if (tmpvar_9) {
            tmpvar_1 = vec4(_BloomIntensity4);
          } else {
            bool tmpvar_10;
            if (((4.5 < tmpvar_4) && (tmpvar_4 < 5.5))) {
              tmpvar_10 = bool(1);
            } else {
              tmpvar_10 = bool(0);
            };
            if (tmpvar_10) {
              tmpvar_1 = vec4(_BloomIntensity5);
            } else {
              bool tmpvar_11;
              if (((5.5 < tmpvar_4) && (tmpvar_4 < 6.5))) {
                tmpvar_11 = bool(1);
              } else {
                tmpvar_11 = bool(0);
              };
              if (tmpvar_11) {
                tmpvar_1 = vec4(_BloomIntensity6);
              } else {
                tmpvar_1 = vec4(_BloomIntensity7);
              };
            };
          };
        };
      };
    };
  };
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainMaps_ST;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  tmpvar_3 = o_7;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_glesNormal * tmpvar_10));
  if (bool(_UsingDitherAlpha)) {
    tmpvar_3.z = _DitherAlpha;
  };
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _LightMap;
uniform mediump float _BloomIntensity0;
uniform mediump float _BloomIntensity1;
uniform mediump float _BloomIntensity2;
uniform mediump float _BloomIntensity3;
uniform mediump float _BloomIntensity4;
uniform mediump float _BloomIntensity5;
uniform mediump float _BloomIntensity6;
uniform mediump float _BloomIntensity7;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 lightmap_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_2 = tmpvar_3;
  mediump float tmpvar_4;
  tmpvar_4 = floor(((lightmap_2.w * 8.0) + 0.5));
  bool tmpvar_5;
  if (((-0.5 < tmpvar_4) && (tmpvar_4 < 0.5))) {
    tmpvar_5 = bool(1);
  } else {
    tmpvar_5 = bool(0);
  };
  if (tmpvar_5) {
    tmpvar_1 = vec4(_BloomIntensity0);
  } else {
    bool tmpvar_6;
    if (((0.5 < tmpvar_4) && (tmpvar_4 < 1.5))) {
      tmpvar_6 = bool(1);
    } else {
      tmpvar_6 = bool(0);
    };
    if (tmpvar_6) {
      tmpvar_1 = vec4(_BloomIntensity1);
    } else {
      bool tmpvar_7;
      if (((1.5 < tmpvar_4) && (tmpvar_4 < 2.5))) {
        tmpvar_7 = bool(1);
      } else {
        tmpvar_7 = bool(0);
      };
      if (tmpvar_7) {
        tmpvar_1 = vec4(_BloomIntensity2);
      } else {
        bool tmpvar_8;
        if (((2.5 < tmpvar_4) && (tmpvar_4 < 3.5))) {
          tmpvar_8 = bool(1);
        } else {
          tmpvar_8 = bool(0);
        };
        if (tmpvar_8) {
          tmpvar_1 = vec4(_BloomIntensity3);
        } else {
          bool tmpvar_9;
          if (((3.5 < tmpvar_4) && (tmpvar_4 < 4.5))) {
            tmpvar_9 = bool(1);
          } else {
            tmpvar_9 = bool(0);
          };
          if (tmpvar_9) {
            tmpvar_1 = vec4(_BloomIntensity4);
          } else {
            bool tmpvar_10;
            if (((4.5 < tmpvar_4) && (tmpvar_4 < 5.5))) {
              tmpvar_10 = bool(1);
            } else {
              tmpvar_10 = bool(0);
            };
            if (tmpvar_10) {
              tmpvar_1 = vec4(_BloomIntensity5);
            } else {
              bool tmpvar_11;
              if (((5.5 < tmpvar_4) && (tmpvar_4 < 6.5))) {
                tmpvar_11 = bool(1);
              } else {
                tmpvar_11 = bool(0);
              };
              if (tmpvar_11) {
                tmpvar_1 = vec4(_BloomIntensity6);
              } else {
                tmpvar_1 = vec4(_BloomIntensity7);
              };
            };
          };
        };
      };
    };
  };
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainMaps_ST;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  tmpvar_3 = o_7;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_glesNormal * tmpvar_10));
  if (bool(_UsingDitherAlpha)) {
    tmpvar_3.z = _DitherAlpha;
  };
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _LightMap;
uniform mediump float _BloomIntensity0;
uniform mediump float _BloomIntensity1;
uniform mediump float _BloomIntensity2;
uniform mediump float _BloomIntensity3;
uniform mediump float _BloomIntensity4;
uniform mediump float _BloomIntensity5;
uniform mediump float _BloomIntensity6;
uniform mediump float _BloomIntensity7;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 lightmap_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_2 = tmpvar_3;
  mediump float tmpvar_4;
  tmpvar_4 = floor(((lightmap_2.w * 8.0) + 0.5));
  bool tmpvar_5;
  if (((-0.5 < tmpvar_4) && (tmpvar_4 < 0.5))) {
    tmpvar_5 = bool(1);
  } else {
    tmpvar_5 = bool(0);
  };
  if (tmpvar_5) {
    tmpvar_1 = vec4(_BloomIntensity0);
  } else {
    bool tmpvar_6;
    if (((0.5 < tmpvar_4) && (tmpvar_4 < 1.5))) {
      tmpvar_6 = bool(1);
    } else {
      tmpvar_6 = bool(0);
    };
    if (tmpvar_6) {
      tmpvar_1 = vec4(_BloomIntensity1);
    } else {
      bool tmpvar_7;
      if (((1.5 < tmpvar_4) && (tmpvar_4 < 2.5))) {
        tmpvar_7 = bool(1);
      } else {
        tmpvar_7 = bool(0);
      };
      if (tmpvar_7) {
        tmpvar_1 = vec4(_BloomIntensity2);
      } else {
        bool tmpvar_8;
        if (((2.5 < tmpvar_4) && (tmpvar_4 < 3.5))) {
          tmpvar_8 = bool(1);
        } else {
          tmpvar_8 = bool(0);
        };
        if (tmpvar_8) {
          tmpvar_1 = vec4(_BloomIntensity3);
        } else {
          bool tmpvar_9;
          if (((3.5 < tmpvar_4) && (tmpvar_4 < 4.5))) {
            tmpvar_9 = bool(1);
          } else {
            tmpvar_9 = bool(0);
          };
          if (tmpvar_9) {
            tmpvar_1 = vec4(_BloomIntensity4);
          } else {
            bool tmpvar_10;
            if (((4.5 < tmpvar_4) && (tmpvar_4 < 5.5))) {
              tmpvar_10 = bool(1);
            } else {
              tmpvar_10 = bool(0);
            };
            if (tmpvar_10) {
              tmpvar_1 = vec4(_BloomIntensity5);
            } else {
              bool tmpvar_11;
              if (((5.5 < tmpvar_4) && (tmpvar_4 < 6.5))) {
                tmpvar_11 = bool(1);
              } else {
                tmpvar_11 = bool(0);
              };
              if (tmpvar_11) {
                tmpvar_1 = vec4(_BloomIntensity6);
              } else {
                tmpvar_1 = vec4(_BloomIntensity7);
              };
            };
          };
        };
      };
    };
  };
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainMaps_ST;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  tmpvar_3 = o_7;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_glesNormal * tmpvar_10));
  if (bool(_UsingDitherAlpha)) {
    tmpvar_3.z = _DitherAlpha;
  };
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _LightMap;
uniform mediump float _BloomIntensity0;
uniform mediump float _BloomIntensity1;
uniform mediump float _BloomIntensity2;
uniform mediump float _BloomIntensity3;
uniform mediump float _BloomIntensity4;
uniform mediump float _BloomIntensity5;
uniform mediump float _BloomIntensity6;
uniform mediump float _BloomIntensity7;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 lightmap_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_2 = tmpvar_3;
  mediump float tmpvar_4;
  tmpvar_4 = floor(((lightmap_2.w * 8.0) + 0.5));
  bool tmpvar_5;
  if (((-0.5 < tmpvar_4) && (tmpvar_4 < 0.5))) {
    tmpvar_5 = bool(1);
  } else {
    tmpvar_5 = bool(0);
  };
  if (tmpvar_5) {
    tmpvar_1 = vec4(_BloomIntensity0);
  } else {
    bool tmpvar_6;
    if (((0.5 < tmpvar_4) && (tmpvar_4 < 1.5))) {
      tmpvar_6 = bool(1);
    } else {
      tmpvar_6 = bool(0);
    };
    if (tmpvar_6) {
      tmpvar_1 = vec4(_BloomIntensity1);
    } else {
      bool tmpvar_7;
      if (((1.5 < tmpvar_4) && (tmpvar_4 < 2.5))) {
        tmpvar_7 = bool(1);
      } else {
        tmpvar_7 = bool(0);
      };
      if (tmpvar_7) {
        tmpvar_1 = vec4(_BloomIntensity2);
      } else {
        bool tmpvar_8;
        if (((2.5 < tmpvar_4) && (tmpvar_4 < 3.5))) {
          tmpvar_8 = bool(1);
        } else {
          tmpvar_8 = bool(0);
        };
        if (tmpvar_8) {
          tmpvar_1 = vec4(_BloomIntensity3);
        } else {
          bool tmpvar_9;
          if (((3.5 < tmpvar_4) && (tmpvar_4 < 4.5))) {
            tmpvar_9 = bool(1);
          } else {
            tmpvar_9 = bool(0);
          };
          if (tmpvar_9) {
            tmpvar_1 = vec4(_BloomIntensity4);
          } else {
            bool tmpvar_10;
            if (((4.5 < tmpvar_4) && (tmpvar_4 < 5.5))) {
              tmpvar_10 = bool(1);
            } else {
              tmpvar_10 = bool(0);
            };
            if (tmpvar_10) {
              tmpvar_1 = vec4(_BloomIntensity5);
            } else {
              bool tmpvar_11;
              if (((5.5 < tmpvar_4) && (tmpvar_4 < 6.5))) {
                tmpvar_11 = bool(1);
              } else {
                tmpvar_11 = bool(0);
              };
              if (tmpvar_11) {
                tmpvar_1 = vec4(_BloomIntensity6);
              } else {
                tmpvar_1 = vec4(_BloomIntensity7);
              };
            };
          };
        };
      };
    };
  };
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainMaps_ST;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  tmpvar_3 = o_7;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_glesNormal * tmpvar_10));
  if (bool(_UsingDitherAlpha)) {
    tmpvar_3.z = _DitherAlpha;
  };
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _LightMap;
uniform mediump float _BloomIntensity0;
uniform mediump float _BloomIntensity1;
uniform mediump float _BloomIntensity2;
uniform mediump float _BloomIntensity3;
uniform mediump float _BloomIntensity4;
uniform mediump float _BloomIntensity5;
uniform mediump float _BloomIntensity6;
uniform mediump float _BloomIntensity7;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 lightmap_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_2 = tmpvar_3;
  mediump float tmpvar_4;
  tmpvar_4 = floor(((lightmap_2.w * 8.0) + 0.5));
  bool tmpvar_5;
  if (((-0.5 < tmpvar_4) && (tmpvar_4 < 0.5))) {
    tmpvar_5 = bool(1);
  } else {
    tmpvar_5 = bool(0);
  };
  if (tmpvar_5) {
    tmpvar_1 = vec4(_BloomIntensity0);
  } else {
    bool tmpvar_6;
    if (((0.5 < tmpvar_4) && (tmpvar_4 < 1.5))) {
      tmpvar_6 = bool(1);
    } else {
      tmpvar_6 = bool(0);
    };
    if (tmpvar_6) {
      tmpvar_1 = vec4(_BloomIntensity1);
    } else {
      bool tmpvar_7;
      if (((1.5 < tmpvar_4) && (tmpvar_4 < 2.5))) {
        tmpvar_7 = bool(1);
      } else {
        tmpvar_7 = bool(0);
      };
      if (tmpvar_7) {
        tmpvar_1 = vec4(_BloomIntensity2);
      } else {
        bool tmpvar_8;
        if (((2.5 < tmpvar_4) && (tmpvar_4 < 3.5))) {
          tmpvar_8 = bool(1);
        } else {
          tmpvar_8 = bool(0);
        };
        if (tmpvar_8) {
          tmpvar_1 = vec4(_BloomIntensity3);
        } else {
          bool tmpvar_9;
          if (((3.5 < tmpvar_4) && (tmpvar_4 < 4.5))) {
            tmpvar_9 = bool(1);
          } else {
            tmpvar_9 = bool(0);
          };
          if (tmpvar_9) {
            tmpvar_1 = vec4(_BloomIntensity4);
          } else {
            bool tmpvar_10;
            if (((4.5 < tmpvar_4) && (tmpvar_4 < 5.5))) {
              tmpvar_10 = bool(1);
            } else {
              tmpvar_10 = bool(0);
            };
            if (tmpvar_10) {
              tmpvar_1 = vec4(_BloomIntensity5);
            } else {
              bool tmpvar_11;
              if (((5.5 < tmpvar_4) && (tmpvar_4 < 6.5))) {
                tmpvar_11 = bool(1);
              } else {
                tmpvar_11 = bool(0);
              };
              if (tmpvar_11) {
                tmpvar_1 = vec4(_BloomIntensity6);
              } else {
                tmpvar_1 = vec4(_BloomIntensity7);
              };
            };
          };
        };
      };
    };
  };
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainMaps_ST;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  tmpvar_3 = o_7;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_glesNormal * tmpvar_10));
  if (bool(_UsingDitherAlpha)) {
    tmpvar_3.z = _DitherAlpha;
  };
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _LightMap;
uniform mediump float _BloomIntensity0;
uniform mediump float _BloomIntensity1;
uniform mediump float _BloomIntensity2;
uniform mediump float _BloomIntensity3;
uniform mediump float _BloomIntensity4;
uniform mediump float _BloomIntensity5;
uniform mediump float _BloomIntensity6;
uniform mediump float _BloomIntensity7;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 lightmap_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_2 = tmpvar_3;
  mediump float tmpvar_4;
  tmpvar_4 = floor(((lightmap_2.w * 8.0) + 0.5));
  bool tmpvar_5;
  if (((-0.5 < tmpvar_4) && (tmpvar_4 < 0.5))) {
    tmpvar_5 = bool(1);
  } else {
    tmpvar_5 = bool(0);
  };
  if (tmpvar_5) {
    tmpvar_1 = vec4(_BloomIntensity0);
  } else {
    bool tmpvar_6;
    if (((0.5 < tmpvar_4) && (tmpvar_4 < 1.5))) {
      tmpvar_6 = bool(1);
    } else {
      tmpvar_6 = bool(0);
    };
    if (tmpvar_6) {
      tmpvar_1 = vec4(_BloomIntensity1);
    } else {
      bool tmpvar_7;
      if (((1.5 < tmpvar_4) && (tmpvar_4 < 2.5))) {
        tmpvar_7 = bool(1);
      } else {
        tmpvar_7 = bool(0);
      };
      if (tmpvar_7) {
        tmpvar_1 = vec4(_BloomIntensity2);
      } else {
        bool tmpvar_8;
        if (((2.5 < tmpvar_4) && (tmpvar_4 < 3.5))) {
          tmpvar_8 = bool(1);
        } else {
          tmpvar_8 = bool(0);
        };
        if (tmpvar_8) {
          tmpvar_1 = vec4(_BloomIntensity3);
        } else {
          bool tmpvar_9;
          if (((3.5 < tmpvar_4) && (tmpvar_4 < 4.5))) {
            tmpvar_9 = bool(1);
          } else {
            tmpvar_9 = bool(0);
          };
          if (tmpvar_9) {
            tmpvar_1 = vec4(_BloomIntensity4);
          } else {
            bool tmpvar_10;
            if (((4.5 < tmpvar_4) && (tmpvar_4 < 5.5))) {
              tmpvar_10 = bool(1);
            } else {
              tmpvar_10 = bool(0);
            };
            if (tmpvar_10) {
              tmpvar_1 = vec4(_BloomIntensity5);
            } else {
              bool tmpvar_11;
              if (((5.5 < tmpvar_4) && (tmpvar_4 < 6.5))) {
                tmpvar_11 = bool(1);
              } else {
                tmpvar_11 = bool(0);
              };
              if (tmpvar_11) {
                tmpvar_1 = vec4(_BloomIntensity6);
              } else {
                tmpvar_1 = vec4(_BloomIntensity7);
              };
            };
          };
        };
      };
    };
  };
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainMaps_ST;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  tmpvar_3 = o_7;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_glesNormal * tmpvar_10));
  if (bool(_UsingDitherAlpha)) {
    tmpvar_3.z = _DitherAlpha;
  };
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMap;
uniform mediump float _BloomIntensity0;
uniform mediump float _BloomIntensity1;
uniform mediump float _BloomIntensity2;
uniform mediump float _BloomIntensity3;
uniform mediump float _BloomIntensity4;
uniform mediump float _BloomIntensity5;
uniform mediump float _BloomIntensity6;
uniform mediump float _BloomIntensity7;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 lightmap_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = ((tmpvar_4 * _Color) * _EnvColor);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_2 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_2.w * 8.0) + 0.5));
  bool tmpvar_9;
  if (((-0.5 < tmpvar_8) && (tmpvar_8 < 0.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    tmpvar_1 = vec4(_BloomIntensity0);
  } else {
    bool tmpvar_10;
    if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      tmpvar_1 = vec4(_BloomIntensity1);
    } else {
      bool tmpvar_11;
      if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        tmpvar_1 = vec4(_BloomIntensity2);
      } else {
        bool tmpvar_12;
        if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          tmpvar_1 = vec4(_BloomIntensity3);
        } else {
          bool tmpvar_13;
          if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            tmpvar_1 = vec4(_BloomIntensity4);
          } else {
            bool tmpvar_14;
            if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              tmpvar_1 = vec4(_BloomIntensity5);
            } else {
              bool tmpvar_15;
              if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
                tmpvar_15 = bool(1);
              } else {
                tmpvar_15 = bool(0);
              };
              if (tmpvar_15) {
                tmpvar_1 = vec4(_BloomIntensity6);
              } else {
                tmpvar_1 = vec4(_BloomIntensity7);
              };
            };
          };
        };
      };
    };
  };
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainMaps_ST;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  tmpvar_3 = o_7;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_glesNormal * tmpvar_10));
  if (bool(_UsingDitherAlpha)) {
    tmpvar_3.z = _DitherAlpha;
  };
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMap;
uniform mediump float _BloomIntensity0;
uniform mediump float _BloomIntensity1;
uniform mediump float _BloomIntensity2;
uniform mediump float _BloomIntensity3;
uniform mediump float _BloomIntensity4;
uniform mediump float _BloomIntensity5;
uniform mediump float _BloomIntensity6;
uniform mediump float _BloomIntensity7;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 lightmap_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = ((tmpvar_4 * _Color) * _EnvColor);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_2 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_2.w * 8.0) + 0.5));
  bool tmpvar_9;
  if (((-0.5 < tmpvar_8) && (tmpvar_8 < 0.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    tmpvar_1 = vec4(_BloomIntensity0);
  } else {
    bool tmpvar_10;
    if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      tmpvar_1 = vec4(_BloomIntensity1);
    } else {
      bool tmpvar_11;
      if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        tmpvar_1 = vec4(_BloomIntensity2);
      } else {
        bool tmpvar_12;
        if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          tmpvar_1 = vec4(_BloomIntensity3);
        } else {
          bool tmpvar_13;
          if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            tmpvar_1 = vec4(_BloomIntensity4);
          } else {
            bool tmpvar_14;
            if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              tmpvar_1 = vec4(_BloomIntensity5);
            } else {
              bool tmpvar_15;
              if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
                tmpvar_15 = bool(1);
              } else {
                tmpvar_15 = bool(0);
              };
              if (tmpvar_15) {
                tmpvar_1 = vec4(_BloomIntensity6);
              } else {
                tmpvar_1 = vec4(_BloomIntensity7);
              };
            };
          };
        };
      };
    };
  };
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainMaps_ST;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  tmpvar_3 = o_7;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_glesNormal * tmpvar_10));
  if (bool(_UsingDitherAlpha)) {
    tmpvar_3.z = _DitherAlpha;
  };
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMap;
uniform mediump float _BloomIntensity0;
uniform mediump float _BloomIntensity1;
uniform mediump float _BloomIntensity2;
uniform mediump float _BloomIntensity3;
uniform mediump float _BloomIntensity4;
uniform mediump float _BloomIntensity5;
uniform mediump float _BloomIntensity6;
uniform mediump float _BloomIntensity7;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 lightmap_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = ((tmpvar_4 * _Color) * _EnvColor);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_2 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_2.w * 8.0) + 0.5));
  bool tmpvar_9;
  if (((-0.5 < tmpvar_8) && (tmpvar_8 < 0.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    tmpvar_1 = vec4(_BloomIntensity0);
  } else {
    bool tmpvar_10;
    if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      tmpvar_1 = vec4(_BloomIntensity1);
    } else {
      bool tmpvar_11;
      if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        tmpvar_1 = vec4(_BloomIntensity2);
      } else {
        bool tmpvar_12;
        if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          tmpvar_1 = vec4(_BloomIntensity3);
        } else {
          bool tmpvar_13;
          if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            tmpvar_1 = vec4(_BloomIntensity4);
          } else {
            bool tmpvar_14;
            if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              tmpvar_1 = vec4(_BloomIntensity5);
            } else {
              bool tmpvar_15;
              if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
                tmpvar_15 = bool(1);
              } else {
                tmpvar_15 = bool(0);
              };
              if (tmpvar_15) {
                tmpvar_1 = vec4(_BloomIntensity6);
              } else {
                tmpvar_1 = vec4(_BloomIntensity7);
              };
            };
          };
        };
      };
    };
  };
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainMaps_ST;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  tmpvar_3 = o_7;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_glesNormal * tmpvar_10));
  if (bool(_UsingDitherAlpha)) {
    tmpvar_3.z = _DitherAlpha;
  };
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMap;
uniform mediump float _BloomIntensity0;
uniform mediump float _BloomIntensity1;
uniform mediump float _BloomIntensity2;
uniform mediump float _BloomIntensity3;
uniform mediump float _BloomIntensity4;
uniform mediump float _BloomIntensity5;
uniform mediump float _BloomIntensity6;
uniform mediump float _BloomIntensity7;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 lightmap_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = ((tmpvar_4 * _Color) * _EnvColor);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_2 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_2.w * 8.0) + 0.5));
  bool tmpvar_9;
  if (((-0.5 < tmpvar_8) && (tmpvar_8 < 0.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    tmpvar_1 = vec4(_BloomIntensity0);
  } else {
    bool tmpvar_10;
    if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      tmpvar_1 = vec4(_BloomIntensity1);
    } else {
      bool tmpvar_11;
      if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        tmpvar_1 = vec4(_BloomIntensity2);
      } else {
        bool tmpvar_12;
        if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          tmpvar_1 = vec4(_BloomIntensity3);
        } else {
          bool tmpvar_13;
          if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            tmpvar_1 = vec4(_BloomIntensity4);
          } else {
            bool tmpvar_14;
            if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              tmpvar_1 = vec4(_BloomIntensity5);
            } else {
              bool tmpvar_15;
              if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
                tmpvar_15 = bool(1);
              } else {
                tmpvar_15 = bool(0);
              };
              if (tmpvar_15) {
                tmpvar_1 = vec4(_BloomIntensity6);
              } else {
                tmpvar_1 = vec4(_BloomIntensity7);
              };
            };
          };
        };
      };
    };
  };
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainMaps_ST;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  tmpvar_3 = o_7;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_glesNormal * tmpvar_10));
  if (bool(_UsingDitherAlpha)) {
    tmpvar_3.z = _DitherAlpha;
  };
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMap;
uniform mediump float _BloomIntensity0;
uniform mediump float _BloomIntensity1;
uniform mediump float _BloomIntensity2;
uniform mediump float _BloomIntensity3;
uniform mediump float _BloomIntensity4;
uniform mediump float _BloomIntensity5;
uniform mediump float _BloomIntensity6;
uniform mediump float _BloomIntensity7;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 lightmap_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = ((tmpvar_4 * _Color) * _EnvColor);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_2 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_2.w * 8.0) + 0.5));
  bool tmpvar_9;
  if (((-0.5 < tmpvar_8) && (tmpvar_8 < 0.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    tmpvar_1 = vec4(_BloomIntensity0);
  } else {
    bool tmpvar_10;
    if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      tmpvar_1 = vec4(_BloomIntensity1);
    } else {
      bool tmpvar_11;
      if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        tmpvar_1 = vec4(_BloomIntensity2);
      } else {
        bool tmpvar_12;
        if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          tmpvar_1 = vec4(_BloomIntensity3);
        } else {
          bool tmpvar_13;
          if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            tmpvar_1 = vec4(_BloomIntensity4);
          } else {
            bool tmpvar_14;
            if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              tmpvar_1 = vec4(_BloomIntensity5);
            } else {
              bool tmpvar_15;
              if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
                tmpvar_15 = bool(1);
              } else {
                tmpvar_15 = bool(0);
              };
              if (tmpvar_15) {
                tmpvar_1 = vec4(_BloomIntensity6);
              } else {
                tmpvar_1 = vec4(_BloomIntensity7);
              };
            };
          };
        };
      };
    };
  };
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainMaps_ST;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainMaps_ST.xy) + _MainMaps_ST.zw);
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_5.zw;
  tmpvar_3 = o_7;
  tmpvar_4 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_10;
  tmpvar_10[0] = unity_WorldToObject[0].xyz;
  tmpvar_10[1] = unity_WorldToObject[1].xyz;
  tmpvar_10[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize((_glesNormal * tmpvar_10));
  if (bool(_UsingDitherAlpha)) {
    tmpvar_3.z = _DitherAlpha;
  };
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMap;
uniform mediump float _BloomIntensity0;
uniform mediump float _BloomIntensity1;
uniform mediump float _BloomIntensity2;
uniform mediump float _BloomIntensity3;
uniform mediump float _BloomIntensity4;
uniform mediump float _BloomIntensity5;
uniform mediump float _BloomIntensity6;
uniform mediump float _BloomIntensity7;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  mediump vec4 tmpvar_1;
  mediump vec4 lightmap_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = ((tmpvar_4 * _Color) * _EnvColor);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_2 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_2.w * 8.0) + 0.5));
  bool tmpvar_9;
  if (((-0.5 < tmpvar_8) && (tmpvar_8 < 0.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    tmpvar_1 = vec4(_BloomIntensity0);
  } else {
    bool tmpvar_10;
    if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      tmpvar_1 = vec4(_BloomIntensity1);
    } else {
      bool tmpvar_11;
      if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        tmpvar_1 = vec4(_BloomIntensity2);
      } else {
        bool tmpvar_12;
        if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          tmpvar_1 = vec4(_BloomIntensity3);
        } else {
          bool tmpvar_13;
          if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            tmpvar_1 = vec4(_BloomIntensity4);
          } else {
            bool tmpvar_14;
            if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              tmpvar_1 = vec4(_BloomIntensity5);
            } else {
              bool tmpvar_15;
              if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
                tmpvar_15 = bool(1);
              } else {
                tmpvar_15 = bool(0);
              };
              if (tmpvar_15) {
                tmpvar_1 = vec4(_BloomIntensity6);
              } else {
                tmpvar_1 = vec4(_BloomIntensity7);
              };
            };
          };
        };
      };
    };
  };
  gl_FragData[0] = tmpvar_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" }
""
}
}
}
 Pass {
  Name "OPAQUEOUTLINE"
  Tags { "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  Cull Front
  GpuProgramID 90835
Program "vp" {
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_5.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_5.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_5.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_5.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_5.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_5.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  viewPos_7.z = tmpvar_12.z;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7.xy = (tmpvar_12.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_5.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  viewPos_7.z = tmpvar_12.z;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7.xy = (tmpvar_12.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_5.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  viewPos_7.z = tmpvar_12.z;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7.xy = (tmpvar_12.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_5.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_9;
  if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_10;
    if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_11;
      if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_12;
        if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_13;
          if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_14;
            if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_15.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_16;
    scrpos_16 = xlv_TEXCOORD2;
    mediump float a_17;
    a_17 = xlv_TEXCOORD2.z;
    if ((a_17 < 0.95)) {
      scrpos_16.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_17 = (a_17 * 17.0);
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_16.y / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_16.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float x_24;
      x_24 = ((a_17 - _DITHERMATRIX[
        int(tmpvar_20)
      ][
        int(tmpvar_23)
      ]) - 0.01);
      if ((x_24 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_9;
  if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_10;
    if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_11;
      if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_12;
        if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_13;
          if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_14;
            if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_15.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_16;
    scrpos_16 = xlv_TEXCOORD2;
    mediump float a_17;
    a_17 = xlv_TEXCOORD2.z;
    if ((a_17 < 0.95)) {
      scrpos_16.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_17 = (a_17 * 17.0);
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_16.y / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_16.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float x_24;
      x_24 = ((a_17 - _DITHERMATRIX[
        int(tmpvar_20)
      ][
        int(tmpvar_23)
      ]) - 0.01);
      if ((x_24 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_9;
  if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_10;
    if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_11;
      if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_12;
        if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_13;
          if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_14;
            if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_15.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_16;
    scrpos_16 = xlv_TEXCOORD2;
    mediump float a_17;
    a_17 = xlv_TEXCOORD2.z;
    if ((a_17 < 0.95)) {
      scrpos_16.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_17 = (a_17 * 17.0);
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_16.y / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_16.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float x_24;
      x_24 = ((a_17 - _DITHERMATRIX[
        int(tmpvar_20)
      ][
        int(tmpvar_23)
      ]) - 0.01);
      if ((x_24 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_9;
  if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_10;
    if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_11;
      if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_12;
        if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_13;
          if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_14;
            if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_15.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_16;
    scrpos_16 = xlv_TEXCOORD2;
    mediump float a_17;
    a_17 = xlv_TEXCOORD2.z;
    if ((a_17 < 0.95)) {
      scrpos_16.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_17 = (a_17 * 17.0);
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_16.y / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_16.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float x_24;
      x_24 = ((a_17 - _DITHERMATRIX[
        int(tmpvar_20)
      ][
        int(tmpvar_23)
      ]) - 0.01);
      if ((x_24 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_9;
  if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_10;
    if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_11;
      if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_12;
        if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_13;
          if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_14;
            if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_15.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_16;
    scrpos_16 = xlv_TEXCOORD2;
    mediump float a_17;
    a_17 = xlv_TEXCOORD2.z;
    if ((a_17 < 0.95)) {
      scrpos_16.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_17 = (a_17 * 17.0);
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_16.y / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_16.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float x_24;
      x_24 = ((a_17 - _DITHERMATRIX[
        int(tmpvar_20)
      ][
        int(tmpvar_23)
      ]) - 0.01);
      if ((x_24 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_9;
  if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_10;
    if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_11;
      if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_12;
        if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_13;
          if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_14;
            if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_15.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_16;
    scrpos_16 = xlv_TEXCOORD2;
    mediump float a_17;
    a_17 = xlv_TEXCOORD2.z;
    if ((a_17 < 0.95)) {
      scrpos_16.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_17 = (a_17 * 17.0);
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_16.y / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_16.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float x_24;
      x_24 = ((a_17 - _DITHERMATRIX[
        int(tmpvar_20)
      ][
        int(tmpvar_23)
      ]) - 0.01);
      if ((x_24 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  viewPos_7.z = tmpvar_12.z;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7.xy = (tmpvar_12.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_9;
  if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_10;
    if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_11;
      if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_12;
        if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_13;
          if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_14;
            if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_15.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_16;
    scrpos_16 = xlv_TEXCOORD2;
    mediump float a_17;
    a_17 = xlv_TEXCOORD2.z;
    if ((a_17 < 0.95)) {
      scrpos_16.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_17 = (a_17 * 17.0);
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_16.y / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_16.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float x_24;
      x_24 = ((a_17 - _DITHERMATRIX[
        int(tmpvar_20)
      ][
        int(tmpvar_23)
      ]) - 0.01);
      if ((x_24 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  viewPos_7.z = tmpvar_12.z;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7.xy = (tmpvar_12.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_9;
  if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_10;
    if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_11;
      if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_12;
        if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_13;
          if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_14;
            if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_15.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_16;
    scrpos_16 = xlv_TEXCOORD2;
    mediump float a_17;
    a_17 = xlv_TEXCOORD2.z;
    if ((a_17 < 0.95)) {
      scrpos_16.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_17 = (a_17 * 17.0);
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_16.y / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_16.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float x_24;
      x_24 = ((a_17 - _DITHERMATRIX[
        int(tmpvar_20)
      ][
        int(tmpvar_23)
      ]) - 0.01);
      if ((x_24 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  viewPos_7.z = tmpvar_12.z;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7.xy = (tmpvar_12.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_9;
  if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_10;
    if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_11;
      if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_12;
        if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_13;
          if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_14;
            if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_15.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_16;
    scrpos_16 = xlv_TEXCOORD2;
    mediump float a_17;
    a_17 = xlv_TEXCOORD2.z;
    if ((a_17 < 0.95)) {
      scrpos_16.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_17 = (a_17 * 17.0);
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_16.y / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_16.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float x_24;
      x_24 = ((a_17 - _DITHERMATRIX[
        int(tmpvar_20)
      ][
        int(tmpvar_23)
      ]) - 0.01);
      if ((x_24 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_6.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_6.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_6.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_6.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_6.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_6.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  viewPos_7.z = tmpvar_12.z;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7.xy = (tmpvar_12.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_6.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  viewPos_7.z = tmpvar_12.z;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7.xy = (tmpvar_12.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_6.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  viewPos_7.z = tmpvar_12.z;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7.xy = (tmpvar_12.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_6.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  mediump float x_7;
  x_7 = (albedo_4.w - _AlphaCutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_10;
  if (((0.5 < tmpvar_9) && (tmpvar_9 < 1.5))) {
    tmpvar_10 = bool(1);
  } else {
    tmpvar_10 = bool(0);
  };
  if (tmpvar_10) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_11;
    if (((1.5 < tmpvar_9) && (tmpvar_9 < 2.5))) {
      tmpvar_11 = bool(1);
    } else {
      tmpvar_11 = bool(0);
    };
    if (tmpvar_11) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_12;
      if (((2.5 < tmpvar_9) && (tmpvar_9 < 3.5))) {
        tmpvar_12 = bool(1);
      } else {
        tmpvar_12 = bool(0);
      };
      if (tmpvar_12) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_13;
        if (((3.5 < tmpvar_9) && (tmpvar_9 < 4.5))) {
          tmpvar_13 = bool(1);
        } else {
          tmpvar_13 = bool(0);
        };
        if (tmpvar_13) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_14;
          if (((4.5 < tmpvar_9) && (tmpvar_9 < 5.5))) {
            tmpvar_14 = bool(1);
          } else {
            tmpvar_14 = bool(0);
          };
          if (tmpvar_14) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_15;
            if (((5.5 < tmpvar_9) && (tmpvar_9 < 6.5))) {
              tmpvar_15 = bool(1);
            } else {
              tmpvar_15 = bool(0);
            };
            if (tmpvar_15) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_16.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD2;
    mediump float a_18;
    a_18 = xlv_TEXCOORD2.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  mediump float x_7;
  x_7 = (albedo_4.w - _AlphaCutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_10;
  if (((0.5 < tmpvar_9) && (tmpvar_9 < 1.5))) {
    tmpvar_10 = bool(1);
  } else {
    tmpvar_10 = bool(0);
  };
  if (tmpvar_10) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_11;
    if (((1.5 < tmpvar_9) && (tmpvar_9 < 2.5))) {
      tmpvar_11 = bool(1);
    } else {
      tmpvar_11 = bool(0);
    };
    if (tmpvar_11) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_12;
      if (((2.5 < tmpvar_9) && (tmpvar_9 < 3.5))) {
        tmpvar_12 = bool(1);
      } else {
        tmpvar_12 = bool(0);
      };
      if (tmpvar_12) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_13;
        if (((3.5 < tmpvar_9) && (tmpvar_9 < 4.5))) {
          tmpvar_13 = bool(1);
        } else {
          tmpvar_13 = bool(0);
        };
        if (tmpvar_13) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_14;
          if (((4.5 < tmpvar_9) && (tmpvar_9 < 5.5))) {
            tmpvar_14 = bool(1);
          } else {
            tmpvar_14 = bool(0);
          };
          if (tmpvar_14) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_15;
            if (((5.5 < tmpvar_9) && (tmpvar_9 < 6.5))) {
              tmpvar_15 = bool(1);
            } else {
              tmpvar_15 = bool(0);
            };
            if (tmpvar_15) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_16.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD2;
    mediump float a_18;
    a_18 = xlv_TEXCOORD2.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  mediump float x_7;
  x_7 = (albedo_4.w - _AlphaCutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_10;
  if (((0.5 < tmpvar_9) && (tmpvar_9 < 1.5))) {
    tmpvar_10 = bool(1);
  } else {
    tmpvar_10 = bool(0);
  };
  if (tmpvar_10) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_11;
    if (((1.5 < tmpvar_9) && (tmpvar_9 < 2.5))) {
      tmpvar_11 = bool(1);
    } else {
      tmpvar_11 = bool(0);
    };
    if (tmpvar_11) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_12;
      if (((2.5 < tmpvar_9) && (tmpvar_9 < 3.5))) {
        tmpvar_12 = bool(1);
      } else {
        tmpvar_12 = bool(0);
      };
      if (tmpvar_12) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_13;
        if (((3.5 < tmpvar_9) && (tmpvar_9 < 4.5))) {
          tmpvar_13 = bool(1);
        } else {
          tmpvar_13 = bool(0);
        };
        if (tmpvar_13) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_14;
          if (((4.5 < tmpvar_9) && (tmpvar_9 < 5.5))) {
            tmpvar_14 = bool(1);
          } else {
            tmpvar_14 = bool(0);
          };
          if (tmpvar_14) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_15;
            if (((5.5 < tmpvar_9) && (tmpvar_9 < 6.5))) {
              tmpvar_15 = bool(1);
            } else {
              tmpvar_15 = bool(0);
            };
            if (tmpvar_15) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_16.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD2;
    mediump float a_18;
    a_18 = xlv_TEXCOORD2.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  mediump float x_7;
  x_7 = (albedo_4.w - _AlphaCutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_10;
  if (((0.5 < tmpvar_9) && (tmpvar_9 < 1.5))) {
    tmpvar_10 = bool(1);
  } else {
    tmpvar_10 = bool(0);
  };
  if (tmpvar_10) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_11;
    if (((1.5 < tmpvar_9) && (tmpvar_9 < 2.5))) {
      tmpvar_11 = bool(1);
    } else {
      tmpvar_11 = bool(0);
    };
    if (tmpvar_11) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_12;
      if (((2.5 < tmpvar_9) && (tmpvar_9 < 3.5))) {
        tmpvar_12 = bool(1);
      } else {
        tmpvar_12 = bool(0);
      };
      if (tmpvar_12) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_13;
        if (((3.5 < tmpvar_9) && (tmpvar_9 < 4.5))) {
          tmpvar_13 = bool(1);
        } else {
          tmpvar_13 = bool(0);
        };
        if (tmpvar_13) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_14;
          if (((4.5 < tmpvar_9) && (tmpvar_9 < 5.5))) {
            tmpvar_14 = bool(1);
          } else {
            tmpvar_14 = bool(0);
          };
          if (tmpvar_14) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_15;
            if (((5.5 < tmpvar_9) && (tmpvar_9 < 6.5))) {
              tmpvar_15 = bool(1);
            } else {
              tmpvar_15 = bool(0);
            };
            if (tmpvar_15) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_16.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD2;
    mediump float a_18;
    a_18 = xlv_TEXCOORD2.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  mediump float x_7;
  x_7 = (albedo_4.w - _AlphaCutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_10;
  if (((0.5 < tmpvar_9) && (tmpvar_9 < 1.5))) {
    tmpvar_10 = bool(1);
  } else {
    tmpvar_10 = bool(0);
  };
  if (tmpvar_10) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_11;
    if (((1.5 < tmpvar_9) && (tmpvar_9 < 2.5))) {
      tmpvar_11 = bool(1);
    } else {
      tmpvar_11 = bool(0);
    };
    if (tmpvar_11) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_12;
      if (((2.5 < tmpvar_9) && (tmpvar_9 < 3.5))) {
        tmpvar_12 = bool(1);
      } else {
        tmpvar_12 = bool(0);
      };
      if (tmpvar_12) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_13;
        if (((3.5 < tmpvar_9) && (tmpvar_9 < 4.5))) {
          tmpvar_13 = bool(1);
        } else {
          tmpvar_13 = bool(0);
        };
        if (tmpvar_13) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_14;
          if (((4.5 < tmpvar_9) && (tmpvar_9 < 5.5))) {
            tmpvar_14 = bool(1);
          } else {
            tmpvar_14 = bool(0);
          };
          if (tmpvar_14) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_15;
            if (((5.5 < tmpvar_9) && (tmpvar_9 < 6.5))) {
              tmpvar_15 = bool(1);
            } else {
              tmpvar_15 = bool(0);
            };
            if (tmpvar_15) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_16.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD2;
    mediump float a_18;
    a_18 = xlv_TEXCOORD2.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  mediump float x_7;
  x_7 = (albedo_4.w - _AlphaCutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_10;
  if (((0.5 < tmpvar_9) && (tmpvar_9 < 1.5))) {
    tmpvar_10 = bool(1);
  } else {
    tmpvar_10 = bool(0);
  };
  if (tmpvar_10) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_11;
    if (((1.5 < tmpvar_9) && (tmpvar_9 < 2.5))) {
      tmpvar_11 = bool(1);
    } else {
      tmpvar_11 = bool(0);
    };
    if (tmpvar_11) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_12;
      if (((2.5 < tmpvar_9) && (tmpvar_9 < 3.5))) {
        tmpvar_12 = bool(1);
      } else {
        tmpvar_12 = bool(0);
      };
      if (tmpvar_12) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_13;
        if (((3.5 < tmpvar_9) && (tmpvar_9 < 4.5))) {
          tmpvar_13 = bool(1);
        } else {
          tmpvar_13 = bool(0);
        };
        if (tmpvar_13) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_14;
          if (((4.5 < tmpvar_9) && (tmpvar_9 < 5.5))) {
            tmpvar_14 = bool(1);
          } else {
            tmpvar_14 = bool(0);
          };
          if (tmpvar_14) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_15;
            if (((5.5 < tmpvar_9) && (tmpvar_9 < 6.5))) {
              tmpvar_15 = bool(1);
            } else {
              tmpvar_15 = bool(0);
            };
            if (tmpvar_15) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_16.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD2;
    mediump float a_18;
    a_18 = xlv_TEXCOORD2.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  viewPos_7.z = tmpvar_12.z;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7.xy = (tmpvar_12.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  mediump float x_7;
  x_7 = (albedo_4.w - _AlphaCutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_10;
  if (((0.5 < tmpvar_9) && (tmpvar_9 < 1.5))) {
    tmpvar_10 = bool(1);
  } else {
    tmpvar_10 = bool(0);
  };
  if (tmpvar_10) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_11;
    if (((1.5 < tmpvar_9) && (tmpvar_9 < 2.5))) {
      tmpvar_11 = bool(1);
    } else {
      tmpvar_11 = bool(0);
    };
    if (tmpvar_11) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_12;
      if (((2.5 < tmpvar_9) && (tmpvar_9 < 3.5))) {
        tmpvar_12 = bool(1);
      } else {
        tmpvar_12 = bool(0);
      };
      if (tmpvar_12) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_13;
        if (((3.5 < tmpvar_9) && (tmpvar_9 < 4.5))) {
          tmpvar_13 = bool(1);
        } else {
          tmpvar_13 = bool(0);
        };
        if (tmpvar_13) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_14;
          if (((4.5 < tmpvar_9) && (tmpvar_9 < 5.5))) {
            tmpvar_14 = bool(1);
          } else {
            tmpvar_14 = bool(0);
          };
          if (tmpvar_14) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_15;
            if (((5.5 < tmpvar_9) && (tmpvar_9 < 6.5))) {
              tmpvar_15 = bool(1);
            } else {
              tmpvar_15 = bool(0);
            };
            if (tmpvar_15) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_16.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD2;
    mediump float a_18;
    a_18 = xlv_TEXCOORD2.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  viewPos_7.z = tmpvar_12.z;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7.xy = (tmpvar_12.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  mediump float x_7;
  x_7 = (albedo_4.w - _AlphaCutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_10;
  if (((0.5 < tmpvar_9) && (tmpvar_9 < 1.5))) {
    tmpvar_10 = bool(1);
  } else {
    tmpvar_10 = bool(0);
  };
  if (tmpvar_10) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_11;
    if (((1.5 < tmpvar_9) && (tmpvar_9 < 2.5))) {
      tmpvar_11 = bool(1);
    } else {
      tmpvar_11 = bool(0);
    };
    if (tmpvar_11) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_12;
      if (((2.5 < tmpvar_9) && (tmpvar_9 < 3.5))) {
        tmpvar_12 = bool(1);
      } else {
        tmpvar_12 = bool(0);
      };
      if (tmpvar_12) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_13;
        if (((3.5 < tmpvar_9) && (tmpvar_9 < 4.5))) {
          tmpvar_13 = bool(1);
        } else {
          tmpvar_13 = bool(0);
        };
        if (tmpvar_13) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_14;
          if (((4.5 < tmpvar_9) && (tmpvar_9 < 5.5))) {
            tmpvar_14 = bool(1);
          } else {
            tmpvar_14 = bool(0);
          };
          if (tmpvar_14) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_15;
            if (((5.5 < tmpvar_9) && (tmpvar_9 < 6.5))) {
              tmpvar_15 = bool(1);
            } else {
              tmpvar_15 = bool(0);
            };
            if (tmpvar_15) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_16.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD2;
    mediump float a_18;
    a_18 = xlv_TEXCOORD2.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  viewPos_7.z = tmpvar_12.z;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7.xy = (tmpvar_12.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  mediump float x_7;
  x_7 = (albedo_4.w - _AlphaCutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_10;
  if (((0.5 < tmpvar_9) && (tmpvar_9 < 1.5))) {
    tmpvar_10 = bool(1);
  } else {
    tmpvar_10 = bool(0);
  };
  if (tmpvar_10) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_11;
    if (((1.5 < tmpvar_9) && (tmpvar_9 < 2.5))) {
      tmpvar_11 = bool(1);
    } else {
      tmpvar_11 = bool(0);
    };
    if (tmpvar_11) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_12;
      if (((2.5 < tmpvar_9) && (tmpvar_9 < 3.5))) {
        tmpvar_12 = bool(1);
      } else {
        tmpvar_12 = bool(0);
      };
      if (tmpvar_12) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_13;
        if (((3.5 < tmpvar_9) && (tmpvar_9 < 4.5))) {
          tmpvar_13 = bool(1);
        } else {
          tmpvar_13 = bool(0);
        };
        if (tmpvar_13) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_14;
          if (((4.5 < tmpvar_9) && (tmpvar_9 < 5.5))) {
            tmpvar_14 = bool(1);
          } else {
            tmpvar_14 = bool(0);
          };
          if (tmpvar_14) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_15;
            if (((5.5 < tmpvar_9) && (tmpvar_9 < 6.5))) {
              tmpvar_15 = bool(1);
            } else {
              tmpvar_15 = bool(0);
            };
            if (tmpvar_15) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_16.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD2;
    mediump float a_18;
    a_18 = xlv_TEXCOORD2.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
}
}
 Pass {
  Name "OPAQUEVEXTEXSCALEOUTLINE"
  Tags { "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  Cull Front
  GpuProgramID 180674
Program "vp" {
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_5.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_5.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_5.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_5.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_5.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_5.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7 = (tmpvar_12 + ((
    (normalize(tmpvar_12) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_7.xy = (viewPos_7.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_5.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7 = (tmpvar_12 + ((
    (normalize(tmpvar_12) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_7.xy = (viewPos_7.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_5.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7 = (tmpvar_12 + ((
    (normalize(tmpvar_12) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_7.xy = (viewPos_7.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_5.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_9;
  if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_10;
    if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_11;
      if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_12;
        if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_13;
          if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_14;
            if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_15.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_16;
    scrpos_16 = xlv_TEXCOORD2;
    mediump float a_17;
    a_17 = xlv_TEXCOORD2.z;
    if ((a_17 < 0.95)) {
      scrpos_16.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_17 = (a_17 * 17.0);
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_16.y / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_16.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float x_24;
      x_24 = ((a_17 - _DITHERMATRIX[
        int(tmpvar_20)
      ][
        int(tmpvar_23)
      ]) - 0.01);
      if ((x_24 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_9;
  if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_10;
    if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_11;
      if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_12;
        if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_13;
          if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_14;
            if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_15.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_16;
    scrpos_16 = xlv_TEXCOORD2;
    mediump float a_17;
    a_17 = xlv_TEXCOORD2.z;
    if ((a_17 < 0.95)) {
      scrpos_16.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_17 = (a_17 * 17.0);
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_16.y / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_16.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float x_24;
      x_24 = ((a_17 - _DITHERMATRIX[
        int(tmpvar_20)
      ][
        int(tmpvar_23)
      ]) - 0.01);
      if ((x_24 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_9;
  if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_10;
    if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_11;
      if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_12;
        if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_13;
          if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_14;
            if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_15.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_16;
    scrpos_16 = xlv_TEXCOORD2;
    mediump float a_17;
    a_17 = xlv_TEXCOORD2.z;
    if ((a_17 < 0.95)) {
      scrpos_16.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_17 = (a_17 * 17.0);
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_16.y / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_16.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float x_24;
      x_24 = ((a_17 - _DITHERMATRIX[
        int(tmpvar_20)
      ][
        int(tmpvar_23)
      ]) - 0.01);
      if ((x_24 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_9;
  if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_10;
    if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_11;
      if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_12;
        if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_13;
          if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_14;
            if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_15.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_16;
    scrpos_16 = xlv_TEXCOORD2;
    mediump float a_17;
    a_17 = xlv_TEXCOORD2.z;
    if ((a_17 < 0.95)) {
      scrpos_16.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_17 = (a_17 * 17.0);
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_16.y / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_16.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float x_24;
      x_24 = ((a_17 - _DITHERMATRIX[
        int(tmpvar_20)
      ][
        int(tmpvar_23)
      ]) - 0.01);
      if ((x_24 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_9;
  if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_10;
    if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_11;
      if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_12;
        if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_13;
          if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_14;
            if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_15.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_16;
    scrpos_16 = xlv_TEXCOORD2;
    mediump float a_17;
    a_17 = xlv_TEXCOORD2.z;
    if ((a_17 < 0.95)) {
      scrpos_16.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_17 = (a_17 * 17.0);
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_16.y / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_16.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float x_24;
      x_24 = ((a_17 - _DITHERMATRIX[
        int(tmpvar_20)
      ][
        int(tmpvar_23)
      ]) - 0.01);
      if ((x_24 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_9;
  if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_10;
    if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_11;
      if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_12;
        if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_13;
          if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_14;
            if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_15.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_16;
    scrpos_16 = xlv_TEXCOORD2;
    mediump float a_17;
    a_17 = xlv_TEXCOORD2.z;
    if ((a_17 < 0.95)) {
      scrpos_16.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_17 = (a_17 * 17.0);
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_16.y / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_16.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float x_24;
      x_24 = ((a_17 - _DITHERMATRIX[
        int(tmpvar_20)
      ][
        int(tmpvar_23)
      ]) - 0.01);
      if ((x_24 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7 = (tmpvar_12 + ((
    (normalize(tmpvar_12) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_7.xy = (viewPos_7.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_9;
  if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_10;
    if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_11;
      if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_12;
        if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_13;
          if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_14;
            if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_15.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_16;
    scrpos_16 = xlv_TEXCOORD2;
    mediump float a_17;
    a_17 = xlv_TEXCOORD2.z;
    if ((a_17 < 0.95)) {
      scrpos_16.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_17 = (a_17 * 17.0);
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_16.y / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_16.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float x_24;
      x_24 = ((a_17 - _DITHERMATRIX[
        int(tmpvar_20)
      ][
        int(tmpvar_23)
      ]) - 0.01);
      if ((x_24 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7 = (tmpvar_12 + ((
    (normalize(tmpvar_12) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_7.xy = (viewPos_7.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_9;
  if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_10;
    if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_11;
      if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_12;
        if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_13;
          if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_14;
            if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_15.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_16;
    scrpos_16 = xlv_TEXCOORD2;
    mediump float a_17;
    a_17 = xlv_TEXCOORD2.z;
    if ((a_17 < 0.95)) {
      scrpos_16.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_17 = (a_17 * 17.0);
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_16.y / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_16.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float x_24;
      x_24 = ((a_17 - _DITHERMATRIX[
        int(tmpvar_20)
      ][
        int(tmpvar_23)
      ]) - 0.01);
      if ((x_24 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7 = (tmpvar_12 + ((
    (normalize(tmpvar_12) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_7.xy = (viewPos_7.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_9;
  if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_10;
    if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_11;
      if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_12;
        if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_13;
          if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_14;
            if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_15.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_16;
    scrpos_16 = xlv_TEXCOORD2;
    mediump float a_17;
    a_17 = xlv_TEXCOORD2.z;
    if ((a_17 < 0.95)) {
      scrpos_16.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_17 = (a_17 * 17.0);
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_16.y / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_16.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float x_24;
      x_24 = ((a_17 - _DITHERMATRIX[
        int(tmpvar_20)
      ][
        int(tmpvar_23)
      ]) - 0.01);
      if ((x_24 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_6.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_6.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_6.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_6.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_6.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_6.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7 = (tmpvar_12 + ((
    (normalize(tmpvar_12) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_7.xy = (viewPos_7.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_6.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7 = (tmpvar_12 + ((
    (normalize(tmpvar_12) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_7.xy = (viewPos_7.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_6.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7 = (tmpvar_12 + ((
    (normalize(tmpvar_12) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_7.xy = (viewPos_7.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1.xyz = tmpvar_6.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  mediump float x_7;
  x_7 = (albedo_4.w - _AlphaCutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_10;
  if (((0.5 < tmpvar_9) && (tmpvar_9 < 1.5))) {
    tmpvar_10 = bool(1);
  } else {
    tmpvar_10 = bool(0);
  };
  if (tmpvar_10) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_11;
    if (((1.5 < tmpvar_9) && (tmpvar_9 < 2.5))) {
      tmpvar_11 = bool(1);
    } else {
      tmpvar_11 = bool(0);
    };
    if (tmpvar_11) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_12;
      if (((2.5 < tmpvar_9) && (tmpvar_9 < 3.5))) {
        tmpvar_12 = bool(1);
      } else {
        tmpvar_12 = bool(0);
      };
      if (tmpvar_12) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_13;
        if (((3.5 < tmpvar_9) && (tmpvar_9 < 4.5))) {
          tmpvar_13 = bool(1);
        } else {
          tmpvar_13 = bool(0);
        };
        if (tmpvar_13) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_14;
          if (((4.5 < tmpvar_9) && (tmpvar_9 < 5.5))) {
            tmpvar_14 = bool(1);
          } else {
            tmpvar_14 = bool(0);
          };
          if (tmpvar_14) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_15;
            if (((5.5 < tmpvar_9) && (tmpvar_9 < 6.5))) {
              tmpvar_15 = bool(1);
            } else {
              tmpvar_15 = bool(0);
            };
            if (tmpvar_15) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_16.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD2;
    mediump float a_18;
    a_18 = xlv_TEXCOORD2.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  mediump float x_7;
  x_7 = (albedo_4.w - _AlphaCutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_10;
  if (((0.5 < tmpvar_9) && (tmpvar_9 < 1.5))) {
    tmpvar_10 = bool(1);
  } else {
    tmpvar_10 = bool(0);
  };
  if (tmpvar_10) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_11;
    if (((1.5 < tmpvar_9) && (tmpvar_9 < 2.5))) {
      tmpvar_11 = bool(1);
    } else {
      tmpvar_11 = bool(0);
    };
    if (tmpvar_11) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_12;
      if (((2.5 < tmpvar_9) && (tmpvar_9 < 3.5))) {
        tmpvar_12 = bool(1);
      } else {
        tmpvar_12 = bool(0);
      };
      if (tmpvar_12) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_13;
        if (((3.5 < tmpvar_9) && (tmpvar_9 < 4.5))) {
          tmpvar_13 = bool(1);
        } else {
          tmpvar_13 = bool(0);
        };
        if (tmpvar_13) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_14;
          if (((4.5 < tmpvar_9) && (tmpvar_9 < 5.5))) {
            tmpvar_14 = bool(1);
          } else {
            tmpvar_14 = bool(0);
          };
          if (tmpvar_14) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_15;
            if (((5.5 < tmpvar_9) && (tmpvar_9 < 6.5))) {
              tmpvar_15 = bool(1);
            } else {
              tmpvar_15 = bool(0);
            };
            if (tmpvar_15) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_16.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD2;
    mediump float a_18;
    a_18 = xlv_TEXCOORD2.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  mediump float x_7;
  x_7 = (albedo_4.w - _AlphaCutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_10;
  if (((0.5 < tmpvar_9) && (tmpvar_9 < 1.5))) {
    tmpvar_10 = bool(1);
  } else {
    tmpvar_10 = bool(0);
  };
  if (tmpvar_10) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_11;
    if (((1.5 < tmpvar_9) && (tmpvar_9 < 2.5))) {
      tmpvar_11 = bool(1);
    } else {
      tmpvar_11 = bool(0);
    };
    if (tmpvar_11) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_12;
      if (((2.5 < tmpvar_9) && (tmpvar_9 < 3.5))) {
        tmpvar_12 = bool(1);
      } else {
        tmpvar_12 = bool(0);
      };
      if (tmpvar_12) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_13;
        if (((3.5 < tmpvar_9) && (tmpvar_9 < 4.5))) {
          tmpvar_13 = bool(1);
        } else {
          tmpvar_13 = bool(0);
        };
        if (tmpvar_13) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_14;
          if (((4.5 < tmpvar_9) && (tmpvar_9 < 5.5))) {
            tmpvar_14 = bool(1);
          } else {
            tmpvar_14 = bool(0);
          };
          if (tmpvar_14) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_15;
            if (((5.5 < tmpvar_9) && (tmpvar_9 < 6.5))) {
              tmpvar_15 = bool(1);
            } else {
              tmpvar_15 = bool(0);
            };
            if (tmpvar_15) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_16.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD2;
    mediump float a_18;
    a_18 = xlv_TEXCOORD2.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  mediump float x_7;
  x_7 = (albedo_4.w - _AlphaCutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_10;
  if (((0.5 < tmpvar_9) && (tmpvar_9 < 1.5))) {
    tmpvar_10 = bool(1);
  } else {
    tmpvar_10 = bool(0);
  };
  if (tmpvar_10) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_11;
    if (((1.5 < tmpvar_9) && (tmpvar_9 < 2.5))) {
      tmpvar_11 = bool(1);
    } else {
      tmpvar_11 = bool(0);
    };
    if (tmpvar_11) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_12;
      if (((2.5 < tmpvar_9) && (tmpvar_9 < 3.5))) {
        tmpvar_12 = bool(1);
      } else {
        tmpvar_12 = bool(0);
      };
      if (tmpvar_12) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_13;
        if (((3.5 < tmpvar_9) && (tmpvar_9 < 4.5))) {
          tmpvar_13 = bool(1);
        } else {
          tmpvar_13 = bool(0);
        };
        if (tmpvar_13) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_14;
          if (((4.5 < tmpvar_9) && (tmpvar_9 < 5.5))) {
            tmpvar_14 = bool(1);
          } else {
            tmpvar_14 = bool(0);
          };
          if (tmpvar_14) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_15;
            if (((5.5 < tmpvar_9) && (tmpvar_9 < 6.5))) {
              tmpvar_15 = bool(1);
            } else {
              tmpvar_15 = bool(0);
            };
            if (tmpvar_15) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_16.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD2;
    mediump float a_18;
    a_18 = xlv_TEXCOORD2.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  mediump float x_7;
  x_7 = (albedo_4.w - _AlphaCutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_10;
  if (((0.5 < tmpvar_9) && (tmpvar_9 < 1.5))) {
    tmpvar_10 = bool(1);
  } else {
    tmpvar_10 = bool(0);
  };
  if (tmpvar_10) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_11;
    if (((1.5 < tmpvar_9) && (tmpvar_9 < 2.5))) {
      tmpvar_11 = bool(1);
    } else {
      tmpvar_11 = bool(0);
    };
    if (tmpvar_11) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_12;
      if (((2.5 < tmpvar_9) && (tmpvar_9 < 3.5))) {
        tmpvar_12 = bool(1);
      } else {
        tmpvar_12 = bool(0);
      };
      if (tmpvar_12) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_13;
        if (((3.5 < tmpvar_9) && (tmpvar_9 < 4.5))) {
          tmpvar_13 = bool(1);
        } else {
          tmpvar_13 = bool(0);
        };
        if (tmpvar_13) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_14;
          if (((4.5 < tmpvar_9) && (tmpvar_9 < 5.5))) {
            tmpvar_14 = bool(1);
          } else {
            tmpvar_14 = bool(0);
          };
          if (tmpvar_14) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_15;
            if (((5.5 < tmpvar_9) && (tmpvar_9 < 6.5))) {
              tmpvar_15 = bool(1);
            } else {
              tmpvar_15 = bool(0);
            };
            if (tmpvar_15) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_16.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD2;
    mediump float a_18;
    a_18 = xlv_TEXCOORD2.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  mediump float x_7;
  x_7 = (albedo_4.w - _AlphaCutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_10;
  if (((0.5 < tmpvar_9) && (tmpvar_9 < 1.5))) {
    tmpvar_10 = bool(1);
  } else {
    tmpvar_10 = bool(0);
  };
  if (tmpvar_10) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_11;
    if (((1.5 < tmpvar_9) && (tmpvar_9 < 2.5))) {
      tmpvar_11 = bool(1);
    } else {
      tmpvar_11 = bool(0);
    };
    if (tmpvar_11) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_12;
      if (((2.5 < tmpvar_9) && (tmpvar_9 < 3.5))) {
        tmpvar_12 = bool(1);
      } else {
        tmpvar_12 = bool(0);
      };
      if (tmpvar_12) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_13;
        if (((3.5 < tmpvar_9) && (tmpvar_9 < 4.5))) {
          tmpvar_13 = bool(1);
        } else {
          tmpvar_13 = bool(0);
        };
        if (tmpvar_13) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_14;
          if (((4.5 < tmpvar_9) && (tmpvar_9 < 5.5))) {
            tmpvar_14 = bool(1);
          } else {
            tmpvar_14 = bool(0);
          };
          if (tmpvar_14) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_15;
            if (((5.5 < tmpvar_9) && (tmpvar_9 < 6.5))) {
              tmpvar_15 = bool(1);
            } else {
              tmpvar_15 = bool(0);
            };
            if (tmpvar_15) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_16.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD2;
    mediump float a_18;
    a_18 = xlv_TEXCOORD2.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7 = (tmpvar_12 + ((
    (normalize(tmpvar_12) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_7.xy = (viewPos_7.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  mediump float x_7;
  x_7 = (albedo_4.w - _AlphaCutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_10;
  if (((0.5 < tmpvar_9) && (tmpvar_9 < 1.5))) {
    tmpvar_10 = bool(1);
  } else {
    tmpvar_10 = bool(0);
  };
  if (tmpvar_10) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_11;
    if (((1.5 < tmpvar_9) && (tmpvar_9 < 2.5))) {
      tmpvar_11 = bool(1);
    } else {
      tmpvar_11 = bool(0);
    };
    if (tmpvar_11) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_12;
      if (((2.5 < tmpvar_9) && (tmpvar_9 < 3.5))) {
        tmpvar_12 = bool(1);
      } else {
        tmpvar_12 = bool(0);
      };
      if (tmpvar_12) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_13;
        if (((3.5 < tmpvar_9) && (tmpvar_9 < 4.5))) {
          tmpvar_13 = bool(1);
        } else {
          tmpvar_13 = bool(0);
        };
        if (tmpvar_13) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_14;
          if (((4.5 < tmpvar_9) && (tmpvar_9 < 5.5))) {
            tmpvar_14 = bool(1);
          } else {
            tmpvar_14 = bool(0);
          };
          if (tmpvar_14) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_15;
            if (((5.5 < tmpvar_9) && (tmpvar_9 < 6.5))) {
              tmpvar_15 = bool(1);
            } else {
              tmpvar_15 = bool(0);
            };
            if (tmpvar_15) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_16.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD2;
    mediump float a_18;
    a_18 = xlv_TEXCOORD2.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7 = (tmpvar_12 + ((
    (normalize(tmpvar_12) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_7.xy = (viewPos_7.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  mediump float x_7;
  x_7 = (albedo_4.w - _AlphaCutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_10;
  if (((0.5 < tmpvar_9) && (tmpvar_9 < 1.5))) {
    tmpvar_10 = bool(1);
  } else {
    tmpvar_10 = bool(0);
  };
  if (tmpvar_10) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_11;
    if (((1.5 < tmpvar_9) && (tmpvar_9 < 2.5))) {
      tmpvar_11 = bool(1);
    } else {
      tmpvar_11 = bool(0);
    };
    if (tmpvar_11) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_12;
      if (((2.5 < tmpvar_9) && (tmpvar_9 < 3.5))) {
        tmpvar_12 = bool(1);
      } else {
        tmpvar_12 = bool(0);
      };
      if (tmpvar_12) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_13;
        if (((3.5 < tmpvar_9) && (tmpvar_9 < 4.5))) {
          tmpvar_13 = bool(1);
        } else {
          tmpvar_13 = bool(0);
        };
        if (tmpvar_13) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_14;
          if (((4.5 < tmpvar_9) && (tmpvar_9 < 5.5))) {
            tmpvar_14 = bool(1);
          } else {
            tmpvar_14 = bool(0);
          };
          if (tmpvar_14) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_15;
            if (((5.5 < tmpvar_9) && (tmpvar_9 < 6.5))) {
              tmpvar_15 = bool(1);
            } else {
              tmpvar_15 = bool(0);
            };
            if (tmpvar_15) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_16.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD2;
    mediump float a_18;
    a_18 = xlv_TEXCOORD2.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7 = (tmpvar_12 + ((
    (normalize(tmpvar_12) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_7.xy = (viewPos_7.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  mediump float x_7;
  x_7 = (albedo_4.w - _AlphaCutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_10;
  if (((0.5 < tmpvar_9) && (tmpvar_9 < 1.5))) {
    tmpvar_10 = bool(1);
  } else {
    tmpvar_10 = bool(0);
  };
  if (tmpvar_10) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_11;
    if (((1.5 < tmpvar_9) && (tmpvar_9 < 2.5))) {
      tmpvar_11 = bool(1);
    } else {
      tmpvar_11 = bool(0);
    };
    if (tmpvar_11) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_12;
      if (((2.5 < tmpvar_9) && (tmpvar_9 < 3.5))) {
        tmpvar_12 = bool(1);
      } else {
        tmpvar_12 = bool(0);
      };
      if (tmpvar_12) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_13;
        if (((3.5 < tmpvar_9) && (tmpvar_9 < 4.5))) {
          tmpvar_13 = bool(1);
        } else {
          tmpvar_13 = bool(0);
        };
        if (tmpvar_13) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_14;
          if (((4.5 < tmpvar_9) && (tmpvar_9 < 5.5))) {
            tmpvar_14 = bool(1);
          } else {
            tmpvar_14 = bool(0);
          };
          if (tmpvar_14) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_15;
            if (((5.5 < tmpvar_9) && (tmpvar_9 < 6.5))) {
              tmpvar_15 = bool(1);
            } else {
              tmpvar_15 = bool(0);
            };
            if (tmpvar_15) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1.xyz = tmpvar_16.xyz;
  col_1.w = 1.0;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD2;
    mediump float a_18;
    a_18 = xlv_TEXCOORD2.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (1.0, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
}
}
 Pass {
  Name "TRANSPARENTOUTLINE"
  Tags { "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  Cull Front
  GpuProgramID 201843
Program "vp" {
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_5;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_5;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_5;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_5;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_5;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_5;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  viewPos_7.z = tmpvar_12.z;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7.xy = (tmpvar_12.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_5;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  viewPos_7.z = tmpvar_12.z;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7.xy = (tmpvar_12.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_5;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  viewPos_7.z = tmpvar_12.z;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7.xy = (tmpvar_12.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_5;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_6;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_6;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_6;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_6;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_6;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  viewPos_6.z = tmpvar_11.z;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6.xy = (tmpvar_11.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_6;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  viewPos_7.z = tmpvar_12.z;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7.xy = (tmpvar_12.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_6;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  viewPos_7.z = tmpvar_12.z;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7.xy = (tmpvar_12.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_6;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  viewPos_7.z = tmpvar_12.z;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7.xy = (tmpvar_12.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_6;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
}
}
 Pass {
  Name "TRANSPARENTBACKTHENFRONTOUTLINE"
  Tags { "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  Cull Front
  GpuProgramID 265299
Program "vp" {
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_5;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_5;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_5;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_5;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_5;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_5;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7 = (tmpvar_12 + ((
    (normalize(tmpvar_12) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_7.xy = (viewPos_7.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_5;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7 = (tmpvar_12 + ((
    (normalize(tmpvar_12) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_7.xy = (viewPos_7.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_5;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7 = (tmpvar_12 + ((
    (normalize(tmpvar_12) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_7.xy = (viewPos_7.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  highp vec4 tmpvar_5;
  tmpvar_5 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_5;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD2;
    mediump float a_7;
    a_7 = xlv_TEXCOORD2.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_9;
  if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_10;
    if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_11;
      if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_12;
        if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_13;
          if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_14;
            if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1 = tmpvar_15;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_16;
    scrpos_16 = xlv_TEXCOORD2;
    mediump float a_17;
    a_17 = xlv_TEXCOORD2.z;
    if ((a_17 < 0.95)) {
      scrpos_16.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_17 = (a_17 * 17.0);
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_16.y / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_16.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float x_24;
      x_24 = ((a_17 - _DITHERMATRIX[
        int(tmpvar_20)
      ][
        int(tmpvar_23)
      ]) - 0.01);
      if ((x_24 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_9;
  if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_10;
    if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_11;
      if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_12;
        if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_13;
          if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_14;
            if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1 = tmpvar_15;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_16;
    scrpos_16 = xlv_TEXCOORD2;
    mediump float a_17;
    a_17 = xlv_TEXCOORD2.z;
    if ((a_17 < 0.95)) {
      scrpos_16.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_17 = (a_17 * 17.0);
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_16.y / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_16.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float x_24;
      x_24 = ((a_17 - _DITHERMATRIX[
        int(tmpvar_20)
      ][
        int(tmpvar_23)
      ]) - 0.01);
      if ((x_24 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_9;
  if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_10;
    if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_11;
      if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_12;
        if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_13;
          if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_14;
            if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1 = tmpvar_15;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_16;
    scrpos_16 = xlv_TEXCOORD2;
    mediump float a_17;
    a_17 = xlv_TEXCOORD2.z;
    if ((a_17 < 0.95)) {
      scrpos_16.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_17 = (a_17 * 17.0);
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_16.y / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_16.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float x_24;
      x_24 = ((a_17 - _DITHERMATRIX[
        int(tmpvar_20)
      ][
        int(tmpvar_23)
      ]) - 0.01);
      if ((x_24 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_9;
  if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_10;
    if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_11;
      if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_12;
        if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_13;
          if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_14;
            if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1 = tmpvar_15;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_16;
    scrpos_16 = xlv_TEXCOORD2;
    mediump float a_17;
    a_17 = xlv_TEXCOORD2.z;
    if ((a_17 < 0.95)) {
      scrpos_16.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_17 = (a_17 * 17.0);
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_16.y / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_16.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float x_24;
      x_24 = ((a_17 - _DITHERMATRIX[
        int(tmpvar_20)
      ][
        int(tmpvar_23)
      ]) - 0.01);
      if ((x_24 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_9;
  if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_10;
    if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_11;
      if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_12;
        if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_13;
          if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_14;
            if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1 = tmpvar_15;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_16;
    scrpos_16 = xlv_TEXCOORD2;
    mediump float a_17;
    a_17 = xlv_TEXCOORD2.z;
    if ((a_17 < 0.95)) {
      scrpos_16.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_17 = (a_17 * 17.0);
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_16.y / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_16.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float x_24;
      x_24 = ((a_17 - _DITHERMATRIX[
        int(tmpvar_20)
      ][
        int(tmpvar_23)
      ]) - 0.01);
      if ((x_24 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_9;
  if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_10;
    if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_11;
      if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_12;
        if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_13;
          if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_14;
            if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1 = tmpvar_15;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_16;
    scrpos_16 = xlv_TEXCOORD2;
    mediump float a_17;
    a_17 = xlv_TEXCOORD2.z;
    if ((a_17 < 0.95)) {
      scrpos_16.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_17 = (a_17 * 17.0);
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_16.y / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_16.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float x_24;
      x_24 = ((a_17 - _DITHERMATRIX[
        int(tmpvar_20)
      ][
        int(tmpvar_23)
      ]) - 0.01);
      if ((x_24 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7 = (tmpvar_12 + ((
    (normalize(tmpvar_12) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_7.xy = (viewPos_7.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_9;
  if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_10;
    if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_11;
      if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_12;
        if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_13;
          if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_14;
            if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1 = tmpvar_15;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_16;
    scrpos_16 = xlv_TEXCOORD2;
    mediump float a_17;
    a_17 = xlv_TEXCOORD2.z;
    if ((a_17 < 0.95)) {
      scrpos_16.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_17 = (a_17 * 17.0);
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_16.y / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_16.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float x_24;
      x_24 = ((a_17 - _DITHERMATRIX[
        int(tmpvar_20)
      ][
        int(tmpvar_23)
      ]) - 0.01);
      if ((x_24 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7 = (tmpvar_12 + ((
    (normalize(tmpvar_12) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_7.xy = (viewPos_7.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_9;
  if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_10;
    if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_11;
      if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_12;
        if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_13;
          if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_14;
            if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1 = tmpvar_15;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_16;
    scrpos_16 = xlv_TEXCOORD2;
    mediump float a_17;
    a_17 = xlv_TEXCOORD2.z;
    if ((a_17 < 0.95)) {
      scrpos_16.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_17 = (a_17 * 17.0);
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_16.y / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_16.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float x_24;
      x_24 = ((a_17 - _DITHERMATRIX[
        int(tmpvar_20)
      ][
        int(tmpvar_23)
      ]) - 0.01);
      if ((x_24 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7 = (tmpvar_12 + ((
    (normalize(tmpvar_12) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_7.xy = (viewPos_7.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_7;
  mediump float tmpvar_8;
  tmpvar_8 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_9;
  if (((0.5 < tmpvar_8) && (tmpvar_8 < 1.5))) {
    tmpvar_9 = bool(1);
  } else {
    tmpvar_9 = bool(0);
  };
  if (tmpvar_9) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_10;
    if (((1.5 < tmpvar_8) && (tmpvar_8 < 2.5))) {
      tmpvar_10 = bool(1);
    } else {
      tmpvar_10 = bool(0);
    };
    if (tmpvar_10) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_11;
      if (((2.5 < tmpvar_8) && (tmpvar_8 < 3.5))) {
        tmpvar_11 = bool(1);
      } else {
        tmpvar_11 = bool(0);
      };
      if (tmpvar_11) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_12;
        if (((3.5 < tmpvar_8) && (tmpvar_8 < 4.5))) {
          tmpvar_12 = bool(1);
        } else {
          tmpvar_12 = bool(0);
        };
        if (tmpvar_12) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_13;
          if (((4.5 < tmpvar_8) && (tmpvar_8 < 5.5))) {
            tmpvar_13 = bool(1);
          } else {
            tmpvar_13 = bool(0);
          };
          if (tmpvar_13) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_14;
            if (((5.5 < tmpvar_8) && (tmpvar_8 < 6.5))) {
              tmpvar_14 = bool(1);
            } else {
              tmpvar_14 = bool(0);
            };
            if (tmpvar_14) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_15;
  tmpvar_15 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1 = tmpvar_15;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_16;
    scrpos_16 = xlv_TEXCOORD2;
    mediump float a_17;
    a_17 = xlv_TEXCOORD2.z;
    if ((a_17 < 0.95)) {
      scrpos_16.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_17 = (a_17 * 17.0);
      highp float tmpvar_18;
      tmpvar_18 = (scrpos_16.y / 4.0);
      highp float tmpvar_19;
      tmpvar_19 = (fract(abs(tmpvar_18)) * 4.0);
      highp float tmpvar_20;
      if ((tmpvar_18 >= 0.0)) {
        tmpvar_20 = tmpvar_19;
      } else {
        tmpvar_20 = -(tmpvar_19);
      };
      highp float tmpvar_21;
      tmpvar_21 = (scrpos_16.x / 4.0);
      highp float tmpvar_22;
      tmpvar_22 = (fract(abs(tmpvar_21)) * 4.0);
      highp float tmpvar_23;
      if ((tmpvar_21 >= 0.0)) {
        tmpvar_23 = tmpvar_22;
      } else {
        tmpvar_23 = -(tmpvar_22);
      };
      highp float x_24;
      x_24 = ((a_17 - _DITHERMATRIX[
        int(tmpvar_20)
      ][
        int(tmpvar_23)
      ]) - 0.01);
      if ((x_24 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_6;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_6;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_6;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_6;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_6;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_6;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7 = (tmpvar_12 + ((
    (normalize(tmpvar_12) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_7.xy = (viewPos_7.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_6;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7 = (tmpvar_12 + ((
    (normalize(tmpvar_12) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_7.xy = (viewPos_7.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_6;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7 = (tmpvar_12 + ((
    (normalize(tmpvar_12) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_7.xy = (viewPos_7.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 albedo_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 * _Color);
  albedo_2.xyz = tmpvar_4.xyz;
  albedo_2.w = clamp (tmpvar_4.w, 0.0, 1.0);
  mediump float x_5;
  x_5 = (albedo_2.w - _AlphaCutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_2) * _OutlineColor);
  col_1 = tmpvar_6;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD2;
    mediump float a_8;
    a_8 = xlv_TEXCOORD2.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  mediump float x_7;
  x_7 = (albedo_4.w - _AlphaCutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_10;
  if (((0.5 < tmpvar_9) && (tmpvar_9 < 1.5))) {
    tmpvar_10 = bool(1);
  } else {
    tmpvar_10 = bool(0);
  };
  if (tmpvar_10) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_11;
    if (((1.5 < tmpvar_9) && (tmpvar_9 < 2.5))) {
      tmpvar_11 = bool(1);
    } else {
      tmpvar_11 = bool(0);
    };
    if (tmpvar_11) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_12;
      if (((2.5 < tmpvar_9) && (tmpvar_9 < 3.5))) {
        tmpvar_12 = bool(1);
      } else {
        tmpvar_12 = bool(0);
      };
      if (tmpvar_12) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_13;
        if (((3.5 < tmpvar_9) && (tmpvar_9 < 4.5))) {
          tmpvar_13 = bool(1);
        } else {
          tmpvar_13 = bool(0);
        };
        if (tmpvar_13) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_14;
          if (((4.5 < tmpvar_9) && (tmpvar_9 < 5.5))) {
            tmpvar_14 = bool(1);
          } else {
            tmpvar_14 = bool(0);
          };
          if (tmpvar_14) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_15;
            if (((5.5 < tmpvar_9) && (tmpvar_9 < 6.5))) {
              tmpvar_15 = bool(1);
            } else {
              tmpvar_15 = bool(0);
            };
            if (tmpvar_15) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1 = tmpvar_16;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD2;
    mediump float a_18;
    a_18 = xlv_TEXCOORD2.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  mediump float x_7;
  x_7 = (albedo_4.w - _AlphaCutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_10;
  if (((0.5 < tmpvar_9) && (tmpvar_9 < 1.5))) {
    tmpvar_10 = bool(1);
  } else {
    tmpvar_10 = bool(0);
  };
  if (tmpvar_10) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_11;
    if (((1.5 < tmpvar_9) && (tmpvar_9 < 2.5))) {
      tmpvar_11 = bool(1);
    } else {
      tmpvar_11 = bool(0);
    };
    if (tmpvar_11) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_12;
      if (((2.5 < tmpvar_9) && (tmpvar_9 < 3.5))) {
        tmpvar_12 = bool(1);
      } else {
        tmpvar_12 = bool(0);
      };
      if (tmpvar_12) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_13;
        if (((3.5 < tmpvar_9) && (tmpvar_9 < 4.5))) {
          tmpvar_13 = bool(1);
        } else {
          tmpvar_13 = bool(0);
        };
        if (tmpvar_13) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_14;
          if (((4.5 < tmpvar_9) && (tmpvar_9 < 5.5))) {
            tmpvar_14 = bool(1);
          } else {
            tmpvar_14 = bool(0);
          };
          if (tmpvar_14) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_15;
            if (((5.5 < tmpvar_9) && (tmpvar_9 < 6.5))) {
              tmpvar_15 = bool(1);
            } else {
              tmpvar_15 = bool(0);
            };
            if (tmpvar_15) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1 = tmpvar_16;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD2;
    mediump float a_18;
    a_18 = xlv_TEXCOORD2.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesNormal).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  mediump float x_7;
  x_7 = (albedo_4.w - _AlphaCutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_10;
  if (((0.5 < tmpvar_9) && (tmpvar_9 < 1.5))) {
    tmpvar_10 = bool(1);
  } else {
    tmpvar_10 = bool(0);
  };
  if (tmpvar_10) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_11;
    if (((1.5 < tmpvar_9) && (tmpvar_9 < 2.5))) {
      tmpvar_11 = bool(1);
    } else {
      tmpvar_11 = bool(0);
    };
    if (tmpvar_11) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_12;
      if (((2.5 < tmpvar_9) && (tmpvar_9 < 3.5))) {
        tmpvar_12 = bool(1);
      } else {
        tmpvar_12 = bool(0);
      };
      if (tmpvar_12) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_13;
        if (((3.5 < tmpvar_9) && (tmpvar_9 < 4.5))) {
          tmpvar_13 = bool(1);
        } else {
          tmpvar_13 = bool(0);
        };
        if (tmpvar_13) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_14;
          if (((4.5 < tmpvar_9) && (tmpvar_9 < 5.5))) {
            tmpvar_14 = bool(1);
          } else {
            tmpvar_14 = bool(0);
          };
          if (tmpvar_14) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_15;
            if (((5.5 < tmpvar_9) && (tmpvar_9 < 6.5))) {
              tmpvar_15 = bool(1);
            } else {
              tmpvar_15 = bool(0);
            };
            if (tmpvar_15) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1 = tmpvar_16;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD2;
    mediump float a_18;
    a_18 = xlv_TEXCOORD2.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  mediump float x_7;
  x_7 = (albedo_4.w - _AlphaCutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_10;
  if (((0.5 < tmpvar_9) && (tmpvar_9 < 1.5))) {
    tmpvar_10 = bool(1);
  } else {
    tmpvar_10 = bool(0);
  };
  if (tmpvar_10) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_11;
    if (((1.5 < tmpvar_9) && (tmpvar_9 < 2.5))) {
      tmpvar_11 = bool(1);
    } else {
      tmpvar_11 = bool(0);
    };
    if (tmpvar_11) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_12;
      if (((2.5 < tmpvar_9) && (tmpvar_9 < 3.5))) {
        tmpvar_12 = bool(1);
      } else {
        tmpvar_12 = bool(0);
      };
      if (tmpvar_12) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_13;
        if (((3.5 < tmpvar_9) && (tmpvar_9 < 4.5))) {
          tmpvar_13 = bool(1);
        } else {
          tmpvar_13 = bool(0);
        };
        if (tmpvar_13) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_14;
          if (((4.5 < tmpvar_9) && (tmpvar_9 < 5.5))) {
            tmpvar_14 = bool(1);
          } else {
            tmpvar_14 = bool(0);
          };
          if (tmpvar_14) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_15;
            if (((5.5 < tmpvar_9) && (tmpvar_9 < 6.5))) {
              tmpvar_15 = bool(1);
            } else {
              tmpvar_15 = bool(0);
            };
            if (tmpvar_15) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1 = tmpvar_16;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD2;
    mediump float a_18;
    a_18 = xlv_TEXCOORD2.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  mediump float x_7;
  x_7 = (albedo_4.w - _AlphaCutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_10;
  if (((0.5 < tmpvar_9) && (tmpvar_9 < 1.5))) {
    tmpvar_10 = bool(1);
  } else {
    tmpvar_10 = bool(0);
  };
  if (tmpvar_10) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_11;
    if (((1.5 < tmpvar_9) && (tmpvar_9 < 2.5))) {
      tmpvar_11 = bool(1);
    } else {
      tmpvar_11 = bool(0);
    };
    if (tmpvar_11) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_12;
      if (((2.5 < tmpvar_9) && (tmpvar_9 < 3.5))) {
        tmpvar_12 = bool(1);
      } else {
        tmpvar_12 = bool(0);
      };
      if (tmpvar_12) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_13;
        if (((3.5 < tmpvar_9) && (tmpvar_9 < 4.5))) {
          tmpvar_13 = bool(1);
        } else {
          tmpvar_13 = bool(0);
        };
        if (tmpvar_13) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_14;
          if (((4.5 < tmpvar_9) && (tmpvar_9 < 5.5))) {
            tmpvar_14 = bool(1);
          } else {
            tmpvar_14 = bool(0);
          };
          if (tmpvar_14) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_15;
            if (((5.5 < tmpvar_9) && (tmpvar_9 < 6.5))) {
              tmpvar_15 = bool(1);
            } else {
              tmpvar_15 = bool(0);
            };
            if (tmpvar_15) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1 = tmpvar_16;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD2;
    mediump float a_18;
    a_18 = xlv_TEXCOORD2.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 viewNormal_5;
  highp vec3 viewPos_6;
  highp vec4 tmpvar_7;
  highp vec2 tmpvar_8;
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_8 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = _glesVertex.xyz;
  tmpvar_11 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_12)).xyz;
  highp mat3 tmpvar_13;
  tmpvar_13[0] = tmpvar_2.xyz;
  tmpvar_13[1] = tmpvar_3.xyz;
  tmpvar_13[2] = tmpvar_4.xyz;
  viewNormal_5.xy = (tmpvar_13 * _glesTANGENT.xyz).xy;
  viewNormal_5.z = 0.01;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(viewNormal_5);
  viewNormal_5 = tmpvar_14;
  viewPos_6 = (tmpvar_11 + ((
    (normalize(tmpvar_11) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_6.xy = (viewPos_6.xy + (tmpvar_14.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_11.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = viewPos_6;
  tmpvar_7 = (glstate_matrix_projection * tmpvar_15);
  tmpvar_9.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_9.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_16;
    highp vec4 tmpvar_17;
    tmpvar_17 = (tmpvar_7 * 0.5);
    highp vec2 tmpvar_18;
    tmpvar_18.x = tmpvar_17.x;
    tmpvar_18.y = (tmpvar_17.y * _ProjectionParams.x);
    o_16.xy = (tmpvar_18 + tmpvar_17.w);
    o_16.zw = tmpvar_7.zw;
    tmpvar_10.xyw = o_16.xyw;
    tmpvar_10.z = _DitherAlpha;
  };
  gl_Position = tmpvar_7;
  xlv_TEXCOORD0 = tmpvar_8;
  xlv_TEXCOORD1 = tmpvar_9;
  xlv_TEXCOORD2 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  mediump float x_7;
  x_7 = (albedo_4.w - _AlphaCutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_10;
  if (((0.5 < tmpvar_9) && (tmpvar_9 < 1.5))) {
    tmpvar_10 = bool(1);
  } else {
    tmpvar_10 = bool(0);
  };
  if (tmpvar_10) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_11;
    if (((1.5 < tmpvar_9) && (tmpvar_9 < 2.5))) {
      tmpvar_11 = bool(1);
    } else {
      tmpvar_11 = bool(0);
    };
    if (tmpvar_11) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_12;
      if (((2.5 < tmpvar_9) && (tmpvar_9 < 3.5))) {
        tmpvar_12 = bool(1);
      } else {
        tmpvar_12 = bool(0);
      };
      if (tmpvar_12) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_13;
        if (((3.5 < tmpvar_9) && (tmpvar_9 < 4.5))) {
          tmpvar_13 = bool(1);
        } else {
          tmpvar_13 = bool(0);
        };
        if (tmpvar_13) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_14;
          if (((4.5 < tmpvar_9) && (tmpvar_9 < 5.5))) {
            tmpvar_14 = bool(1);
          } else {
            tmpvar_14 = bool(0);
          };
          if (tmpvar_14) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_15;
            if (((5.5 < tmpvar_9) && (tmpvar_9 < 6.5))) {
              tmpvar_15 = bool(1);
            } else {
              tmpvar_15 = bool(0);
            };
            if (tmpvar_15) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1 = tmpvar_16;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD2;
    mediump float a_18;
    a_18 = xlv_TEXCOORD2.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7 = (tmpvar_12 + ((
    (normalize(tmpvar_12) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_7.xy = (viewPos_7.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  mediump float x_7;
  x_7 = (albedo_4.w - _AlphaCutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_10;
  if (((0.5 < tmpvar_9) && (tmpvar_9 < 1.5))) {
    tmpvar_10 = bool(1);
  } else {
    tmpvar_10 = bool(0);
  };
  if (tmpvar_10) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_11;
    if (((1.5 < tmpvar_9) && (tmpvar_9 < 2.5))) {
      tmpvar_11 = bool(1);
    } else {
      tmpvar_11 = bool(0);
    };
    if (tmpvar_11) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_12;
      if (((2.5 < tmpvar_9) && (tmpvar_9 < 3.5))) {
        tmpvar_12 = bool(1);
      } else {
        tmpvar_12 = bool(0);
      };
      if (tmpvar_12) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_13;
        if (((3.5 < tmpvar_9) && (tmpvar_9 < 4.5))) {
          tmpvar_13 = bool(1);
        } else {
          tmpvar_13 = bool(0);
        };
        if (tmpvar_13) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_14;
          if (((4.5 < tmpvar_9) && (tmpvar_9 < 5.5))) {
            tmpvar_14 = bool(1);
          } else {
            tmpvar_14 = bool(0);
          };
          if (tmpvar_14) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_15;
            if (((5.5 < tmpvar_9) && (tmpvar_9 < 6.5))) {
              tmpvar_15 = bool(1);
            } else {
              tmpvar_15 = bool(0);
            };
            if (tmpvar_15) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1 = tmpvar_16;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD2;
    mediump float a_18;
    a_18 = xlv_TEXCOORD2.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7 = (tmpvar_12 + ((
    (normalize(tmpvar_12) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_7.xy = (viewPos_7.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  mediump float x_7;
  x_7 = (albedo_4.w - _AlphaCutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_10;
  if (((0.5 < tmpvar_9) && (tmpvar_9 < 1.5))) {
    tmpvar_10 = bool(1);
  } else {
    tmpvar_10 = bool(0);
  };
  if (tmpvar_10) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_11;
    if (((1.5 < tmpvar_9) && (tmpvar_9 < 2.5))) {
      tmpvar_11 = bool(1);
    } else {
      tmpvar_11 = bool(0);
    };
    if (tmpvar_11) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_12;
      if (((2.5 < tmpvar_9) && (tmpvar_9 < 3.5))) {
        tmpvar_12 = bool(1);
      } else {
        tmpvar_12 = bool(0);
      };
      if (tmpvar_12) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_13;
        if (((3.5 < tmpvar_9) && (tmpvar_9 < 4.5))) {
          tmpvar_13 = bool(1);
        } else {
          tmpvar_13 = bool(0);
        };
        if (tmpvar_13) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_14;
          if (((4.5 < tmpvar_9) && (tmpvar_9 < 5.5))) {
            tmpvar_14 = bool(1);
          } else {
            tmpvar_14 = bool(0);
          };
          if (tmpvar_14) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_15;
            if (((5.5 < tmpvar_9) && (tmpvar_9 < 6.5))) {
              tmpvar_15 = bool(1);
            } else {
              tmpvar_15 = bool(0);
            };
            if (tmpvar_15) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1 = tmpvar_16;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD2;
    mediump float a_18;
    a_18 = xlv_TEXCOORD2.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec3 viewNormal_6;
  highp vec3 viewPos_7;
  highp vec4 tmpvar_8;
  highp vec2 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_9 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = _glesVertex.xyz;
  tmpvar_12 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_13)).xyz;
  highp mat3 tmpvar_14;
  tmpvar_14[0] = tmpvar_2.xyz;
  tmpvar_14[1] = tmpvar_3.xyz;
  tmpvar_14[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_17;
  highp vec3 tmpvar_18;
  tmpvar_17 = _glesTANGENT.xyz;
  tmpvar_18 = (((tmpvar_15.yzx * tmpvar_16.zxy) - (tmpvar_15.zxy * tmpvar_16.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_19.x = tmpvar_17.x;
  tmpvar_19.y = tmpvar_18.x;
  tmpvar_19.z = tmpvar_5.x;
  tmpvar_20.x = tmpvar_17.y;
  tmpvar_20.y = tmpvar_18.y;
  tmpvar_20.z = tmpvar_5.y;
  tmpvar_21.x = tmpvar_17.z;
  tmpvar_21.y = tmpvar_18.z;
  tmpvar_21.z = tmpvar_5.z;
  highp mat3 tmpvar_22;
  tmpvar_22[0].x = tmpvar_19.x;
  tmpvar_22[0].y = tmpvar_20.x;
  tmpvar_22[0].z = tmpvar_21.x;
  tmpvar_22[1].x = tmpvar_19.y;
  tmpvar_22[1].y = tmpvar_20.y;
  tmpvar_22[1].z = tmpvar_21.y;
  tmpvar_22[2].x = tmpvar_19.z;
  tmpvar_22[2].y = tmpvar_20.z;
  tmpvar_22[2].z = tmpvar_21.z;
  viewNormal_6.xy = (tmpvar_14 * (tmpvar_22 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_6.z = 0.01;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(viewNormal_6);
  viewNormal_6 = tmpvar_23;
  viewPos_7 = (tmpvar_12 + ((
    (normalize(tmpvar_12) * _MaxOutlineZOffset)
   * _Scale) * 0.5));
  viewPos_7.xy = (viewPos_7.xy + (tmpvar_23.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_12.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = viewPos_7;
  tmpvar_8 = (glstate_matrix_projection * tmpvar_24);
  tmpvar_10.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_10.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_27;
    tmpvar_27.x = tmpvar_26.x;
    tmpvar_27.y = (tmpvar_26.y * _ProjectionParams.x);
    o_25.xy = (tmpvar_27 + tmpvar_26.w);
    o_25.zw = tmpvar_8.zw;
    tmpvar_11.xyw = o_25.xyw;
    tmpvar_11.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_TEXCOORD1 = tmpvar_10;
  xlv_TEXCOORD2 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform sampler2D _LightMap;
uniform mediump vec4 _OutlineColor0;
uniform mediump vec4 _OutlineColor1;
uniform mediump vec4 _OutlineColor2;
uniform mediump vec4 _OutlineColor3;
uniform mediump vec4 _OutlineColor4;
uniform mediump vec4 _OutlineColor5;
uniform mediump vec4 _OutlineColor6;
uniform mediump float _UsingDitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 col_1;
  mediump vec4 outlineColor_2;
  mediump vec4 lightmap_3;
  mediump vec4 albedo_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _Color);
  albedo_4.xyz = tmpvar_6.xyz;
  albedo_4.w = clamp (tmpvar_6.w, 0.0, 1.0);
  mediump float x_7;
  x_7 = (albedo_4.w - _AlphaCutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightMap, xlv_TEXCOORD0);
  lightmap_3 = tmpvar_8;
  mediump float tmpvar_9;
  tmpvar_9 = floor(((lightmap_3.w * 8.0) + 0.5));
  outlineColor_2 = _OutlineColor0;
  bool tmpvar_10;
  if (((0.5 < tmpvar_9) && (tmpvar_9 < 1.5))) {
    tmpvar_10 = bool(1);
  } else {
    tmpvar_10 = bool(0);
  };
  if (tmpvar_10) {
    outlineColor_2 = _OutlineColor1;
  } else {
    bool tmpvar_11;
    if (((1.5 < tmpvar_9) && (tmpvar_9 < 2.5))) {
      tmpvar_11 = bool(1);
    } else {
      tmpvar_11 = bool(0);
    };
    if (tmpvar_11) {
      outlineColor_2 = _OutlineColor2;
    } else {
      bool tmpvar_12;
      if (((2.5 < tmpvar_9) && (tmpvar_9 < 3.5))) {
        tmpvar_12 = bool(1);
      } else {
        tmpvar_12 = bool(0);
      };
      if (tmpvar_12) {
        outlineColor_2 = _OutlineColor3;
      } else {
        bool tmpvar_13;
        if (((3.5 < tmpvar_9) && (tmpvar_9 < 4.5))) {
          tmpvar_13 = bool(1);
        } else {
          tmpvar_13 = bool(0);
        };
        if (tmpvar_13) {
          outlineColor_2 = _OutlineColor4;
        } else {
          bool tmpvar_14;
          if (((4.5 < tmpvar_9) && (tmpvar_9 < 5.5))) {
            tmpvar_14 = bool(1);
          } else {
            tmpvar_14 = bool(0);
          };
          if (tmpvar_14) {
            outlineColor_2 = _OutlineColor5;
          } else {
            bool tmpvar_15;
            if (((5.5 < tmpvar_9) && (tmpvar_9 < 6.5))) {
              tmpvar_15 = bool(1);
            } else {
              tmpvar_15 = bool(0);
            };
            if (tmpvar_15) {
              outlineColor_2 = _OutlineColor6;
            };
          };
        };
      };
    };
  };
  highp vec4 tmpvar_16;
  tmpvar_16 = ((xlv_TEXCOORD1 * albedo_4) * outlineColor_2);
  col_1 = tmpvar_16;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD2;
    mediump float a_18;
    a_18 = xlv_TEXCOORD2.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  col_1.w = clamp (col_1.w, 0.0, 1.0);
  gl_FragData[0] = col_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
}
}
 Pass {
  Name "TRANSPARENTSLIDEFXOUTLINE"
  Tags { "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  Cull Front
  GpuProgramID 346457
Program "vp" {
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesNormal).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = clamp (((xlv_TEXCOORD3.y - tmpvar_7) / (
    (tmpvar_7 + _SlideFxSmoothStep)
   - tmpvar_7)), 0.0, 1.0);
  tmpvar_8 = (tmpvar_9 * (tmpvar_9 * (3.0 - 
    (2.0 * tmpvar_9)
  )));
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_SlideFxNoiseTex, tmpvar_11);
  highp float tmpvar_13;
  tmpvar_13 = (tmpvar_8 + ((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   - tmpvar_8) * tmpvar_12.x));
  aseOutAlpha_1 = tmpvar_13;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_14;
    scrpos_14 = xlv_TEXCOORD4;
    mediump float a_15;
    a_15 = xlv_TEXCOORD4.z;
    if ((a_15 < 0.95)) {
      scrpos_14.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_15 = (a_15 * 17.0);
      highp float tmpvar_16;
      tmpvar_16 = (scrpos_14.y / 4.0);
      highp float tmpvar_17;
      tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
      highp float tmpvar_18;
      if ((tmpvar_16 >= 0.0)) {
        tmpvar_18 = tmpvar_17;
      } else {
        tmpvar_18 = -(tmpvar_17);
      };
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_14.x / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float x_22;
      x_22 = ((a_15 - _DITHERMATRIX[
        int(tmpvar_18)
      ][
        int(tmpvar_21)
      ]) - 0.01);
      if ((x_22 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesNormal).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = clamp (((xlv_TEXCOORD3.y - tmpvar_7) / (
    (tmpvar_7 + _SlideFxSmoothStep)
   - tmpvar_7)), 0.0, 1.0);
  tmpvar_8 = (tmpvar_9 * (tmpvar_9 * (3.0 - 
    (2.0 * tmpvar_9)
  )));
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_SlideFxNoiseTex, tmpvar_11);
  highp float tmpvar_13;
  tmpvar_13 = (tmpvar_8 + ((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   - tmpvar_8) * tmpvar_12.x));
  aseOutAlpha_1 = tmpvar_13;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_14;
    scrpos_14 = xlv_TEXCOORD4;
    mediump float a_15;
    a_15 = xlv_TEXCOORD4.z;
    if ((a_15 < 0.95)) {
      scrpos_14.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_15 = (a_15 * 17.0);
      highp float tmpvar_16;
      tmpvar_16 = (scrpos_14.y / 4.0);
      highp float tmpvar_17;
      tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
      highp float tmpvar_18;
      if ((tmpvar_16 >= 0.0)) {
        tmpvar_18 = tmpvar_17;
      } else {
        tmpvar_18 = -(tmpvar_17);
      };
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_14.x / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float x_22;
      x_22 = ((a_15 - _DITHERMATRIX[
        int(tmpvar_18)
      ][
        int(tmpvar_21)
      ]) - 0.01);
      if ((x_22 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesNormal).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = clamp (((xlv_TEXCOORD3.y - tmpvar_7) / (
    (tmpvar_7 + _SlideFxSmoothStep)
   - tmpvar_7)), 0.0, 1.0);
  tmpvar_8 = (tmpvar_9 * (tmpvar_9 * (3.0 - 
    (2.0 * tmpvar_9)
  )));
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_SlideFxNoiseTex, tmpvar_11);
  highp float tmpvar_13;
  tmpvar_13 = (tmpvar_8 + ((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   - tmpvar_8) * tmpvar_12.x));
  aseOutAlpha_1 = tmpvar_13;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_14;
    scrpos_14 = xlv_TEXCOORD4;
    mediump float a_15;
    a_15 = xlv_TEXCOORD4.z;
    if ((a_15 < 0.95)) {
      scrpos_14.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_15 = (a_15 * 17.0);
      highp float tmpvar_16;
      tmpvar_16 = (scrpos_14.y / 4.0);
      highp float tmpvar_17;
      tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
      highp float tmpvar_18;
      if ((tmpvar_16 >= 0.0)) {
        tmpvar_18 = tmpvar_17;
      } else {
        tmpvar_18 = -(tmpvar_17);
      };
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_14.x / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float x_22;
      x_22 = ((a_15 - _DITHERMATRIX[
        int(tmpvar_18)
      ][
        int(tmpvar_21)
      ]) - 0.01);
      if ((x_22 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesTANGENT.xyz).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = clamp (((xlv_TEXCOORD3.y - tmpvar_7) / (
    (tmpvar_7 + _SlideFxSmoothStep)
   - tmpvar_7)), 0.0, 1.0);
  tmpvar_8 = (tmpvar_9 * (tmpvar_9 * (3.0 - 
    (2.0 * tmpvar_9)
  )));
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_SlideFxNoiseTex, tmpvar_11);
  highp float tmpvar_13;
  tmpvar_13 = (tmpvar_8 + ((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   - tmpvar_8) * tmpvar_12.x));
  aseOutAlpha_1 = tmpvar_13;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_14;
    scrpos_14 = xlv_TEXCOORD4;
    mediump float a_15;
    a_15 = xlv_TEXCOORD4.z;
    if ((a_15 < 0.95)) {
      scrpos_14.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_15 = (a_15 * 17.0);
      highp float tmpvar_16;
      tmpvar_16 = (scrpos_14.y / 4.0);
      highp float tmpvar_17;
      tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
      highp float tmpvar_18;
      if ((tmpvar_16 >= 0.0)) {
        tmpvar_18 = tmpvar_17;
      } else {
        tmpvar_18 = -(tmpvar_17);
      };
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_14.x / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float x_22;
      x_22 = ((a_15 - _DITHERMATRIX[
        int(tmpvar_18)
      ][
        int(tmpvar_21)
      ]) - 0.01);
      if ((x_22 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesTANGENT.xyz).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = clamp (((xlv_TEXCOORD3.y - tmpvar_7) / (
    (tmpvar_7 + _SlideFxSmoothStep)
   - tmpvar_7)), 0.0, 1.0);
  tmpvar_8 = (tmpvar_9 * (tmpvar_9 * (3.0 - 
    (2.0 * tmpvar_9)
  )));
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_SlideFxNoiseTex, tmpvar_11);
  highp float tmpvar_13;
  tmpvar_13 = (tmpvar_8 + ((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   - tmpvar_8) * tmpvar_12.x));
  aseOutAlpha_1 = tmpvar_13;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_14;
    scrpos_14 = xlv_TEXCOORD4;
    mediump float a_15;
    a_15 = xlv_TEXCOORD4.z;
    if ((a_15 < 0.95)) {
      scrpos_14.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_15 = (a_15 * 17.0);
      highp float tmpvar_16;
      tmpvar_16 = (scrpos_14.y / 4.0);
      highp float tmpvar_17;
      tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
      highp float tmpvar_18;
      if ((tmpvar_16 >= 0.0)) {
        tmpvar_18 = tmpvar_17;
      } else {
        tmpvar_18 = -(tmpvar_17);
      };
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_14.x / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float x_22;
      x_22 = ((a_15 - _DITHERMATRIX[
        int(tmpvar_18)
      ][
        int(tmpvar_21)
      ]) - 0.01);
      if ((x_22 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesTANGENT.xyz).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = clamp (((xlv_TEXCOORD3.y - tmpvar_7) / (
    (tmpvar_7 + _SlideFxSmoothStep)
   - tmpvar_7)), 0.0, 1.0);
  tmpvar_8 = (tmpvar_9 * (tmpvar_9 * (3.0 - 
    (2.0 * tmpvar_9)
  )));
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_SlideFxNoiseTex, tmpvar_11);
  highp float tmpvar_13;
  tmpvar_13 = (tmpvar_8 + ((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   - tmpvar_8) * tmpvar_12.x));
  aseOutAlpha_1 = tmpvar_13;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_14;
    scrpos_14 = xlv_TEXCOORD4;
    mediump float a_15;
    a_15 = xlv_TEXCOORD4.z;
    if ((a_15 < 0.95)) {
      scrpos_14.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_15 = (a_15 * 17.0);
      highp float tmpvar_16;
      tmpvar_16 = (scrpos_14.y / 4.0);
      highp float tmpvar_17;
      tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
      highp float tmpvar_18;
      if ((tmpvar_16 >= 0.0)) {
        tmpvar_18 = tmpvar_17;
      } else {
        tmpvar_18 = -(tmpvar_17);
      };
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_14.x / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float x_22;
      x_22 = ((a_15 - _DITHERMATRIX[
        int(tmpvar_18)
      ][
        int(tmpvar_21)
      ]) - 0.01);
      if ((x_22 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord1;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord2;
  highp vec3 viewNormal_8;
  highp vec3 viewPos_9;
  highp vec4 tmpvar_10;
  highp vec2 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_11 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = _glesVertex.xyz;
  tmpvar_14 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_15)).xyz;
  viewPos_9.z = tmpvar_14.z;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = tmpvar_2.xyz;
  tmpvar_16[1] = tmpvar_3.xyz;
  tmpvar_16[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_glesNormal);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_19 = _glesTANGENT.xyz;
  tmpvar_20 = (((tmpvar_17.yzx * tmpvar_18.zxy) - (tmpvar_17.zxy * tmpvar_18.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_21.x = tmpvar_19.x;
  tmpvar_21.y = tmpvar_20.x;
  tmpvar_21.z = tmpvar_5.x;
  tmpvar_22.x = tmpvar_19.y;
  tmpvar_22.y = tmpvar_20.y;
  tmpvar_22.z = tmpvar_5.y;
  tmpvar_23.x = tmpvar_19.z;
  tmpvar_23.y = tmpvar_20.z;
  tmpvar_23.z = tmpvar_5.z;
  highp mat3 tmpvar_24;
  tmpvar_24[0].x = tmpvar_21.x;
  tmpvar_24[0].y = tmpvar_22.x;
  tmpvar_24[0].z = tmpvar_23.x;
  tmpvar_24[1].x = tmpvar_21.y;
  tmpvar_24[1].y = tmpvar_22.y;
  tmpvar_24[1].z = tmpvar_23.y;
  tmpvar_24[2].x = tmpvar_21.z;
  tmpvar_24[2].y = tmpvar_22.z;
  tmpvar_24[2].z = tmpvar_23.z;
  viewNormal_8.xy = (tmpvar_16 * (tmpvar_24 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_8.z = 0.01;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(viewNormal_8);
  viewNormal_8 = tmpvar_25;
  viewPos_9.xy = (tmpvar_14.xy + (tmpvar_25.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_14.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = viewPos_9;
  tmpvar_10 = (glstate_matrix_projection * tmpvar_26);
  tmpvar_12.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_12.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_27;
    highp vec4 tmpvar_28;
    tmpvar_28 = (tmpvar_10 * 0.5);
    highp vec2 tmpvar_29;
    tmpvar_29.x = tmpvar_28.x;
    tmpvar_29.y = (tmpvar_28.y * _ProjectionParams.x);
    o_27.xy = (tmpvar_29 + tmpvar_28.w);
    o_27.zw = tmpvar_10.zw;
    tmpvar_13.xyw = o_27.xyw;
    tmpvar_13.z = _DitherAlpha;
  };
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = clamp (((xlv_TEXCOORD3.y - tmpvar_7) / (
    (tmpvar_7 + _SlideFxSmoothStep)
   - tmpvar_7)), 0.0, 1.0);
  tmpvar_8 = (tmpvar_9 * (tmpvar_9 * (3.0 - 
    (2.0 * tmpvar_9)
  )));
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_SlideFxNoiseTex, tmpvar_11);
  highp float tmpvar_13;
  tmpvar_13 = (tmpvar_8 + ((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   - tmpvar_8) * tmpvar_12.x));
  aseOutAlpha_1 = tmpvar_13;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_14;
    scrpos_14 = xlv_TEXCOORD4;
    mediump float a_15;
    a_15 = xlv_TEXCOORD4.z;
    if ((a_15 < 0.95)) {
      scrpos_14.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_15 = (a_15 * 17.0);
      highp float tmpvar_16;
      tmpvar_16 = (scrpos_14.y / 4.0);
      highp float tmpvar_17;
      tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
      highp float tmpvar_18;
      if ((tmpvar_16 >= 0.0)) {
        tmpvar_18 = tmpvar_17;
      } else {
        tmpvar_18 = -(tmpvar_17);
      };
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_14.x / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float x_22;
      x_22 = ((a_15 - _DITHERMATRIX[
        int(tmpvar_18)
      ][
        int(tmpvar_21)
      ]) - 0.01);
      if ((x_22 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord1;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord2;
  highp vec3 viewNormal_8;
  highp vec3 viewPos_9;
  highp vec4 tmpvar_10;
  highp vec2 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_11 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = _glesVertex.xyz;
  tmpvar_14 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_15)).xyz;
  viewPos_9.z = tmpvar_14.z;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = tmpvar_2.xyz;
  tmpvar_16[1] = tmpvar_3.xyz;
  tmpvar_16[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_glesNormal);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_19 = _glesTANGENT.xyz;
  tmpvar_20 = (((tmpvar_17.yzx * tmpvar_18.zxy) - (tmpvar_17.zxy * tmpvar_18.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_21.x = tmpvar_19.x;
  tmpvar_21.y = tmpvar_20.x;
  tmpvar_21.z = tmpvar_5.x;
  tmpvar_22.x = tmpvar_19.y;
  tmpvar_22.y = tmpvar_20.y;
  tmpvar_22.z = tmpvar_5.y;
  tmpvar_23.x = tmpvar_19.z;
  tmpvar_23.y = tmpvar_20.z;
  tmpvar_23.z = tmpvar_5.z;
  highp mat3 tmpvar_24;
  tmpvar_24[0].x = tmpvar_21.x;
  tmpvar_24[0].y = tmpvar_22.x;
  tmpvar_24[0].z = tmpvar_23.x;
  tmpvar_24[1].x = tmpvar_21.y;
  tmpvar_24[1].y = tmpvar_22.y;
  tmpvar_24[1].z = tmpvar_23.y;
  tmpvar_24[2].x = tmpvar_21.z;
  tmpvar_24[2].y = tmpvar_22.z;
  tmpvar_24[2].z = tmpvar_23.z;
  viewNormal_8.xy = (tmpvar_16 * (tmpvar_24 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_8.z = 0.01;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(viewNormal_8);
  viewNormal_8 = tmpvar_25;
  viewPos_9.xy = (tmpvar_14.xy + (tmpvar_25.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_14.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = viewPos_9;
  tmpvar_10 = (glstate_matrix_projection * tmpvar_26);
  tmpvar_12.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_12.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_27;
    highp vec4 tmpvar_28;
    tmpvar_28 = (tmpvar_10 * 0.5);
    highp vec2 tmpvar_29;
    tmpvar_29.x = tmpvar_28.x;
    tmpvar_29.y = (tmpvar_28.y * _ProjectionParams.x);
    o_27.xy = (tmpvar_29 + tmpvar_28.w);
    o_27.zw = tmpvar_10.zw;
    tmpvar_13.xyw = o_27.xyw;
    tmpvar_13.z = _DitherAlpha;
  };
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = clamp (((xlv_TEXCOORD3.y - tmpvar_7) / (
    (tmpvar_7 + _SlideFxSmoothStep)
   - tmpvar_7)), 0.0, 1.0);
  tmpvar_8 = (tmpvar_9 * (tmpvar_9 * (3.0 - 
    (2.0 * tmpvar_9)
  )));
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_SlideFxNoiseTex, tmpvar_11);
  highp float tmpvar_13;
  tmpvar_13 = (tmpvar_8 + ((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   - tmpvar_8) * tmpvar_12.x));
  aseOutAlpha_1 = tmpvar_13;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_14;
    scrpos_14 = xlv_TEXCOORD4;
    mediump float a_15;
    a_15 = xlv_TEXCOORD4.z;
    if ((a_15 < 0.95)) {
      scrpos_14.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_15 = (a_15 * 17.0);
      highp float tmpvar_16;
      tmpvar_16 = (scrpos_14.y / 4.0);
      highp float tmpvar_17;
      tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
      highp float tmpvar_18;
      if ((tmpvar_16 >= 0.0)) {
        tmpvar_18 = tmpvar_17;
      } else {
        tmpvar_18 = -(tmpvar_17);
      };
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_14.x / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float x_22;
      x_22 = ((a_15 - _DITHERMATRIX[
        int(tmpvar_18)
      ][
        int(tmpvar_21)
      ]) - 0.01);
      if ((x_22 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord1;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord2;
  highp vec3 viewNormal_8;
  highp vec3 viewPos_9;
  highp vec4 tmpvar_10;
  highp vec2 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_11 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = _glesVertex.xyz;
  tmpvar_14 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_15)).xyz;
  viewPos_9.z = tmpvar_14.z;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = tmpvar_2.xyz;
  tmpvar_16[1] = tmpvar_3.xyz;
  tmpvar_16[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_glesNormal);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_19 = _glesTANGENT.xyz;
  tmpvar_20 = (((tmpvar_17.yzx * tmpvar_18.zxy) - (tmpvar_17.zxy * tmpvar_18.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_21.x = tmpvar_19.x;
  tmpvar_21.y = tmpvar_20.x;
  tmpvar_21.z = tmpvar_5.x;
  tmpvar_22.x = tmpvar_19.y;
  tmpvar_22.y = tmpvar_20.y;
  tmpvar_22.z = tmpvar_5.y;
  tmpvar_23.x = tmpvar_19.z;
  tmpvar_23.y = tmpvar_20.z;
  tmpvar_23.z = tmpvar_5.z;
  highp mat3 tmpvar_24;
  tmpvar_24[0].x = tmpvar_21.x;
  tmpvar_24[0].y = tmpvar_22.x;
  tmpvar_24[0].z = tmpvar_23.x;
  tmpvar_24[1].x = tmpvar_21.y;
  tmpvar_24[1].y = tmpvar_22.y;
  tmpvar_24[1].z = tmpvar_23.y;
  tmpvar_24[2].x = tmpvar_21.z;
  tmpvar_24[2].y = tmpvar_22.z;
  tmpvar_24[2].z = tmpvar_23.z;
  viewNormal_8.xy = (tmpvar_16 * (tmpvar_24 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_8.z = 0.01;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(viewNormal_8);
  viewNormal_8 = tmpvar_25;
  viewPos_9.xy = (tmpvar_14.xy + (tmpvar_25.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_14.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = viewPos_9;
  tmpvar_10 = (glstate_matrix_projection * tmpvar_26);
  tmpvar_12.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_12.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_27;
    highp vec4 tmpvar_28;
    tmpvar_28 = (tmpvar_10 * 0.5);
    highp vec2 tmpvar_29;
    tmpvar_29.x = tmpvar_28.x;
    tmpvar_29.y = (tmpvar_28.y * _ProjectionParams.x);
    o_27.xy = (tmpvar_29 + tmpvar_28.w);
    o_27.zw = tmpvar_10.zw;
    tmpvar_13.xyw = o_27.xyw;
    tmpvar_13.z = _DitherAlpha;
  };
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = clamp (((xlv_TEXCOORD3.y - tmpvar_7) / (
    (tmpvar_7 + _SlideFxSmoothStep)
   - tmpvar_7)), 0.0, 1.0);
  tmpvar_8 = (tmpvar_9 * (tmpvar_9 * (3.0 - 
    (2.0 * tmpvar_9)
  )));
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_SlideFxNoiseTex, tmpvar_11);
  highp float tmpvar_13;
  tmpvar_13 = (tmpvar_8 + ((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   - tmpvar_8) * tmpvar_12.x));
  aseOutAlpha_1 = tmpvar_13;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_14;
    scrpos_14 = xlv_TEXCOORD4;
    mediump float a_15;
    a_15 = xlv_TEXCOORD4.z;
    if ((a_15 < 0.95)) {
      scrpos_14.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_15 = (a_15 * 17.0);
      highp float tmpvar_16;
      tmpvar_16 = (scrpos_14.y / 4.0);
      highp float tmpvar_17;
      tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
      highp float tmpvar_18;
      if ((tmpvar_16 >= 0.0)) {
        tmpvar_18 = tmpvar_17;
      } else {
        tmpvar_18 = -(tmpvar_17);
      };
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_14.x / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float x_22;
      x_22 = ((a_15 - _DITHERMATRIX[
        int(tmpvar_18)
      ][
        int(tmpvar_21)
      ]) - 0.01);
      if ((x_22 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesNormal).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - tmpvar_8) / (
    (tmpvar_8 + _SlideFxSmoothStep)
   - tmpvar_8)), 0.0, 1.0);
  tmpvar_9 = (tmpvar_10 * (tmpvar_10 * (3.0 - 
    (2.0 * tmpvar_10)
  )));
  highp float tmpvar_11;
  tmpvar_11 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_SlideFxNoiseTex, tmpvar_12);
  highp float tmpvar_14;
  tmpvar_14 = (tmpvar_9 + ((
    (tmpvar_11 * (tmpvar_11 * (3.0 - (2.0 * tmpvar_11))))
   - tmpvar_9) * tmpvar_13.x));
  aseOutAlpha_1 = tmpvar_14;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_15;
    scrpos_15 = xlv_TEXCOORD4;
    mediump float a_16;
    a_16 = xlv_TEXCOORD4.z;
    if ((a_16 < 0.95)) {
      scrpos_15.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_16 = (a_16 * 17.0);
      highp float tmpvar_17;
      tmpvar_17 = (scrpos_15.y / 4.0);
      highp float tmpvar_18;
      tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
      highp float tmpvar_19;
      if ((tmpvar_17 >= 0.0)) {
        tmpvar_19 = tmpvar_18;
      } else {
        tmpvar_19 = -(tmpvar_18);
      };
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_15.x / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float x_23;
      x_23 = ((a_16 - _DITHERMATRIX[
        int(tmpvar_19)
      ][
        int(tmpvar_22)
      ]) - 0.01);
      if ((x_23 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesNormal).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - tmpvar_8) / (
    (tmpvar_8 + _SlideFxSmoothStep)
   - tmpvar_8)), 0.0, 1.0);
  tmpvar_9 = (tmpvar_10 * (tmpvar_10 * (3.0 - 
    (2.0 * tmpvar_10)
  )));
  highp float tmpvar_11;
  tmpvar_11 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_SlideFxNoiseTex, tmpvar_12);
  highp float tmpvar_14;
  tmpvar_14 = (tmpvar_9 + ((
    (tmpvar_11 * (tmpvar_11 * (3.0 - (2.0 * tmpvar_11))))
   - tmpvar_9) * tmpvar_13.x));
  aseOutAlpha_1 = tmpvar_14;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_15;
    scrpos_15 = xlv_TEXCOORD4;
    mediump float a_16;
    a_16 = xlv_TEXCOORD4.z;
    if ((a_16 < 0.95)) {
      scrpos_15.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_16 = (a_16 * 17.0);
      highp float tmpvar_17;
      tmpvar_17 = (scrpos_15.y / 4.0);
      highp float tmpvar_18;
      tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
      highp float tmpvar_19;
      if ((tmpvar_17 >= 0.0)) {
        tmpvar_19 = tmpvar_18;
      } else {
        tmpvar_19 = -(tmpvar_18);
      };
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_15.x / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float x_23;
      x_23 = ((a_16 - _DITHERMATRIX[
        int(tmpvar_19)
      ][
        int(tmpvar_22)
      ]) - 0.01);
      if ((x_23 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesNormal).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - tmpvar_8) / (
    (tmpvar_8 + _SlideFxSmoothStep)
   - tmpvar_8)), 0.0, 1.0);
  tmpvar_9 = (tmpvar_10 * (tmpvar_10 * (3.0 - 
    (2.0 * tmpvar_10)
  )));
  highp float tmpvar_11;
  tmpvar_11 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_SlideFxNoiseTex, tmpvar_12);
  highp float tmpvar_14;
  tmpvar_14 = (tmpvar_9 + ((
    (tmpvar_11 * (tmpvar_11 * (3.0 - (2.0 * tmpvar_11))))
   - tmpvar_9) * tmpvar_13.x));
  aseOutAlpha_1 = tmpvar_14;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_15;
    scrpos_15 = xlv_TEXCOORD4;
    mediump float a_16;
    a_16 = xlv_TEXCOORD4.z;
    if ((a_16 < 0.95)) {
      scrpos_15.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_16 = (a_16 * 17.0);
      highp float tmpvar_17;
      tmpvar_17 = (scrpos_15.y / 4.0);
      highp float tmpvar_18;
      tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
      highp float tmpvar_19;
      if ((tmpvar_17 >= 0.0)) {
        tmpvar_19 = tmpvar_18;
      } else {
        tmpvar_19 = -(tmpvar_18);
      };
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_15.x / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float x_23;
      x_23 = ((a_16 - _DITHERMATRIX[
        int(tmpvar_19)
      ][
        int(tmpvar_22)
      ]) - 0.01);
      if ((x_23 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesTANGENT.xyz).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - tmpvar_8) / (
    (tmpvar_8 + _SlideFxSmoothStep)
   - tmpvar_8)), 0.0, 1.0);
  tmpvar_9 = (tmpvar_10 * (tmpvar_10 * (3.0 - 
    (2.0 * tmpvar_10)
  )));
  highp float tmpvar_11;
  tmpvar_11 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_SlideFxNoiseTex, tmpvar_12);
  highp float tmpvar_14;
  tmpvar_14 = (tmpvar_9 + ((
    (tmpvar_11 * (tmpvar_11 * (3.0 - (2.0 * tmpvar_11))))
   - tmpvar_9) * tmpvar_13.x));
  aseOutAlpha_1 = tmpvar_14;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_15;
    scrpos_15 = xlv_TEXCOORD4;
    mediump float a_16;
    a_16 = xlv_TEXCOORD4.z;
    if ((a_16 < 0.95)) {
      scrpos_15.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_16 = (a_16 * 17.0);
      highp float tmpvar_17;
      tmpvar_17 = (scrpos_15.y / 4.0);
      highp float tmpvar_18;
      tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
      highp float tmpvar_19;
      if ((tmpvar_17 >= 0.0)) {
        tmpvar_19 = tmpvar_18;
      } else {
        tmpvar_19 = -(tmpvar_18);
      };
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_15.x / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float x_23;
      x_23 = ((a_16 - _DITHERMATRIX[
        int(tmpvar_19)
      ][
        int(tmpvar_22)
      ]) - 0.01);
      if ((x_23 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesTANGENT.xyz).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - tmpvar_8) / (
    (tmpvar_8 + _SlideFxSmoothStep)
   - tmpvar_8)), 0.0, 1.0);
  tmpvar_9 = (tmpvar_10 * (tmpvar_10 * (3.0 - 
    (2.0 * tmpvar_10)
  )));
  highp float tmpvar_11;
  tmpvar_11 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_SlideFxNoiseTex, tmpvar_12);
  highp float tmpvar_14;
  tmpvar_14 = (tmpvar_9 + ((
    (tmpvar_11 * (tmpvar_11 * (3.0 - (2.0 * tmpvar_11))))
   - tmpvar_9) * tmpvar_13.x));
  aseOutAlpha_1 = tmpvar_14;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_15;
    scrpos_15 = xlv_TEXCOORD4;
    mediump float a_16;
    a_16 = xlv_TEXCOORD4.z;
    if ((a_16 < 0.95)) {
      scrpos_15.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_16 = (a_16 * 17.0);
      highp float tmpvar_17;
      tmpvar_17 = (scrpos_15.y / 4.0);
      highp float tmpvar_18;
      tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
      highp float tmpvar_19;
      if ((tmpvar_17 >= 0.0)) {
        tmpvar_19 = tmpvar_18;
      } else {
        tmpvar_19 = -(tmpvar_18);
      };
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_15.x / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float x_23;
      x_23 = ((a_16 - _DITHERMATRIX[
        int(tmpvar_19)
      ][
        int(tmpvar_22)
      ]) - 0.01);
      if ((x_23 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesTANGENT.xyz).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - tmpvar_8) / (
    (tmpvar_8 + _SlideFxSmoothStep)
   - tmpvar_8)), 0.0, 1.0);
  tmpvar_9 = (tmpvar_10 * (tmpvar_10 * (3.0 - 
    (2.0 * tmpvar_10)
  )));
  highp float tmpvar_11;
  tmpvar_11 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_SlideFxNoiseTex, tmpvar_12);
  highp float tmpvar_14;
  tmpvar_14 = (tmpvar_9 + ((
    (tmpvar_11 * (tmpvar_11 * (3.0 - (2.0 * tmpvar_11))))
   - tmpvar_9) * tmpvar_13.x));
  aseOutAlpha_1 = tmpvar_14;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_15;
    scrpos_15 = xlv_TEXCOORD4;
    mediump float a_16;
    a_16 = xlv_TEXCOORD4.z;
    if ((a_16 < 0.95)) {
      scrpos_15.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_16 = (a_16 * 17.0);
      highp float tmpvar_17;
      tmpvar_17 = (scrpos_15.y / 4.0);
      highp float tmpvar_18;
      tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
      highp float tmpvar_19;
      if ((tmpvar_17 >= 0.0)) {
        tmpvar_19 = tmpvar_18;
      } else {
        tmpvar_19 = -(tmpvar_18);
      };
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_15.x / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float x_23;
      x_23 = ((a_16 - _DITHERMATRIX[
        int(tmpvar_19)
      ][
        int(tmpvar_22)
      ]) - 0.01);
      if ((x_23 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord1;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord2;
  highp vec3 viewNormal_8;
  highp vec3 viewPos_9;
  highp vec4 tmpvar_10;
  highp vec2 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_11 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = _glesVertex.xyz;
  tmpvar_14 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_15)).xyz;
  viewPos_9.z = tmpvar_14.z;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = tmpvar_2.xyz;
  tmpvar_16[1] = tmpvar_3.xyz;
  tmpvar_16[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_glesNormal);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_19 = _glesTANGENT.xyz;
  tmpvar_20 = (((tmpvar_17.yzx * tmpvar_18.zxy) - (tmpvar_17.zxy * tmpvar_18.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_21.x = tmpvar_19.x;
  tmpvar_21.y = tmpvar_20.x;
  tmpvar_21.z = tmpvar_5.x;
  tmpvar_22.x = tmpvar_19.y;
  tmpvar_22.y = tmpvar_20.y;
  tmpvar_22.z = tmpvar_5.y;
  tmpvar_23.x = tmpvar_19.z;
  tmpvar_23.y = tmpvar_20.z;
  tmpvar_23.z = tmpvar_5.z;
  highp mat3 tmpvar_24;
  tmpvar_24[0].x = tmpvar_21.x;
  tmpvar_24[0].y = tmpvar_22.x;
  tmpvar_24[0].z = tmpvar_23.x;
  tmpvar_24[1].x = tmpvar_21.y;
  tmpvar_24[1].y = tmpvar_22.y;
  tmpvar_24[1].z = tmpvar_23.y;
  tmpvar_24[2].x = tmpvar_21.z;
  tmpvar_24[2].y = tmpvar_22.z;
  tmpvar_24[2].z = tmpvar_23.z;
  viewNormal_8.xy = (tmpvar_16 * (tmpvar_24 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_8.z = 0.01;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(viewNormal_8);
  viewNormal_8 = tmpvar_25;
  viewPos_9.xy = (tmpvar_14.xy + (tmpvar_25.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_14.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = viewPos_9;
  tmpvar_10 = (glstate_matrix_projection * tmpvar_26);
  tmpvar_12.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_12.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_27;
    highp vec4 tmpvar_28;
    tmpvar_28 = (tmpvar_10 * 0.5);
    highp vec2 tmpvar_29;
    tmpvar_29.x = tmpvar_28.x;
    tmpvar_29.y = (tmpvar_28.y * _ProjectionParams.x);
    o_27.xy = (tmpvar_29 + tmpvar_28.w);
    o_27.zw = tmpvar_10.zw;
    tmpvar_13.xyw = o_27.xyw;
    tmpvar_13.z = _DitherAlpha;
  };
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - tmpvar_8) / (
    (tmpvar_8 + _SlideFxSmoothStep)
   - tmpvar_8)), 0.0, 1.0);
  tmpvar_9 = (tmpvar_10 * (tmpvar_10 * (3.0 - 
    (2.0 * tmpvar_10)
  )));
  highp float tmpvar_11;
  tmpvar_11 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_SlideFxNoiseTex, tmpvar_12);
  highp float tmpvar_14;
  tmpvar_14 = (tmpvar_9 + ((
    (tmpvar_11 * (tmpvar_11 * (3.0 - (2.0 * tmpvar_11))))
   - tmpvar_9) * tmpvar_13.x));
  aseOutAlpha_1 = tmpvar_14;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_15;
    scrpos_15 = xlv_TEXCOORD4;
    mediump float a_16;
    a_16 = xlv_TEXCOORD4.z;
    if ((a_16 < 0.95)) {
      scrpos_15.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_16 = (a_16 * 17.0);
      highp float tmpvar_17;
      tmpvar_17 = (scrpos_15.y / 4.0);
      highp float tmpvar_18;
      tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
      highp float tmpvar_19;
      if ((tmpvar_17 >= 0.0)) {
        tmpvar_19 = tmpvar_18;
      } else {
        tmpvar_19 = -(tmpvar_18);
      };
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_15.x / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float x_23;
      x_23 = ((a_16 - _DITHERMATRIX[
        int(tmpvar_19)
      ][
        int(tmpvar_22)
      ]) - 0.01);
      if ((x_23 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord1;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord2;
  highp vec3 viewNormal_8;
  highp vec3 viewPos_9;
  highp vec4 tmpvar_10;
  highp vec2 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_11 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = _glesVertex.xyz;
  tmpvar_14 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_15)).xyz;
  viewPos_9.z = tmpvar_14.z;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = tmpvar_2.xyz;
  tmpvar_16[1] = tmpvar_3.xyz;
  tmpvar_16[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_glesNormal);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_19 = _glesTANGENT.xyz;
  tmpvar_20 = (((tmpvar_17.yzx * tmpvar_18.zxy) - (tmpvar_17.zxy * tmpvar_18.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_21.x = tmpvar_19.x;
  tmpvar_21.y = tmpvar_20.x;
  tmpvar_21.z = tmpvar_5.x;
  tmpvar_22.x = tmpvar_19.y;
  tmpvar_22.y = tmpvar_20.y;
  tmpvar_22.z = tmpvar_5.y;
  tmpvar_23.x = tmpvar_19.z;
  tmpvar_23.y = tmpvar_20.z;
  tmpvar_23.z = tmpvar_5.z;
  highp mat3 tmpvar_24;
  tmpvar_24[0].x = tmpvar_21.x;
  tmpvar_24[0].y = tmpvar_22.x;
  tmpvar_24[0].z = tmpvar_23.x;
  tmpvar_24[1].x = tmpvar_21.y;
  tmpvar_24[1].y = tmpvar_22.y;
  tmpvar_24[1].z = tmpvar_23.y;
  tmpvar_24[2].x = tmpvar_21.z;
  tmpvar_24[2].y = tmpvar_22.z;
  tmpvar_24[2].z = tmpvar_23.z;
  viewNormal_8.xy = (tmpvar_16 * (tmpvar_24 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_8.z = 0.01;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(viewNormal_8);
  viewNormal_8 = tmpvar_25;
  viewPos_9.xy = (tmpvar_14.xy + (tmpvar_25.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_14.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = viewPos_9;
  tmpvar_10 = (glstate_matrix_projection * tmpvar_26);
  tmpvar_12.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_12.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_27;
    highp vec4 tmpvar_28;
    tmpvar_28 = (tmpvar_10 * 0.5);
    highp vec2 tmpvar_29;
    tmpvar_29.x = tmpvar_28.x;
    tmpvar_29.y = (tmpvar_28.y * _ProjectionParams.x);
    o_27.xy = (tmpvar_29 + tmpvar_28.w);
    o_27.zw = tmpvar_10.zw;
    tmpvar_13.xyw = o_27.xyw;
    tmpvar_13.z = _DitherAlpha;
  };
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - tmpvar_8) / (
    (tmpvar_8 + _SlideFxSmoothStep)
   - tmpvar_8)), 0.0, 1.0);
  tmpvar_9 = (tmpvar_10 * (tmpvar_10 * (3.0 - 
    (2.0 * tmpvar_10)
  )));
  highp float tmpvar_11;
  tmpvar_11 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_SlideFxNoiseTex, tmpvar_12);
  highp float tmpvar_14;
  tmpvar_14 = (tmpvar_9 + ((
    (tmpvar_11 * (tmpvar_11 * (3.0 - (2.0 * tmpvar_11))))
   - tmpvar_9) * tmpvar_13.x));
  aseOutAlpha_1 = tmpvar_14;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_15;
    scrpos_15 = xlv_TEXCOORD4;
    mediump float a_16;
    a_16 = xlv_TEXCOORD4.z;
    if ((a_16 < 0.95)) {
      scrpos_15.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_16 = (a_16 * 17.0);
      highp float tmpvar_17;
      tmpvar_17 = (scrpos_15.y / 4.0);
      highp float tmpvar_18;
      tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
      highp float tmpvar_19;
      if ((tmpvar_17 >= 0.0)) {
        tmpvar_19 = tmpvar_18;
      } else {
        tmpvar_19 = -(tmpvar_18);
      };
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_15.x / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float x_23;
      x_23 = ((a_16 - _DITHERMATRIX[
        int(tmpvar_19)
      ][
        int(tmpvar_22)
      ]) - 0.01);
      if ((x_23 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord1;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord2;
  highp vec3 viewNormal_8;
  highp vec3 viewPos_9;
  highp vec4 tmpvar_10;
  highp vec2 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_11 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = _glesVertex.xyz;
  tmpvar_14 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_15)).xyz;
  viewPos_9.z = tmpvar_14.z;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = tmpvar_2.xyz;
  tmpvar_16[1] = tmpvar_3.xyz;
  tmpvar_16[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_glesNormal);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_19 = _glesTANGENT.xyz;
  tmpvar_20 = (((tmpvar_17.yzx * tmpvar_18.zxy) - (tmpvar_17.zxy * tmpvar_18.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_21.x = tmpvar_19.x;
  tmpvar_21.y = tmpvar_20.x;
  tmpvar_21.z = tmpvar_5.x;
  tmpvar_22.x = tmpvar_19.y;
  tmpvar_22.y = tmpvar_20.y;
  tmpvar_22.z = tmpvar_5.y;
  tmpvar_23.x = tmpvar_19.z;
  tmpvar_23.y = tmpvar_20.z;
  tmpvar_23.z = tmpvar_5.z;
  highp mat3 tmpvar_24;
  tmpvar_24[0].x = tmpvar_21.x;
  tmpvar_24[0].y = tmpvar_22.x;
  tmpvar_24[0].z = tmpvar_23.x;
  tmpvar_24[1].x = tmpvar_21.y;
  tmpvar_24[1].y = tmpvar_22.y;
  tmpvar_24[1].z = tmpvar_23.y;
  tmpvar_24[2].x = tmpvar_21.z;
  tmpvar_24[2].y = tmpvar_22.z;
  tmpvar_24[2].z = tmpvar_23.z;
  viewNormal_8.xy = (tmpvar_16 * (tmpvar_24 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_8.z = 0.01;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(viewNormal_8);
  viewNormal_8 = tmpvar_25;
  viewPos_9.xy = (tmpvar_14.xy + (tmpvar_25.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_14.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = viewPos_9;
  tmpvar_10 = (glstate_matrix_projection * tmpvar_26);
  tmpvar_12.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_12.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_27;
    highp vec4 tmpvar_28;
    tmpvar_28 = (tmpvar_10 * 0.5);
    highp vec2 tmpvar_29;
    tmpvar_29.x = tmpvar_28.x;
    tmpvar_29.y = (tmpvar_28.y * _ProjectionParams.x);
    o_27.xy = (tmpvar_29 + tmpvar_28.w);
    o_27.zw = tmpvar_10.zw;
    tmpvar_13.xyw = o_27.xyw;
    tmpvar_13.z = _DitherAlpha;
  };
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - tmpvar_8) / (
    (tmpvar_8 + _SlideFxSmoothStep)
   - tmpvar_8)), 0.0, 1.0);
  tmpvar_9 = (tmpvar_10 * (tmpvar_10 * (3.0 - 
    (2.0 * tmpvar_10)
  )));
  highp float tmpvar_11;
  tmpvar_11 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_SlideFxNoiseTex, tmpvar_12);
  highp float tmpvar_14;
  tmpvar_14 = (tmpvar_9 + ((
    (tmpvar_11 * (tmpvar_11 * (3.0 - (2.0 * tmpvar_11))))
   - tmpvar_9) * tmpvar_13.x));
  aseOutAlpha_1 = tmpvar_14;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_15;
    scrpos_15 = xlv_TEXCOORD4;
    mediump float a_16;
    a_16 = xlv_TEXCOORD4.z;
    if ((a_16 < 0.95)) {
      scrpos_15.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_16 = (a_16 * 17.0);
      highp float tmpvar_17;
      tmpvar_17 = (scrpos_15.y / 4.0);
      highp float tmpvar_18;
      tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
      highp float tmpvar_19;
      if ((tmpvar_17 >= 0.0)) {
        tmpvar_19 = tmpvar_18;
      } else {
        tmpvar_19 = -(tmpvar_18);
      };
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_15.x / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float x_23;
      x_23 = ((a_16 - _DITHERMATRIX[
        int(tmpvar_19)
      ][
        int(tmpvar_22)
      ]) - 0.01);
      if ((x_23 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
}
}
 Pass {
  Name "TRANSPARENTSLIDEFXOUTLINE"
  Tags { "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  Cull Front
  GpuProgramID 435938
Program "vp" {
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesNormal).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = clamp (((xlv_TEXCOORD3.y - tmpvar_7) / (
    (tmpvar_7 + _SlideFxSmoothStep)
   - tmpvar_7)), 0.0, 1.0);
  tmpvar_8 = (tmpvar_9 * (tmpvar_9 * (3.0 - 
    (2.0 * tmpvar_9)
  )));
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_SlideFxNoiseTex, tmpvar_11);
  highp float tmpvar_13;
  tmpvar_13 = (tmpvar_8 + ((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   - tmpvar_8) * tmpvar_12.x));
  aseOutAlpha_1 = tmpvar_13;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_14;
    scrpos_14 = xlv_TEXCOORD4;
    mediump float a_15;
    a_15 = xlv_TEXCOORD4.z;
    if ((a_15 < 0.95)) {
      scrpos_14.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_15 = (a_15 * 17.0);
      highp float tmpvar_16;
      tmpvar_16 = (scrpos_14.y / 4.0);
      highp float tmpvar_17;
      tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
      highp float tmpvar_18;
      if ((tmpvar_16 >= 0.0)) {
        tmpvar_18 = tmpvar_17;
      } else {
        tmpvar_18 = -(tmpvar_17);
      };
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_14.x / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float x_22;
      x_22 = ((a_15 - _DITHERMATRIX[
        int(tmpvar_18)
      ][
        int(tmpvar_21)
      ]) - 0.01);
      if ((x_22 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesNormal).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = clamp (((xlv_TEXCOORD3.y - tmpvar_7) / (
    (tmpvar_7 + _SlideFxSmoothStep)
   - tmpvar_7)), 0.0, 1.0);
  tmpvar_8 = (tmpvar_9 * (tmpvar_9 * (3.0 - 
    (2.0 * tmpvar_9)
  )));
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_SlideFxNoiseTex, tmpvar_11);
  highp float tmpvar_13;
  tmpvar_13 = (tmpvar_8 + ((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   - tmpvar_8) * tmpvar_12.x));
  aseOutAlpha_1 = tmpvar_13;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_14;
    scrpos_14 = xlv_TEXCOORD4;
    mediump float a_15;
    a_15 = xlv_TEXCOORD4.z;
    if ((a_15 < 0.95)) {
      scrpos_14.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_15 = (a_15 * 17.0);
      highp float tmpvar_16;
      tmpvar_16 = (scrpos_14.y / 4.0);
      highp float tmpvar_17;
      tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
      highp float tmpvar_18;
      if ((tmpvar_16 >= 0.0)) {
        tmpvar_18 = tmpvar_17;
      } else {
        tmpvar_18 = -(tmpvar_17);
      };
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_14.x / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float x_22;
      x_22 = ((a_15 - _DITHERMATRIX[
        int(tmpvar_18)
      ][
        int(tmpvar_21)
      ]) - 0.01);
      if ((x_22 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesNormal).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = clamp (((xlv_TEXCOORD3.y - tmpvar_7) / (
    (tmpvar_7 + _SlideFxSmoothStep)
   - tmpvar_7)), 0.0, 1.0);
  tmpvar_8 = (tmpvar_9 * (tmpvar_9 * (3.0 - 
    (2.0 * tmpvar_9)
  )));
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_SlideFxNoiseTex, tmpvar_11);
  highp float tmpvar_13;
  tmpvar_13 = (tmpvar_8 + ((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   - tmpvar_8) * tmpvar_12.x));
  aseOutAlpha_1 = tmpvar_13;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_14;
    scrpos_14 = xlv_TEXCOORD4;
    mediump float a_15;
    a_15 = xlv_TEXCOORD4.z;
    if ((a_15 < 0.95)) {
      scrpos_14.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_15 = (a_15 * 17.0);
      highp float tmpvar_16;
      tmpvar_16 = (scrpos_14.y / 4.0);
      highp float tmpvar_17;
      tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
      highp float tmpvar_18;
      if ((tmpvar_16 >= 0.0)) {
        tmpvar_18 = tmpvar_17;
      } else {
        tmpvar_18 = -(tmpvar_17);
      };
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_14.x / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float x_22;
      x_22 = ((a_15 - _DITHERMATRIX[
        int(tmpvar_18)
      ][
        int(tmpvar_21)
      ]) - 0.01);
      if ((x_22 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesTANGENT.xyz).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = clamp (((xlv_TEXCOORD3.y - tmpvar_7) / (
    (tmpvar_7 + _SlideFxSmoothStep)
   - tmpvar_7)), 0.0, 1.0);
  tmpvar_8 = (tmpvar_9 * (tmpvar_9 * (3.0 - 
    (2.0 * tmpvar_9)
  )));
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_SlideFxNoiseTex, tmpvar_11);
  highp float tmpvar_13;
  tmpvar_13 = (tmpvar_8 + ((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   - tmpvar_8) * tmpvar_12.x));
  aseOutAlpha_1 = tmpvar_13;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_14;
    scrpos_14 = xlv_TEXCOORD4;
    mediump float a_15;
    a_15 = xlv_TEXCOORD4.z;
    if ((a_15 < 0.95)) {
      scrpos_14.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_15 = (a_15 * 17.0);
      highp float tmpvar_16;
      tmpvar_16 = (scrpos_14.y / 4.0);
      highp float tmpvar_17;
      tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
      highp float tmpvar_18;
      if ((tmpvar_16 >= 0.0)) {
        tmpvar_18 = tmpvar_17;
      } else {
        tmpvar_18 = -(tmpvar_17);
      };
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_14.x / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float x_22;
      x_22 = ((a_15 - _DITHERMATRIX[
        int(tmpvar_18)
      ][
        int(tmpvar_21)
      ]) - 0.01);
      if ((x_22 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesTANGENT.xyz).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = clamp (((xlv_TEXCOORD3.y - tmpvar_7) / (
    (tmpvar_7 + _SlideFxSmoothStep)
   - tmpvar_7)), 0.0, 1.0);
  tmpvar_8 = (tmpvar_9 * (tmpvar_9 * (3.0 - 
    (2.0 * tmpvar_9)
  )));
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_SlideFxNoiseTex, tmpvar_11);
  highp float tmpvar_13;
  tmpvar_13 = (tmpvar_8 + ((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   - tmpvar_8) * tmpvar_12.x));
  aseOutAlpha_1 = tmpvar_13;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_14;
    scrpos_14 = xlv_TEXCOORD4;
    mediump float a_15;
    a_15 = xlv_TEXCOORD4.z;
    if ((a_15 < 0.95)) {
      scrpos_14.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_15 = (a_15 * 17.0);
      highp float tmpvar_16;
      tmpvar_16 = (scrpos_14.y / 4.0);
      highp float tmpvar_17;
      tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
      highp float tmpvar_18;
      if ((tmpvar_16 >= 0.0)) {
        tmpvar_18 = tmpvar_17;
      } else {
        tmpvar_18 = -(tmpvar_17);
      };
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_14.x / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float x_22;
      x_22 = ((a_15 - _DITHERMATRIX[
        int(tmpvar_18)
      ][
        int(tmpvar_21)
      ]) - 0.01);
      if ((x_22 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesTANGENT.xyz).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = clamp (((xlv_TEXCOORD3.y - tmpvar_7) / (
    (tmpvar_7 + _SlideFxSmoothStep)
   - tmpvar_7)), 0.0, 1.0);
  tmpvar_8 = (tmpvar_9 * (tmpvar_9 * (3.0 - 
    (2.0 * tmpvar_9)
  )));
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_SlideFxNoiseTex, tmpvar_11);
  highp float tmpvar_13;
  tmpvar_13 = (tmpvar_8 + ((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   - tmpvar_8) * tmpvar_12.x));
  aseOutAlpha_1 = tmpvar_13;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_14;
    scrpos_14 = xlv_TEXCOORD4;
    mediump float a_15;
    a_15 = xlv_TEXCOORD4.z;
    if ((a_15 < 0.95)) {
      scrpos_14.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_15 = (a_15 * 17.0);
      highp float tmpvar_16;
      tmpvar_16 = (scrpos_14.y / 4.0);
      highp float tmpvar_17;
      tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
      highp float tmpvar_18;
      if ((tmpvar_16 >= 0.0)) {
        tmpvar_18 = tmpvar_17;
      } else {
        tmpvar_18 = -(tmpvar_17);
      };
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_14.x / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float x_22;
      x_22 = ((a_15 - _DITHERMATRIX[
        int(tmpvar_18)
      ][
        int(tmpvar_21)
      ]) - 0.01);
      if ((x_22 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord1;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord2;
  highp vec3 viewNormal_8;
  highp vec3 viewPos_9;
  highp vec4 tmpvar_10;
  highp vec2 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_11 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = _glesVertex.xyz;
  tmpvar_14 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_15)).xyz;
  viewPos_9.z = tmpvar_14.z;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = tmpvar_2.xyz;
  tmpvar_16[1] = tmpvar_3.xyz;
  tmpvar_16[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_glesNormal);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_19 = _glesTANGENT.xyz;
  tmpvar_20 = (((tmpvar_17.yzx * tmpvar_18.zxy) - (tmpvar_17.zxy * tmpvar_18.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_21.x = tmpvar_19.x;
  tmpvar_21.y = tmpvar_20.x;
  tmpvar_21.z = tmpvar_5.x;
  tmpvar_22.x = tmpvar_19.y;
  tmpvar_22.y = tmpvar_20.y;
  tmpvar_22.z = tmpvar_5.y;
  tmpvar_23.x = tmpvar_19.z;
  tmpvar_23.y = tmpvar_20.z;
  tmpvar_23.z = tmpvar_5.z;
  highp mat3 tmpvar_24;
  tmpvar_24[0].x = tmpvar_21.x;
  tmpvar_24[0].y = tmpvar_22.x;
  tmpvar_24[0].z = tmpvar_23.x;
  tmpvar_24[1].x = tmpvar_21.y;
  tmpvar_24[1].y = tmpvar_22.y;
  tmpvar_24[1].z = tmpvar_23.y;
  tmpvar_24[2].x = tmpvar_21.z;
  tmpvar_24[2].y = tmpvar_22.z;
  tmpvar_24[2].z = tmpvar_23.z;
  viewNormal_8.xy = (tmpvar_16 * (tmpvar_24 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_8.z = 0.01;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(viewNormal_8);
  viewNormal_8 = tmpvar_25;
  viewPos_9.xy = (tmpvar_14.xy + (tmpvar_25.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_14.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = viewPos_9;
  tmpvar_10 = (glstate_matrix_projection * tmpvar_26);
  tmpvar_12.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_12.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_27;
    highp vec4 tmpvar_28;
    tmpvar_28 = (tmpvar_10 * 0.5);
    highp vec2 tmpvar_29;
    tmpvar_29.x = tmpvar_28.x;
    tmpvar_29.y = (tmpvar_28.y * _ProjectionParams.x);
    o_27.xy = (tmpvar_29 + tmpvar_28.w);
    o_27.zw = tmpvar_10.zw;
    tmpvar_13.xyw = o_27.xyw;
    tmpvar_13.z = _DitherAlpha;
  };
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = clamp (((xlv_TEXCOORD3.y - tmpvar_7) / (
    (tmpvar_7 + _SlideFxSmoothStep)
   - tmpvar_7)), 0.0, 1.0);
  tmpvar_8 = (tmpvar_9 * (tmpvar_9 * (3.0 - 
    (2.0 * tmpvar_9)
  )));
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_SlideFxNoiseTex, tmpvar_11);
  highp float tmpvar_13;
  tmpvar_13 = (tmpvar_8 + ((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   - tmpvar_8) * tmpvar_12.x));
  aseOutAlpha_1 = tmpvar_13;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_14;
    scrpos_14 = xlv_TEXCOORD4;
    mediump float a_15;
    a_15 = xlv_TEXCOORD4.z;
    if ((a_15 < 0.95)) {
      scrpos_14.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_15 = (a_15 * 17.0);
      highp float tmpvar_16;
      tmpvar_16 = (scrpos_14.y / 4.0);
      highp float tmpvar_17;
      tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
      highp float tmpvar_18;
      if ((tmpvar_16 >= 0.0)) {
        tmpvar_18 = tmpvar_17;
      } else {
        tmpvar_18 = -(tmpvar_17);
      };
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_14.x / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float x_22;
      x_22 = ((a_15 - _DITHERMATRIX[
        int(tmpvar_18)
      ][
        int(tmpvar_21)
      ]) - 0.01);
      if ((x_22 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord1;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord2;
  highp vec3 viewNormal_8;
  highp vec3 viewPos_9;
  highp vec4 tmpvar_10;
  highp vec2 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_11 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = _glesVertex.xyz;
  tmpvar_14 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_15)).xyz;
  viewPos_9.z = tmpvar_14.z;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = tmpvar_2.xyz;
  tmpvar_16[1] = tmpvar_3.xyz;
  tmpvar_16[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_glesNormal);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_19 = _glesTANGENT.xyz;
  tmpvar_20 = (((tmpvar_17.yzx * tmpvar_18.zxy) - (tmpvar_17.zxy * tmpvar_18.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_21.x = tmpvar_19.x;
  tmpvar_21.y = tmpvar_20.x;
  tmpvar_21.z = tmpvar_5.x;
  tmpvar_22.x = tmpvar_19.y;
  tmpvar_22.y = tmpvar_20.y;
  tmpvar_22.z = tmpvar_5.y;
  tmpvar_23.x = tmpvar_19.z;
  tmpvar_23.y = tmpvar_20.z;
  tmpvar_23.z = tmpvar_5.z;
  highp mat3 tmpvar_24;
  tmpvar_24[0].x = tmpvar_21.x;
  tmpvar_24[0].y = tmpvar_22.x;
  tmpvar_24[0].z = tmpvar_23.x;
  tmpvar_24[1].x = tmpvar_21.y;
  tmpvar_24[1].y = tmpvar_22.y;
  tmpvar_24[1].z = tmpvar_23.y;
  tmpvar_24[2].x = tmpvar_21.z;
  tmpvar_24[2].y = tmpvar_22.z;
  tmpvar_24[2].z = tmpvar_23.z;
  viewNormal_8.xy = (tmpvar_16 * (tmpvar_24 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_8.z = 0.01;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(viewNormal_8);
  viewNormal_8 = tmpvar_25;
  viewPos_9.xy = (tmpvar_14.xy + (tmpvar_25.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_14.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = viewPos_9;
  tmpvar_10 = (glstate_matrix_projection * tmpvar_26);
  tmpvar_12.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_12.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_27;
    highp vec4 tmpvar_28;
    tmpvar_28 = (tmpvar_10 * 0.5);
    highp vec2 tmpvar_29;
    tmpvar_29.x = tmpvar_28.x;
    tmpvar_29.y = (tmpvar_28.y * _ProjectionParams.x);
    o_27.xy = (tmpvar_29 + tmpvar_28.w);
    o_27.zw = tmpvar_10.zw;
    tmpvar_13.xyw = o_27.xyw;
    tmpvar_13.z = _DitherAlpha;
  };
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = clamp (((xlv_TEXCOORD3.y - tmpvar_7) / (
    (tmpvar_7 + _SlideFxSmoothStep)
   - tmpvar_7)), 0.0, 1.0);
  tmpvar_8 = (tmpvar_9 * (tmpvar_9 * (3.0 - 
    (2.0 * tmpvar_9)
  )));
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_SlideFxNoiseTex, tmpvar_11);
  highp float tmpvar_13;
  tmpvar_13 = (tmpvar_8 + ((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   - tmpvar_8) * tmpvar_12.x));
  aseOutAlpha_1 = tmpvar_13;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_14;
    scrpos_14 = xlv_TEXCOORD4;
    mediump float a_15;
    a_15 = xlv_TEXCOORD4.z;
    if ((a_15 < 0.95)) {
      scrpos_14.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_15 = (a_15 * 17.0);
      highp float tmpvar_16;
      tmpvar_16 = (scrpos_14.y / 4.0);
      highp float tmpvar_17;
      tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
      highp float tmpvar_18;
      if ((tmpvar_16 >= 0.0)) {
        tmpvar_18 = tmpvar_17;
      } else {
        tmpvar_18 = -(tmpvar_17);
      };
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_14.x / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float x_22;
      x_22 = ((a_15 - _DITHERMATRIX[
        int(tmpvar_18)
      ][
        int(tmpvar_21)
      ]) - 0.01);
      if ((x_22 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord1;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord2;
  highp vec3 viewNormal_8;
  highp vec3 viewPos_9;
  highp vec4 tmpvar_10;
  highp vec2 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_11 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = _glesVertex.xyz;
  tmpvar_14 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_15)).xyz;
  viewPos_9.z = tmpvar_14.z;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = tmpvar_2.xyz;
  tmpvar_16[1] = tmpvar_3.xyz;
  tmpvar_16[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_glesNormal);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_19 = _glesTANGENT.xyz;
  tmpvar_20 = (((tmpvar_17.yzx * tmpvar_18.zxy) - (tmpvar_17.zxy * tmpvar_18.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_21.x = tmpvar_19.x;
  tmpvar_21.y = tmpvar_20.x;
  tmpvar_21.z = tmpvar_5.x;
  tmpvar_22.x = tmpvar_19.y;
  tmpvar_22.y = tmpvar_20.y;
  tmpvar_22.z = tmpvar_5.y;
  tmpvar_23.x = tmpvar_19.z;
  tmpvar_23.y = tmpvar_20.z;
  tmpvar_23.z = tmpvar_5.z;
  highp mat3 tmpvar_24;
  tmpvar_24[0].x = tmpvar_21.x;
  tmpvar_24[0].y = tmpvar_22.x;
  tmpvar_24[0].z = tmpvar_23.x;
  tmpvar_24[1].x = tmpvar_21.y;
  tmpvar_24[1].y = tmpvar_22.y;
  tmpvar_24[1].z = tmpvar_23.y;
  tmpvar_24[2].x = tmpvar_21.z;
  tmpvar_24[2].y = tmpvar_22.z;
  tmpvar_24[2].z = tmpvar_23.z;
  viewNormal_8.xy = (tmpvar_16 * (tmpvar_24 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_8.z = 0.01;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(viewNormal_8);
  viewNormal_8 = tmpvar_25;
  viewPos_9.xy = (tmpvar_14.xy + (tmpvar_25.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_14.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = viewPos_9;
  tmpvar_10 = (glstate_matrix_projection * tmpvar_26);
  tmpvar_12.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_12.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_27;
    highp vec4 tmpvar_28;
    tmpvar_28 = (tmpvar_10 * 0.5);
    highp vec2 tmpvar_29;
    tmpvar_29.x = tmpvar_28.x;
    tmpvar_29.y = (tmpvar_28.y * _ProjectionParams.x);
    o_27.xy = (tmpvar_29 + tmpvar_28.w);
    o_27.zw = tmpvar_10.zw;
    tmpvar_13.xyw = o_27.xyw;
    tmpvar_13.z = _DitherAlpha;
  };
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = clamp (((xlv_TEXCOORD3.y - tmpvar_7) / (
    (tmpvar_7 + _SlideFxSmoothStep)
   - tmpvar_7)), 0.0, 1.0);
  tmpvar_8 = (tmpvar_9 * (tmpvar_9 * (3.0 - 
    (2.0 * tmpvar_9)
  )));
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_11;
  tmpvar_11 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_SlideFxNoiseTex, tmpvar_11);
  highp float tmpvar_13;
  tmpvar_13 = (tmpvar_8 + ((
    (tmpvar_10 * (tmpvar_10 * (3.0 - (2.0 * tmpvar_10))))
   - tmpvar_8) * tmpvar_12.x));
  aseOutAlpha_1 = tmpvar_13;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_14;
    scrpos_14 = xlv_TEXCOORD4;
    mediump float a_15;
    a_15 = xlv_TEXCOORD4.z;
    if ((a_15 < 0.95)) {
      scrpos_14.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_15 = (a_15 * 17.0);
      highp float tmpvar_16;
      tmpvar_16 = (scrpos_14.y / 4.0);
      highp float tmpvar_17;
      tmpvar_17 = (fract(abs(tmpvar_16)) * 4.0);
      highp float tmpvar_18;
      if ((tmpvar_16 >= 0.0)) {
        tmpvar_18 = tmpvar_17;
      } else {
        tmpvar_18 = -(tmpvar_17);
      };
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_14.x / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float x_22;
      x_22 = ((a_15 - _DITHERMATRIX[
        int(tmpvar_18)
      ][
        int(tmpvar_21)
      ]) - 0.01);
      if ((x_22 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesNormal).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - tmpvar_8) / (
    (tmpvar_8 + _SlideFxSmoothStep)
   - tmpvar_8)), 0.0, 1.0);
  tmpvar_9 = (tmpvar_10 * (tmpvar_10 * (3.0 - 
    (2.0 * tmpvar_10)
  )));
  highp float tmpvar_11;
  tmpvar_11 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_SlideFxNoiseTex, tmpvar_12);
  highp float tmpvar_14;
  tmpvar_14 = (tmpvar_9 + ((
    (tmpvar_11 * (tmpvar_11 * (3.0 - (2.0 * tmpvar_11))))
   - tmpvar_9) * tmpvar_13.x));
  aseOutAlpha_1 = tmpvar_14;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_15;
    scrpos_15 = xlv_TEXCOORD4;
    mediump float a_16;
    a_16 = xlv_TEXCOORD4.z;
    if ((a_16 < 0.95)) {
      scrpos_15.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_16 = (a_16 * 17.0);
      highp float tmpvar_17;
      tmpvar_17 = (scrpos_15.y / 4.0);
      highp float tmpvar_18;
      tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
      highp float tmpvar_19;
      if ((tmpvar_17 >= 0.0)) {
        tmpvar_19 = tmpvar_18;
      } else {
        tmpvar_19 = -(tmpvar_18);
      };
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_15.x / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float x_23;
      x_23 = ((a_16 - _DITHERMATRIX[
        int(tmpvar_19)
      ][
        int(tmpvar_22)
      ]) - 0.01);
      if ((x_23 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesNormal).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - tmpvar_8) / (
    (tmpvar_8 + _SlideFxSmoothStep)
   - tmpvar_8)), 0.0, 1.0);
  tmpvar_9 = (tmpvar_10 * (tmpvar_10 * (3.0 - 
    (2.0 * tmpvar_10)
  )));
  highp float tmpvar_11;
  tmpvar_11 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_SlideFxNoiseTex, tmpvar_12);
  highp float tmpvar_14;
  tmpvar_14 = (tmpvar_9 + ((
    (tmpvar_11 * (tmpvar_11 * (3.0 - (2.0 * tmpvar_11))))
   - tmpvar_9) * tmpvar_13.x));
  aseOutAlpha_1 = tmpvar_14;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_15;
    scrpos_15 = xlv_TEXCOORD4;
    mediump float a_16;
    a_16 = xlv_TEXCOORD4.z;
    if ((a_16 < 0.95)) {
      scrpos_15.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_16 = (a_16 * 17.0);
      highp float tmpvar_17;
      tmpvar_17 = (scrpos_15.y / 4.0);
      highp float tmpvar_18;
      tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
      highp float tmpvar_19;
      if ((tmpvar_17 >= 0.0)) {
        tmpvar_19 = tmpvar_18;
      } else {
        tmpvar_19 = -(tmpvar_18);
      };
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_15.x / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float x_23;
      x_23 = ((a_16 - _DITHERMATRIX[
        int(tmpvar_19)
      ][
        int(tmpvar_22)
      ]) - 0.01);
      if ((x_23 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesNormal).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - tmpvar_8) / (
    (tmpvar_8 + _SlideFxSmoothStep)
   - tmpvar_8)), 0.0, 1.0);
  tmpvar_9 = (tmpvar_10 * (tmpvar_10 * (3.0 - 
    (2.0 * tmpvar_10)
  )));
  highp float tmpvar_11;
  tmpvar_11 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_SlideFxNoiseTex, tmpvar_12);
  highp float tmpvar_14;
  tmpvar_14 = (tmpvar_9 + ((
    (tmpvar_11 * (tmpvar_11 * (3.0 - (2.0 * tmpvar_11))))
   - tmpvar_9) * tmpvar_13.x));
  aseOutAlpha_1 = tmpvar_14;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_15;
    scrpos_15 = xlv_TEXCOORD4;
    mediump float a_16;
    a_16 = xlv_TEXCOORD4.z;
    if ((a_16 < 0.95)) {
      scrpos_15.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_16 = (a_16 * 17.0);
      highp float tmpvar_17;
      tmpvar_17 = (scrpos_15.y / 4.0);
      highp float tmpvar_18;
      tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
      highp float tmpvar_19;
      if ((tmpvar_17 >= 0.0)) {
        tmpvar_19 = tmpvar_18;
      } else {
        tmpvar_19 = -(tmpvar_18);
      };
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_15.x / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float x_23;
      x_23 = ((a_16 - _DITHERMATRIX[
        int(tmpvar_19)
      ][
        int(tmpvar_22)
      ]) - 0.01);
      if ((x_23 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesTANGENT.xyz).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - tmpvar_8) / (
    (tmpvar_8 + _SlideFxSmoothStep)
   - tmpvar_8)), 0.0, 1.0);
  tmpvar_9 = (tmpvar_10 * (tmpvar_10 * (3.0 - 
    (2.0 * tmpvar_10)
  )));
  highp float tmpvar_11;
  tmpvar_11 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_SlideFxNoiseTex, tmpvar_12);
  highp float tmpvar_14;
  tmpvar_14 = (tmpvar_9 + ((
    (tmpvar_11 * (tmpvar_11 * (3.0 - (2.0 * tmpvar_11))))
   - tmpvar_9) * tmpvar_13.x));
  aseOutAlpha_1 = tmpvar_14;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_15;
    scrpos_15 = xlv_TEXCOORD4;
    mediump float a_16;
    a_16 = xlv_TEXCOORD4.z;
    if ((a_16 < 0.95)) {
      scrpos_15.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_16 = (a_16 * 17.0);
      highp float tmpvar_17;
      tmpvar_17 = (scrpos_15.y / 4.0);
      highp float tmpvar_18;
      tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
      highp float tmpvar_19;
      if ((tmpvar_17 >= 0.0)) {
        tmpvar_19 = tmpvar_18;
      } else {
        tmpvar_19 = -(tmpvar_18);
      };
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_15.x / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float x_23;
      x_23 = ((a_16 - _DITHERMATRIX[
        int(tmpvar_19)
      ][
        int(tmpvar_22)
      ]) - 0.01);
      if ((x_23 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesTANGENT.xyz).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - tmpvar_8) / (
    (tmpvar_8 + _SlideFxSmoothStep)
   - tmpvar_8)), 0.0, 1.0);
  tmpvar_9 = (tmpvar_10 * (tmpvar_10 * (3.0 - 
    (2.0 * tmpvar_10)
  )));
  highp float tmpvar_11;
  tmpvar_11 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_SlideFxNoiseTex, tmpvar_12);
  highp float tmpvar_14;
  tmpvar_14 = (tmpvar_9 + ((
    (tmpvar_11 * (tmpvar_11 * (3.0 - (2.0 * tmpvar_11))))
   - tmpvar_9) * tmpvar_13.x));
  aseOutAlpha_1 = tmpvar_14;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_15;
    scrpos_15 = xlv_TEXCOORD4;
    mediump float a_16;
    a_16 = xlv_TEXCOORD4.z;
    if ((a_16 < 0.95)) {
      scrpos_15.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_16 = (a_16 * 17.0);
      highp float tmpvar_17;
      tmpvar_17 = (scrpos_15.y / 4.0);
      highp float tmpvar_18;
      tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
      highp float tmpvar_19;
      if ((tmpvar_17 >= 0.0)) {
        tmpvar_19 = tmpvar_18;
      } else {
        tmpvar_19 = -(tmpvar_18);
      };
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_15.x / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float x_23;
      x_23 = ((a_16 - _DITHERMATRIX[
        int(tmpvar_19)
      ][
        int(tmpvar_22)
      ]) - 0.01);
      if ((x_23 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesTANGENT.xyz).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - tmpvar_8) / (
    (tmpvar_8 + _SlideFxSmoothStep)
   - tmpvar_8)), 0.0, 1.0);
  tmpvar_9 = (tmpvar_10 * (tmpvar_10 * (3.0 - 
    (2.0 * tmpvar_10)
  )));
  highp float tmpvar_11;
  tmpvar_11 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_SlideFxNoiseTex, tmpvar_12);
  highp float tmpvar_14;
  tmpvar_14 = (tmpvar_9 + ((
    (tmpvar_11 * (tmpvar_11 * (3.0 - (2.0 * tmpvar_11))))
   - tmpvar_9) * tmpvar_13.x));
  aseOutAlpha_1 = tmpvar_14;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_15;
    scrpos_15 = xlv_TEXCOORD4;
    mediump float a_16;
    a_16 = xlv_TEXCOORD4.z;
    if ((a_16 < 0.95)) {
      scrpos_15.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_16 = (a_16 * 17.0);
      highp float tmpvar_17;
      tmpvar_17 = (scrpos_15.y / 4.0);
      highp float tmpvar_18;
      tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
      highp float tmpvar_19;
      if ((tmpvar_17 >= 0.0)) {
        tmpvar_19 = tmpvar_18;
      } else {
        tmpvar_19 = -(tmpvar_18);
      };
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_15.x / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float x_23;
      x_23 = ((a_16 - _DITHERMATRIX[
        int(tmpvar_19)
      ][
        int(tmpvar_22)
      ]) - 0.01);
      if ((x_23 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord1;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord2;
  highp vec3 viewNormal_8;
  highp vec3 viewPos_9;
  highp vec4 tmpvar_10;
  highp vec2 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_11 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = _glesVertex.xyz;
  tmpvar_14 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_15)).xyz;
  viewPos_9.z = tmpvar_14.z;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = tmpvar_2.xyz;
  tmpvar_16[1] = tmpvar_3.xyz;
  tmpvar_16[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_glesNormal);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_19 = _glesTANGENT.xyz;
  tmpvar_20 = (((tmpvar_17.yzx * tmpvar_18.zxy) - (tmpvar_17.zxy * tmpvar_18.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_21.x = tmpvar_19.x;
  tmpvar_21.y = tmpvar_20.x;
  tmpvar_21.z = tmpvar_5.x;
  tmpvar_22.x = tmpvar_19.y;
  tmpvar_22.y = tmpvar_20.y;
  tmpvar_22.z = tmpvar_5.y;
  tmpvar_23.x = tmpvar_19.z;
  tmpvar_23.y = tmpvar_20.z;
  tmpvar_23.z = tmpvar_5.z;
  highp mat3 tmpvar_24;
  tmpvar_24[0].x = tmpvar_21.x;
  tmpvar_24[0].y = tmpvar_22.x;
  tmpvar_24[0].z = tmpvar_23.x;
  tmpvar_24[1].x = tmpvar_21.y;
  tmpvar_24[1].y = tmpvar_22.y;
  tmpvar_24[1].z = tmpvar_23.y;
  tmpvar_24[2].x = tmpvar_21.z;
  tmpvar_24[2].y = tmpvar_22.z;
  tmpvar_24[2].z = tmpvar_23.z;
  viewNormal_8.xy = (tmpvar_16 * (tmpvar_24 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_8.z = 0.01;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(viewNormal_8);
  viewNormal_8 = tmpvar_25;
  viewPos_9.xy = (tmpvar_14.xy + (tmpvar_25.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_14.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = viewPos_9;
  tmpvar_10 = (glstate_matrix_projection * tmpvar_26);
  tmpvar_12.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_12.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_27;
    highp vec4 tmpvar_28;
    tmpvar_28 = (tmpvar_10 * 0.5);
    highp vec2 tmpvar_29;
    tmpvar_29.x = tmpvar_28.x;
    tmpvar_29.y = (tmpvar_28.y * _ProjectionParams.x);
    o_27.xy = (tmpvar_29 + tmpvar_28.w);
    o_27.zw = tmpvar_10.zw;
    tmpvar_13.xyw = o_27.xyw;
    tmpvar_13.z = _DitherAlpha;
  };
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - tmpvar_8) / (
    (tmpvar_8 + _SlideFxSmoothStep)
   - tmpvar_8)), 0.0, 1.0);
  tmpvar_9 = (tmpvar_10 * (tmpvar_10 * (3.0 - 
    (2.0 * tmpvar_10)
  )));
  highp float tmpvar_11;
  tmpvar_11 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_SlideFxNoiseTex, tmpvar_12);
  highp float tmpvar_14;
  tmpvar_14 = (tmpvar_9 + ((
    (tmpvar_11 * (tmpvar_11 * (3.0 - (2.0 * tmpvar_11))))
   - tmpvar_9) * tmpvar_13.x));
  aseOutAlpha_1 = tmpvar_14;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_15;
    scrpos_15 = xlv_TEXCOORD4;
    mediump float a_16;
    a_16 = xlv_TEXCOORD4.z;
    if ((a_16 < 0.95)) {
      scrpos_15.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_16 = (a_16 * 17.0);
      highp float tmpvar_17;
      tmpvar_17 = (scrpos_15.y / 4.0);
      highp float tmpvar_18;
      tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
      highp float tmpvar_19;
      if ((tmpvar_17 >= 0.0)) {
        tmpvar_19 = tmpvar_18;
      } else {
        tmpvar_19 = -(tmpvar_18);
      };
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_15.x / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float x_23;
      x_23 = ((a_16 - _DITHERMATRIX[
        int(tmpvar_19)
      ][
        int(tmpvar_22)
      ]) - 0.01);
      if ((x_23 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord1;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord2;
  highp vec3 viewNormal_8;
  highp vec3 viewPos_9;
  highp vec4 tmpvar_10;
  highp vec2 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_11 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = _glesVertex.xyz;
  tmpvar_14 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_15)).xyz;
  viewPos_9.z = tmpvar_14.z;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = tmpvar_2.xyz;
  tmpvar_16[1] = tmpvar_3.xyz;
  tmpvar_16[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_glesNormal);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_19 = _glesTANGENT.xyz;
  tmpvar_20 = (((tmpvar_17.yzx * tmpvar_18.zxy) - (tmpvar_17.zxy * tmpvar_18.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_21.x = tmpvar_19.x;
  tmpvar_21.y = tmpvar_20.x;
  tmpvar_21.z = tmpvar_5.x;
  tmpvar_22.x = tmpvar_19.y;
  tmpvar_22.y = tmpvar_20.y;
  tmpvar_22.z = tmpvar_5.y;
  tmpvar_23.x = tmpvar_19.z;
  tmpvar_23.y = tmpvar_20.z;
  tmpvar_23.z = tmpvar_5.z;
  highp mat3 tmpvar_24;
  tmpvar_24[0].x = tmpvar_21.x;
  tmpvar_24[0].y = tmpvar_22.x;
  tmpvar_24[0].z = tmpvar_23.x;
  tmpvar_24[1].x = tmpvar_21.y;
  tmpvar_24[1].y = tmpvar_22.y;
  tmpvar_24[1].z = tmpvar_23.y;
  tmpvar_24[2].x = tmpvar_21.z;
  tmpvar_24[2].y = tmpvar_22.z;
  tmpvar_24[2].z = tmpvar_23.z;
  viewNormal_8.xy = (tmpvar_16 * (tmpvar_24 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_8.z = 0.01;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(viewNormal_8);
  viewNormal_8 = tmpvar_25;
  viewPos_9.xy = (tmpvar_14.xy + (tmpvar_25.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_14.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = viewPos_9;
  tmpvar_10 = (glstate_matrix_projection * tmpvar_26);
  tmpvar_12.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_12.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_27;
    highp vec4 tmpvar_28;
    tmpvar_28 = (tmpvar_10 * 0.5);
    highp vec2 tmpvar_29;
    tmpvar_29.x = tmpvar_28.x;
    tmpvar_29.y = (tmpvar_28.y * _ProjectionParams.x);
    o_27.xy = (tmpvar_29 + tmpvar_28.w);
    o_27.zw = tmpvar_10.zw;
    tmpvar_13.xyw = o_27.xyw;
    tmpvar_13.z = _DitherAlpha;
  };
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - tmpvar_8) / (
    (tmpvar_8 + _SlideFxSmoothStep)
   - tmpvar_8)), 0.0, 1.0);
  tmpvar_9 = (tmpvar_10 * (tmpvar_10 * (3.0 - 
    (2.0 * tmpvar_10)
  )));
  highp float tmpvar_11;
  tmpvar_11 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_SlideFxNoiseTex, tmpvar_12);
  highp float tmpvar_14;
  tmpvar_14 = (tmpvar_9 + ((
    (tmpvar_11 * (tmpvar_11 * (3.0 - (2.0 * tmpvar_11))))
   - tmpvar_9) * tmpvar_13.x));
  aseOutAlpha_1 = tmpvar_14;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_15;
    scrpos_15 = xlv_TEXCOORD4;
    mediump float a_16;
    a_16 = xlv_TEXCOORD4.z;
    if ((a_16 < 0.95)) {
      scrpos_15.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_16 = (a_16 * 17.0);
      highp float tmpvar_17;
      tmpvar_17 = (scrpos_15.y / 4.0);
      highp float tmpvar_18;
      tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
      highp float tmpvar_19;
      if ((tmpvar_17 >= 0.0)) {
        tmpvar_19 = tmpvar_18;
      } else {
        tmpvar_19 = -(tmpvar_18);
      };
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_15.x / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float x_23;
      x_23 = ((a_16 - _DITHERMATRIX[
        int(tmpvar_19)
      ][
        int(tmpvar_22)
      ]) - 0.01);
      if ((x_23 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord1;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord2;
  highp vec3 viewNormal_8;
  highp vec3 viewPos_9;
  highp vec4 tmpvar_10;
  highp vec2 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_11 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = _glesVertex.xyz;
  tmpvar_14 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_15)).xyz;
  viewPos_9.z = tmpvar_14.z;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = tmpvar_2.xyz;
  tmpvar_16[1] = tmpvar_3.xyz;
  tmpvar_16[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_glesNormal);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_19 = _glesTANGENT.xyz;
  tmpvar_20 = (((tmpvar_17.yzx * tmpvar_18.zxy) - (tmpvar_17.zxy * tmpvar_18.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_21.x = tmpvar_19.x;
  tmpvar_21.y = tmpvar_20.x;
  tmpvar_21.z = tmpvar_5.x;
  tmpvar_22.x = tmpvar_19.y;
  tmpvar_22.y = tmpvar_20.y;
  tmpvar_22.z = tmpvar_5.y;
  tmpvar_23.x = tmpvar_19.z;
  tmpvar_23.y = tmpvar_20.z;
  tmpvar_23.z = tmpvar_5.z;
  highp mat3 tmpvar_24;
  tmpvar_24[0].x = tmpvar_21.x;
  tmpvar_24[0].y = tmpvar_22.x;
  tmpvar_24[0].z = tmpvar_23.x;
  tmpvar_24[1].x = tmpvar_21.y;
  tmpvar_24[1].y = tmpvar_22.y;
  tmpvar_24[1].z = tmpvar_23.y;
  tmpvar_24[2].x = tmpvar_21.z;
  tmpvar_24[2].y = tmpvar_22.z;
  tmpvar_24[2].z = tmpvar_23.z;
  viewNormal_8.xy = (tmpvar_16 * (tmpvar_24 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_8.z = 0.01;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(viewNormal_8);
  viewNormal_8 = tmpvar_25;
  viewPos_9.xy = (tmpvar_14.xy + (tmpvar_25.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_14.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = viewPos_9;
  tmpvar_10 = (glstate_matrix_projection * tmpvar_26);
  tmpvar_12.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_12.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_27;
    highp vec4 tmpvar_28;
    tmpvar_28 = (tmpvar_10 * 0.5);
    highp vec2 tmpvar_29;
    tmpvar_29.x = tmpvar_28.x;
    tmpvar_29.y = (tmpvar_28.y * _ProjectionParams.x);
    o_27.xy = (tmpvar_29 + tmpvar_28.w);
    o_27.zw = tmpvar_10.zw;
    tmpvar_13.xyw = o_27.xyw;
    tmpvar_13.z = _DitherAlpha;
  };
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _SlideFxSlide;
uniform highp float _SlideFxEdge;
uniform highp float _SlideFxSmoothStep;
uniform sampler2D _SlideFxNoiseTex;
uniform highp vec4 _SlideFxNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (_SlideFxSlide + _SlideFxEdge);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = clamp (((xlv_TEXCOORD3.y - tmpvar_8) / (
    (tmpvar_8 + _SlideFxSmoothStep)
   - tmpvar_8)), 0.0, 1.0);
  tmpvar_9 = (tmpvar_10 * (tmpvar_10 * (3.0 - 
    (2.0 * tmpvar_10)
  )));
  highp float tmpvar_11;
  tmpvar_11 = clamp (((xlv_TEXCOORD3.y - _SlideFxSlide) / (
    (_SlideFxSlide + _SlideFxSmoothStep)
   - _SlideFxSlide)), 0.0, 1.0);
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy) + _SlideFxNoiseTex_ST.zw);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_SlideFxNoiseTex, tmpvar_12);
  highp float tmpvar_14;
  tmpvar_14 = (tmpvar_9 + ((
    (tmpvar_11 * (tmpvar_11 * (3.0 - (2.0 * tmpvar_11))))
   - tmpvar_9) * tmpvar_13.x));
  aseOutAlpha_1 = tmpvar_14;
  col_2.w = (col_2.w * aseOutAlpha_1);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_15;
    scrpos_15 = xlv_TEXCOORD4;
    mediump float a_16;
    a_16 = xlv_TEXCOORD4.z;
    if ((a_16 < 0.95)) {
      scrpos_15.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_16 = (a_16 * 17.0);
      highp float tmpvar_17;
      tmpvar_17 = (scrpos_15.y / 4.0);
      highp float tmpvar_18;
      tmpvar_18 = (fract(abs(tmpvar_17)) * 4.0);
      highp float tmpvar_19;
      if ((tmpvar_17 >= 0.0)) {
        tmpvar_19 = tmpvar_18;
      } else {
        tmpvar_19 = -(tmpvar_18);
      };
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_15.x / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float x_23;
      x_23 = ((a_16 - _DITHERMATRIX[
        int(tmpvar_19)
      ][
        int(tmpvar_22)
      ]) - 0.01);
      if ((x_23 < 0.0)) {
        discard;
      };
    };
  };
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  gl_FragData[0] = col_2;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
}
}
 Pass {
  Name "TRANSPARENTBLOCKFXOUTLINE"
  Tags { "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  Cull Front
  GpuProgramID 523998
Program "vp" {
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesNormal).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _BlockFxClip1;
uniform highp float _Clip1Direction;
uniform highp float _BlockFxClip2Edge;
uniform highp float _BlockFxClip1Edge;
uniform sampler2D _BlockFxBlockTex;
uniform highp vec2 _BlockFxBlockTexSpeed;
uniform highp float _BlockFxBlockTexTilline;
uniform sampler2D _BlockFxLineTex;
uniform highp vec4 _BlockFxLineTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (_BlockFxClip1 + _BlockFxClip1Edge);
  highp vec2 tmpvar_8;
  tmpvar_8 = ((_Time.y * _BlockFxBlockTexSpeed) + (xlv_TEXCOORD0 * vec2(_BlockFxBlockTexTilline)));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_BlockFxBlockTex, tmpvar_8);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9.x * xlv_TEXCOORD3.y) * (_Clip1Direction - 2.0));
  highp float edge0_11;
  edge0_11 = (_BlockFxClip1 + _BlockFxClip2Edge);
  highp float tmpvar_12;
  tmpvar_12 = clamp (((tmpvar_10 - edge0_11) / (
    (tmpvar_7 + _BlockFxClip2Edge)
   - edge0_11)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0 * _BlockFxLineTex_ST.xy) + _BlockFxLineTex_ST.zw);
  highp float tmpvar_14;
  tmpvar_14 = clamp (((tmpvar_10 - _BlockFxClip1) / (tmpvar_7 - _BlockFxClip1)), 0.0, 1.0);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_BlockFxLineTex, tmpvar_13);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_12 * (tmpvar_12 * 
    (3.0 - (2.0 * tmpvar_12))
  )) + (tmpvar_15.x * (tmpvar_14 * 
    (tmpvar_14 * (3.0 - (2.0 * tmpvar_14)))
  )));
  aseOutAlpha_1 = tmpvar_16;
  col_2.w = (col_2.w * aseOutAlpha_1);
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD4;
    mediump float a_18;
    a_18 = xlv_TEXCOORD4.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesNormal).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _BlockFxClip1;
uniform highp float _Clip1Direction;
uniform highp float _BlockFxClip2Edge;
uniform highp float _BlockFxClip1Edge;
uniform sampler2D _BlockFxBlockTex;
uniform highp vec2 _BlockFxBlockTexSpeed;
uniform highp float _BlockFxBlockTexTilline;
uniform sampler2D _BlockFxLineTex;
uniform highp vec4 _BlockFxLineTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (_BlockFxClip1 + _BlockFxClip1Edge);
  highp vec2 tmpvar_8;
  tmpvar_8 = ((_Time.y * _BlockFxBlockTexSpeed) + (xlv_TEXCOORD0 * vec2(_BlockFxBlockTexTilline)));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_BlockFxBlockTex, tmpvar_8);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9.x * xlv_TEXCOORD3.y) * (_Clip1Direction - 2.0));
  highp float edge0_11;
  edge0_11 = (_BlockFxClip1 + _BlockFxClip2Edge);
  highp float tmpvar_12;
  tmpvar_12 = clamp (((tmpvar_10 - edge0_11) / (
    (tmpvar_7 + _BlockFxClip2Edge)
   - edge0_11)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0 * _BlockFxLineTex_ST.xy) + _BlockFxLineTex_ST.zw);
  highp float tmpvar_14;
  tmpvar_14 = clamp (((tmpvar_10 - _BlockFxClip1) / (tmpvar_7 - _BlockFxClip1)), 0.0, 1.0);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_BlockFxLineTex, tmpvar_13);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_12 * (tmpvar_12 * 
    (3.0 - (2.0 * tmpvar_12))
  )) + (tmpvar_15.x * (tmpvar_14 * 
    (tmpvar_14 * (3.0 - (2.0 * tmpvar_14)))
  )));
  aseOutAlpha_1 = tmpvar_16;
  col_2.w = (col_2.w * aseOutAlpha_1);
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD4;
    mediump float a_18;
    a_18 = xlv_TEXCOORD4.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesNormal).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _BlockFxClip1;
uniform highp float _Clip1Direction;
uniform highp float _BlockFxClip2Edge;
uniform highp float _BlockFxClip1Edge;
uniform sampler2D _BlockFxBlockTex;
uniform highp vec2 _BlockFxBlockTexSpeed;
uniform highp float _BlockFxBlockTexTilline;
uniform sampler2D _BlockFxLineTex;
uniform highp vec4 _BlockFxLineTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (_BlockFxClip1 + _BlockFxClip1Edge);
  highp vec2 tmpvar_8;
  tmpvar_8 = ((_Time.y * _BlockFxBlockTexSpeed) + (xlv_TEXCOORD0 * vec2(_BlockFxBlockTexTilline)));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_BlockFxBlockTex, tmpvar_8);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9.x * xlv_TEXCOORD3.y) * (_Clip1Direction - 2.0));
  highp float edge0_11;
  edge0_11 = (_BlockFxClip1 + _BlockFxClip2Edge);
  highp float tmpvar_12;
  tmpvar_12 = clamp (((tmpvar_10 - edge0_11) / (
    (tmpvar_7 + _BlockFxClip2Edge)
   - edge0_11)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0 * _BlockFxLineTex_ST.xy) + _BlockFxLineTex_ST.zw);
  highp float tmpvar_14;
  tmpvar_14 = clamp (((tmpvar_10 - _BlockFxClip1) / (tmpvar_7 - _BlockFxClip1)), 0.0, 1.0);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_BlockFxLineTex, tmpvar_13);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_12 * (tmpvar_12 * 
    (3.0 - (2.0 * tmpvar_12))
  )) + (tmpvar_15.x * (tmpvar_14 * 
    (tmpvar_14 * (3.0 - (2.0 * tmpvar_14)))
  )));
  aseOutAlpha_1 = tmpvar_16;
  col_2.w = (col_2.w * aseOutAlpha_1);
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD4;
    mediump float a_18;
    a_18 = xlv_TEXCOORD4.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesTANGENT.xyz).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _BlockFxClip1;
uniform highp float _Clip1Direction;
uniform highp float _BlockFxClip2Edge;
uniform highp float _BlockFxClip1Edge;
uniform sampler2D _BlockFxBlockTex;
uniform highp vec2 _BlockFxBlockTexSpeed;
uniform highp float _BlockFxBlockTexTilline;
uniform sampler2D _BlockFxLineTex;
uniform highp vec4 _BlockFxLineTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (_BlockFxClip1 + _BlockFxClip1Edge);
  highp vec2 tmpvar_8;
  tmpvar_8 = ((_Time.y * _BlockFxBlockTexSpeed) + (xlv_TEXCOORD0 * vec2(_BlockFxBlockTexTilline)));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_BlockFxBlockTex, tmpvar_8);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9.x * xlv_TEXCOORD3.y) * (_Clip1Direction - 2.0));
  highp float edge0_11;
  edge0_11 = (_BlockFxClip1 + _BlockFxClip2Edge);
  highp float tmpvar_12;
  tmpvar_12 = clamp (((tmpvar_10 - edge0_11) / (
    (tmpvar_7 + _BlockFxClip2Edge)
   - edge0_11)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0 * _BlockFxLineTex_ST.xy) + _BlockFxLineTex_ST.zw);
  highp float tmpvar_14;
  tmpvar_14 = clamp (((tmpvar_10 - _BlockFxClip1) / (tmpvar_7 - _BlockFxClip1)), 0.0, 1.0);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_BlockFxLineTex, tmpvar_13);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_12 * (tmpvar_12 * 
    (3.0 - (2.0 * tmpvar_12))
  )) + (tmpvar_15.x * (tmpvar_14 * 
    (tmpvar_14 * (3.0 - (2.0 * tmpvar_14)))
  )));
  aseOutAlpha_1 = tmpvar_16;
  col_2.w = (col_2.w * aseOutAlpha_1);
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD4;
    mediump float a_18;
    a_18 = xlv_TEXCOORD4.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesTANGENT.xyz).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _BlockFxClip1;
uniform highp float _Clip1Direction;
uniform highp float _BlockFxClip2Edge;
uniform highp float _BlockFxClip1Edge;
uniform sampler2D _BlockFxBlockTex;
uniform highp vec2 _BlockFxBlockTexSpeed;
uniform highp float _BlockFxBlockTexTilline;
uniform sampler2D _BlockFxLineTex;
uniform highp vec4 _BlockFxLineTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (_BlockFxClip1 + _BlockFxClip1Edge);
  highp vec2 tmpvar_8;
  tmpvar_8 = ((_Time.y * _BlockFxBlockTexSpeed) + (xlv_TEXCOORD0 * vec2(_BlockFxBlockTexTilline)));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_BlockFxBlockTex, tmpvar_8);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9.x * xlv_TEXCOORD3.y) * (_Clip1Direction - 2.0));
  highp float edge0_11;
  edge0_11 = (_BlockFxClip1 + _BlockFxClip2Edge);
  highp float tmpvar_12;
  tmpvar_12 = clamp (((tmpvar_10 - edge0_11) / (
    (tmpvar_7 + _BlockFxClip2Edge)
   - edge0_11)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0 * _BlockFxLineTex_ST.xy) + _BlockFxLineTex_ST.zw);
  highp float tmpvar_14;
  tmpvar_14 = clamp (((tmpvar_10 - _BlockFxClip1) / (tmpvar_7 - _BlockFxClip1)), 0.0, 1.0);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_BlockFxLineTex, tmpvar_13);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_12 * (tmpvar_12 * 
    (3.0 - (2.0 * tmpvar_12))
  )) + (tmpvar_15.x * (tmpvar_14 * 
    (tmpvar_14 * (3.0 - (2.0 * tmpvar_14)))
  )));
  aseOutAlpha_1 = tmpvar_16;
  col_2.w = (col_2.w * aseOutAlpha_1);
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD4;
    mediump float a_18;
    a_18 = xlv_TEXCOORD4.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesTANGENT.xyz).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _BlockFxClip1;
uniform highp float _Clip1Direction;
uniform highp float _BlockFxClip2Edge;
uniform highp float _BlockFxClip1Edge;
uniform sampler2D _BlockFxBlockTex;
uniform highp vec2 _BlockFxBlockTexSpeed;
uniform highp float _BlockFxBlockTexTilline;
uniform sampler2D _BlockFxLineTex;
uniform highp vec4 _BlockFxLineTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (_BlockFxClip1 + _BlockFxClip1Edge);
  highp vec2 tmpvar_8;
  tmpvar_8 = ((_Time.y * _BlockFxBlockTexSpeed) + (xlv_TEXCOORD0 * vec2(_BlockFxBlockTexTilline)));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_BlockFxBlockTex, tmpvar_8);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9.x * xlv_TEXCOORD3.y) * (_Clip1Direction - 2.0));
  highp float edge0_11;
  edge0_11 = (_BlockFxClip1 + _BlockFxClip2Edge);
  highp float tmpvar_12;
  tmpvar_12 = clamp (((tmpvar_10 - edge0_11) / (
    (tmpvar_7 + _BlockFxClip2Edge)
   - edge0_11)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0 * _BlockFxLineTex_ST.xy) + _BlockFxLineTex_ST.zw);
  highp float tmpvar_14;
  tmpvar_14 = clamp (((tmpvar_10 - _BlockFxClip1) / (tmpvar_7 - _BlockFxClip1)), 0.0, 1.0);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_BlockFxLineTex, tmpvar_13);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_12 * (tmpvar_12 * 
    (3.0 - (2.0 * tmpvar_12))
  )) + (tmpvar_15.x * (tmpvar_14 * 
    (tmpvar_14 * (3.0 - (2.0 * tmpvar_14)))
  )));
  aseOutAlpha_1 = tmpvar_16;
  col_2.w = (col_2.w * aseOutAlpha_1);
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD4;
    mediump float a_18;
    a_18 = xlv_TEXCOORD4.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord1;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord2;
  highp vec3 viewNormal_8;
  highp vec3 viewPos_9;
  highp vec4 tmpvar_10;
  highp vec2 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_11 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = _glesVertex.xyz;
  tmpvar_14 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_15)).xyz;
  viewPos_9.z = tmpvar_14.z;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = tmpvar_2.xyz;
  tmpvar_16[1] = tmpvar_3.xyz;
  tmpvar_16[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_glesNormal);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_19 = _glesTANGENT.xyz;
  tmpvar_20 = (((tmpvar_17.yzx * tmpvar_18.zxy) - (tmpvar_17.zxy * tmpvar_18.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_21.x = tmpvar_19.x;
  tmpvar_21.y = tmpvar_20.x;
  tmpvar_21.z = tmpvar_5.x;
  tmpvar_22.x = tmpvar_19.y;
  tmpvar_22.y = tmpvar_20.y;
  tmpvar_22.z = tmpvar_5.y;
  tmpvar_23.x = tmpvar_19.z;
  tmpvar_23.y = tmpvar_20.z;
  tmpvar_23.z = tmpvar_5.z;
  highp mat3 tmpvar_24;
  tmpvar_24[0].x = tmpvar_21.x;
  tmpvar_24[0].y = tmpvar_22.x;
  tmpvar_24[0].z = tmpvar_23.x;
  tmpvar_24[1].x = tmpvar_21.y;
  tmpvar_24[1].y = tmpvar_22.y;
  tmpvar_24[1].z = tmpvar_23.y;
  tmpvar_24[2].x = tmpvar_21.z;
  tmpvar_24[2].y = tmpvar_22.z;
  tmpvar_24[2].z = tmpvar_23.z;
  viewNormal_8.xy = (tmpvar_16 * (tmpvar_24 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_8.z = 0.01;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(viewNormal_8);
  viewNormal_8 = tmpvar_25;
  viewPos_9.xy = (tmpvar_14.xy + (tmpvar_25.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_14.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = viewPos_9;
  tmpvar_10 = (glstate_matrix_projection * tmpvar_26);
  tmpvar_12.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_12.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_27;
    highp vec4 tmpvar_28;
    tmpvar_28 = (tmpvar_10 * 0.5);
    highp vec2 tmpvar_29;
    tmpvar_29.x = tmpvar_28.x;
    tmpvar_29.y = (tmpvar_28.y * _ProjectionParams.x);
    o_27.xy = (tmpvar_29 + tmpvar_28.w);
    o_27.zw = tmpvar_10.zw;
    tmpvar_13.xyw = o_27.xyw;
    tmpvar_13.z = _DitherAlpha;
  };
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _BlockFxClip1;
uniform highp float _Clip1Direction;
uniform highp float _BlockFxClip2Edge;
uniform highp float _BlockFxClip1Edge;
uniform sampler2D _BlockFxBlockTex;
uniform highp vec2 _BlockFxBlockTexSpeed;
uniform highp float _BlockFxBlockTexTilline;
uniform sampler2D _BlockFxLineTex;
uniform highp vec4 _BlockFxLineTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (_BlockFxClip1 + _BlockFxClip1Edge);
  highp vec2 tmpvar_8;
  tmpvar_8 = ((_Time.y * _BlockFxBlockTexSpeed) + (xlv_TEXCOORD0 * vec2(_BlockFxBlockTexTilline)));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_BlockFxBlockTex, tmpvar_8);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9.x * xlv_TEXCOORD3.y) * (_Clip1Direction - 2.0));
  highp float edge0_11;
  edge0_11 = (_BlockFxClip1 + _BlockFxClip2Edge);
  highp float tmpvar_12;
  tmpvar_12 = clamp (((tmpvar_10 - edge0_11) / (
    (tmpvar_7 + _BlockFxClip2Edge)
   - edge0_11)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0 * _BlockFxLineTex_ST.xy) + _BlockFxLineTex_ST.zw);
  highp float tmpvar_14;
  tmpvar_14 = clamp (((tmpvar_10 - _BlockFxClip1) / (tmpvar_7 - _BlockFxClip1)), 0.0, 1.0);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_BlockFxLineTex, tmpvar_13);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_12 * (tmpvar_12 * 
    (3.0 - (2.0 * tmpvar_12))
  )) + (tmpvar_15.x * (tmpvar_14 * 
    (tmpvar_14 * (3.0 - (2.0 * tmpvar_14)))
  )));
  aseOutAlpha_1 = tmpvar_16;
  col_2.w = (col_2.w * aseOutAlpha_1);
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD4;
    mediump float a_18;
    a_18 = xlv_TEXCOORD4.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord1;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord2;
  highp vec3 viewNormal_8;
  highp vec3 viewPos_9;
  highp vec4 tmpvar_10;
  highp vec2 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_11 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = _glesVertex.xyz;
  tmpvar_14 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_15)).xyz;
  viewPos_9.z = tmpvar_14.z;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = tmpvar_2.xyz;
  tmpvar_16[1] = tmpvar_3.xyz;
  tmpvar_16[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_glesNormal);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_19 = _glesTANGENT.xyz;
  tmpvar_20 = (((tmpvar_17.yzx * tmpvar_18.zxy) - (tmpvar_17.zxy * tmpvar_18.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_21.x = tmpvar_19.x;
  tmpvar_21.y = tmpvar_20.x;
  tmpvar_21.z = tmpvar_5.x;
  tmpvar_22.x = tmpvar_19.y;
  tmpvar_22.y = tmpvar_20.y;
  tmpvar_22.z = tmpvar_5.y;
  tmpvar_23.x = tmpvar_19.z;
  tmpvar_23.y = tmpvar_20.z;
  tmpvar_23.z = tmpvar_5.z;
  highp mat3 tmpvar_24;
  tmpvar_24[0].x = tmpvar_21.x;
  tmpvar_24[0].y = tmpvar_22.x;
  tmpvar_24[0].z = tmpvar_23.x;
  tmpvar_24[1].x = tmpvar_21.y;
  tmpvar_24[1].y = tmpvar_22.y;
  tmpvar_24[1].z = tmpvar_23.y;
  tmpvar_24[2].x = tmpvar_21.z;
  tmpvar_24[2].y = tmpvar_22.z;
  tmpvar_24[2].z = tmpvar_23.z;
  viewNormal_8.xy = (tmpvar_16 * (tmpvar_24 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_8.z = 0.01;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(viewNormal_8);
  viewNormal_8 = tmpvar_25;
  viewPos_9.xy = (tmpvar_14.xy + (tmpvar_25.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_14.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = viewPos_9;
  tmpvar_10 = (glstate_matrix_projection * tmpvar_26);
  tmpvar_12.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_12.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_27;
    highp vec4 tmpvar_28;
    tmpvar_28 = (tmpvar_10 * 0.5);
    highp vec2 tmpvar_29;
    tmpvar_29.x = tmpvar_28.x;
    tmpvar_29.y = (tmpvar_28.y * _ProjectionParams.x);
    o_27.xy = (tmpvar_29 + tmpvar_28.w);
    o_27.zw = tmpvar_10.zw;
    tmpvar_13.xyw = o_27.xyw;
    tmpvar_13.z = _DitherAlpha;
  };
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _BlockFxClip1;
uniform highp float _Clip1Direction;
uniform highp float _BlockFxClip2Edge;
uniform highp float _BlockFxClip1Edge;
uniform sampler2D _BlockFxBlockTex;
uniform highp vec2 _BlockFxBlockTexSpeed;
uniform highp float _BlockFxBlockTexTilline;
uniform sampler2D _BlockFxLineTex;
uniform highp vec4 _BlockFxLineTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (_BlockFxClip1 + _BlockFxClip1Edge);
  highp vec2 tmpvar_8;
  tmpvar_8 = ((_Time.y * _BlockFxBlockTexSpeed) + (xlv_TEXCOORD0 * vec2(_BlockFxBlockTexTilline)));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_BlockFxBlockTex, tmpvar_8);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9.x * xlv_TEXCOORD3.y) * (_Clip1Direction - 2.0));
  highp float edge0_11;
  edge0_11 = (_BlockFxClip1 + _BlockFxClip2Edge);
  highp float tmpvar_12;
  tmpvar_12 = clamp (((tmpvar_10 - edge0_11) / (
    (tmpvar_7 + _BlockFxClip2Edge)
   - edge0_11)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0 * _BlockFxLineTex_ST.xy) + _BlockFxLineTex_ST.zw);
  highp float tmpvar_14;
  tmpvar_14 = clamp (((tmpvar_10 - _BlockFxClip1) / (tmpvar_7 - _BlockFxClip1)), 0.0, 1.0);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_BlockFxLineTex, tmpvar_13);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_12 * (tmpvar_12 * 
    (3.0 - (2.0 * tmpvar_12))
  )) + (tmpvar_15.x * (tmpvar_14 * 
    (tmpvar_14 * (3.0 - (2.0 * tmpvar_14)))
  )));
  aseOutAlpha_1 = tmpvar_16;
  col_2.w = (col_2.w * aseOutAlpha_1);
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD4;
    mediump float a_18;
    a_18 = xlv_TEXCOORD4.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord1;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord2;
  highp vec3 viewNormal_8;
  highp vec3 viewPos_9;
  highp vec4 tmpvar_10;
  highp vec2 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_11 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = _glesVertex.xyz;
  tmpvar_14 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_15)).xyz;
  viewPos_9.z = tmpvar_14.z;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = tmpvar_2.xyz;
  tmpvar_16[1] = tmpvar_3.xyz;
  tmpvar_16[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_glesNormal);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_19 = _glesTANGENT.xyz;
  tmpvar_20 = (((tmpvar_17.yzx * tmpvar_18.zxy) - (tmpvar_17.zxy * tmpvar_18.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_21.x = tmpvar_19.x;
  tmpvar_21.y = tmpvar_20.x;
  tmpvar_21.z = tmpvar_5.x;
  tmpvar_22.x = tmpvar_19.y;
  tmpvar_22.y = tmpvar_20.y;
  tmpvar_22.z = tmpvar_5.y;
  tmpvar_23.x = tmpvar_19.z;
  tmpvar_23.y = tmpvar_20.z;
  tmpvar_23.z = tmpvar_5.z;
  highp mat3 tmpvar_24;
  tmpvar_24[0].x = tmpvar_21.x;
  tmpvar_24[0].y = tmpvar_22.x;
  tmpvar_24[0].z = tmpvar_23.x;
  tmpvar_24[1].x = tmpvar_21.y;
  tmpvar_24[1].y = tmpvar_22.y;
  tmpvar_24[1].z = tmpvar_23.y;
  tmpvar_24[2].x = tmpvar_21.z;
  tmpvar_24[2].y = tmpvar_22.z;
  tmpvar_24[2].z = tmpvar_23.z;
  viewNormal_8.xy = (tmpvar_16 * (tmpvar_24 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_8.z = 0.01;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(viewNormal_8);
  viewNormal_8 = tmpvar_25;
  viewPos_9.xy = (tmpvar_14.xy + (tmpvar_25.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_14.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = viewPos_9;
  tmpvar_10 = (glstate_matrix_projection * tmpvar_26);
  tmpvar_12.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_12.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_27;
    highp vec4 tmpvar_28;
    tmpvar_28 = (tmpvar_10 * 0.5);
    highp vec2 tmpvar_29;
    tmpvar_29.x = tmpvar_28.x;
    tmpvar_29.y = (tmpvar_28.y * _ProjectionParams.x);
    o_27.xy = (tmpvar_29 + tmpvar_28.w);
    o_27.zw = tmpvar_10.zw;
    tmpvar_13.xyw = o_27.xyw;
    tmpvar_13.z = _DitherAlpha;
  };
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _BlockFxClip1;
uniform highp float _Clip1Direction;
uniform highp float _BlockFxClip2Edge;
uniform highp float _BlockFxClip1Edge;
uniform sampler2D _BlockFxBlockTex;
uniform highp vec2 _BlockFxBlockTexSpeed;
uniform highp float _BlockFxBlockTexTilline;
uniform sampler2D _BlockFxLineTex;
uniform highp vec4 _BlockFxLineTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  highp vec4 tmpvar_6;
  tmpvar_6 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (_BlockFxClip1 + _BlockFxClip1Edge);
  highp vec2 tmpvar_8;
  tmpvar_8 = ((_Time.y * _BlockFxBlockTexSpeed) + (xlv_TEXCOORD0 * vec2(_BlockFxBlockTexTilline)));
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_BlockFxBlockTex, tmpvar_8);
  highp float tmpvar_10;
  tmpvar_10 = ((tmpvar_9.x * xlv_TEXCOORD3.y) * (_Clip1Direction - 2.0));
  highp float edge0_11;
  edge0_11 = (_BlockFxClip1 + _BlockFxClip2Edge);
  highp float tmpvar_12;
  tmpvar_12 = clamp (((tmpvar_10 - edge0_11) / (
    (tmpvar_7 + _BlockFxClip2Edge)
   - edge0_11)), 0.0, 1.0);
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0 * _BlockFxLineTex_ST.xy) + _BlockFxLineTex_ST.zw);
  highp float tmpvar_14;
  tmpvar_14 = clamp (((tmpvar_10 - _BlockFxClip1) / (tmpvar_7 - _BlockFxClip1)), 0.0, 1.0);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_BlockFxLineTex, tmpvar_13);
  highp float tmpvar_16;
  tmpvar_16 = ((tmpvar_12 * (tmpvar_12 * 
    (3.0 - (2.0 * tmpvar_12))
  )) + (tmpvar_15.x * (tmpvar_14 * 
    (tmpvar_14 * (3.0 - (2.0 * tmpvar_14)))
  )));
  aseOutAlpha_1 = tmpvar_16;
  col_2.w = (col_2.w * aseOutAlpha_1);
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_17;
    scrpos_17 = xlv_TEXCOORD4;
    mediump float a_18;
    a_18 = xlv_TEXCOORD4.z;
    if ((a_18 < 0.95)) {
      scrpos_17.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_18 = (a_18 * 17.0);
      highp float tmpvar_19;
      tmpvar_19 = (scrpos_17.y / 4.0);
      highp float tmpvar_20;
      tmpvar_20 = (fract(abs(tmpvar_19)) * 4.0);
      highp float tmpvar_21;
      if ((tmpvar_19 >= 0.0)) {
        tmpvar_21 = tmpvar_20;
      } else {
        tmpvar_21 = -(tmpvar_20);
      };
      highp float tmpvar_22;
      tmpvar_22 = (scrpos_17.x / 4.0);
      highp float tmpvar_23;
      tmpvar_23 = (fract(abs(tmpvar_22)) * 4.0);
      highp float tmpvar_24;
      if ((tmpvar_22 >= 0.0)) {
        tmpvar_24 = tmpvar_23;
      } else {
        tmpvar_24 = -(tmpvar_23);
      };
      highp float x_25;
      x_25 = ((a_18 - _DITHERMATRIX[
        int(tmpvar_21)
      ][
        int(tmpvar_24)
      ]) - 0.01);
      if ((x_25 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesNormal).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _BlockFxClip1;
uniform highp float _Clip1Direction;
uniform highp float _BlockFxClip2Edge;
uniform highp float _BlockFxClip1Edge;
uniform sampler2D _BlockFxBlockTex;
uniform highp vec2 _BlockFxBlockTexSpeed;
uniform highp float _BlockFxBlockTexTilline;
uniform sampler2D _BlockFxLineTex;
uniform highp vec4 _BlockFxLineTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (_BlockFxClip1 + _BlockFxClip1Edge);
  highp vec2 tmpvar_9;
  tmpvar_9 = ((_Time.y * _BlockFxBlockTexSpeed) + (xlv_TEXCOORD0 * vec2(_BlockFxBlockTexTilline)));
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_BlockFxBlockTex, tmpvar_9);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10.x * xlv_TEXCOORD3.y) * (_Clip1Direction - 2.0));
  highp float edge0_12;
  edge0_12 = (_BlockFxClip1 + _BlockFxClip2Edge);
  highp float tmpvar_13;
  tmpvar_13 = clamp (((tmpvar_11 - edge0_12) / (
    (tmpvar_8 + _BlockFxClip2Edge)
   - edge0_12)), 0.0, 1.0);
  highp vec2 tmpvar_14;
  tmpvar_14 = ((xlv_TEXCOORD0 * _BlockFxLineTex_ST.xy) + _BlockFxLineTex_ST.zw);
  highp float tmpvar_15;
  tmpvar_15 = clamp (((tmpvar_11 - _BlockFxClip1) / (tmpvar_8 - _BlockFxClip1)), 0.0, 1.0);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_BlockFxLineTex, tmpvar_14);
  highp float tmpvar_17;
  tmpvar_17 = ((tmpvar_13 * (tmpvar_13 * 
    (3.0 - (2.0 * tmpvar_13))
  )) + (tmpvar_16.x * (tmpvar_15 * 
    (tmpvar_15 * (3.0 - (2.0 * tmpvar_15)))
  )));
  aseOutAlpha_1 = tmpvar_17;
  col_2.w = (col_2.w * aseOutAlpha_1);
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD4;
    mediump float a_19;
    a_19 = xlv_TEXCOORD4.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesNormal).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _BlockFxClip1;
uniform highp float _Clip1Direction;
uniform highp float _BlockFxClip2Edge;
uniform highp float _BlockFxClip1Edge;
uniform sampler2D _BlockFxBlockTex;
uniform highp vec2 _BlockFxBlockTexSpeed;
uniform highp float _BlockFxBlockTexTilline;
uniform sampler2D _BlockFxLineTex;
uniform highp vec4 _BlockFxLineTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (_BlockFxClip1 + _BlockFxClip1Edge);
  highp vec2 tmpvar_9;
  tmpvar_9 = ((_Time.y * _BlockFxBlockTexSpeed) + (xlv_TEXCOORD0 * vec2(_BlockFxBlockTexTilline)));
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_BlockFxBlockTex, tmpvar_9);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10.x * xlv_TEXCOORD3.y) * (_Clip1Direction - 2.0));
  highp float edge0_12;
  edge0_12 = (_BlockFxClip1 + _BlockFxClip2Edge);
  highp float tmpvar_13;
  tmpvar_13 = clamp (((tmpvar_11 - edge0_12) / (
    (tmpvar_8 + _BlockFxClip2Edge)
   - edge0_12)), 0.0, 1.0);
  highp vec2 tmpvar_14;
  tmpvar_14 = ((xlv_TEXCOORD0 * _BlockFxLineTex_ST.xy) + _BlockFxLineTex_ST.zw);
  highp float tmpvar_15;
  tmpvar_15 = clamp (((tmpvar_11 - _BlockFxClip1) / (tmpvar_8 - _BlockFxClip1)), 0.0, 1.0);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_BlockFxLineTex, tmpvar_14);
  highp float tmpvar_17;
  tmpvar_17 = ((tmpvar_13 * (tmpvar_13 * 
    (3.0 - (2.0 * tmpvar_13))
  )) + (tmpvar_16.x * (tmpvar_15 * 
    (tmpvar_15 * (3.0 - (2.0 * tmpvar_15)))
  )));
  aseOutAlpha_1 = tmpvar_17;
  col_2.w = (col_2.w * aseOutAlpha_1);
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD4;
    mediump float a_19;
    a_19 = xlv_TEXCOORD4.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesNormal).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _BlockFxClip1;
uniform highp float _Clip1Direction;
uniform highp float _BlockFxClip2Edge;
uniform highp float _BlockFxClip1Edge;
uniform sampler2D _BlockFxBlockTex;
uniform highp vec2 _BlockFxBlockTexSpeed;
uniform highp float _BlockFxBlockTexTilline;
uniform sampler2D _BlockFxLineTex;
uniform highp vec4 _BlockFxLineTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (_BlockFxClip1 + _BlockFxClip1Edge);
  highp vec2 tmpvar_9;
  tmpvar_9 = ((_Time.y * _BlockFxBlockTexSpeed) + (xlv_TEXCOORD0 * vec2(_BlockFxBlockTexTilline)));
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_BlockFxBlockTex, tmpvar_9);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10.x * xlv_TEXCOORD3.y) * (_Clip1Direction - 2.0));
  highp float edge0_12;
  edge0_12 = (_BlockFxClip1 + _BlockFxClip2Edge);
  highp float tmpvar_13;
  tmpvar_13 = clamp (((tmpvar_11 - edge0_12) / (
    (tmpvar_8 + _BlockFxClip2Edge)
   - edge0_12)), 0.0, 1.0);
  highp vec2 tmpvar_14;
  tmpvar_14 = ((xlv_TEXCOORD0 * _BlockFxLineTex_ST.xy) + _BlockFxLineTex_ST.zw);
  highp float tmpvar_15;
  tmpvar_15 = clamp (((tmpvar_11 - _BlockFxClip1) / (tmpvar_8 - _BlockFxClip1)), 0.0, 1.0);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_BlockFxLineTex, tmpvar_14);
  highp float tmpvar_17;
  tmpvar_17 = ((tmpvar_13 * (tmpvar_13 * 
    (3.0 - (2.0 * tmpvar_13))
  )) + (tmpvar_16.x * (tmpvar_15 * 
    (tmpvar_15 * (3.0 - (2.0 * tmpvar_15)))
  )));
  aseOutAlpha_1 = tmpvar_17;
  col_2.w = (col_2.w * aseOutAlpha_1);
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD4;
    mediump float a_19;
    a_19 = xlv_TEXCOORD4.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesTANGENT.xyz).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _BlockFxClip1;
uniform highp float _Clip1Direction;
uniform highp float _BlockFxClip2Edge;
uniform highp float _BlockFxClip1Edge;
uniform sampler2D _BlockFxBlockTex;
uniform highp vec2 _BlockFxBlockTexSpeed;
uniform highp float _BlockFxBlockTexTilline;
uniform sampler2D _BlockFxLineTex;
uniform highp vec4 _BlockFxLineTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (_BlockFxClip1 + _BlockFxClip1Edge);
  highp vec2 tmpvar_9;
  tmpvar_9 = ((_Time.y * _BlockFxBlockTexSpeed) + (xlv_TEXCOORD0 * vec2(_BlockFxBlockTexTilline)));
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_BlockFxBlockTex, tmpvar_9);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10.x * xlv_TEXCOORD3.y) * (_Clip1Direction - 2.0));
  highp float edge0_12;
  edge0_12 = (_BlockFxClip1 + _BlockFxClip2Edge);
  highp float tmpvar_13;
  tmpvar_13 = clamp (((tmpvar_11 - edge0_12) / (
    (tmpvar_8 + _BlockFxClip2Edge)
   - edge0_12)), 0.0, 1.0);
  highp vec2 tmpvar_14;
  tmpvar_14 = ((xlv_TEXCOORD0 * _BlockFxLineTex_ST.xy) + _BlockFxLineTex_ST.zw);
  highp float tmpvar_15;
  tmpvar_15 = clamp (((tmpvar_11 - _BlockFxClip1) / (tmpvar_8 - _BlockFxClip1)), 0.0, 1.0);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_BlockFxLineTex, tmpvar_14);
  highp float tmpvar_17;
  tmpvar_17 = ((tmpvar_13 * (tmpvar_13 * 
    (3.0 - (2.0 * tmpvar_13))
  )) + (tmpvar_16.x * (tmpvar_15 * 
    (tmpvar_15 * (3.0 - (2.0 * tmpvar_15)))
  )));
  aseOutAlpha_1 = tmpvar_17;
  col_2.w = (col_2.w * aseOutAlpha_1);
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD4;
    mediump float a_19;
    a_19 = xlv_TEXCOORD4.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesTANGENT.xyz).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _BlockFxClip1;
uniform highp float _Clip1Direction;
uniform highp float _BlockFxClip2Edge;
uniform highp float _BlockFxClip1Edge;
uniform sampler2D _BlockFxBlockTex;
uniform highp vec2 _BlockFxBlockTexSpeed;
uniform highp float _BlockFxBlockTexTilline;
uniform sampler2D _BlockFxLineTex;
uniform highp vec4 _BlockFxLineTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (_BlockFxClip1 + _BlockFxClip1Edge);
  highp vec2 tmpvar_9;
  tmpvar_9 = ((_Time.y * _BlockFxBlockTexSpeed) + (xlv_TEXCOORD0 * vec2(_BlockFxBlockTexTilline)));
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_BlockFxBlockTex, tmpvar_9);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10.x * xlv_TEXCOORD3.y) * (_Clip1Direction - 2.0));
  highp float edge0_12;
  edge0_12 = (_BlockFxClip1 + _BlockFxClip2Edge);
  highp float tmpvar_13;
  tmpvar_13 = clamp (((tmpvar_11 - edge0_12) / (
    (tmpvar_8 + _BlockFxClip2Edge)
   - edge0_12)), 0.0, 1.0);
  highp vec2 tmpvar_14;
  tmpvar_14 = ((xlv_TEXCOORD0 * _BlockFxLineTex_ST.xy) + _BlockFxLineTex_ST.zw);
  highp float tmpvar_15;
  tmpvar_15 = clamp (((tmpvar_11 - _BlockFxClip1) / (tmpvar_8 - _BlockFxClip1)), 0.0, 1.0);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_BlockFxLineTex, tmpvar_14);
  highp float tmpvar_17;
  tmpvar_17 = ((tmpvar_13 * (tmpvar_13 * 
    (3.0 - (2.0 * tmpvar_13))
  )) + (tmpvar_16.x * (tmpvar_15 * 
    (tmpvar_15 * (3.0 - (2.0 * tmpvar_15)))
  )));
  aseOutAlpha_1 = tmpvar_17;
  col_2.w = (col_2.w * aseOutAlpha_1);
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD4;
    mediump float a_19;
    a_19 = xlv_TEXCOORD4.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord1;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord2;
  highp vec3 viewNormal_7;
  highp vec3 viewPos_8;
  highp vec4 tmpvar_9;
  highp vec2 tmpvar_10;
  highp vec4 tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_10 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = _glesVertex.xyz;
  tmpvar_13 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_14)).xyz;
  viewPos_8.z = tmpvar_13.z;
  highp mat3 tmpvar_15;
  tmpvar_15[0] = tmpvar_2.xyz;
  tmpvar_15[1] = tmpvar_3.xyz;
  tmpvar_15[2] = tmpvar_4.xyz;
  viewNormal_7.xy = (tmpvar_15 * _glesTANGENT.xyz).xy;
  viewNormal_7.z = 0.01;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(viewNormal_7);
  viewNormal_7 = tmpvar_16;
  viewPos_8.xy = (tmpvar_13.xy + (tmpvar_16.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_13.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = viewPos_8;
  tmpvar_9 = (glstate_matrix_projection * tmpvar_17);
  tmpvar_11.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_11.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_9 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_9.zw;
    tmpvar_12.xyw = o_18.xyw;
    tmpvar_12.z = _DitherAlpha;
  };
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_TEXCOORD1 = tmpvar_11;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _BlockFxClip1;
uniform highp float _Clip1Direction;
uniform highp float _BlockFxClip2Edge;
uniform highp float _BlockFxClip1Edge;
uniform sampler2D _BlockFxBlockTex;
uniform highp vec2 _BlockFxBlockTexSpeed;
uniform highp float _BlockFxBlockTexTilline;
uniform sampler2D _BlockFxLineTex;
uniform highp vec4 _BlockFxLineTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (_BlockFxClip1 + _BlockFxClip1Edge);
  highp vec2 tmpvar_9;
  tmpvar_9 = ((_Time.y * _BlockFxBlockTexSpeed) + (xlv_TEXCOORD0 * vec2(_BlockFxBlockTexTilline)));
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_BlockFxBlockTex, tmpvar_9);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10.x * xlv_TEXCOORD3.y) * (_Clip1Direction - 2.0));
  highp float edge0_12;
  edge0_12 = (_BlockFxClip1 + _BlockFxClip2Edge);
  highp float tmpvar_13;
  tmpvar_13 = clamp (((tmpvar_11 - edge0_12) / (
    (tmpvar_8 + _BlockFxClip2Edge)
   - edge0_12)), 0.0, 1.0);
  highp vec2 tmpvar_14;
  tmpvar_14 = ((xlv_TEXCOORD0 * _BlockFxLineTex_ST.xy) + _BlockFxLineTex_ST.zw);
  highp float tmpvar_15;
  tmpvar_15 = clamp (((tmpvar_11 - _BlockFxClip1) / (tmpvar_8 - _BlockFxClip1)), 0.0, 1.0);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_BlockFxLineTex, tmpvar_14);
  highp float tmpvar_17;
  tmpvar_17 = ((tmpvar_13 * (tmpvar_13 * 
    (3.0 - (2.0 * tmpvar_13))
  )) + (tmpvar_16.x * (tmpvar_15 * 
    (tmpvar_15 * (3.0 - (2.0 * tmpvar_15)))
  )));
  aseOutAlpha_1 = tmpvar_17;
  col_2.w = (col_2.w * aseOutAlpha_1);
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD4;
    mediump float a_19;
    a_19 = xlv_TEXCOORD4.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord1;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord2;
  highp vec3 viewNormal_8;
  highp vec3 viewPos_9;
  highp vec4 tmpvar_10;
  highp vec2 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_11 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = _glesVertex.xyz;
  tmpvar_14 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_15)).xyz;
  viewPos_9.z = tmpvar_14.z;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = tmpvar_2.xyz;
  tmpvar_16[1] = tmpvar_3.xyz;
  tmpvar_16[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_glesNormal);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_19 = _glesTANGENT.xyz;
  tmpvar_20 = (((tmpvar_17.yzx * tmpvar_18.zxy) - (tmpvar_17.zxy * tmpvar_18.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_21.x = tmpvar_19.x;
  tmpvar_21.y = tmpvar_20.x;
  tmpvar_21.z = tmpvar_5.x;
  tmpvar_22.x = tmpvar_19.y;
  tmpvar_22.y = tmpvar_20.y;
  tmpvar_22.z = tmpvar_5.y;
  tmpvar_23.x = tmpvar_19.z;
  tmpvar_23.y = tmpvar_20.z;
  tmpvar_23.z = tmpvar_5.z;
  highp mat3 tmpvar_24;
  tmpvar_24[0].x = tmpvar_21.x;
  tmpvar_24[0].y = tmpvar_22.x;
  tmpvar_24[0].z = tmpvar_23.x;
  tmpvar_24[1].x = tmpvar_21.y;
  tmpvar_24[1].y = tmpvar_22.y;
  tmpvar_24[1].z = tmpvar_23.y;
  tmpvar_24[2].x = tmpvar_21.z;
  tmpvar_24[2].y = tmpvar_22.z;
  tmpvar_24[2].z = tmpvar_23.z;
  viewNormal_8.xy = (tmpvar_16 * (tmpvar_24 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_8.z = 0.01;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(viewNormal_8);
  viewNormal_8 = tmpvar_25;
  viewPos_9.xy = (tmpvar_14.xy + (tmpvar_25.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_14.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = viewPos_9;
  tmpvar_10 = (glstate_matrix_projection * tmpvar_26);
  tmpvar_12.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_12.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_27;
    highp vec4 tmpvar_28;
    tmpvar_28 = (tmpvar_10 * 0.5);
    highp vec2 tmpvar_29;
    tmpvar_29.x = tmpvar_28.x;
    tmpvar_29.y = (tmpvar_28.y * _ProjectionParams.x);
    o_27.xy = (tmpvar_29 + tmpvar_28.w);
    o_27.zw = tmpvar_10.zw;
    tmpvar_13.xyw = o_27.xyw;
    tmpvar_13.z = _DitherAlpha;
  };
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _BlockFxClip1;
uniform highp float _Clip1Direction;
uniform highp float _BlockFxClip2Edge;
uniform highp float _BlockFxClip1Edge;
uniform sampler2D _BlockFxBlockTex;
uniform highp vec2 _BlockFxBlockTexSpeed;
uniform highp float _BlockFxBlockTexTilline;
uniform sampler2D _BlockFxLineTex;
uniform highp vec4 _BlockFxLineTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (_BlockFxClip1 + _BlockFxClip1Edge);
  highp vec2 tmpvar_9;
  tmpvar_9 = ((_Time.y * _BlockFxBlockTexSpeed) + (xlv_TEXCOORD0 * vec2(_BlockFxBlockTexTilline)));
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_BlockFxBlockTex, tmpvar_9);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10.x * xlv_TEXCOORD3.y) * (_Clip1Direction - 2.0));
  highp float edge0_12;
  edge0_12 = (_BlockFxClip1 + _BlockFxClip2Edge);
  highp float tmpvar_13;
  tmpvar_13 = clamp (((tmpvar_11 - edge0_12) / (
    (tmpvar_8 + _BlockFxClip2Edge)
   - edge0_12)), 0.0, 1.0);
  highp vec2 tmpvar_14;
  tmpvar_14 = ((xlv_TEXCOORD0 * _BlockFxLineTex_ST.xy) + _BlockFxLineTex_ST.zw);
  highp float tmpvar_15;
  tmpvar_15 = clamp (((tmpvar_11 - _BlockFxClip1) / (tmpvar_8 - _BlockFxClip1)), 0.0, 1.0);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_BlockFxLineTex, tmpvar_14);
  highp float tmpvar_17;
  tmpvar_17 = ((tmpvar_13 * (tmpvar_13 * 
    (3.0 - (2.0 * tmpvar_13))
  )) + (tmpvar_16.x * (tmpvar_15 * 
    (tmpvar_15 * (3.0 - (2.0 * tmpvar_15)))
  )));
  aseOutAlpha_1 = tmpvar_17;
  col_2.w = (col_2.w * aseOutAlpha_1);
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD4;
    mediump float a_19;
    a_19 = xlv_TEXCOORD4.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord1;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord2;
  highp vec3 viewNormal_8;
  highp vec3 viewPos_9;
  highp vec4 tmpvar_10;
  highp vec2 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_11 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = _glesVertex.xyz;
  tmpvar_14 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_15)).xyz;
  viewPos_9.z = tmpvar_14.z;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = tmpvar_2.xyz;
  tmpvar_16[1] = tmpvar_3.xyz;
  tmpvar_16[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_glesNormal);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_19 = _glesTANGENT.xyz;
  tmpvar_20 = (((tmpvar_17.yzx * tmpvar_18.zxy) - (tmpvar_17.zxy * tmpvar_18.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_21.x = tmpvar_19.x;
  tmpvar_21.y = tmpvar_20.x;
  tmpvar_21.z = tmpvar_5.x;
  tmpvar_22.x = tmpvar_19.y;
  tmpvar_22.y = tmpvar_20.y;
  tmpvar_22.z = tmpvar_5.y;
  tmpvar_23.x = tmpvar_19.z;
  tmpvar_23.y = tmpvar_20.z;
  tmpvar_23.z = tmpvar_5.z;
  highp mat3 tmpvar_24;
  tmpvar_24[0].x = tmpvar_21.x;
  tmpvar_24[0].y = tmpvar_22.x;
  tmpvar_24[0].z = tmpvar_23.x;
  tmpvar_24[1].x = tmpvar_21.y;
  tmpvar_24[1].y = tmpvar_22.y;
  tmpvar_24[1].z = tmpvar_23.y;
  tmpvar_24[2].x = tmpvar_21.z;
  tmpvar_24[2].y = tmpvar_22.z;
  tmpvar_24[2].z = tmpvar_23.z;
  viewNormal_8.xy = (tmpvar_16 * (tmpvar_24 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_8.z = 0.01;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(viewNormal_8);
  viewNormal_8 = tmpvar_25;
  viewPos_9.xy = (tmpvar_14.xy + (tmpvar_25.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_14.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = viewPos_9;
  tmpvar_10 = (glstate_matrix_projection * tmpvar_26);
  tmpvar_12.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_12.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_27;
    highp vec4 tmpvar_28;
    tmpvar_28 = (tmpvar_10 * 0.5);
    highp vec2 tmpvar_29;
    tmpvar_29.x = tmpvar_28.x;
    tmpvar_29.y = (tmpvar_28.y * _ProjectionParams.x);
    o_27.xy = (tmpvar_29 + tmpvar_28.w);
    o_27.zw = tmpvar_10.zw;
    tmpvar_13.xyw = o_27.xyw;
    tmpvar_13.z = _DitherAlpha;
  };
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _BlockFxClip1;
uniform highp float _Clip1Direction;
uniform highp float _BlockFxClip2Edge;
uniform highp float _BlockFxClip1Edge;
uniform sampler2D _BlockFxBlockTex;
uniform highp vec2 _BlockFxBlockTexSpeed;
uniform highp float _BlockFxBlockTexTilline;
uniform sampler2D _BlockFxLineTex;
uniform highp vec4 _BlockFxLineTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (_BlockFxClip1 + _BlockFxClip1Edge);
  highp vec2 tmpvar_9;
  tmpvar_9 = ((_Time.y * _BlockFxBlockTexSpeed) + (xlv_TEXCOORD0 * vec2(_BlockFxBlockTexTilline)));
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_BlockFxBlockTex, tmpvar_9);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10.x * xlv_TEXCOORD3.y) * (_Clip1Direction - 2.0));
  highp float edge0_12;
  edge0_12 = (_BlockFxClip1 + _BlockFxClip2Edge);
  highp float tmpvar_13;
  tmpvar_13 = clamp (((tmpvar_11 - edge0_12) / (
    (tmpvar_8 + _BlockFxClip2Edge)
   - edge0_12)), 0.0, 1.0);
  highp vec2 tmpvar_14;
  tmpvar_14 = ((xlv_TEXCOORD0 * _BlockFxLineTex_ST.xy) + _BlockFxLineTex_ST.zw);
  highp float tmpvar_15;
  tmpvar_15 = clamp (((tmpvar_11 - _BlockFxClip1) / (tmpvar_8 - _BlockFxClip1)), 0.0, 1.0);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_BlockFxLineTex, tmpvar_14);
  highp float tmpvar_17;
  tmpvar_17 = ((tmpvar_13 * (tmpvar_13 * 
    (3.0 - (2.0 * tmpvar_13))
  )) + (tmpvar_16.x * (tmpvar_15 * 
    (tmpvar_15 * (3.0 - (2.0 * tmpvar_15)))
  )));
  aseOutAlpha_1 = tmpvar_17;
  col_2.w = (col_2.w * aseOutAlpha_1);
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD4;
    mediump float a_19;
    a_19 = xlv_TEXCOORD4.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = col_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform mediump float _OutlineWidth;
uniform mediump float _UsingDitherAlpha;
uniform mediump float _DitherAlpha;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp mat4 m_1;
  m_1 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_2.x = m_1[0].x;
  tmpvar_2.y = m_1[1].x;
  tmpvar_2.z = m_1[2].x;
  tmpvar_2.w = m_1[3].x;
  tmpvar_3.x = m_1[0].y;
  tmpvar_3.y = m_1[1].y;
  tmpvar_3.z = m_1[2].y;
  tmpvar_3.w = m_1[3].y;
  tmpvar_4.x = m_1[0].z;
  tmpvar_4.y = m_1[1].z;
  tmpvar_4.z = m_1[2].z;
  tmpvar_4.w = m_1[3].z;
  highp vec3 tmpvar_5;
  tmpvar_5 = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesMultiTexCoord1;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesMultiTexCoord2;
  highp vec3 viewNormal_8;
  highp vec3 viewPos_9;
  highp vec4 tmpvar_10;
  highp vec2 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_11 = _glesMultiTexCoord0.xy;
  highp vec3 tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = _glesVertex.xyz;
  tmpvar_14 = (unity_MatrixV * (unity_ObjectToWorld * tmpvar_15)).xyz;
  viewPos_9.z = tmpvar_14.z;
  highp mat3 tmpvar_16;
  tmpvar_16[0] = tmpvar_2.xyz;
  tmpvar_16[1] = tmpvar_3.xyz;
  tmpvar_16[2] = tmpvar_4.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_glesNormal);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(_glesTANGENT.xyz);
  highp vec3 tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_19 = _glesTANGENT.xyz;
  tmpvar_20 = (((tmpvar_17.yzx * tmpvar_18.zxy) - (tmpvar_17.zxy * tmpvar_18.yzx)) * _glesTANGENT.w);
  highp vec3 tmpvar_21;
  highp vec3 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_21.x = tmpvar_19.x;
  tmpvar_21.y = tmpvar_20.x;
  tmpvar_21.z = tmpvar_5.x;
  tmpvar_22.x = tmpvar_19.y;
  tmpvar_22.y = tmpvar_20.y;
  tmpvar_22.z = tmpvar_5.y;
  tmpvar_23.x = tmpvar_19.z;
  tmpvar_23.y = tmpvar_20.z;
  tmpvar_23.z = tmpvar_5.z;
  highp mat3 tmpvar_24;
  tmpvar_24[0].x = tmpvar_21.x;
  tmpvar_24[0].y = tmpvar_22.x;
  tmpvar_24[0].z = tmpvar_23.x;
  tmpvar_24[1].x = tmpvar_21.y;
  tmpvar_24[1].y = tmpvar_22.y;
  tmpvar_24[1].z = tmpvar_23.y;
  tmpvar_24[2].x = tmpvar_21.z;
  tmpvar_24[2].y = tmpvar_22.z;
  tmpvar_24[2].z = tmpvar_23.z;
  viewNormal_8.xy = (tmpvar_16 * (tmpvar_24 * _glesMultiTexCoord2.xyz)).xy;
  viewNormal_8.z = 0.01;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(viewNormal_8);
  viewNormal_8 = tmpvar_25;
  viewPos_9.xy = (tmpvar_14.xy + (tmpvar_25.xy * (
    (_OutlineWidth * 0.01)
   * 
    (_glesColor.w * pow ((max (
      abs((tmpvar_14.z / unity_CameraProjection[1].y))
    , 0.0) / 0.01), 0.5))
  )));
  highp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = viewPos_9;
  tmpvar_10 = (glstate_matrix_projection * tmpvar_26);
  tmpvar_12.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_12.w = _glesColor.x;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_27;
    highp vec4 tmpvar_28;
    tmpvar_28 = (tmpvar_10 * 0.5);
    highp vec2 tmpvar_29;
    tmpvar_29.x = tmpvar_28.x;
    tmpvar_29.y = (tmpvar_28.y * _ProjectionParams.x);
    o_27.xy = (tmpvar_29 + tmpvar_28.w);
    o_27.zw = tmpvar_10.zw;
    tmpvar_13.xyw = o_27.xyw;
    tmpvar_13.z = _DitherAlpha;
  };
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_TEXCOORD1 = tmpvar_12;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump float _AlphaCutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _Color;
uniform mediump vec4 _OutlineColor;
uniform mediump float _UsingDitherAlpha;
uniform highp float _BlockFxClip1;
uniform highp float _Clip1Direction;
uniform highp float _BlockFxClip2Edge;
uniform highp float _BlockFxClip1Edge;
uniform sampler2D _BlockFxBlockTex;
uniform highp vec2 _BlockFxBlockTexSpeed;
uniform highp float _BlockFxBlockTexTilline;
uniform sampler2D _BlockFxLineTex;
uniform highp vec4 _BlockFxLineTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float aseOutAlpha_1;
  mediump vec4 col_2;
  mediump vec4 albedo_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 * _Color);
  albedo_3.xyz = tmpvar_5.xyz;
  albedo_3.w = clamp (tmpvar_5.w, 0.0, 1.0);
  mediump float x_6;
  x_6 = (albedo_3.w - _AlphaCutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD1 * albedo_3) * _OutlineColor);
  col_2 = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (_BlockFxClip1 + _BlockFxClip1Edge);
  highp vec2 tmpvar_9;
  tmpvar_9 = ((_Time.y * _BlockFxBlockTexSpeed) + (xlv_TEXCOORD0 * vec2(_BlockFxBlockTexTilline)));
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_BlockFxBlockTex, tmpvar_9);
  highp float tmpvar_11;
  tmpvar_11 = ((tmpvar_10.x * xlv_TEXCOORD3.y) * (_Clip1Direction - 2.0));
  highp float edge0_12;
  edge0_12 = (_BlockFxClip1 + _BlockFxClip2Edge);
  highp float tmpvar_13;
  tmpvar_13 = clamp (((tmpvar_11 - edge0_12) / (
    (tmpvar_8 + _BlockFxClip2Edge)
   - edge0_12)), 0.0, 1.0);
  highp vec2 tmpvar_14;
  tmpvar_14 = ((xlv_TEXCOORD0 * _BlockFxLineTex_ST.xy) + _BlockFxLineTex_ST.zw);
  highp float tmpvar_15;
  tmpvar_15 = clamp (((tmpvar_11 - _BlockFxClip1) / (tmpvar_8 - _BlockFxClip1)), 0.0, 1.0);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_BlockFxLineTex, tmpvar_14);
  highp float tmpvar_17;
  tmpvar_17 = ((tmpvar_13 * (tmpvar_13 * 
    (3.0 - (2.0 * tmpvar_13))
  )) + (tmpvar_16.x * (tmpvar_15 * 
    (tmpvar_15 * (3.0 - (2.0 * tmpvar_15)))
  )));
  aseOutAlpha_1 = tmpvar_17;
  col_2.w = (col_2.w * aseOutAlpha_1);
  col_2.w = clamp (col_2.w, 0.0, 1.0);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_18;
    scrpos_18 = xlv_TEXCOORD4;
    mediump float a_19;
    a_19 = xlv_TEXCOORD4.z;
    if ((a_19 < 0.95)) {
      scrpos_18.xy = ((xlv_TEXCOORD4.xy / xlv_TEXCOORD4.w) * _ScreenParams.xy);
      a_19 = (a_19 * 17.0);
      highp float tmpvar_20;
      tmpvar_20 = (scrpos_18.y / 4.0);
      highp float tmpvar_21;
      tmpvar_21 = (fract(abs(tmpvar_20)) * 4.0);
      highp float tmpvar_22;
      if ((tmpvar_20 >= 0.0)) {
        tmpvar_22 = tmpvar_21;
      } else {
        tmpvar_22 = -(tmpvar_21);
      };
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_18.x / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float x_26;
      x_26 = ((a_19 - _DITHERMATRIX[
        int(tmpvar_22)
      ][
        int(tmpvar_25)
      ]) - 0.01);
      if ((x_26 < 0.0)) {
        discard;
      };
    };
  };
  gl_FragData[0] = col_2;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
}
}
}
}