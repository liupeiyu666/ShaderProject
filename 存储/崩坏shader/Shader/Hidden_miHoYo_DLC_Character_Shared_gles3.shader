//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Hidden/miHoYo/DLC/Character/Shared" {
Properties {
}
SubShader {
 Tags { "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
 Pass {
  Name "TRANSPARENTALPHA"
  Tags { "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  ZWrite Off
  Cull Off
  GpuProgramID 41222
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
lowp float u_xlat10_0;
bool u_xlatb0;
mediump float u_xlat16_1;
bool u_xlatb2;
void main()
{
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(-0.5<u_xlat16_1);
#else
    u_xlatb0 = -0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_1<0.5);
#else
    u_xlatb2 = u_xlat16_1<0.5;
#endif
    u_xlatb0 = u_xlatb2 && u_xlatb0;
    if(u_xlatb0){
        SV_Target0 = vec4(vec4(_BloomIntensity0, _BloomIntensity0, _BloomIntensity0, _BloomIntensity0));
        return;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(0.5<u_xlat16_1);
#else
        u_xlatb0 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat16_1<1.5);
#else
        u_xlatb2 = u_xlat16_1<1.5;
#endif
        u_xlatb0 = u_xlatb2 && u_xlatb0;
        if(u_xlatb0){
            SV_Target0 = vec4(vec4(_BloomIntensity1, _BloomIntensity1, _BloomIntensity1, _BloomIntensity1));
            return;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(1.5<u_xlat16_1);
#else
            u_xlatb0 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb2 = !!(u_xlat16_1<2.5);
#else
            u_xlatb2 = u_xlat16_1<2.5;
#endif
            u_xlatb0 = u_xlatb2 && u_xlatb0;
            if(u_xlatb0){
                SV_Target0 = vec4(vec4(_BloomIntensity2, _BloomIntensity2, _BloomIntensity2, _BloomIntensity2));
                return;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb0 = !!(2.5<u_xlat16_1);
#else
                u_xlatb0 = 2.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                u_xlatb2 = !!(u_xlat16_1<3.5);
#else
                u_xlatb2 = u_xlat16_1<3.5;
#endif
                u_xlatb0 = u_xlatb2 && u_xlatb0;
                if(u_xlatb0){
                    SV_Target0 = vec4(_BloomIntensity3);
                    return;
                } else {
#ifdef UNITY_ADRENO_ES3
                    u_xlatb0 = !!(3.5<u_xlat16_1);
#else
                    u_xlatb0 = 3.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                    u_xlatb2 = !!(u_xlat16_1<4.5);
#else
                    u_xlatb2 = u_xlat16_1<4.5;
#endif
                    u_xlatb0 = u_xlatb2 && u_xlatb0;
                    if(u_xlatb0){
                        SV_Target0 = vec4(vec4(_BloomIntensity4, _BloomIntensity4, _BloomIntensity4, _BloomIntensity4));
                        return;
                    } else {
#ifdef UNITY_ADRENO_ES3
                        u_xlatb0 = !!(4.5<u_xlat16_1);
#else
                        u_xlatb0 = 4.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                        u_xlatb2 = !!(u_xlat16_1<5.5);
#else
                        u_xlatb2 = u_xlat16_1<5.5;
#endif
                        u_xlatb0 = u_xlatb2 && u_xlatb0;
                        if(u_xlatb0){
                            SV_Target0 = vec4(vec4(_BloomIntensity5, _BloomIntensity5, _BloomIntensity5, _BloomIntensity5));
                            return;
                        } else {
#ifdef UNITY_ADRENO_ES3
                            u_xlatb0 = !!(5.5<u_xlat16_1);
#else
                            u_xlatb0 = 5.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                            u_xlatb2 = !!(u_xlat16_1<6.5);
#else
                            u_xlatb2 = u_xlat16_1<6.5;
#endif
                            u_xlatb0 = u_xlatb2 && u_xlatb0;
                            if(u_xlatb0){
                                SV_Target0 = vec4(vec4(_BloomIntensity6, _BloomIntensity6, _BloomIntensity6, _BloomIntensity6));
                                return;
                            } else {
                                SV_Target0 = vec4(_BloomIntensity7);
                                return;
                            //ENDIF
                            }
                        //ENDIF
                        }
                    //ENDIF
                    }
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
lowp float u_xlat10_0;
bool u_xlatb0;
mediump float u_xlat16_1;
bool u_xlatb2;
void main()
{
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(-0.5<u_xlat16_1);
#else
    u_xlatb0 = -0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_1<0.5);
#else
    u_xlatb2 = u_xlat16_1<0.5;
#endif
    u_xlatb0 = u_xlatb2 && u_xlatb0;
    if(u_xlatb0){
        SV_Target0 = vec4(vec4(_BloomIntensity0, _BloomIntensity0, _BloomIntensity0, _BloomIntensity0));
        return;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(0.5<u_xlat16_1);
#else
        u_xlatb0 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat16_1<1.5);
#else
        u_xlatb2 = u_xlat16_1<1.5;
#endif
        u_xlatb0 = u_xlatb2 && u_xlatb0;
        if(u_xlatb0){
            SV_Target0 = vec4(vec4(_BloomIntensity1, _BloomIntensity1, _BloomIntensity1, _BloomIntensity1));
            return;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(1.5<u_xlat16_1);
#else
            u_xlatb0 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb2 = !!(u_xlat16_1<2.5);
#else
            u_xlatb2 = u_xlat16_1<2.5;
#endif
            u_xlatb0 = u_xlatb2 && u_xlatb0;
            if(u_xlatb0){
                SV_Target0 = vec4(vec4(_BloomIntensity2, _BloomIntensity2, _BloomIntensity2, _BloomIntensity2));
                return;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb0 = !!(2.5<u_xlat16_1);
#else
                u_xlatb0 = 2.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                u_xlatb2 = !!(u_xlat16_1<3.5);
#else
                u_xlatb2 = u_xlat16_1<3.5;
#endif
                u_xlatb0 = u_xlatb2 && u_xlatb0;
                if(u_xlatb0){
                    SV_Target0 = vec4(_BloomIntensity3);
                    return;
                } else {
#ifdef UNITY_ADRENO_ES3
                    u_xlatb0 = !!(3.5<u_xlat16_1);
#else
                    u_xlatb0 = 3.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                    u_xlatb2 = !!(u_xlat16_1<4.5);
#else
                    u_xlatb2 = u_xlat16_1<4.5;
#endif
                    u_xlatb0 = u_xlatb2 && u_xlatb0;
                    if(u_xlatb0){
                        SV_Target0 = vec4(vec4(_BloomIntensity4, _BloomIntensity4, _BloomIntensity4, _BloomIntensity4));
                        return;
                    } else {
#ifdef UNITY_ADRENO_ES3
                        u_xlatb0 = !!(4.5<u_xlat16_1);
#else
                        u_xlatb0 = 4.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                        u_xlatb2 = !!(u_xlat16_1<5.5);
#else
                        u_xlatb2 = u_xlat16_1<5.5;
#endif
                        u_xlatb0 = u_xlatb2 && u_xlatb0;
                        if(u_xlatb0){
                            SV_Target0 = vec4(vec4(_BloomIntensity5, _BloomIntensity5, _BloomIntensity5, _BloomIntensity5));
                            return;
                        } else {
#ifdef UNITY_ADRENO_ES3
                            u_xlatb0 = !!(5.5<u_xlat16_1);
#else
                            u_xlatb0 = 5.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                            u_xlatb2 = !!(u_xlat16_1<6.5);
#else
                            u_xlatb2 = u_xlat16_1<6.5;
#endif
                            u_xlatb0 = u_xlatb2 && u_xlatb0;
                            if(u_xlatb0){
                                SV_Target0 = vec4(vec4(_BloomIntensity6, _BloomIntensity6, _BloomIntensity6, _BloomIntensity6));
                                return;
                            } else {
                                SV_Target0 = vec4(_BloomIntensity7);
                                return;
                            //ENDIF
                            }
                        //ENDIF
                        }
                    //ENDIF
                    }
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
lowp float u_xlat10_0;
bool u_xlatb0;
mediump float u_xlat16_1;
bool u_xlatb2;
void main()
{
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(-0.5<u_xlat16_1);
#else
    u_xlatb0 = -0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_1<0.5);
#else
    u_xlatb2 = u_xlat16_1<0.5;
#endif
    u_xlatb0 = u_xlatb2 && u_xlatb0;
    if(u_xlatb0){
        SV_Target0 = vec4(vec4(_BloomIntensity0, _BloomIntensity0, _BloomIntensity0, _BloomIntensity0));
        return;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(0.5<u_xlat16_1);
#else
        u_xlatb0 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat16_1<1.5);
#else
        u_xlatb2 = u_xlat16_1<1.5;
#endif
        u_xlatb0 = u_xlatb2 && u_xlatb0;
        if(u_xlatb0){
            SV_Target0 = vec4(vec4(_BloomIntensity1, _BloomIntensity1, _BloomIntensity1, _BloomIntensity1));
            return;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(1.5<u_xlat16_1);
#else
            u_xlatb0 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb2 = !!(u_xlat16_1<2.5);
#else
            u_xlatb2 = u_xlat16_1<2.5;
#endif
            u_xlatb0 = u_xlatb2 && u_xlatb0;
            if(u_xlatb0){
                SV_Target0 = vec4(vec4(_BloomIntensity2, _BloomIntensity2, _BloomIntensity2, _BloomIntensity2));
                return;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb0 = !!(2.5<u_xlat16_1);
#else
                u_xlatb0 = 2.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                u_xlatb2 = !!(u_xlat16_1<3.5);
#else
                u_xlatb2 = u_xlat16_1<3.5;
#endif
                u_xlatb0 = u_xlatb2 && u_xlatb0;
                if(u_xlatb0){
                    SV_Target0 = vec4(_BloomIntensity3);
                    return;
                } else {
#ifdef UNITY_ADRENO_ES3
                    u_xlatb0 = !!(3.5<u_xlat16_1);
#else
                    u_xlatb0 = 3.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                    u_xlatb2 = !!(u_xlat16_1<4.5);
#else
                    u_xlatb2 = u_xlat16_1<4.5;
#endif
                    u_xlatb0 = u_xlatb2 && u_xlatb0;
                    if(u_xlatb0){
                        SV_Target0 = vec4(vec4(_BloomIntensity4, _BloomIntensity4, _BloomIntensity4, _BloomIntensity4));
                        return;
                    } else {
#ifdef UNITY_ADRENO_ES3
                        u_xlatb0 = !!(4.5<u_xlat16_1);
#else
                        u_xlatb0 = 4.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                        u_xlatb2 = !!(u_xlat16_1<5.5);
#else
                        u_xlatb2 = u_xlat16_1<5.5;
#endif
                        u_xlatb0 = u_xlatb2 && u_xlatb0;
                        if(u_xlatb0){
                            SV_Target0 = vec4(vec4(_BloomIntensity5, _BloomIntensity5, _BloomIntensity5, _BloomIntensity5));
                            return;
                        } else {
#ifdef UNITY_ADRENO_ES3
                            u_xlatb0 = !!(5.5<u_xlat16_1);
#else
                            u_xlatb0 = 5.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                            u_xlatb2 = !!(u_xlat16_1<6.5);
#else
                            u_xlatb2 = u_xlat16_1<6.5;
#endif
                            u_xlatb0 = u_xlatb2 && u_xlatb0;
                            if(u_xlatb0){
                                SV_Target0 = vec4(vec4(_BloomIntensity6, _BloomIntensity6, _BloomIntensity6, _BloomIntensity6));
                                return;
                            } else {
                                SV_Target0 = vec4(_BloomIntensity7);
                                return;
                            //ENDIF
                            }
                        //ENDIF
                        }
                    //ENDIF
                    }
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
lowp float u_xlat10_0;
bool u_xlatb0;
mediump float u_xlat16_1;
bool u_xlatb2;
void main()
{
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(-0.5<u_xlat16_1);
#else
    u_xlatb0 = -0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_1<0.5);
#else
    u_xlatb2 = u_xlat16_1<0.5;
#endif
    u_xlatb0 = u_xlatb2 && u_xlatb0;
    if(u_xlatb0){
        SV_Target0 = vec4(vec4(_BloomIntensity0, _BloomIntensity0, _BloomIntensity0, _BloomIntensity0));
        return;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(0.5<u_xlat16_1);
#else
        u_xlatb0 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat16_1<1.5);
#else
        u_xlatb2 = u_xlat16_1<1.5;
#endif
        u_xlatb0 = u_xlatb2 && u_xlatb0;
        if(u_xlatb0){
            SV_Target0 = vec4(vec4(_BloomIntensity1, _BloomIntensity1, _BloomIntensity1, _BloomIntensity1));
            return;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(1.5<u_xlat16_1);
#else
            u_xlatb0 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb2 = !!(u_xlat16_1<2.5);
#else
            u_xlatb2 = u_xlat16_1<2.5;
#endif
            u_xlatb0 = u_xlatb2 && u_xlatb0;
            if(u_xlatb0){
                SV_Target0 = vec4(vec4(_BloomIntensity2, _BloomIntensity2, _BloomIntensity2, _BloomIntensity2));
                return;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb0 = !!(2.5<u_xlat16_1);
#else
                u_xlatb0 = 2.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                u_xlatb2 = !!(u_xlat16_1<3.5);
#else
                u_xlatb2 = u_xlat16_1<3.5;
#endif
                u_xlatb0 = u_xlatb2 && u_xlatb0;
                if(u_xlatb0){
                    SV_Target0 = vec4(_BloomIntensity3);
                    return;
                } else {
#ifdef UNITY_ADRENO_ES3
                    u_xlatb0 = !!(3.5<u_xlat16_1);
#else
                    u_xlatb0 = 3.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                    u_xlatb2 = !!(u_xlat16_1<4.5);
#else
                    u_xlatb2 = u_xlat16_1<4.5;
#endif
                    u_xlatb0 = u_xlatb2 && u_xlatb0;
                    if(u_xlatb0){
                        SV_Target0 = vec4(vec4(_BloomIntensity4, _BloomIntensity4, _BloomIntensity4, _BloomIntensity4));
                        return;
                    } else {
#ifdef UNITY_ADRENO_ES3
                        u_xlatb0 = !!(4.5<u_xlat16_1);
#else
                        u_xlatb0 = 4.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                        u_xlatb2 = !!(u_xlat16_1<5.5);
#else
                        u_xlatb2 = u_xlat16_1<5.5;
#endif
                        u_xlatb0 = u_xlatb2 && u_xlatb0;
                        if(u_xlatb0){
                            SV_Target0 = vec4(vec4(_BloomIntensity5, _BloomIntensity5, _BloomIntensity5, _BloomIntensity5));
                            return;
                        } else {
#ifdef UNITY_ADRENO_ES3
                            u_xlatb0 = !!(5.5<u_xlat16_1);
#else
                            u_xlatb0 = 5.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                            u_xlatb2 = !!(u_xlat16_1<6.5);
#else
                            u_xlatb2 = u_xlat16_1<6.5;
#endif
                            u_xlatb0 = u_xlatb2 && u_xlatb0;
                            if(u_xlatb0){
                                SV_Target0 = vec4(vec4(_BloomIntensity6, _BloomIntensity6, _BloomIntensity6, _BloomIntensity6));
                                return;
                            } else {
                                SV_Target0 = vec4(_BloomIntensity7);
                                return;
                            //ENDIF
                            }
                        //ENDIF
                        }
                    //ENDIF
                    }
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
lowp float u_xlat10_0;
bool u_xlatb0;
mediump float u_xlat16_1;
bool u_xlatb2;
void main()
{
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(-0.5<u_xlat16_1);
#else
    u_xlatb0 = -0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_1<0.5);
#else
    u_xlatb2 = u_xlat16_1<0.5;
#endif
    u_xlatb0 = u_xlatb2 && u_xlatb0;
    if(u_xlatb0){
        SV_Target0 = vec4(vec4(_BloomIntensity0, _BloomIntensity0, _BloomIntensity0, _BloomIntensity0));
        return;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(0.5<u_xlat16_1);
#else
        u_xlatb0 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat16_1<1.5);
#else
        u_xlatb2 = u_xlat16_1<1.5;
#endif
        u_xlatb0 = u_xlatb2 && u_xlatb0;
        if(u_xlatb0){
            SV_Target0 = vec4(vec4(_BloomIntensity1, _BloomIntensity1, _BloomIntensity1, _BloomIntensity1));
            return;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(1.5<u_xlat16_1);
#else
            u_xlatb0 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb2 = !!(u_xlat16_1<2.5);
#else
            u_xlatb2 = u_xlat16_1<2.5;
#endif
            u_xlatb0 = u_xlatb2 && u_xlatb0;
            if(u_xlatb0){
                SV_Target0 = vec4(vec4(_BloomIntensity2, _BloomIntensity2, _BloomIntensity2, _BloomIntensity2));
                return;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb0 = !!(2.5<u_xlat16_1);
#else
                u_xlatb0 = 2.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                u_xlatb2 = !!(u_xlat16_1<3.5);
#else
                u_xlatb2 = u_xlat16_1<3.5;
#endif
                u_xlatb0 = u_xlatb2 && u_xlatb0;
                if(u_xlatb0){
                    SV_Target0 = vec4(_BloomIntensity3);
                    return;
                } else {
#ifdef UNITY_ADRENO_ES3
                    u_xlatb0 = !!(3.5<u_xlat16_1);
#else
                    u_xlatb0 = 3.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                    u_xlatb2 = !!(u_xlat16_1<4.5);
#else
                    u_xlatb2 = u_xlat16_1<4.5;
#endif
                    u_xlatb0 = u_xlatb2 && u_xlatb0;
                    if(u_xlatb0){
                        SV_Target0 = vec4(vec4(_BloomIntensity4, _BloomIntensity4, _BloomIntensity4, _BloomIntensity4));
                        return;
                    } else {
#ifdef UNITY_ADRENO_ES3
                        u_xlatb0 = !!(4.5<u_xlat16_1);
#else
                        u_xlatb0 = 4.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                        u_xlatb2 = !!(u_xlat16_1<5.5);
#else
                        u_xlatb2 = u_xlat16_1<5.5;
#endif
                        u_xlatb0 = u_xlatb2 && u_xlatb0;
                        if(u_xlatb0){
                            SV_Target0 = vec4(vec4(_BloomIntensity5, _BloomIntensity5, _BloomIntensity5, _BloomIntensity5));
                            return;
                        } else {
#ifdef UNITY_ADRENO_ES3
                            u_xlatb0 = !!(5.5<u_xlat16_1);
#else
                            u_xlatb0 = 5.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                            u_xlatb2 = !!(u_xlat16_1<6.5);
#else
                            u_xlatb2 = u_xlat16_1<6.5;
#endif
                            u_xlatb0 = u_xlatb2 && u_xlatb0;
                            if(u_xlatb0){
                                SV_Target0 = vec4(vec4(_BloomIntensity6, _BloomIntensity6, _BloomIntensity6, _BloomIntensity6));
                                return;
                            } else {
                                SV_Target0 = vec4(_BloomIntensity7);
                                return;
                            //ENDIF
                            }
                        //ENDIF
                        }
                    //ENDIF
                    }
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
lowp float u_xlat10_0;
bool u_xlatb0;
mediump float u_xlat16_1;
bool u_xlatb2;
void main()
{
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(-0.5<u_xlat16_1);
#else
    u_xlatb0 = -0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_1<0.5);
#else
    u_xlatb2 = u_xlat16_1<0.5;
#endif
    u_xlatb0 = u_xlatb2 && u_xlatb0;
    if(u_xlatb0){
        SV_Target0 = vec4(vec4(_BloomIntensity0, _BloomIntensity0, _BloomIntensity0, _BloomIntensity0));
        return;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(0.5<u_xlat16_1);
#else
        u_xlatb0 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat16_1<1.5);
#else
        u_xlatb2 = u_xlat16_1<1.5;
#endif
        u_xlatb0 = u_xlatb2 && u_xlatb0;
        if(u_xlatb0){
            SV_Target0 = vec4(vec4(_BloomIntensity1, _BloomIntensity1, _BloomIntensity1, _BloomIntensity1));
            return;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(1.5<u_xlat16_1);
#else
            u_xlatb0 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb2 = !!(u_xlat16_1<2.5);
#else
            u_xlatb2 = u_xlat16_1<2.5;
#endif
            u_xlatb0 = u_xlatb2 && u_xlatb0;
            if(u_xlatb0){
                SV_Target0 = vec4(vec4(_BloomIntensity2, _BloomIntensity2, _BloomIntensity2, _BloomIntensity2));
                return;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb0 = !!(2.5<u_xlat16_1);
#else
                u_xlatb0 = 2.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                u_xlatb2 = !!(u_xlat16_1<3.5);
#else
                u_xlatb2 = u_xlat16_1<3.5;
#endif
                u_xlatb0 = u_xlatb2 && u_xlatb0;
                if(u_xlatb0){
                    SV_Target0 = vec4(_BloomIntensity3);
                    return;
                } else {
#ifdef UNITY_ADRENO_ES3
                    u_xlatb0 = !!(3.5<u_xlat16_1);
#else
                    u_xlatb0 = 3.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                    u_xlatb2 = !!(u_xlat16_1<4.5);
#else
                    u_xlatb2 = u_xlat16_1<4.5;
#endif
                    u_xlatb0 = u_xlatb2 && u_xlatb0;
                    if(u_xlatb0){
                        SV_Target0 = vec4(vec4(_BloomIntensity4, _BloomIntensity4, _BloomIntensity4, _BloomIntensity4));
                        return;
                    } else {
#ifdef UNITY_ADRENO_ES3
                        u_xlatb0 = !!(4.5<u_xlat16_1);
#else
                        u_xlatb0 = 4.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                        u_xlatb2 = !!(u_xlat16_1<5.5);
#else
                        u_xlatb2 = u_xlat16_1<5.5;
#endif
                        u_xlatb0 = u_xlatb2 && u_xlatb0;
                        if(u_xlatb0){
                            SV_Target0 = vec4(vec4(_BloomIntensity5, _BloomIntensity5, _BloomIntensity5, _BloomIntensity5));
                            return;
                        } else {
#ifdef UNITY_ADRENO_ES3
                            u_xlatb0 = !!(5.5<u_xlat16_1);
#else
                            u_xlatb0 = 5.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                            u_xlatb2 = !!(u_xlat16_1<6.5);
#else
                            u_xlatb2 = u_xlat16_1<6.5;
#endif
                            u_xlatb0 = u_xlatb2 && u_xlatb0;
                            if(u_xlatb0){
                                SV_Target0 = vec4(vec4(_BloomIntensity6, _BloomIntensity6, _BloomIntensity6, _BloomIntensity6));
                                return;
                            } else {
                                SV_Target0 = vec4(_BloomIntensity7);
                                return;
                            //ENDIF
                            }
                        //ENDIF
                        }
                    //ENDIF
                    }
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
mediump float u_xlat16_1;
bool u_xlatb2;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_0 = u_xlat10_0 * _Color.w;
    u_xlat16_1 = u_xlat16_0 * _EnvColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati0 = int(u_xlat16_1);
    if((u_xlati0)==0){discard;}
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(-0.5<u_xlat16_1);
#else
    u_xlatb0 = -0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_1<0.5);
#else
    u_xlatb2 = u_xlat16_1<0.5;
#endif
    u_xlatb0 = u_xlatb2 && u_xlatb0;
    if(u_xlatb0){
        SV_Target0 = vec4(vec4(_BloomIntensity0, _BloomIntensity0, _BloomIntensity0, _BloomIntensity0));
        return;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(0.5<u_xlat16_1);
#else
        u_xlatb0 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat16_1<1.5);
#else
        u_xlatb2 = u_xlat16_1<1.5;
#endif
        u_xlatb0 = u_xlatb2 && u_xlatb0;
        if(u_xlatb0){
            SV_Target0 = vec4(vec4(_BloomIntensity1, _BloomIntensity1, _BloomIntensity1, _BloomIntensity1));
            return;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(1.5<u_xlat16_1);
#else
            u_xlatb0 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb2 = !!(u_xlat16_1<2.5);
#else
            u_xlatb2 = u_xlat16_1<2.5;
#endif
            u_xlatb0 = u_xlatb2 && u_xlatb0;
            if(u_xlatb0){
                SV_Target0 = vec4(vec4(_BloomIntensity2, _BloomIntensity2, _BloomIntensity2, _BloomIntensity2));
                return;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb0 = !!(2.5<u_xlat16_1);
#else
                u_xlatb0 = 2.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                u_xlatb2 = !!(u_xlat16_1<3.5);
#else
                u_xlatb2 = u_xlat16_1<3.5;
#endif
                u_xlatb0 = u_xlatb2 && u_xlatb0;
                if(u_xlatb0){
                    SV_Target0 = vec4(_BloomIntensity3);
                    return;
                } else {
#ifdef UNITY_ADRENO_ES3
                    u_xlatb0 = !!(3.5<u_xlat16_1);
#else
                    u_xlatb0 = 3.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                    u_xlatb2 = !!(u_xlat16_1<4.5);
#else
                    u_xlatb2 = u_xlat16_1<4.5;
#endif
                    u_xlatb0 = u_xlatb2 && u_xlatb0;
                    if(u_xlatb0){
                        SV_Target0 = vec4(vec4(_BloomIntensity4, _BloomIntensity4, _BloomIntensity4, _BloomIntensity4));
                        return;
                    } else {
#ifdef UNITY_ADRENO_ES3
                        u_xlatb0 = !!(4.5<u_xlat16_1);
#else
                        u_xlatb0 = 4.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                        u_xlatb2 = !!(u_xlat16_1<5.5);
#else
                        u_xlatb2 = u_xlat16_1<5.5;
#endif
                        u_xlatb0 = u_xlatb2 && u_xlatb0;
                        if(u_xlatb0){
                            SV_Target0 = vec4(vec4(_BloomIntensity5, _BloomIntensity5, _BloomIntensity5, _BloomIntensity5));
                            return;
                        } else {
#ifdef UNITY_ADRENO_ES3
                            u_xlatb0 = !!(5.5<u_xlat16_1);
#else
                            u_xlatb0 = 5.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                            u_xlatb2 = !!(u_xlat16_1<6.5);
#else
                            u_xlatb2 = u_xlat16_1<6.5;
#endif
                            u_xlatb0 = u_xlatb2 && u_xlatb0;
                            if(u_xlatb0){
                                SV_Target0 = vec4(vec4(_BloomIntensity6, _BloomIntensity6, _BloomIntensity6, _BloomIntensity6));
                                return;
                            } else {
                                SV_Target0 = vec4(_BloomIntensity7);
                                return;
                            //ENDIF
                            }
                        //ENDIF
                        }
                    //ENDIF
                    }
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
mediump float u_xlat16_1;
bool u_xlatb2;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_0 = u_xlat10_0 * _Color.w;
    u_xlat16_1 = u_xlat16_0 * _EnvColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati0 = int(u_xlat16_1);
    if((u_xlati0)==0){discard;}
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(-0.5<u_xlat16_1);
#else
    u_xlatb0 = -0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_1<0.5);
#else
    u_xlatb2 = u_xlat16_1<0.5;
#endif
    u_xlatb0 = u_xlatb2 && u_xlatb0;
    if(u_xlatb0){
        SV_Target0 = vec4(vec4(_BloomIntensity0, _BloomIntensity0, _BloomIntensity0, _BloomIntensity0));
        return;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(0.5<u_xlat16_1);
#else
        u_xlatb0 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat16_1<1.5);
#else
        u_xlatb2 = u_xlat16_1<1.5;
#endif
        u_xlatb0 = u_xlatb2 && u_xlatb0;
        if(u_xlatb0){
            SV_Target0 = vec4(vec4(_BloomIntensity1, _BloomIntensity1, _BloomIntensity1, _BloomIntensity1));
            return;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(1.5<u_xlat16_1);
#else
            u_xlatb0 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb2 = !!(u_xlat16_1<2.5);
#else
            u_xlatb2 = u_xlat16_1<2.5;
#endif
            u_xlatb0 = u_xlatb2 && u_xlatb0;
            if(u_xlatb0){
                SV_Target0 = vec4(vec4(_BloomIntensity2, _BloomIntensity2, _BloomIntensity2, _BloomIntensity2));
                return;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb0 = !!(2.5<u_xlat16_1);
#else
                u_xlatb0 = 2.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                u_xlatb2 = !!(u_xlat16_1<3.5);
#else
                u_xlatb2 = u_xlat16_1<3.5;
#endif
                u_xlatb0 = u_xlatb2 && u_xlatb0;
                if(u_xlatb0){
                    SV_Target0 = vec4(_BloomIntensity3);
                    return;
                } else {
#ifdef UNITY_ADRENO_ES3
                    u_xlatb0 = !!(3.5<u_xlat16_1);
#else
                    u_xlatb0 = 3.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                    u_xlatb2 = !!(u_xlat16_1<4.5);
#else
                    u_xlatb2 = u_xlat16_1<4.5;
#endif
                    u_xlatb0 = u_xlatb2 && u_xlatb0;
                    if(u_xlatb0){
                        SV_Target0 = vec4(vec4(_BloomIntensity4, _BloomIntensity4, _BloomIntensity4, _BloomIntensity4));
                        return;
                    } else {
#ifdef UNITY_ADRENO_ES3
                        u_xlatb0 = !!(4.5<u_xlat16_1);
#else
                        u_xlatb0 = 4.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                        u_xlatb2 = !!(u_xlat16_1<5.5);
#else
                        u_xlatb2 = u_xlat16_1<5.5;
#endif
                        u_xlatb0 = u_xlatb2 && u_xlatb0;
                        if(u_xlatb0){
                            SV_Target0 = vec4(vec4(_BloomIntensity5, _BloomIntensity5, _BloomIntensity5, _BloomIntensity5));
                            return;
                        } else {
#ifdef UNITY_ADRENO_ES3
                            u_xlatb0 = !!(5.5<u_xlat16_1);
#else
                            u_xlatb0 = 5.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                            u_xlatb2 = !!(u_xlat16_1<6.5);
#else
                            u_xlatb2 = u_xlat16_1<6.5;
#endif
                            u_xlatb0 = u_xlatb2 && u_xlatb0;
                            if(u_xlatb0){
                                SV_Target0 = vec4(vec4(_BloomIntensity6, _BloomIntensity6, _BloomIntensity6, _BloomIntensity6));
                                return;
                            } else {
                                SV_Target0 = vec4(_BloomIntensity7);
                                return;
                            //ENDIF
                            }
                        //ENDIF
                        }
                    //ENDIF
                    }
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
mediump float u_xlat16_1;
bool u_xlatb2;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_0 = u_xlat10_0 * _Color.w;
    u_xlat16_1 = u_xlat16_0 * _EnvColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati0 = int(u_xlat16_1);
    if((u_xlati0)==0){discard;}
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(-0.5<u_xlat16_1);
#else
    u_xlatb0 = -0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_1<0.5);
#else
    u_xlatb2 = u_xlat16_1<0.5;
#endif
    u_xlatb0 = u_xlatb2 && u_xlatb0;
    if(u_xlatb0){
        SV_Target0 = vec4(vec4(_BloomIntensity0, _BloomIntensity0, _BloomIntensity0, _BloomIntensity0));
        return;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(0.5<u_xlat16_1);
#else
        u_xlatb0 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat16_1<1.5);
#else
        u_xlatb2 = u_xlat16_1<1.5;
#endif
        u_xlatb0 = u_xlatb2 && u_xlatb0;
        if(u_xlatb0){
            SV_Target0 = vec4(vec4(_BloomIntensity1, _BloomIntensity1, _BloomIntensity1, _BloomIntensity1));
            return;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(1.5<u_xlat16_1);
#else
            u_xlatb0 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb2 = !!(u_xlat16_1<2.5);
#else
            u_xlatb2 = u_xlat16_1<2.5;
#endif
            u_xlatb0 = u_xlatb2 && u_xlatb0;
            if(u_xlatb0){
                SV_Target0 = vec4(vec4(_BloomIntensity2, _BloomIntensity2, _BloomIntensity2, _BloomIntensity2));
                return;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb0 = !!(2.5<u_xlat16_1);
#else
                u_xlatb0 = 2.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                u_xlatb2 = !!(u_xlat16_1<3.5);
#else
                u_xlatb2 = u_xlat16_1<3.5;
#endif
                u_xlatb0 = u_xlatb2 && u_xlatb0;
                if(u_xlatb0){
                    SV_Target0 = vec4(_BloomIntensity3);
                    return;
                } else {
#ifdef UNITY_ADRENO_ES3
                    u_xlatb0 = !!(3.5<u_xlat16_1);
#else
                    u_xlatb0 = 3.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                    u_xlatb2 = !!(u_xlat16_1<4.5);
#else
                    u_xlatb2 = u_xlat16_1<4.5;
#endif
                    u_xlatb0 = u_xlatb2 && u_xlatb0;
                    if(u_xlatb0){
                        SV_Target0 = vec4(vec4(_BloomIntensity4, _BloomIntensity4, _BloomIntensity4, _BloomIntensity4));
                        return;
                    } else {
#ifdef UNITY_ADRENO_ES3
                        u_xlatb0 = !!(4.5<u_xlat16_1);
#else
                        u_xlatb0 = 4.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                        u_xlatb2 = !!(u_xlat16_1<5.5);
#else
                        u_xlatb2 = u_xlat16_1<5.5;
#endif
                        u_xlatb0 = u_xlatb2 && u_xlatb0;
                        if(u_xlatb0){
                            SV_Target0 = vec4(vec4(_BloomIntensity5, _BloomIntensity5, _BloomIntensity5, _BloomIntensity5));
                            return;
                        } else {
#ifdef UNITY_ADRENO_ES3
                            u_xlatb0 = !!(5.5<u_xlat16_1);
#else
                            u_xlatb0 = 5.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                            u_xlatb2 = !!(u_xlat16_1<6.5);
#else
                            u_xlatb2 = u_xlat16_1<6.5;
#endif
                            u_xlatb0 = u_xlatb2 && u_xlatb0;
                            if(u_xlatb0){
                                SV_Target0 = vec4(vec4(_BloomIntensity6, _BloomIntensity6, _BloomIntensity6, _BloomIntensity6));
                                return;
                            } else {
                                SV_Target0 = vec4(_BloomIntensity7);
                                return;
                            //ENDIF
                            }
                        //ENDIF
                        }
                    //ENDIF
                    }
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
mediump float u_xlat16_1;
bool u_xlatb2;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_0 = u_xlat10_0 * _Color.w;
    u_xlat16_1 = u_xlat16_0 * _EnvColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati0 = int(u_xlat16_1);
    if((u_xlati0)==0){discard;}
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(-0.5<u_xlat16_1);
#else
    u_xlatb0 = -0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_1<0.5);
#else
    u_xlatb2 = u_xlat16_1<0.5;
#endif
    u_xlatb0 = u_xlatb2 && u_xlatb0;
    if(u_xlatb0){
        SV_Target0 = vec4(vec4(_BloomIntensity0, _BloomIntensity0, _BloomIntensity0, _BloomIntensity0));
        return;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(0.5<u_xlat16_1);
#else
        u_xlatb0 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat16_1<1.5);
#else
        u_xlatb2 = u_xlat16_1<1.5;
#endif
        u_xlatb0 = u_xlatb2 && u_xlatb0;
        if(u_xlatb0){
            SV_Target0 = vec4(vec4(_BloomIntensity1, _BloomIntensity1, _BloomIntensity1, _BloomIntensity1));
            return;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(1.5<u_xlat16_1);
#else
            u_xlatb0 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb2 = !!(u_xlat16_1<2.5);
#else
            u_xlatb2 = u_xlat16_1<2.5;
#endif
            u_xlatb0 = u_xlatb2 && u_xlatb0;
            if(u_xlatb0){
                SV_Target0 = vec4(vec4(_BloomIntensity2, _BloomIntensity2, _BloomIntensity2, _BloomIntensity2));
                return;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb0 = !!(2.5<u_xlat16_1);
#else
                u_xlatb0 = 2.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                u_xlatb2 = !!(u_xlat16_1<3.5);
#else
                u_xlatb2 = u_xlat16_1<3.5;
#endif
                u_xlatb0 = u_xlatb2 && u_xlatb0;
                if(u_xlatb0){
                    SV_Target0 = vec4(_BloomIntensity3);
                    return;
                } else {
#ifdef UNITY_ADRENO_ES3
                    u_xlatb0 = !!(3.5<u_xlat16_1);
#else
                    u_xlatb0 = 3.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                    u_xlatb2 = !!(u_xlat16_1<4.5);
#else
                    u_xlatb2 = u_xlat16_1<4.5;
#endif
                    u_xlatb0 = u_xlatb2 && u_xlatb0;
                    if(u_xlatb0){
                        SV_Target0 = vec4(vec4(_BloomIntensity4, _BloomIntensity4, _BloomIntensity4, _BloomIntensity4));
                        return;
                    } else {
#ifdef UNITY_ADRENO_ES3
                        u_xlatb0 = !!(4.5<u_xlat16_1);
#else
                        u_xlatb0 = 4.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                        u_xlatb2 = !!(u_xlat16_1<5.5);
#else
                        u_xlatb2 = u_xlat16_1<5.5;
#endif
                        u_xlatb0 = u_xlatb2 && u_xlatb0;
                        if(u_xlatb0){
                            SV_Target0 = vec4(vec4(_BloomIntensity5, _BloomIntensity5, _BloomIntensity5, _BloomIntensity5));
                            return;
                        } else {
#ifdef UNITY_ADRENO_ES3
                            u_xlatb0 = !!(5.5<u_xlat16_1);
#else
                            u_xlatb0 = 5.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                            u_xlatb2 = !!(u_xlat16_1<6.5);
#else
                            u_xlatb2 = u_xlat16_1<6.5;
#endif
                            u_xlatb0 = u_xlatb2 && u_xlatb0;
                            if(u_xlatb0){
                                SV_Target0 = vec4(vec4(_BloomIntensity6, _BloomIntensity6, _BloomIntensity6, _BloomIntensity6));
                                return;
                            } else {
                                SV_Target0 = vec4(_BloomIntensity7);
                                return;
                            //ENDIF
                            }
                        //ENDIF
                        }
                    //ENDIF
                    }
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
mediump float u_xlat16_1;
bool u_xlatb2;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_0 = u_xlat10_0 * _Color.w;
    u_xlat16_1 = u_xlat16_0 * _EnvColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati0 = int(u_xlat16_1);
    if((u_xlati0)==0){discard;}
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(-0.5<u_xlat16_1);
#else
    u_xlatb0 = -0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_1<0.5);
#else
    u_xlatb2 = u_xlat16_1<0.5;
#endif
    u_xlatb0 = u_xlatb2 && u_xlatb0;
    if(u_xlatb0){
        SV_Target0 = vec4(vec4(_BloomIntensity0, _BloomIntensity0, _BloomIntensity0, _BloomIntensity0));
        return;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(0.5<u_xlat16_1);
#else
        u_xlatb0 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat16_1<1.5);
#else
        u_xlatb2 = u_xlat16_1<1.5;
#endif
        u_xlatb0 = u_xlatb2 && u_xlatb0;
        if(u_xlatb0){
            SV_Target0 = vec4(vec4(_BloomIntensity1, _BloomIntensity1, _BloomIntensity1, _BloomIntensity1));
            return;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(1.5<u_xlat16_1);
#else
            u_xlatb0 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb2 = !!(u_xlat16_1<2.5);
#else
            u_xlatb2 = u_xlat16_1<2.5;
#endif
            u_xlatb0 = u_xlatb2 && u_xlatb0;
            if(u_xlatb0){
                SV_Target0 = vec4(vec4(_BloomIntensity2, _BloomIntensity2, _BloomIntensity2, _BloomIntensity2));
                return;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb0 = !!(2.5<u_xlat16_1);
#else
                u_xlatb0 = 2.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                u_xlatb2 = !!(u_xlat16_1<3.5);
#else
                u_xlatb2 = u_xlat16_1<3.5;
#endif
                u_xlatb0 = u_xlatb2 && u_xlatb0;
                if(u_xlatb0){
                    SV_Target0 = vec4(_BloomIntensity3);
                    return;
                } else {
#ifdef UNITY_ADRENO_ES3
                    u_xlatb0 = !!(3.5<u_xlat16_1);
#else
                    u_xlatb0 = 3.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                    u_xlatb2 = !!(u_xlat16_1<4.5);
#else
                    u_xlatb2 = u_xlat16_1<4.5;
#endif
                    u_xlatb0 = u_xlatb2 && u_xlatb0;
                    if(u_xlatb0){
                        SV_Target0 = vec4(vec4(_BloomIntensity4, _BloomIntensity4, _BloomIntensity4, _BloomIntensity4));
                        return;
                    } else {
#ifdef UNITY_ADRENO_ES3
                        u_xlatb0 = !!(4.5<u_xlat16_1);
#else
                        u_xlatb0 = 4.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                        u_xlatb2 = !!(u_xlat16_1<5.5);
#else
                        u_xlatb2 = u_xlat16_1<5.5;
#endif
                        u_xlatb0 = u_xlatb2 && u_xlatb0;
                        if(u_xlatb0){
                            SV_Target0 = vec4(vec4(_BloomIntensity5, _BloomIntensity5, _BloomIntensity5, _BloomIntensity5));
                            return;
                        } else {
#ifdef UNITY_ADRENO_ES3
                            u_xlatb0 = !!(5.5<u_xlat16_1);
#else
                            u_xlatb0 = 5.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                            u_xlatb2 = !!(u_xlat16_1<6.5);
#else
                            u_xlatb2 = u_xlat16_1<6.5;
#endif
                            u_xlatb0 = u_xlatb2 && u_xlatb0;
                            if(u_xlatb0){
                                SV_Target0 = vec4(vec4(_BloomIntensity6, _BloomIntensity6, _BloomIntensity6, _BloomIntensity6));
                                return;
                            } else {
                                SV_Target0 = vec4(_BloomIntensity7);
                                return;
                            //ENDIF
                            }
                        //ENDIF
                        }
                    //ENDIF
                    }
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainMaps_ST;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainMaps_ST.xy + _MainMaps_ST.zw;
    vs_TEXCOORD1 = in_COLOR0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.z = (u_xlatb0) ? _DitherAlpha : u_xlat0.z;
    vs_TEXCOORD2.w = u_xlat0.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _BloomIntensity0;
uniform 	mediump float _BloomIntensity1;
uniform 	mediump float _BloomIntensity2;
uniform 	mediump float _BloomIntensity3;
uniform 	mediump float _BloomIntensity4;
uniform 	mediump float _BloomIntensity5;
uniform 	mediump float _BloomIntensity6;
uniform 	mediump float _BloomIntensity7;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
mediump float u_xlat16_1;
bool u_xlatb2;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;
    u_xlat16_0 = u_xlat10_0 * _Color.w;
    u_xlat16_1 = u_xlat16_0 * _EnvColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati0 = int(u_xlat16_1);
    if((u_xlati0)==0){discard;}
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(-0.5<u_xlat16_1);
#else
    u_xlatb0 = -0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_1<0.5);
#else
    u_xlatb2 = u_xlat16_1<0.5;
#endif
    u_xlatb0 = u_xlatb2 && u_xlatb0;
    if(u_xlatb0){
        SV_Target0 = vec4(vec4(_BloomIntensity0, _BloomIntensity0, _BloomIntensity0, _BloomIntensity0));
        return;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(0.5<u_xlat16_1);
#else
        u_xlatb0 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat16_1<1.5);
#else
        u_xlatb2 = u_xlat16_1<1.5;
#endif
        u_xlatb0 = u_xlatb2 && u_xlatb0;
        if(u_xlatb0){
            SV_Target0 = vec4(vec4(_BloomIntensity1, _BloomIntensity1, _BloomIntensity1, _BloomIntensity1));
            return;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(1.5<u_xlat16_1);
#else
            u_xlatb0 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
            u_xlatb2 = !!(u_xlat16_1<2.5);
#else
            u_xlatb2 = u_xlat16_1<2.5;
#endif
            u_xlatb0 = u_xlatb2 && u_xlatb0;
            if(u_xlatb0){
                SV_Target0 = vec4(vec4(_BloomIntensity2, _BloomIntensity2, _BloomIntensity2, _BloomIntensity2));
                return;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb0 = !!(2.5<u_xlat16_1);
#else
                u_xlatb0 = 2.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                u_xlatb2 = !!(u_xlat16_1<3.5);
#else
                u_xlatb2 = u_xlat16_1<3.5;
#endif
                u_xlatb0 = u_xlatb2 && u_xlatb0;
                if(u_xlatb0){
                    SV_Target0 = vec4(_BloomIntensity3);
                    return;
                } else {
#ifdef UNITY_ADRENO_ES3
                    u_xlatb0 = !!(3.5<u_xlat16_1);
#else
                    u_xlatb0 = 3.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                    u_xlatb2 = !!(u_xlat16_1<4.5);
#else
                    u_xlatb2 = u_xlat16_1<4.5;
#endif
                    u_xlatb0 = u_xlatb2 && u_xlatb0;
                    if(u_xlatb0){
                        SV_Target0 = vec4(vec4(_BloomIntensity4, _BloomIntensity4, _BloomIntensity4, _BloomIntensity4));
                        return;
                    } else {
#ifdef UNITY_ADRENO_ES3
                        u_xlatb0 = !!(4.5<u_xlat16_1);
#else
                        u_xlatb0 = 4.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                        u_xlatb2 = !!(u_xlat16_1<5.5);
#else
                        u_xlatb2 = u_xlat16_1<5.5;
#endif
                        u_xlatb0 = u_xlatb2 && u_xlatb0;
                        if(u_xlatb0){
                            SV_Target0 = vec4(vec4(_BloomIntensity5, _BloomIntensity5, _BloomIntensity5, _BloomIntensity5));
                            return;
                        } else {
#ifdef UNITY_ADRENO_ES3
                            u_xlatb0 = !!(5.5<u_xlat16_1);
#else
                            u_xlatb0 = 5.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
                            u_xlatb2 = !!(u_xlat16_1<6.5);
#else
                            u_xlatb2 = u_xlat16_1<6.5;
#endif
                            u_xlatb0 = u_xlatb2 && u_xlatb0;
                            if(u_xlatb0){
                                SV_Target0 = vec4(vec4(_BloomIntensity6, _BloomIntensity6, _BloomIntensity6, _BloomIntensity6));
                                return;
                            } else {
                                SV_Target0 = vec4(_BloomIntensity7);
                                return;
                            //ENDIF
                            }
                        //ENDIF
                        }
                    //ENDIF
                    }
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
    //ENDIF
    }
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" }
""
}
}
}
 Pass {
  Name "OPAQUEOUTLINE"
  Tags { "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  Cull Front
  GpuProgramID 90835
Program "vp" {
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec4 u_xlatb0;
mediump float u_xlat16_1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
bvec2 u_xlatb8;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.x = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0.x * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.5<u_xlat16_1);
#else
    u_xlatb0.x = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_1<1.5);
#else
    u_xlatb4 = u_xlat16_1<1.5;
#endif
    u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat16_5.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(1.5<u_xlat16_1);
#else
        u_xlatb0.x = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(u_xlat16_1<2.5);
#else
        u_xlatb4 = u_xlat16_1<2.5;
#endif
        u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
        if(u_xlatb0.x){
            u_xlat16_5.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb0 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb2 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb0.x = u_xlatb0.x && u_xlatb2.x;
            u_xlatb0.y = u_xlatb0.y && u_xlatb2.y;
            u_xlatb0.z = u_xlatb0.z && u_xlatb2.z;
            u_xlatb0.w = u_xlatb0.w && u_xlatb2.w;
            u_xlat16_3.xyz = (u_xlatb0.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_3.xyz = (u_xlatb0.z) ? _OutlineColor5.xyz : u_xlat16_3.xyz;
            u_xlat16_3.xyz = (u_xlatb0.y) ? _OutlineColor4.xyz : u_xlat16_3.xyz;
            u_xlat16_5.xyz = (u_xlatb0.x) ? _OutlineColor3.xyz : u_xlat16_3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec4 u_xlatb0;
mediump float u_xlat16_1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
bvec2 u_xlatb8;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.x = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0.x * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.5<u_xlat16_1);
#else
    u_xlatb0.x = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_1<1.5);
#else
    u_xlatb4 = u_xlat16_1<1.5;
#endif
    u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat16_5.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(1.5<u_xlat16_1);
#else
        u_xlatb0.x = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(u_xlat16_1<2.5);
#else
        u_xlatb4 = u_xlat16_1<2.5;
#endif
        u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
        if(u_xlatb0.x){
            u_xlat16_5.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb0 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb2 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb0.x = u_xlatb0.x && u_xlatb2.x;
            u_xlatb0.y = u_xlatb0.y && u_xlatb2.y;
            u_xlatb0.z = u_xlatb0.z && u_xlatb2.z;
            u_xlatb0.w = u_xlatb0.w && u_xlatb2.w;
            u_xlat16_3.xyz = (u_xlatb0.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_3.xyz = (u_xlatb0.z) ? _OutlineColor5.xyz : u_xlat16_3.xyz;
            u_xlat16_3.xyz = (u_xlatb0.y) ? _OutlineColor4.xyz : u_xlat16_3.xyz;
            u_xlat16_5.xyz = (u_xlatb0.x) ? _OutlineColor3.xyz : u_xlat16_3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec4 u_xlatb0;
mediump float u_xlat16_1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
bvec2 u_xlatb8;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.x = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0.x * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.5<u_xlat16_1);
#else
    u_xlatb0.x = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_1<1.5);
#else
    u_xlatb4 = u_xlat16_1<1.5;
#endif
    u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat16_5.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(1.5<u_xlat16_1);
#else
        u_xlatb0.x = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(u_xlat16_1<2.5);
#else
        u_xlatb4 = u_xlat16_1<2.5;
#endif
        u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
        if(u_xlatb0.x){
            u_xlat16_5.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb0 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb2 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb0.x = u_xlatb0.x && u_xlatb2.x;
            u_xlatb0.y = u_xlatb0.y && u_xlatb2.y;
            u_xlatb0.z = u_xlatb0.z && u_xlatb2.z;
            u_xlatb0.w = u_xlatb0.w && u_xlatb2.w;
            u_xlat16_3.xyz = (u_xlatb0.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_3.xyz = (u_xlatb0.z) ? _OutlineColor5.xyz : u_xlat16_3.xyz;
            u_xlat16_3.xyz = (u_xlatb0.y) ? _OutlineColor4.xyz : u_xlat16_3.xyz;
            u_xlat16_5.xyz = (u_xlatb0.x) ? _OutlineColor3.xyz : u_xlat16_3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec4 u_xlatb0;
mediump float u_xlat16_1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
bvec2 u_xlatb8;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.x = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0.x * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.5<u_xlat16_1);
#else
    u_xlatb0.x = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_1<1.5);
#else
    u_xlatb4 = u_xlat16_1<1.5;
#endif
    u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat16_5.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(1.5<u_xlat16_1);
#else
        u_xlatb0.x = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(u_xlat16_1<2.5);
#else
        u_xlatb4 = u_xlat16_1<2.5;
#endif
        u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
        if(u_xlatb0.x){
            u_xlat16_5.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb0 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb2 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb0.x = u_xlatb0.x && u_xlatb2.x;
            u_xlatb0.y = u_xlatb0.y && u_xlatb2.y;
            u_xlatb0.z = u_xlatb0.z && u_xlatb2.z;
            u_xlatb0.w = u_xlatb0.w && u_xlatb2.w;
            u_xlat16_3.xyz = (u_xlatb0.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_3.xyz = (u_xlatb0.z) ? _OutlineColor5.xyz : u_xlat16_3.xyz;
            u_xlat16_3.xyz = (u_xlatb0.y) ? _OutlineColor4.xyz : u_xlat16_3.xyz;
            u_xlat16_5.xyz = (u_xlatb0.x) ? _OutlineColor3.xyz : u_xlat16_3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec4 u_xlatb0;
mediump float u_xlat16_1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
bvec2 u_xlatb8;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.x = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0.x * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.5<u_xlat16_1);
#else
    u_xlatb0.x = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_1<1.5);
#else
    u_xlatb4 = u_xlat16_1<1.5;
#endif
    u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat16_5.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(1.5<u_xlat16_1);
#else
        u_xlatb0.x = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(u_xlat16_1<2.5);
#else
        u_xlatb4 = u_xlat16_1<2.5;
#endif
        u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
        if(u_xlatb0.x){
            u_xlat16_5.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb0 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb2 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb0.x = u_xlatb0.x && u_xlatb2.x;
            u_xlatb0.y = u_xlatb0.y && u_xlatb2.y;
            u_xlatb0.z = u_xlatb0.z && u_xlatb2.z;
            u_xlatb0.w = u_xlatb0.w && u_xlatb2.w;
            u_xlat16_3.xyz = (u_xlatb0.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_3.xyz = (u_xlatb0.z) ? _OutlineColor5.xyz : u_xlat16_3.xyz;
            u_xlat16_3.xyz = (u_xlatb0.y) ? _OutlineColor4.xyz : u_xlat16_3.xyz;
            u_xlat16_5.xyz = (u_xlatb0.x) ? _OutlineColor3.xyz : u_xlat16_3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec4 u_xlatb0;
mediump float u_xlat16_1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
bvec2 u_xlatb8;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.x = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0.x * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.5<u_xlat16_1);
#else
    u_xlatb0.x = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_1<1.5);
#else
    u_xlatb4 = u_xlat16_1<1.5;
#endif
    u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat16_5.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(1.5<u_xlat16_1);
#else
        u_xlatb0.x = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(u_xlat16_1<2.5);
#else
        u_xlatb4 = u_xlat16_1<2.5;
#endif
        u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
        if(u_xlatb0.x){
            u_xlat16_5.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb0 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb2 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb0.x = u_xlatb0.x && u_xlatb2.x;
            u_xlatb0.y = u_xlatb0.y && u_xlatb2.y;
            u_xlatb0.z = u_xlatb0.z && u_xlatb2.z;
            u_xlatb0.w = u_xlatb0.w && u_xlatb2.w;
            u_xlat16_3.xyz = (u_xlatb0.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_3.xyz = (u_xlatb0.z) ? _OutlineColor5.xyz : u_xlat16_3.xyz;
            u_xlat16_3.xyz = (u_xlatb0.y) ? _OutlineColor4.xyz : u_xlat16_3.xyz;
            u_xlat16_5.xyz = (u_xlatb0.x) ? _OutlineColor3.xyz : u_xlat16_3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec4 u_xlatb0;
mediump float u_xlat16_1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
bvec2 u_xlatb8;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.x = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0.x * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.5<u_xlat16_1);
#else
    u_xlatb0.x = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_1<1.5);
#else
    u_xlatb4 = u_xlat16_1<1.5;
#endif
    u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat16_5.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(1.5<u_xlat16_1);
#else
        u_xlatb0.x = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(u_xlat16_1<2.5);
#else
        u_xlatb4 = u_xlat16_1<2.5;
#endif
        u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
        if(u_xlatb0.x){
            u_xlat16_5.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb0 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb2 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb0.x = u_xlatb0.x && u_xlatb2.x;
            u_xlatb0.y = u_xlatb0.y && u_xlatb2.y;
            u_xlatb0.z = u_xlatb0.z && u_xlatb2.z;
            u_xlatb0.w = u_xlatb0.w && u_xlatb2.w;
            u_xlat16_3.xyz = (u_xlatb0.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_3.xyz = (u_xlatb0.z) ? _OutlineColor5.xyz : u_xlat16_3.xyz;
            u_xlat16_3.xyz = (u_xlatb0.y) ? _OutlineColor4.xyz : u_xlat16_3.xyz;
            u_xlat16_5.xyz = (u_xlatb0.x) ? _OutlineColor3.xyz : u_xlat16_3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec4 u_xlatb0;
mediump float u_xlat16_1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
bvec2 u_xlatb8;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.x = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0.x * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.5<u_xlat16_1);
#else
    u_xlatb0.x = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_1<1.5);
#else
    u_xlatb4 = u_xlat16_1<1.5;
#endif
    u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat16_5.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(1.5<u_xlat16_1);
#else
        u_xlatb0.x = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(u_xlat16_1<2.5);
#else
        u_xlatb4 = u_xlat16_1<2.5;
#endif
        u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
        if(u_xlatb0.x){
            u_xlat16_5.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb0 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb2 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb0.x = u_xlatb0.x && u_xlatb2.x;
            u_xlatb0.y = u_xlatb0.y && u_xlatb2.y;
            u_xlatb0.z = u_xlatb0.z && u_xlatb2.z;
            u_xlatb0.w = u_xlatb0.w && u_xlatb2.w;
            u_xlat16_3.xyz = (u_xlatb0.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_3.xyz = (u_xlatb0.z) ? _OutlineColor5.xyz : u_xlat16_3.xyz;
            u_xlat16_3.xyz = (u_xlatb0.y) ? _OutlineColor4.xyz : u_xlat16_3.xyz;
            u_xlat16_5.xyz = (u_xlatb0.x) ? _OutlineColor3.xyz : u_xlat16_3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec4 u_xlatb0;
mediump float u_xlat16_1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
bvec2 u_xlatb8;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.x = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0.x * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.5<u_xlat16_1);
#else
    u_xlatb0.x = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_1<1.5);
#else
    u_xlatb4 = u_xlat16_1<1.5;
#endif
    u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat16_5.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(1.5<u_xlat16_1);
#else
        u_xlatb0.x = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(u_xlat16_1<2.5);
#else
        u_xlatb4 = u_xlat16_1<2.5;
#endif
        u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
        if(u_xlatb0.x){
            u_xlat16_5.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb0 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb2 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb0.x = u_xlatb0.x && u_xlatb2.x;
            u_xlatb0.y = u_xlatb0.y && u_xlatb2.y;
            u_xlatb0.z = u_xlatb0.z && u_xlatb2.z;
            u_xlatb0.w = u_xlatb0.w && u_xlatb2.w;
            u_xlat16_3.xyz = (u_xlatb0.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_3.xyz = (u_xlatb0.z) ? _OutlineColor5.xyz : u_xlat16_3.xyz;
            u_xlat16_3.xyz = (u_xlatb0.y) ? _OutlineColor4.xyz : u_xlat16_3.xyz;
            u_xlat16_5.xyz = (u_xlatb0.x) ? _OutlineColor3.xyz : u_xlat16_3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec2 u_xlatb8;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati9 = int(u_xlat16_1);
    if((u_xlati9)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb9){
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb9 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb9){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb8.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb8.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat9 = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat9 = vs_TEXCOORD2.z * 17.0 + (-u_xlat9);
            u_xlat9 = u_xlat9 + 0.99000001;
            u_xlat9 = floor(u_xlat9);
            u_xlat9 = max(u_xlat9, 0.0);
            u_xlati9 = int(u_xlat9);
            if((u_xlati9)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec2 u_xlatb8;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati9 = int(u_xlat16_1);
    if((u_xlati9)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb9){
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb9 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb9){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb8.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb8.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat9 = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat9 = vs_TEXCOORD2.z * 17.0 + (-u_xlat9);
            u_xlat9 = u_xlat9 + 0.99000001;
            u_xlat9 = floor(u_xlat9);
            u_xlat9 = max(u_xlat9, 0.0);
            u_xlati9 = int(u_xlat9);
            if((u_xlati9)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec2 u_xlatb8;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati9 = int(u_xlat16_1);
    if((u_xlati9)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb9){
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb9 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb9){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb8.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb8.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat9 = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat9 = vs_TEXCOORD2.z * 17.0 + (-u_xlat9);
            u_xlat9 = u_xlat9 + 0.99000001;
            u_xlat9 = floor(u_xlat9);
            u_xlat9 = max(u_xlat9, 0.0);
            u_xlati9 = int(u_xlat9);
            if((u_xlati9)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec2 u_xlatb8;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati9 = int(u_xlat16_1);
    if((u_xlati9)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb9){
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb9 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb9){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb8.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb8.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat9 = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat9 = vs_TEXCOORD2.z * 17.0 + (-u_xlat9);
            u_xlat9 = u_xlat9 + 0.99000001;
            u_xlat9 = floor(u_xlat9);
            u_xlat9 = max(u_xlat9, 0.0);
            u_xlati9 = int(u_xlat9);
            if((u_xlati9)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec2 u_xlatb8;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati9 = int(u_xlat16_1);
    if((u_xlati9)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb9){
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb9 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb9){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb8.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb8.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat9 = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat9 = vs_TEXCOORD2.z * 17.0 + (-u_xlat9);
            u_xlat9 = u_xlat9 + 0.99000001;
            u_xlat9 = floor(u_xlat9);
            u_xlat9 = max(u_xlat9, 0.0);
            u_xlati9 = int(u_xlat9);
            if((u_xlati9)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec2 u_xlatb8;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati9 = int(u_xlat16_1);
    if((u_xlati9)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb9){
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb9 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb9){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb8.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb8.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat9 = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat9 = vs_TEXCOORD2.z * 17.0 + (-u_xlat9);
            u_xlat9 = u_xlat9 + 0.99000001;
            u_xlat9 = floor(u_xlat9);
            u_xlat9 = max(u_xlat9, 0.0);
            u_xlati9 = int(u_xlat9);
            if((u_xlati9)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec2 u_xlatb8;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati9 = int(u_xlat16_1);
    if((u_xlati9)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb9){
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb9 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb9){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb8.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb8.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat9 = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat9 = vs_TEXCOORD2.z * 17.0 + (-u_xlat9);
            u_xlat9 = u_xlat9 + 0.99000001;
            u_xlat9 = floor(u_xlat9);
            u_xlat9 = max(u_xlat9, 0.0);
            u_xlati9 = int(u_xlat9);
            if((u_xlati9)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec2 u_xlatb8;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati9 = int(u_xlat16_1);
    if((u_xlati9)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb9){
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb9 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb9){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb8.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb8.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat9 = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat9 = vs_TEXCOORD2.z * 17.0 + (-u_xlat9);
            u_xlat9 = u_xlat9 + 0.99000001;
            u_xlat9 = floor(u_xlat9);
            u_xlat9 = max(u_xlat9, 0.0);
            u_xlati9 = int(u_xlat9);
            if((u_xlati9)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec2 u_xlatb8;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati9 = int(u_xlat16_1);
    if((u_xlati9)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb9){
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb9 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb9){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb8.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb8.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat9 = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat9 = vs_TEXCOORD2.z * 17.0 + (-u_xlat9);
            u_xlat9 = u_xlat9 + 0.99000001;
            u_xlat9 = floor(u_xlat9);
            u_xlat9 = max(u_xlat9, 0.0);
            u_xlati9 = int(u_xlat9);
            if((u_xlati9)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
bvec2 u_xlatb12;
float u_xlat15;
lowp float u_xlat10_15;
int u_xlati15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati15 = int(u_xlat16_1);
    if((u_xlati15)==0){discard;}
    u_xlat10_15 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_15 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<u_xlat16_1);
#else
    u_xlatb15 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1<1.5);
#else
    u_xlatb2.x = u_xlat16_1<1.5;
#endif
    u_xlatb15 = u_xlatb15 && u_xlatb2.x;
    if(u_xlatb15){
        u_xlat16_6.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.5<u_xlat16_1);
#else
        u_xlatb15 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1<2.5);
#else
        u_xlatb2.x = u_xlat16_1<2.5;
#endif
        u_xlatb15 = u_xlatb15 && u_xlatb2.x;
        if(u_xlatb15){
            u_xlat16_6.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb3 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
            u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
            u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
            u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
            u_xlat16_4.xyz = (u_xlatb2.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_4.xyz = (u_xlatb2.z) ? _OutlineColor5.xyz : u_xlat16_4.xyz;
            u_xlat16_4.xyz = (u_xlatb2.y) ? _OutlineColor4.xyz : u_xlat16_4.xyz;
            u_xlat16_6.xyz = (u_xlatb2.x) ? _OutlineColor3.xyz : u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb15){
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb15 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb15){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb12.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb12.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat15 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat15 = vs_TEXCOORD2.z * 17.0 + (-u_xlat15);
            u_xlat15 = u_xlat15 + 0.99000001;
            u_xlat15 = floor(u_xlat15);
            u_xlat15 = max(u_xlat15, 0.0);
            u_xlati15 = int(u_xlat15);
            if((u_xlati15)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
bvec2 u_xlatb12;
float u_xlat15;
lowp float u_xlat10_15;
int u_xlati15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati15 = int(u_xlat16_1);
    if((u_xlati15)==0){discard;}
    u_xlat10_15 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_15 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<u_xlat16_1);
#else
    u_xlatb15 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1<1.5);
#else
    u_xlatb2.x = u_xlat16_1<1.5;
#endif
    u_xlatb15 = u_xlatb15 && u_xlatb2.x;
    if(u_xlatb15){
        u_xlat16_6.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.5<u_xlat16_1);
#else
        u_xlatb15 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1<2.5);
#else
        u_xlatb2.x = u_xlat16_1<2.5;
#endif
        u_xlatb15 = u_xlatb15 && u_xlatb2.x;
        if(u_xlatb15){
            u_xlat16_6.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb3 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
            u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
            u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
            u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
            u_xlat16_4.xyz = (u_xlatb2.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_4.xyz = (u_xlatb2.z) ? _OutlineColor5.xyz : u_xlat16_4.xyz;
            u_xlat16_4.xyz = (u_xlatb2.y) ? _OutlineColor4.xyz : u_xlat16_4.xyz;
            u_xlat16_6.xyz = (u_xlatb2.x) ? _OutlineColor3.xyz : u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb15){
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb15 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb15){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb12.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb12.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat15 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat15 = vs_TEXCOORD2.z * 17.0 + (-u_xlat15);
            u_xlat15 = u_xlat15 + 0.99000001;
            u_xlat15 = floor(u_xlat15);
            u_xlat15 = max(u_xlat15, 0.0);
            u_xlati15 = int(u_xlat15);
            if((u_xlati15)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
bvec2 u_xlatb12;
float u_xlat15;
lowp float u_xlat10_15;
int u_xlati15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati15 = int(u_xlat16_1);
    if((u_xlati15)==0){discard;}
    u_xlat10_15 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_15 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<u_xlat16_1);
#else
    u_xlatb15 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1<1.5);
#else
    u_xlatb2.x = u_xlat16_1<1.5;
#endif
    u_xlatb15 = u_xlatb15 && u_xlatb2.x;
    if(u_xlatb15){
        u_xlat16_6.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.5<u_xlat16_1);
#else
        u_xlatb15 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1<2.5);
#else
        u_xlatb2.x = u_xlat16_1<2.5;
#endif
        u_xlatb15 = u_xlatb15 && u_xlatb2.x;
        if(u_xlatb15){
            u_xlat16_6.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb3 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
            u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
            u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
            u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
            u_xlat16_4.xyz = (u_xlatb2.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_4.xyz = (u_xlatb2.z) ? _OutlineColor5.xyz : u_xlat16_4.xyz;
            u_xlat16_4.xyz = (u_xlatb2.y) ? _OutlineColor4.xyz : u_xlat16_4.xyz;
            u_xlat16_6.xyz = (u_xlatb2.x) ? _OutlineColor3.xyz : u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb15){
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb15 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb15){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb12.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb12.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat15 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat15 = vs_TEXCOORD2.z * 17.0 + (-u_xlat15);
            u_xlat15 = u_xlat15 + 0.99000001;
            u_xlat15 = floor(u_xlat15);
            u_xlat15 = max(u_xlat15, 0.0);
            u_xlati15 = int(u_xlat15);
            if((u_xlati15)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
bvec2 u_xlatb12;
float u_xlat15;
lowp float u_xlat10_15;
int u_xlati15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati15 = int(u_xlat16_1);
    if((u_xlati15)==0){discard;}
    u_xlat10_15 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_15 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<u_xlat16_1);
#else
    u_xlatb15 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1<1.5);
#else
    u_xlatb2.x = u_xlat16_1<1.5;
#endif
    u_xlatb15 = u_xlatb15 && u_xlatb2.x;
    if(u_xlatb15){
        u_xlat16_6.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.5<u_xlat16_1);
#else
        u_xlatb15 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1<2.5);
#else
        u_xlatb2.x = u_xlat16_1<2.5;
#endif
        u_xlatb15 = u_xlatb15 && u_xlatb2.x;
        if(u_xlatb15){
            u_xlat16_6.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb3 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
            u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
            u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
            u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
            u_xlat16_4.xyz = (u_xlatb2.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_4.xyz = (u_xlatb2.z) ? _OutlineColor5.xyz : u_xlat16_4.xyz;
            u_xlat16_4.xyz = (u_xlatb2.y) ? _OutlineColor4.xyz : u_xlat16_4.xyz;
            u_xlat16_6.xyz = (u_xlatb2.x) ? _OutlineColor3.xyz : u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb15){
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb15 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb15){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb12.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb12.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat15 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat15 = vs_TEXCOORD2.z * 17.0 + (-u_xlat15);
            u_xlat15 = u_xlat15 + 0.99000001;
            u_xlat15 = floor(u_xlat15);
            u_xlat15 = max(u_xlat15, 0.0);
            u_xlati15 = int(u_xlat15);
            if((u_xlati15)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
bvec2 u_xlatb12;
float u_xlat15;
lowp float u_xlat10_15;
int u_xlati15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati15 = int(u_xlat16_1);
    if((u_xlati15)==0){discard;}
    u_xlat10_15 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_15 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<u_xlat16_1);
#else
    u_xlatb15 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1<1.5);
#else
    u_xlatb2.x = u_xlat16_1<1.5;
#endif
    u_xlatb15 = u_xlatb15 && u_xlatb2.x;
    if(u_xlatb15){
        u_xlat16_6.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.5<u_xlat16_1);
#else
        u_xlatb15 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1<2.5);
#else
        u_xlatb2.x = u_xlat16_1<2.5;
#endif
        u_xlatb15 = u_xlatb15 && u_xlatb2.x;
        if(u_xlatb15){
            u_xlat16_6.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb3 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
            u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
            u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
            u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
            u_xlat16_4.xyz = (u_xlatb2.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_4.xyz = (u_xlatb2.z) ? _OutlineColor5.xyz : u_xlat16_4.xyz;
            u_xlat16_4.xyz = (u_xlatb2.y) ? _OutlineColor4.xyz : u_xlat16_4.xyz;
            u_xlat16_6.xyz = (u_xlatb2.x) ? _OutlineColor3.xyz : u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb15){
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb15 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb15){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb12.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb12.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat15 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat15 = vs_TEXCOORD2.z * 17.0 + (-u_xlat15);
            u_xlat15 = u_xlat15 + 0.99000001;
            u_xlat15 = floor(u_xlat15);
            u_xlat15 = max(u_xlat15, 0.0);
            u_xlati15 = int(u_xlat15);
            if((u_xlati15)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
bvec2 u_xlatb12;
float u_xlat15;
lowp float u_xlat10_15;
int u_xlati15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati15 = int(u_xlat16_1);
    if((u_xlati15)==0){discard;}
    u_xlat10_15 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_15 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<u_xlat16_1);
#else
    u_xlatb15 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1<1.5);
#else
    u_xlatb2.x = u_xlat16_1<1.5;
#endif
    u_xlatb15 = u_xlatb15 && u_xlatb2.x;
    if(u_xlatb15){
        u_xlat16_6.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.5<u_xlat16_1);
#else
        u_xlatb15 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1<2.5);
#else
        u_xlatb2.x = u_xlat16_1<2.5;
#endif
        u_xlatb15 = u_xlatb15 && u_xlatb2.x;
        if(u_xlatb15){
            u_xlat16_6.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb3 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
            u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
            u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
            u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
            u_xlat16_4.xyz = (u_xlatb2.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_4.xyz = (u_xlatb2.z) ? _OutlineColor5.xyz : u_xlat16_4.xyz;
            u_xlat16_4.xyz = (u_xlatb2.y) ? _OutlineColor4.xyz : u_xlat16_4.xyz;
            u_xlat16_6.xyz = (u_xlatb2.x) ? _OutlineColor3.xyz : u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb15){
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb15 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb15){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb12.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb12.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat15 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat15 = vs_TEXCOORD2.z * 17.0 + (-u_xlat15);
            u_xlat15 = u_xlat15 + 0.99000001;
            u_xlat15 = floor(u_xlat15);
            u_xlat15 = max(u_xlat15, 0.0);
            u_xlati15 = int(u_xlat15);
            if((u_xlati15)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
bvec2 u_xlatb12;
float u_xlat15;
lowp float u_xlat10_15;
int u_xlati15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati15 = int(u_xlat16_1);
    if((u_xlati15)==0){discard;}
    u_xlat10_15 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_15 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<u_xlat16_1);
#else
    u_xlatb15 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1<1.5);
#else
    u_xlatb2.x = u_xlat16_1<1.5;
#endif
    u_xlatb15 = u_xlatb15 && u_xlatb2.x;
    if(u_xlatb15){
        u_xlat16_6.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.5<u_xlat16_1);
#else
        u_xlatb15 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1<2.5);
#else
        u_xlatb2.x = u_xlat16_1<2.5;
#endif
        u_xlatb15 = u_xlatb15 && u_xlatb2.x;
        if(u_xlatb15){
            u_xlat16_6.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb3 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
            u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
            u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
            u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
            u_xlat16_4.xyz = (u_xlatb2.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_4.xyz = (u_xlatb2.z) ? _OutlineColor5.xyz : u_xlat16_4.xyz;
            u_xlat16_4.xyz = (u_xlatb2.y) ? _OutlineColor4.xyz : u_xlat16_4.xyz;
            u_xlat16_6.xyz = (u_xlatb2.x) ? _OutlineColor3.xyz : u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb15){
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb15 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb15){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb12.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb12.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat15 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat15 = vs_TEXCOORD2.z * 17.0 + (-u_xlat15);
            u_xlat15 = u_xlat15 + 0.99000001;
            u_xlat15 = floor(u_xlat15);
            u_xlat15 = max(u_xlat15, 0.0);
            u_xlati15 = int(u_xlat15);
            if((u_xlati15)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
bvec2 u_xlatb12;
float u_xlat15;
lowp float u_xlat10_15;
int u_xlati15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati15 = int(u_xlat16_1);
    if((u_xlati15)==0){discard;}
    u_xlat10_15 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_15 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<u_xlat16_1);
#else
    u_xlatb15 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1<1.5);
#else
    u_xlatb2.x = u_xlat16_1<1.5;
#endif
    u_xlatb15 = u_xlatb15 && u_xlatb2.x;
    if(u_xlatb15){
        u_xlat16_6.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.5<u_xlat16_1);
#else
        u_xlatb15 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1<2.5);
#else
        u_xlatb2.x = u_xlat16_1<2.5;
#endif
        u_xlatb15 = u_xlatb15 && u_xlatb2.x;
        if(u_xlatb15){
            u_xlat16_6.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb3 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
            u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
            u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
            u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
            u_xlat16_4.xyz = (u_xlatb2.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_4.xyz = (u_xlatb2.z) ? _OutlineColor5.xyz : u_xlat16_4.xyz;
            u_xlat16_4.xyz = (u_xlatb2.y) ? _OutlineColor4.xyz : u_xlat16_4.xyz;
            u_xlat16_6.xyz = (u_xlatb2.x) ? _OutlineColor3.xyz : u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb15){
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb15 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb15){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb12.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb12.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat15 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat15 = vs_TEXCOORD2.z * 17.0 + (-u_xlat15);
            u_xlat15 = u_xlat15 + 0.99000001;
            u_xlat15 = floor(u_xlat15);
            u_xlat15 = max(u_xlat15, 0.0);
            u_xlati15 = int(u_xlat15);
            if((u_xlati15)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
bvec2 u_xlatb12;
float u_xlat15;
lowp float u_xlat10_15;
int u_xlati15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati15 = int(u_xlat16_1);
    if((u_xlati15)==0){discard;}
    u_xlat10_15 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_15 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<u_xlat16_1);
#else
    u_xlatb15 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1<1.5);
#else
    u_xlatb2.x = u_xlat16_1<1.5;
#endif
    u_xlatb15 = u_xlatb15 && u_xlatb2.x;
    if(u_xlatb15){
        u_xlat16_6.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.5<u_xlat16_1);
#else
        u_xlatb15 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1<2.5);
#else
        u_xlatb2.x = u_xlat16_1<2.5;
#endif
        u_xlatb15 = u_xlatb15 && u_xlatb2.x;
        if(u_xlatb15){
            u_xlat16_6.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb3 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
            u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
            u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
            u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
            u_xlat16_4.xyz = (u_xlatb2.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_4.xyz = (u_xlatb2.z) ? _OutlineColor5.xyz : u_xlat16_4.xyz;
            u_xlat16_4.xyz = (u_xlatb2.y) ? _OutlineColor4.xyz : u_xlat16_4.xyz;
            u_xlat16_6.xyz = (u_xlatb2.x) ? _OutlineColor3.xyz : u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb15){
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb15 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb15){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb12.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb12.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat15 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat15 = vs_TEXCOORD2.z * 17.0 + (-u_xlat15);
            u_xlat15 = u_xlat15 + 0.99000001;
            u_xlat15 = floor(u_xlat15);
            u_xlat15 = max(u_xlat15, 0.0);
            u_xlati15 = int(u_xlat15);
            if((u_xlati15)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
}
}
 Pass {
  Name "OPAQUEVEXTEXSCALEOUTLINE"
  Tags { "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  Cull Front
  GpuProgramID 180674
Program "vp" {
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec4 u_xlatb0;
mediump float u_xlat16_1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
bvec2 u_xlatb8;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.x = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0.x * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.5<u_xlat16_1);
#else
    u_xlatb0.x = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_1<1.5);
#else
    u_xlatb4 = u_xlat16_1<1.5;
#endif
    u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat16_5.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(1.5<u_xlat16_1);
#else
        u_xlatb0.x = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(u_xlat16_1<2.5);
#else
        u_xlatb4 = u_xlat16_1<2.5;
#endif
        u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
        if(u_xlatb0.x){
            u_xlat16_5.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb0 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb2 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb0.x = u_xlatb0.x && u_xlatb2.x;
            u_xlatb0.y = u_xlatb0.y && u_xlatb2.y;
            u_xlatb0.z = u_xlatb0.z && u_xlatb2.z;
            u_xlatb0.w = u_xlatb0.w && u_xlatb2.w;
            u_xlat16_3.xyz = (u_xlatb0.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_3.xyz = (u_xlatb0.z) ? _OutlineColor5.xyz : u_xlat16_3.xyz;
            u_xlat16_3.xyz = (u_xlatb0.y) ? _OutlineColor4.xyz : u_xlat16_3.xyz;
            u_xlat16_5.xyz = (u_xlatb0.x) ? _OutlineColor3.xyz : u_xlat16_3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec4 u_xlatb0;
mediump float u_xlat16_1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
bvec2 u_xlatb8;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.x = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0.x * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.5<u_xlat16_1);
#else
    u_xlatb0.x = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_1<1.5);
#else
    u_xlatb4 = u_xlat16_1<1.5;
#endif
    u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat16_5.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(1.5<u_xlat16_1);
#else
        u_xlatb0.x = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(u_xlat16_1<2.5);
#else
        u_xlatb4 = u_xlat16_1<2.5;
#endif
        u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
        if(u_xlatb0.x){
            u_xlat16_5.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb0 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb2 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb0.x = u_xlatb0.x && u_xlatb2.x;
            u_xlatb0.y = u_xlatb0.y && u_xlatb2.y;
            u_xlatb0.z = u_xlatb0.z && u_xlatb2.z;
            u_xlatb0.w = u_xlatb0.w && u_xlatb2.w;
            u_xlat16_3.xyz = (u_xlatb0.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_3.xyz = (u_xlatb0.z) ? _OutlineColor5.xyz : u_xlat16_3.xyz;
            u_xlat16_3.xyz = (u_xlatb0.y) ? _OutlineColor4.xyz : u_xlat16_3.xyz;
            u_xlat16_5.xyz = (u_xlatb0.x) ? _OutlineColor3.xyz : u_xlat16_3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec4 u_xlatb0;
mediump float u_xlat16_1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
bvec2 u_xlatb8;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.x = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0.x * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.5<u_xlat16_1);
#else
    u_xlatb0.x = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_1<1.5);
#else
    u_xlatb4 = u_xlat16_1<1.5;
#endif
    u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat16_5.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(1.5<u_xlat16_1);
#else
        u_xlatb0.x = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(u_xlat16_1<2.5);
#else
        u_xlatb4 = u_xlat16_1<2.5;
#endif
        u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
        if(u_xlatb0.x){
            u_xlat16_5.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb0 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb2 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb0.x = u_xlatb0.x && u_xlatb2.x;
            u_xlatb0.y = u_xlatb0.y && u_xlatb2.y;
            u_xlatb0.z = u_xlatb0.z && u_xlatb2.z;
            u_xlatb0.w = u_xlatb0.w && u_xlatb2.w;
            u_xlat16_3.xyz = (u_xlatb0.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_3.xyz = (u_xlatb0.z) ? _OutlineColor5.xyz : u_xlat16_3.xyz;
            u_xlat16_3.xyz = (u_xlatb0.y) ? _OutlineColor4.xyz : u_xlat16_3.xyz;
            u_xlat16_5.xyz = (u_xlatb0.x) ? _OutlineColor3.xyz : u_xlat16_3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec4 u_xlatb0;
mediump float u_xlat16_1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
bvec2 u_xlatb8;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.x = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0.x * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.5<u_xlat16_1);
#else
    u_xlatb0.x = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_1<1.5);
#else
    u_xlatb4 = u_xlat16_1<1.5;
#endif
    u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat16_5.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(1.5<u_xlat16_1);
#else
        u_xlatb0.x = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(u_xlat16_1<2.5);
#else
        u_xlatb4 = u_xlat16_1<2.5;
#endif
        u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
        if(u_xlatb0.x){
            u_xlat16_5.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb0 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb2 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb0.x = u_xlatb0.x && u_xlatb2.x;
            u_xlatb0.y = u_xlatb0.y && u_xlatb2.y;
            u_xlatb0.z = u_xlatb0.z && u_xlatb2.z;
            u_xlatb0.w = u_xlatb0.w && u_xlatb2.w;
            u_xlat16_3.xyz = (u_xlatb0.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_3.xyz = (u_xlatb0.z) ? _OutlineColor5.xyz : u_xlat16_3.xyz;
            u_xlat16_3.xyz = (u_xlatb0.y) ? _OutlineColor4.xyz : u_xlat16_3.xyz;
            u_xlat16_5.xyz = (u_xlatb0.x) ? _OutlineColor3.xyz : u_xlat16_3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec4 u_xlatb0;
mediump float u_xlat16_1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
bvec2 u_xlatb8;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.x = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0.x * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.5<u_xlat16_1);
#else
    u_xlatb0.x = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_1<1.5);
#else
    u_xlatb4 = u_xlat16_1<1.5;
#endif
    u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat16_5.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(1.5<u_xlat16_1);
#else
        u_xlatb0.x = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(u_xlat16_1<2.5);
#else
        u_xlatb4 = u_xlat16_1<2.5;
#endif
        u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
        if(u_xlatb0.x){
            u_xlat16_5.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb0 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb2 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb0.x = u_xlatb0.x && u_xlatb2.x;
            u_xlatb0.y = u_xlatb0.y && u_xlatb2.y;
            u_xlatb0.z = u_xlatb0.z && u_xlatb2.z;
            u_xlatb0.w = u_xlatb0.w && u_xlatb2.w;
            u_xlat16_3.xyz = (u_xlatb0.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_3.xyz = (u_xlatb0.z) ? _OutlineColor5.xyz : u_xlat16_3.xyz;
            u_xlat16_3.xyz = (u_xlatb0.y) ? _OutlineColor4.xyz : u_xlat16_3.xyz;
            u_xlat16_5.xyz = (u_xlatb0.x) ? _OutlineColor3.xyz : u_xlat16_3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec4 u_xlatb0;
mediump float u_xlat16_1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
bvec2 u_xlatb8;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.x = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0.x * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.5<u_xlat16_1);
#else
    u_xlatb0.x = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_1<1.5);
#else
    u_xlatb4 = u_xlat16_1<1.5;
#endif
    u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat16_5.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(1.5<u_xlat16_1);
#else
        u_xlatb0.x = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(u_xlat16_1<2.5);
#else
        u_xlatb4 = u_xlat16_1<2.5;
#endif
        u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
        if(u_xlatb0.x){
            u_xlat16_5.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb0 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb2 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb0.x = u_xlatb0.x && u_xlatb2.x;
            u_xlatb0.y = u_xlatb0.y && u_xlatb2.y;
            u_xlatb0.z = u_xlatb0.z && u_xlatb2.z;
            u_xlatb0.w = u_xlatb0.w && u_xlatb2.w;
            u_xlat16_3.xyz = (u_xlatb0.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_3.xyz = (u_xlatb0.z) ? _OutlineColor5.xyz : u_xlat16_3.xyz;
            u_xlat16_3.xyz = (u_xlatb0.y) ? _OutlineColor4.xyz : u_xlat16_3.xyz;
            u_xlat16_5.xyz = (u_xlatb0.x) ? _OutlineColor3.xyz : u_xlat16_3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec4 u_xlatb0;
mediump float u_xlat16_1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
bvec2 u_xlatb8;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.x = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0.x * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.5<u_xlat16_1);
#else
    u_xlatb0.x = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_1<1.5);
#else
    u_xlatb4 = u_xlat16_1<1.5;
#endif
    u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat16_5.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(1.5<u_xlat16_1);
#else
        u_xlatb0.x = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(u_xlat16_1<2.5);
#else
        u_xlatb4 = u_xlat16_1<2.5;
#endif
        u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
        if(u_xlatb0.x){
            u_xlat16_5.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb0 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb2 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb0.x = u_xlatb0.x && u_xlatb2.x;
            u_xlatb0.y = u_xlatb0.y && u_xlatb2.y;
            u_xlatb0.z = u_xlatb0.z && u_xlatb2.z;
            u_xlatb0.w = u_xlatb0.w && u_xlatb2.w;
            u_xlat16_3.xyz = (u_xlatb0.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_3.xyz = (u_xlatb0.z) ? _OutlineColor5.xyz : u_xlat16_3.xyz;
            u_xlat16_3.xyz = (u_xlatb0.y) ? _OutlineColor4.xyz : u_xlat16_3.xyz;
            u_xlat16_5.xyz = (u_xlatb0.x) ? _OutlineColor3.xyz : u_xlat16_3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec4 u_xlatb0;
mediump float u_xlat16_1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
bvec2 u_xlatb8;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.x = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0.x * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.5<u_xlat16_1);
#else
    u_xlatb0.x = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_1<1.5);
#else
    u_xlatb4 = u_xlat16_1<1.5;
#endif
    u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat16_5.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(1.5<u_xlat16_1);
#else
        u_xlatb0.x = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(u_xlat16_1<2.5);
#else
        u_xlatb4 = u_xlat16_1<2.5;
#endif
        u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
        if(u_xlatb0.x){
            u_xlat16_5.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb0 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb2 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb0.x = u_xlatb0.x && u_xlatb2.x;
            u_xlatb0.y = u_xlatb0.y && u_xlatb2.y;
            u_xlatb0.z = u_xlatb0.z && u_xlatb2.z;
            u_xlatb0.w = u_xlatb0.w && u_xlatb2.w;
            u_xlat16_3.xyz = (u_xlatb0.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_3.xyz = (u_xlatb0.z) ? _OutlineColor5.xyz : u_xlat16_3.xyz;
            u_xlat16_3.xyz = (u_xlatb0.y) ? _OutlineColor4.xyz : u_xlat16_3.xyz;
            u_xlat16_5.xyz = (u_xlatb0.x) ? _OutlineColor3.xyz : u_xlat16_3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bvec4 u_xlatb0;
mediump float u_xlat16_1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
bvec2 u_xlatb8;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0.x = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_0.x * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(0.5<u_xlat16_1);
#else
    u_xlatb0.x = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(u_xlat16_1<1.5);
#else
    u_xlatb4 = u_xlat16_1<1.5;
#endif
    u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat16_5.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(1.5<u_xlat16_1);
#else
        u_xlatb0.x = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(u_xlat16_1<2.5);
#else
        u_xlatb4 = u_xlat16_1<2.5;
#endif
        u_xlatb0.x = u_xlatb4 && u_xlatb0.x;
        if(u_xlatb0.x){
            u_xlat16_5.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb0 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb2 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb0.x = u_xlatb0.x && u_xlatb2.x;
            u_xlatb0.y = u_xlatb0.y && u_xlatb2.y;
            u_xlatb0.z = u_xlatb0.z && u_xlatb2.z;
            u_xlatb0.w = u_xlatb0.w && u_xlatb2.w;
            u_xlat16_3.xyz = (u_xlatb0.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_3.xyz = (u_xlatb0.z) ? _OutlineColor5.xyz : u_xlat16_3.xyz;
            u_xlat16_3.xyz = (u_xlatb0.y) ? _OutlineColor4.xyz : u_xlat16_3.xyz;
            u_xlat16_5.xyz = (u_xlatb0.x) ? _OutlineColor3.xyz : u_xlat16_3.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0.x){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0.x = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0.x = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0.x){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec2 u_xlatb8;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati9 = int(u_xlat16_1);
    if((u_xlati9)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb9){
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb9 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb9){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb8.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb8.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat9 = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat9 = vs_TEXCOORD2.z * 17.0 + (-u_xlat9);
            u_xlat9 = u_xlat9 + 0.99000001;
            u_xlat9 = floor(u_xlat9);
            u_xlat9 = max(u_xlat9, 0.0);
            u_xlati9 = int(u_xlat9);
            if((u_xlati9)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec2 u_xlatb8;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati9 = int(u_xlat16_1);
    if((u_xlati9)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb9){
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb9 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb9){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb8.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb8.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat9 = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat9 = vs_TEXCOORD2.z * 17.0 + (-u_xlat9);
            u_xlat9 = u_xlat9 + 0.99000001;
            u_xlat9 = floor(u_xlat9);
            u_xlat9 = max(u_xlat9, 0.0);
            u_xlati9 = int(u_xlat9);
            if((u_xlati9)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec2 u_xlatb8;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati9 = int(u_xlat16_1);
    if((u_xlati9)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb9){
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb9 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb9){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb8.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb8.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat9 = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat9 = vs_TEXCOORD2.z * 17.0 + (-u_xlat9);
            u_xlat9 = u_xlat9 + 0.99000001;
            u_xlat9 = floor(u_xlat9);
            u_xlat9 = max(u_xlat9, 0.0);
            u_xlati9 = int(u_xlat9);
            if((u_xlati9)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec2 u_xlatb8;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati9 = int(u_xlat16_1);
    if((u_xlati9)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb9){
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb9 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb9){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb8.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb8.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat9 = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat9 = vs_TEXCOORD2.z * 17.0 + (-u_xlat9);
            u_xlat9 = u_xlat9 + 0.99000001;
            u_xlat9 = floor(u_xlat9);
            u_xlat9 = max(u_xlat9, 0.0);
            u_xlati9 = int(u_xlat9);
            if((u_xlati9)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec2 u_xlatb8;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati9 = int(u_xlat16_1);
    if((u_xlati9)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb9){
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb9 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb9){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb8.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb8.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat9 = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat9 = vs_TEXCOORD2.z * 17.0 + (-u_xlat9);
            u_xlat9 = u_xlat9 + 0.99000001;
            u_xlat9 = floor(u_xlat9);
            u_xlat9 = max(u_xlat9, 0.0);
            u_xlati9 = int(u_xlat9);
            if((u_xlati9)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec2 u_xlatb8;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati9 = int(u_xlat16_1);
    if((u_xlati9)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb9){
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb9 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb9){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb8.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb8.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat9 = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat9 = vs_TEXCOORD2.z * 17.0 + (-u_xlat9);
            u_xlat9 = u_xlat9 + 0.99000001;
            u_xlat9 = floor(u_xlat9);
            u_xlat9 = max(u_xlat9, 0.0);
            u_xlati9 = int(u_xlat9);
            if((u_xlati9)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec2 u_xlatb8;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati9 = int(u_xlat16_1);
    if((u_xlati9)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb9){
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb9 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb9){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb8.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb8.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat9 = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat9 = vs_TEXCOORD2.z * 17.0 + (-u_xlat9);
            u_xlat9 = u_xlat9 + 0.99000001;
            u_xlat9 = floor(u_xlat9);
            u_xlat9 = max(u_xlat9, 0.0);
            u_xlati9 = int(u_xlat9);
            if((u_xlati9)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec2 u_xlatb8;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati9 = int(u_xlat16_1);
    if((u_xlati9)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb9){
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb9 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb9){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb8.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb8.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat9 = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat9 = vs_TEXCOORD2.z * 17.0 + (-u_xlat9);
            u_xlat9 = u_xlat9 + 0.99000001;
            u_xlat9 = floor(u_xlat9);
            u_xlat9 = max(u_xlat9, 0.0);
            u_xlati9 = int(u_xlat9);
            if((u_xlati9)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec2 u_xlatb8;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati9 = int(u_xlat16_1);
    if((u_xlati9)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb9 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb9){
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb9 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb9){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb8.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb8.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat9 = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat9 = vs_TEXCOORD2.z * 17.0 + (-u_xlat9);
            u_xlat9 = u_xlat9 + 0.99000001;
            u_xlat9 = floor(u_xlat9);
            u_xlat9 = max(u_xlat9, 0.0);
            u_xlati9 = int(u_xlat9);
            if((u_xlati9)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _OutlineColor.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
bvec2 u_xlatb12;
float u_xlat15;
lowp float u_xlat10_15;
int u_xlati15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati15 = int(u_xlat16_1);
    if((u_xlati15)==0){discard;}
    u_xlat10_15 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_15 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<u_xlat16_1);
#else
    u_xlatb15 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1<1.5);
#else
    u_xlatb2.x = u_xlat16_1<1.5;
#endif
    u_xlatb15 = u_xlatb15 && u_xlatb2.x;
    if(u_xlatb15){
        u_xlat16_6.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.5<u_xlat16_1);
#else
        u_xlatb15 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1<2.5);
#else
        u_xlatb2.x = u_xlat16_1<2.5;
#endif
        u_xlatb15 = u_xlatb15 && u_xlatb2.x;
        if(u_xlatb15){
            u_xlat16_6.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb3 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
            u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
            u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
            u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
            u_xlat16_4.xyz = (u_xlatb2.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_4.xyz = (u_xlatb2.z) ? _OutlineColor5.xyz : u_xlat16_4.xyz;
            u_xlat16_4.xyz = (u_xlatb2.y) ? _OutlineColor4.xyz : u_xlat16_4.xyz;
            u_xlat16_6.xyz = (u_xlatb2.x) ? _OutlineColor3.xyz : u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb15){
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb15 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb15){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb12.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb12.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat15 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat15 = vs_TEXCOORD2.z * 17.0 + (-u_xlat15);
            u_xlat15 = u_xlat15 + 0.99000001;
            u_xlat15 = floor(u_xlat15);
            u_xlat15 = max(u_xlat15, 0.0);
            u_xlati15 = int(u_xlat15);
            if((u_xlati15)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
bvec2 u_xlatb12;
float u_xlat15;
lowp float u_xlat10_15;
int u_xlati15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati15 = int(u_xlat16_1);
    if((u_xlati15)==0){discard;}
    u_xlat10_15 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_15 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<u_xlat16_1);
#else
    u_xlatb15 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1<1.5);
#else
    u_xlatb2.x = u_xlat16_1<1.5;
#endif
    u_xlatb15 = u_xlatb15 && u_xlatb2.x;
    if(u_xlatb15){
        u_xlat16_6.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.5<u_xlat16_1);
#else
        u_xlatb15 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1<2.5);
#else
        u_xlatb2.x = u_xlat16_1<2.5;
#endif
        u_xlatb15 = u_xlatb15 && u_xlatb2.x;
        if(u_xlatb15){
            u_xlat16_6.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb3 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
            u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
            u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
            u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
            u_xlat16_4.xyz = (u_xlatb2.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_4.xyz = (u_xlatb2.z) ? _OutlineColor5.xyz : u_xlat16_4.xyz;
            u_xlat16_4.xyz = (u_xlatb2.y) ? _OutlineColor4.xyz : u_xlat16_4.xyz;
            u_xlat16_6.xyz = (u_xlatb2.x) ? _OutlineColor3.xyz : u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb15){
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb15 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb15){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb12.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb12.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat15 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat15 = vs_TEXCOORD2.z * 17.0 + (-u_xlat15);
            u_xlat15 = u_xlat15 + 0.99000001;
            u_xlat15 = floor(u_xlat15);
            u_xlat15 = max(u_xlat15, 0.0);
            u_xlati15 = int(u_xlat15);
            if((u_xlati15)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
bvec2 u_xlatb12;
float u_xlat15;
lowp float u_xlat10_15;
int u_xlati15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati15 = int(u_xlat16_1);
    if((u_xlati15)==0){discard;}
    u_xlat10_15 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_15 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<u_xlat16_1);
#else
    u_xlatb15 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1<1.5);
#else
    u_xlatb2.x = u_xlat16_1<1.5;
#endif
    u_xlatb15 = u_xlatb15 && u_xlatb2.x;
    if(u_xlatb15){
        u_xlat16_6.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.5<u_xlat16_1);
#else
        u_xlatb15 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1<2.5);
#else
        u_xlatb2.x = u_xlat16_1<2.5;
#endif
        u_xlatb15 = u_xlatb15 && u_xlatb2.x;
        if(u_xlatb15){
            u_xlat16_6.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb3 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
            u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
            u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
            u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
            u_xlat16_4.xyz = (u_xlatb2.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_4.xyz = (u_xlatb2.z) ? _OutlineColor5.xyz : u_xlat16_4.xyz;
            u_xlat16_4.xyz = (u_xlatb2.y) ? _OutlineColor4.xyz : u_xlat16_4.xyz;
            u_xlat16_6.xyz = (u_xlatb2.x) ? _OutlineColor3.xyz : u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb15){
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb15 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb15){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb12.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb12.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat15 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat15 = vs_TEXCOORD2.z * 17.0 + (-u_xlat15);
            u_xlat15 = u_xlat15 + 0.99000001;
            u_xlat15 = floor(u_xlat15);
            u_xlat15 = max(u_xlat15, 0.0);
            u_xlati15 = int(u_xlat15);
            if((u_xlati15)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
bvec2 u_xlatb12;
float u_xlat15;
lowp float u_xlat10_15;
int u_xlati15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati15 = int(u_xlat16_1);
    if((u_xlati15)==0){discard;}
    u_xlat10_15 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_15 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<u_xlat16_1);
#else
    u_xlatb15 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1<1.5);
#else
    u_xlatb2.x = u_xlat16_1<1.5;
#endif
    u_xlatb15 = u_xlatb15 && u_xlatb2.x;
    if(u_xlatb15){
        u_xlat16_6.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.5<u_xlat16_1);
#else
        u_xlatb15 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1<2.5);
#else
        u_xlatb2.x = u_xlat16_1<2.5;
#endif
        u_xlatb15 = u_xlatb15 && u_xlatb2.x;
        if(u_xlatb15){
            u_xlat16_6.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb3 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
            u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
            u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
            u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
            u_xlat16_4.xyz = (u_xlatb2.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_4.xyz = (u_xlatb2.z) ? _OutlineColor5.xyz : u_xlat16_4.xyz;
            u_xlat16_4.xyz = (u_xlatb2.y) ? _OutlineColor4.xyz : u_xlat16_4.xyz;
            u_xlat16_6.xyz = (u_xlatb2.x) ? _OutlineColor3.xyz : u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb15){
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb15 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb15){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb12.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb12.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat15 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat15 = vs_TEXCOORD2.z * 17.0 + (-u_xlat15);
            u_xlat15 = u_xlat15 + 0.99000001;
            u_xlat15 = floor(u_xlat15);
            u_xlat15 = max(u_xlat15, 0.0);
            u_xlati15 = int(u_xlat15);
            if((u_xlati15)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
bvec2 u_xlatb12;
float u_xlat15;
lowp float u_xlat10_15;
int u_xlati15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati15 = int(u_xlat16_1);
    if((u_xlati15)==0){discard;}
    u_xlat10_15 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_15 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<u_xlat16_1);
#else
    u_xlatb15 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1<1.5);
#else
    u_xlatb2.x = u_xlat16_1<1.5;
#endif
    u_xlatb15 = u_xlatb15 && u_xlatb2.x;
    if(u_xlatb15){
        u_xlat16_6.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.5<u_xlat16_1);
#else
        u_xlatb15 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1<2.5);
#else
        u_xlatb2.x = u_xlat16_1<2.5;
#endif
        u_xlatb15 = u_xlatb15 && u_xlatb2.x;
        if(u_xlatb15){
            u_xlat16_6.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb3 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
            u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
            u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
            u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
            u_xlat16_4.xyz = (u_xlatb2.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_4.xyz = (u_xlatb2.z) ? _OutlineColor5.xyz : u_xlat16_4.xyz;
            u_xlat16_4.xyz = (u_xlatb2.y) ? _OutlineColor4.xyz : u_xlat16_4.xyz;
            u_xlat16_6.xyz = (u_xlatb2.x) ? _OutlineColor3.xyz : u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb15){
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb15 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb15){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb12.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb12.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat15 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat15 = vs_TEXCOORD2.z * 17.0 + (-u_xlat15);
            u_xlat15 = u_xlat15 + 0.99000001;
            u_xlat15 = floor(u_xlat15);
            u_xlat15 = max(u_xlat15, 0.0);
            u_xlati15 = int(u_xlat15);
            if((u_xlati15)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
bvec2 u_xlatb12;
float u_xlat15;
lowp float u_xlat10_15;
int u_xlati15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati15 = int(u_xlat16_1);
    if((u_xlati15)==0){discard;}
    u_xlat10_15 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_15 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<u_xlat16_1);
#else
    u_xlatb15 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1<1.5);
#else
    u_xlatb2.x = u_xlat16_1<1.5;
#endif
    u_xlatb15 = u_xlatb15 && u_xlatb2.x;
    if(u_xlatb15){
        u_xlat16_6.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.5<u_xlat16_1);
#else
        u_xlatb15 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1<2.5);
#else
        u_xlatb2.x = u_xlat16_1<2.5;
#endif
        u_xlatb15 = u_xlatb15 && u_xlatb2.x;
        if(u_xlatb15){
            u_xlat16_6.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb3 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
            u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
            u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
            u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
            u_xlat16_4.xyz = (u_xlatb2.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_4.xyz = (u_xlatb2.z) ? _OutlineColor5.xyz : u_xlat16_4.xyz;
            u_xlat16_4.xyz = (u_xlatb2.y) ? _OutlineColor4.xyz : u_xlat16_4.xyz;
            u_xlat16_6.xyz = (u_xlatb2.x) ? _OutlineColor3.xyz : u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb15){
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb15 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb15){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb12.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb12.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat15 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat15 = vs_TEXCOORD2.z * 17.0 + (-u_xlat15);
            u_xlat15 = u_xlat15 + 0.99000001;
            u_xlat15 = floor(u_xlat15);
            u_xlat15 = max(u_xlat15, 0.0);
            u_xlati15 = int(u_xlat15);
            if((u_xlati15)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
bvec2 u_xlatb12;
float u_xlat15;
lowp float u_xlat10_15;
int u_xlati15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati15 = int(u_xlat16_1);
    if((u_xlati15)==0){discard;}
    u_xlat10_15 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_15 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<u_xlat16_1);
#else
    u_xlatb15 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1<1.5);
#else
    u_xlatb2.x = u_xlat16_1<1.5;
#endif
    u_xlatb15 = u_xlatb15 && u_xlatb2.x;
    if(u_xlatb15){
        u_xlat16_6.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.5<u_xlat16_1);
#else
        u_xlatb15 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1<2.5);
#else
        u_xlatb2.x = u_xlat16_1<2.5;
#endif
        u_xlatb15 = u_xlatb15 && u_xlatb2.x;
        if(u_xlatb15){
            u_xlat16_6.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb3 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
            u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
            u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
            u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
            u_xlat16_4.xyz = (u_xlatb2.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_4.xyz = (u_xlatb2.z) ? _OutlineColor5.xyz : u_xlat16_4.xyz;
            u_xlat16_4.xyz = (u_xlatb2.y) ? _OutlineColor4.xyz : u_xlat16_4.xyz;
            u_xlat16_6.xyz = (u_xlatb2.x) ? _OutlineColor3.xyz : u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb15){
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb15 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb15){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb12.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb12.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat15 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat15 = vs_TEXCOORD2.z * 17.0 + (-u_xlat15);
            u_xlat15 = u_xlat15 + 0.99000001;
            u_xlat15 = floor(u_xlat15);
            u_xlat15 = max(u_xlat15, 0.0);
            u_xlati15 = int(u_xlat15);
            if((u_xlati15)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
bvec2 u_xlatb12;
float u_xlat15;
lowp float u_xlat10_15;
int u_xlati15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati15 = int(u_xlat16_1);
    if((u_xlati15)==0){discard;}
    u_xlat10_15 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_15 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<u_xlat16_1);
#else
    u_xlatb15 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1<1.5);
#else
    u_xlatb2.x = u_xlat16_1<1.5;
#endif
    u_xlatb15 = u_xlatb15 && u_xlatb2.x;
    if(u_xlatb15){
        u_xlat16_6.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.5<u_xlat16_1);
#else
        u_xlatb15 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1<2.5);
#else
        u_xlatb2.x = u_xlat16_1<2.5;
#endif
        u_xlatb15 = u_xlatb15 && u_xlatb2.x;
        if(u_xlatb15){
            u_xlat16_6.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb3 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
            u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
            u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
            u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
            u_xlat16_4.xyz = (u_xlatb2.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_4.xyz = (u_xlatb2.z) ? _OutlineColor5.xyz : u_xlat16_4.xyz;
            u_xlat16_4.xyz = (u_xlatb2.y) ? _OutlineColor4.xyz : u_xlat16_4.xyz;
            u_xlat16_6.xyz = (u_xlatb2.x) ? _OutlineColor3.xyz : u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb15){
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb15 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb15){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb12.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb12.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat15 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat15 = vs_TEXCOORD2.z * 17.0 + (-u_xlat15);
            u_xlat15 = u_xlat15 + 0.99000001;
            u_xlat15 = floor(u_xlat15);
            u_xlat15 = max(u_xlat15, 0.0);
            u_xlati15 = int(u_xlat15);
            if((u_xlati15)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
bvec2 u_xlatb12;
float u_xlat15;
lowp float u_xlat10_15;
int u_xlati15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_1 = u_xlat16_1 + 1.0;
    u_xlat16_1 = floor(u_xlat16_1);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlati15 = int(u_xlat16_1);
    if((u_xlati15)==0){discard;}
    u_xlat10_15 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1 = u_xlat10_15 * 8.0;
    u_xlat16_1 = roundEven(u_xlat16_1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<u_xlat16_1);
#else
    u_xlatb15 = 0.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(u_xlat16_1<1.5);
#else
    u_xlatb2.x = u_xlat16_1<1.5;
#endif
    u_xlatb15 = u_xlatb15 && u_xlatb2.x;
    if(u_xlatb15){
        u_xlat16_6.xyz = _OutlineColor1.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.5<u_xlat16_1);
#else
        u_xlatb15 = 1.5<u_xlat16_1;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(u_xlat16_1<2.5);
#else
        u_xlatb2.x = u_xlat16_1<2.5;
#endif
        u_xlatb15 = u_xlatb15 && u_xlatb2.x;
        if(u_xlatb15){
            u_xlat16_6.xyz = _OutlineColor2.xyz;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_1));
            u_xlatb3 = lessThan(vec4(u_xlat16_1), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb2.x = u_xlatb2.x && u_xlatb3.x;
            u_xlatb2.y = u_xlatb2.y && u_xlatb3.y;
            u_xlatb2.z = u_xlatb2.z && u_xlatb3.z;
            u_xlatb2.w = u_xlatb2.w && u_xlatb3.w;
            u_xlat16_4.xyz = (u_xlatb2.w) ? _OutlineColor6.xyz : _OutlineColor0.xyz;
            u_xlat16_4.xyz = (u_xlatb2.z) ? _OutlineColor5.xyz : u_xlat16_4.xyz;
            u_xlat16_4.xyz = (u_xlatb2.y) ? _OutlineColor4.xyz : u_xlat16_4.xyz;
            u_xlat16_6.xyz = (u_xlatb2.x) ? _OutlineColor3.xyz : u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb15){
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb15 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb15){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb12.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb12.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat15 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat15 = vs_TEXCOORD2.z * 17.0 + (-u_xlat15);
            u_xlat15 = u_xlat15 + 0.99000001;
            u_xlat15 = floor(u_xlat15);
            u_xlat15 = max(u_xlat15, 0.0);
            u_xlati15 = int(u_xlat15);
            if((u_xlati15)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
}
}
 Pass {
  Name "TRANSPARENTOUTLINE"
  Tags { "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  Cull Front
  GpuProgramID 201843
Program "vp" {
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD2.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD2.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD2.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD2.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD2.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD2.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD2.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD2.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD2.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
}
}
 Pass {
  Name "TRANSPARENTBACKTHENFRONTOUTLINE"
  Tags { "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  Cull Front
  GpuProgramID 265299
Program "vp" {
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
bvec2 u_xlatb6;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb6.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb6.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb6.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec2 u_xlat3;
int u_xlati3;
uvec2 u_xlatu3;
bool u_xlatb3;
mediump float u_xlat16_4;
bool u_xlatb5;
bool u_xlatb7;
bvec2 u_xlatb13;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1.x = u_xlat10_0 * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<u_xlat16_1.x);
#else
    u_xlatb0 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat16_1.x<1.5);
#else
    u_xlatb5 = u_xlat16_1.x<1.5;
#endif
    u_xlatb0 = u_xlatb5 && u_xlatb0;
    if(u_xlatb0){
        u_xlat16_0 = _OutlineColor1;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb2.x = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb7 = u_xlat16_1.x<2.5;
#endif
        u_xlatb2.x = u_xlatb7 && u_xlatb2.x;
        if(u_xlatb2.x){
            u_xlat16_0 = _OutlineColor2;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb1 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
            u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
            u_xlatb1.z = u_xlatb1.z && u_xlatb2.z;
            u_xlatb1.w = u_xlatb1.w && u_xlatb2.w;
            u_xlat16_2 = (u_xlatb1.w) ? _OutlineColor6 : _OutlineColor0;
            u_xlat16_2 = (u_xlatb1.z) ? _OutlineColor5 : u_xlat16_2;
            u_xlat16_2 = (u_xlatb1.y) ? _OutlineColor4 : u_xlat16_2;
            u_xlat16_0 = (u_xlatb1.x) ? _OutlineColor3 : u_xlat16_2;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb3){
#ifdef UNITY_ADRENO_ES3
        u_xlatb3 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb3 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb3){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb13.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb13.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb13.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat3.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat3.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat3.x);
            u_xlat3.x = u_xlat3.x + 0.99000001;
            u_xlat3.x = floor(u_xlat3.x);
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlati3 = int(u_xlat3.x);
            if((u_xlati3)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 * _Color;
    u_xlat16_4 = u_xlat16_1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
#else
    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat16_1.xyz * vs_TEXCOORD1.xyz;
    u_xlat1.w = u_xlat16_4 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat16_0 * u_xlat1;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec2 u_xlat3;
int u_xlati3;
uvec2 u_xlatu3;
bool u_xlatb3;
mediump float u_xlat16_4;
bool u_xlatb5;
bool u_xlatb7;
bvec2 u_xlatb13;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1.x = u_xlat10_0 * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<u_xlat16_1.x);
#else
    u_xlatb0 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat16_1.x<1.5);
#else
    u_xlatb5 = u_xlat16_1.x<1.5;
#endif
    u_xlatb0 = u_xlatb5 && u_xlatb0;
    if(u_xlatb0){
        u_xlat16_0 = _OutlineColor1;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb2.x = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb7 = u_xlat16_1.x<2.5;
#endif
        u_xlatb2.x = u_xlatb7 && u_xlatb2.x;
        if(u_xlatb2.x){
            u_xlat16_0 = _OutlineColor2;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb1 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
            u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
            u_xlatb1.z = u_xlatb1.z && u_xlatb2.z;
            u_xlatb1.w = u_xlatb1.w && u_xlatb2.w;
            u_xlat16_2 = (u_xlatb1.w) ? _OutlineColor6 : _OutlineColor0;
            u_xlat16_2 = (u_xlatb1.z) ? _OutlineColor5 : u_xlat16_2;
            u_xlat16_2 = (u_xlatb1.y) ? _OutlineColor4 : u_xlat16_2;
            u_xlat16_0 = (u_xlatb1.x) ? _OutlineColor3 : u_xlat16_2;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb3){
#ifdef UNITY_ADRENO_ES3
        u_xlatb3 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb3 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb3){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb13.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb13.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb13.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat3.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat3.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat3.x);
            u_xlat3.x = u_xlat3.x + 0.99000001;
            u_xlat3.x = floor(u_xlat3.x);
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlati3 = int(u_xlat3.x);
            if((u_xlati3)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 * _Color;
    u_xlat16_4 = u_xlat16_1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
#else
    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat16_1.xyz * vs_TEXCOORD1.xyz;
    u_xlat1.w = u_xlat16_4 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat16_0 * u_xlat1;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec2 u_xlat3;
int u_xlati3;
uvec2 u_xlatu3;
bool u_xlatb3;
mediump float u_xlat16_4;
bool u_xlatb5;
bool u_xlatb7;
bvec2 u_xlatb13;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1.x = u_xlat10_0 * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<u_xlat16_1.x);
#else
    u_xlatb0 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat16_1.x<1.5);
#else
    u_xlatb5 = u_xlat16_1.x<1.5;
#endif
    u_xlatb0 = u_xlatb5 && u_xlatb0;
    if(u_xlatb0){
        u_xlat16_0 = _OutlineColor1;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb2.x = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb7 = u_xlat16_1.x<2.5;
#endif
        u_xlatb2.x = u_xlatb7 && u_xlatb2.x;
        if(u_xlatb2.x){
            u_xlat16_0 = _OutlineColor2;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb1 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
            u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
            u_xlatb1.z = u_xlatb1.z && u_xlatb2.z;
            u_xlatb1.w = u_xlatb1.w && u_xlatb2.w;
            u_xlat16_2 = (u_xlatb1.w) ? _OutlineColor6 : _OutlineColor0;
            u_xlat16_2 = (u_xlatb1.z) ? _OutlineColor5 : u_xlat16_2;
            u_xlat16_2 = (u_xlatb1.y) ? _OutlineColor4 : u_xlat16_2;
            u_xlat16_0 = (u_xlatb1.x) ? _OutlineColor3 : u_xlat16_2;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb3){
#ifdef UNITY_ADRENO_ES3
        u_xlatb3 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb3 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb3){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb13.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb13.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb13.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat3.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat3.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat3.x);
            u_xlat3.x = u_xlat3.x + 0.99000001;
            u_xlat3.x = floor(u_xlat3.x);
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlati3 = int(u_xlat3.x);
            if((u_xlati3)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 * _Color;
    u_xlat16_4 = u_xlat16_1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
#else
    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat16_1.xyz * vs_TEXCOORD1.xyz;
    u_xlat1.w = u_xlat16_4 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat16_0 * u_xlat1;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec2 u_xlat3;
int u_xlati3;
uvec2 u_xlatu3;
bool u_xlatb3;
mediump float u_xlat16_4;
bool u_xlatb5;
bool u_xlatb7;
bvec2 u_xlatb13;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1.x = u_xlat10_0 * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<u_xlat16_1.x);
#else
    u_xlatb0 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat16_1.x<1.5);
#else
    u_xlatb5 = u_xlat16_1.x<1.5;
#endif
    u_xlatb0 = u_xlatb5 && u_xlatb0;
    if(u_xlatb0){
        u_xlat16_0 = _OutlineColor1;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb2.x = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb7 = u_xlat16_1.x<2.5;
#endif
        u_xlatb2.x = u_xlatb7 && u_xlatb2.x;
        if(u_xlatb2.x){
            u_xlat16_0 = _OutlineColor2;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb1 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
            u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
            u_xlatb1.z = u_xlatb1.z && u_xlatb2.z;
            u_xlatb1.w = u_xlatb1.w && u_xlatb2.w;
            u_xlat16_2 = (u_xlatb1.w) ? _OutlineColor6 : _OutlineColor0;
            u_xlat16_2 = (u_xlatb1.z) ? _OutlineColor5 : u_xlat16_2;
            u_xlat16_2 = (u_xlatb1.y) ? _OutlineColor4 : u_xlat16_2;
            u_xlat16_0 = (u_xlatb1.x) ? _OutlineColor3 : u_xlat16_2;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb3){
#ifdef UNITY_ADRENO_ES3
        u_xlatb3 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb3 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb3){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb13.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb13.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb13.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat3.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat3.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat3.x);
            u_xlat3.x = u_xlat3.x + 0.99000001;
            u_xlat3.x = floor(u_xlat3.x);
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlati3 = int(u_xlat3.x);
            if((u_xlati3)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 * _Color;
    u_xlat16_4 = u_xlat16_1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
#else
    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat16_1.xyz * vs_TEXCOORD1.xyz;
    u_xlat1.w = u_xlat16_4 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat16_0 * u_xlat1;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec2 u_xlat3;
int u_xlati3;
uvec2 u_xlatu3;
bool u_xlatb3;
mediump float u_xlat16_4;
bool u_xlatb5;
bool u_xlatb7;
bvec2 u_xlatb13;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1.x = u_xlat10_0 * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<u_xlat16_1.x);
#else
    u_xlatb0 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat16_1.x<1.5);
#else
    u_xlatb5 = u_xlat16_1.x<1.5;
#endif
    u_xlatb0 = u_xlatb5 && u_xlatb0;
    if(u_xlatb0){
        u_xlat16_0 = _OutlineColor1;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb2.x = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb7 = u_xlat16_1.x<2.5;
#endif
        u_xlatb2.x = u_xlatb7 && u_xlatb2.x;
        if(u_xlatb2.x){
            u_xlat16_0 = _OutlineColor2;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb1 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
            u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
            u_xlatb1.z = u_xlatb1.z && u_xlatb2.z;
            u_xlatb1.w = u_xlatb1.w && u_xlatb2.w;
            u_xlat16_2 = (u_xlatb1.w) ? _OutlineColor6 : _OutlineColor0;
            u_xlat16_2 = (u_xlatb1.z) ? _OutlineColor5 : u_xlat16_2;
            u_xlat16_2 = (u_xlatb1.y) ? _OutlineColor4 : u_xlat16_2;
            u_xlat16_0 = (u_xlatb1.x) ? _OutlineColor3 : u_xlat16_2;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb3){
#ifdef UNITY_ADRENO_ES3
        u_xlatb3 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb3 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb3){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb13.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb13.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb13.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat3.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat3.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat3.x);
            u_xlat3.x = u_xlat3.x + 0.99000001;
            u_xlat3.x = floor(u_xlat3.x);
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlati3 = int(u_xlat3.x);
            if((u_xlati3)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 * _Color;
    u_xlat16_4 = u_xlat16_1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
#else
    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat16_1.xyz * vs_TEXCOORD1.xyz;
    u_xlat1.w = u_xlat16_4 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat16_0 * u_xlat1;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec2 u_xlat3;
int u_xlati3;
uvec2 u_xlatu3;
bool u_xlatb3;
mediump float u_xlat16_4;
bool u_xlatb5;
bool u_xlatb7;
bvec2 u_xlatb13;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1.x = u_xlat10_0 * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<u_xlat16_1.x);
#else
    u_xlatb0 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat16_1.x<1.5);
#else
    u_xlatb5 = u_xlat16_1.x<1.5;
#endif
    u_xlatb0 = u_xlatb5 && u_xlatb0;
    if(u_xlatb0){
        u_xlat16_0 = _OutlineColor1;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb2.x = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb7 = u_xlat16_1.x<2.5;
#endif
        u_xlatb2.x = u_xlatb7 && u_xlatb2.x;
        if(u_xlatb2.x){
            u_xlat16_0 = _OutlineColor2;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb1 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
            u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
            u_xlatb1.z = u_xlatb1.z && u_xlatb2.z;
            u_xlatb1.w = u_xlatb1.w && u_xlatb2.w;
            u_xlat16_2 = (u_xlatb1.w) ? _OutlineColor6 : _OutlineColor0;
            u_xlat16_2 = (u_xlatb1.z) ? _OutlineColor5 : u_xlat16_2;
            u_xlat16_2 = (u_xlatb1.y) ? _OutlineColor4 : u_xlat16_2;
            u_xlat16_0 = (u_xlatb1.x) ? _OutlineColor3 : u_xlat16_2;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb3){
#ifdef UNITY_ADRENO_ES3
        u_xlatb3 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb3 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb3){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb13.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb13.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb13.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat3.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat3.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat3.x);
            u_xlat3.x = u_xlat3.x + 0.99000001;
            u_xlat3.x = floor(u_xlat3.x);
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlati3 = int(u_xlat3.x);
            if((u_xlati3)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 * _Color;
    u_xlat16_4 = u_xlat16_1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
#else
    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat16_1.xyz * vs_TEXCOORD1.xyz;
    u_xlat1.w = u_xlat16_4 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat16_0 * u_xlat1;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec2 u_xlat3;
int u_xlati3;
uvec2 u_xlatu3;
bool u_xlatb3;
mediump float u_xlat16_4;
bool u_xlatb5;
bool u_xlatb7;
bvec2 u_xlatb13;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1.x = u_xlat10_0 * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<u_xlat16_1.x);
#else
    u_xlatb0 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat16_1.x<1.5);
#else
    u_xlatb5 = u_xlat16_1.x<1.5;
#endif
    u_xlatb0 = u_xlatb5 && u_xlatb0;
    if(u_xlatb0){
        u_xlat16_0 = _OutlineColor1;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb2.x = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb7 = u_xlat16_1.x<2.5;
#endif
        u_xlatb2.x = u_xlatb7 && u_xlatb2.x;
        if(u_xlatb2.x){
            u_xlat16_0 = _OutlineColor2;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb1 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
            u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
            u_xlatb1.z = u_xlatb1.z && u_xlatb2.z;
            u_xlatb1.w = u_xlatb1.w && u_xlatb2.w;
            u_xlat16_2 = (u_xlatb1.w) ? _OutlineColor6 : _OutlineColor0;
            u_xlat16_2 = (u_xlatb1.z) ? _OutlineColor5 : u_xlat16_2;
            u_xlat16_2 = (u_xlatb1.y) ? _OutlineColor4 : u_xlat16_2;
            u_xlat16_0 = (u_xlatb1.x) ? _OutlineColor3 : u_xlat16_2;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb3){
#ifdef UNITY_ADRENO_ES3
        u_xlatb3 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb3 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb3){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb13.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb13.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb13.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat3.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat3.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat3.x);
            u_xlat3.x = u_xlat3.x + 0.99000001;
            u_xlat3.x = floor(u_xlat3.x);
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlati3 = int(u_xlat3.x);
            if((u_xlati3)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 * _Color;
    u_xlat16_4 = u_xlat16_1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
#else
    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat16_1.xyz * vs_TEXCOORD1.xyz;
    u_xlat1.w = u_xlat16_4 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat16_0 * u_xlat1;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec2 u_xlat3;
int u_xlati3;
uvec2 u_xlatu3;
bool u_xlatb3;
mediump float u_xlat16_4;
bool u_xlatb5;
bool u_xlatb7;
bvec2 u_xlatb13;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1.x = u_xlat10_0 * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<u_xlat16_1.x);
#else
    u_xlatb0 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat16_1.x<1.5);
#else
    u_xlatb5 = u_xlat16_1.x<1.5;
#endif
    u_xlatb0 = u_xlatb5 && u_xlatb0;
    if(u_xlatb0){
        u_xlat16_0 = _OutlineColor1;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb2.x = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb7 = u_xlat16_1.x<2.5;
#endif
        u_xlatb2.x = u_xlatb7 && u_xlatb2.x;
        if(u_xlatb2.x){
            u_xlat16_0 = _OutlineColor2;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb1 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
            u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
            u_xlatb1.z = u_xlatb1.z && u_xlatb2.z;
            u_xlatb1.w = u_xlatb1.w && u_xlatb2.w;
            u_xlat16_2 = (u_xlatb1.w) ? _OutlineColor6 : _OutlineColor0;
            u_xlat16_2 = (u_xlatb1.z) ? _OutlineColor5 : u_xlat16_2;
            u_xlat16_2 = (u_xlatb1.y) ? _OutlineColor4 : u_xlat16_2;
            u_xlat16_0 = (u_xlatb1.x) ? _OutlineColor3 : u_xlat16_2;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb3){
#ifdef UNITY_ADRENO_ES3
        u_xlatb3 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb3 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb3){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb13.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb13.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb13.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat3.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat3.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat3.x);
            u_xlat3.x = u_xlat3.x + 0.99000001;
            u_xlat3.x = floor(u_xlat3.x);
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlati3 = int(u_xlat3.x);
            if((u_xlati3)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 * _Color;
    u_xlat16_4 = u_xlat16_1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
#else
    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat16_1.xyz * vs_TEXCOORD1.xyz;
    u_xlat1.w = u_xlat16_4 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat16_0 * u_xlat1;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp float u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec4 u_xlatb1;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec2 u_xlat3;
int u_xlati3;
uvec2 u_xlatu3;
bool u_xlatb3;
mediump float u_xlat16_4;
bool u_xlatb5;
bool u_xlatb7;
bvec2 u_xlatb13;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_1.x = u_xlat10_0 * 8.0;
    u_xlat16_1.x = roundEven(u_xlat16_1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<u_xlat16_1.x);
#else
    u_xlatb0 = 0.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(u_xlat16_1.x<1.5);
#else
    u_xlatb5 = u_xlat16_1.x<1.5;
#endif
    u_xlatb0 = u_xlatb5 && u_xlatb0;
    if(u_xlatb0){
        u_xlat16_0 = _OutlineColor1;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb2.x = !!(1.5<u_xlat16_1.x);
#else
        u_xlatb2.x = 1.5<u_xlat16_1.x;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(u_xlat16_1.x<2.5);
#else
        u_xlatb7 = u_xlat16_1.x<2.5;
#endif
        u_xlatb2.x = u_xlatb7 && u_xlatb2.x;
        if(u_xlatb2.x){
            u_xlat16_0 = _OutlineColor2;
        } else {
            u_xlatb2 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), u_xlat16_1.xxxx);
            u_xlatb1 = lessThan(u_xlat16_1.xxxx, vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb1.x = u_xlatb1.x && u_xlatb2.x;
            u_xlatb1.y = u_xlatb1.y && u_xlatb2.y;
            u_xlatb1.z = u_xlatb1.z && u_xlatb2.z;
            u_xlatb1.w = u_xlatb1.w && u_xlatb2.w;
            u_xlat16_2 = (u_xlatb1.w) ? _OutlineColor6 : _OutlineColor0;
            u_xlat16_2 = (u_xlatb1.z) ? _OutlineColor5 : u_xlat16_2;
            u_xlat16_2 = (u_xlatb1.y) ? _OutlineColor4 : u_xlat16_2;
            u_xlat16_0 = (u_xlatb1.x) ? _OutlineColor3 : u_xlat16_2;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb3 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb3){
#ifdef UNITY_ADRENO_ES3
        u_xlatb3 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb3 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb3){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb13.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb13.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb13.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat3.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat3.x = vs_TEXCOORD2.z * 17.0 + (-u_xlat3.x);
            u_xlat3.x = u_xlat3.x + 0.99000001;
            u_xlat3.x = floor(u_xlat3.x);
            u_xlat3.x = max(u_xlat3.x, 0.0);
            u_xlati3 = int(u_xlat3.x);
            if((u_xlati3)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 * _Color;
    u_xlat16_4 = u_xlat16_1.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
#else
    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat16_1.xyz * vs_TEXCOORD1.xyz;
    u_xlat1.w = u_xlat16_4 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat16_0 * u_xlat1;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD2.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD2.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD2.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD2.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD2.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD2.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD2.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD2.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD2.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
mediump vec4 u_xlat16_2;
bool u_xlatb2;
vec2 u_xlat3;
uvec2 u_xlatu3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
bvec4 u_xlatb4;
mediump float u_xlat16_6;
bvec2 u_xlatb13;
float u_xlat15;
lowp float u_xlat10_15;
int u_xlati15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_6 = u_xlat16_6 + 1.0;
    u_xlat16_6 = floor(u_xlat16_6);
    u_xlat16_6 = max(u_xlat16_6, 0.0);
    u_xlati15 = int(u_xlat16_6);
    if((u_xlati15)==0){discard;}
    u_xlat10_15 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_6 = u_xlat10_15 * 8.0;
    u_xlat16_6 = roundEven(u_xlat16_6);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<u_xlat16_6);
#else
    u_xlatb15 = 0.5<u_xlat16_6;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_6<1.5);
#else
    u_xlatb2 = u_xlat16_6<1.5;
#endif
    u_xlatb15 = u_xlatb15 && u_xlatb2;
    if(u_xlatb15){
        u_xlat16_2 = _OutlineColor1;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.5<u_xlat16_6);
#else
        u_xlatb15 = 1.5<u_xlat16_6;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_6<2.5);
#else
        u_xlatb3.x = u_xlat16_6<2.5;
#endif
        u_xlatb15 = u_xlatb15 && u_xlatb3.x;
        if(u_xlatb15){
            u_xlat16_2 = _OutlineColor2;
        } else {
            u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_6));
            u_xlatb4 = lessThan(vec4(u_xlat16_6), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
            u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
            u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
            u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
            u_xlat16_4 = (u_xlatb3.w) ? _OutlineColor6 : _OutlineColor0;
            u_xlat16_4 = (u_xlatb3.z) ? _OutlineColor5 : u_xlat16_4;
            u_xlat16_4 = (u_xlatb3.y) ? _OutlineColor4 : u_xlat16_4;
            u_xlat16_2 = (u_xlatb3.x) ? _OutlineColor3 : u_xlat16_4;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb15){
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb15 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb15){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb13.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb13.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb13.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat15 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat15 = vs_TEXCOORD2.z * 17.0 + (-u_xlat15);
            u_xlat15 = u_xlat15 + 0.99000001;
            u_xlat15 = floor(u_xlat15);
            u_xlat15 = max(u_xlat15, 0.0);
            u_xlati15 = int(u_xlat15);
            if((u_xlati15)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat16_2 * u_xlat0;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
mediump vec4 u_xlat16_2;
bool u_xlatb2;
vec2 u_xlat3;
uvec2 u_xlatu3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
bvec4 u_xlatb4;
mediump float u_xlat16_6;
bvec2 u_xlatb13;
float u_xlat15;
lowp float u_xlat10_15;
int u_xlati15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_6 = u_xlat16_6 + 1.0;
    u_xlat16_6 = floor(u_xlat16_6);
    u_xlat16_6 = max(u_xlat16_6, 0.0);
    u_xlati15 = int(u_xlat16_6);
    if((u_xlati15)==0){discard;}
    u_xlat10_15 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_6 = u_xlat10_15 * 8.0;
    u_xlat16_6 = roundEven(u_xlat16_6);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<u_xlat16_6);
#else
    u_xlatb15 = 0.5<u_xlat16_6;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_6<1.5);
#else
    u_xlatb2 = u_xlat16_6<1.5;
#endif
    u_xlatb15 = u_xlatb15 && u_xlatb2;
    if(u_xlatb15){
        u_xlat16_2 = _OutlineColor1;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.5<u_xlat16_6);
#else
        u_xlatb15 = 1.5<u_xlat16_6;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_6<2.5);
#else
        u_xlatb3.x = u_xlat16_6<2.5;
#endif
        u_xlatb15 = u_xlatb15 && u_xlatb3.x;
        if(u_xlatb15){
            u_xlat16_2 = _OutlineColor2;
        } else {
            u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_6));
            u_xlatb4 = lessThan(vec4(u_xlat16_6), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
            u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
            u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
            u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
            u_xlat16_4 = (u_xlatb3.w) ? _OutlineColor6 : _OutlineColor0;
            u_xlat16_4 = (u_xlatb3.z) ? _OutlineColor5 : u_xlat16_4;
            u_xlat16_4 = (u_xlatb3.y) ? _OutlineColor4 : u_xlat16_4;
            u_xlat16_2 = (u_xlatb3.x) ? _OutlineColor3 : u_xlat16_4;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb15){
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb15 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb15){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb13.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb13.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb13.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat15 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat15 = vs_TEXCOORD2.z * 17.0 + (-u_xlat15);
            u_xlat15 = u_xlat15 + 0.99000001;
            u_xlat15 = floor(u_xlat15);
            u_xlat15 = max(u_xlat15, 0.0);
            u_xlati15 = int(u_xlat15);
            if((u_xlati15)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat16_2 * u_xlat0;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
mediump vec4 u_xlat16_2;
bool u_xlatb2;
vec2 u_xlat3;
uvec2 u_xlatu3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
bvec4 u_xlatb4;
mediump float u_xlat16_6;
bvec2 u_xlatb13;
float u_xlat15;
lowp float u_xlat10_15;
int u_xlati15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_6 = u_xlat16_6 + 1.0;
    u_xlat16_6 = floor(u_xlat16_6);
    u_xlat16_6 = max(u_xlat16_6, 0.0);
    u_xlati15 = int(u_xlat16_6);
    if((u_xlati15)==0){discard;}
    u_xlat10_15 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_6 = u_xlat10_15 * 8.0;
    u_xlat16_6 = roundEven(u_xlat16_6);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<u_xlat16_6);
#else
    u_xlatb15 = 0.5<u_xlat16_6;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_6<1.5);
#else
    u_xlatb2 = u_xlat16_6<1.5;
#endif
    u_xlatb15 = u_xlatb15 && u_xlatb2;
    if(u_xlatb15){
        u_xlat16_2 = _OutlineColor1;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.5<u_xlat16_6);
#else
        u_xlatb15 = 1.5<u_xlat16_6;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_6<2.5);
#else
        u_xlatb3.x = u_xlat16_6<2.5;
#endif
        u_xlatb15 = u_xlatb15 && u_xlatb3.x;
        if(u_xlatb15){
            u_xlat16_2 = _OutlineColor2;
        } else {
            u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_6));
            u_xlatb4 = lessThan(vec4(u_xlat16_6), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
            u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
            u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
            u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
            u_xlat16_4 = (u_xlatb3.w) ? _OutlineColor6 : _OutlineColor0;
            u_xlat16_4 = (u_xlatb3.z) ? _OutlineColor5 : u_xlat16_4;
            u_xlat16_4 = (u_xlatb3.y) ? _OutlineColor4 : u_xlat16_4;
            u_xlat16_2 = (u_xlatb3.x) ? _OutlineColor3 : u_xlat16_4;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb15){
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb15 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb15){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb13.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb13.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb13.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat15 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat15 = vs_TEXCOORD2.z * 17.0 + (-u_xlat15);
            u_xlat15 = u_xlat15 + 0.99000001;
            u_xlat15 = floor(u_xlat15);
            u_xlat15 = max(u_xlat15, 0.0);
            u_xlati15 = int(u_xlat15);
            if((u_xlati15)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat16_2 * u_xlat0;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
mediump vec4 u_xlat16_2;
bool u_xlatb2;
vec2 u_xlat3;
uvec2 u_xlatu3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
bvec4 u_xlatb4;
mediump float u_xlat16_6;
bvec2 u_xlatb13;
float u_xlat15;
lowp float u_xlat10_15;
int u_xlati15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_6 = u_xlat16_6 + 1.0;
    u_xlat16_6 = floor(u_xlat16_6);
    u_xlat16_6 = max(u_xlat16_6, 0.0);
    u_xlati15 = int(u_xlat16_6);
    if((u_xlati15)==0){discard;}
    u_xlat10_15 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_6 = u_xlat10_15 * 8.0;
    u_xlat16_6 = roundEven(u_xlat16_6);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<u_xlat16_6);
#else
    u_xlatb15 = 0.5<u_xlat16_6;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_6<1.5);
#else
    u_xlatb2 = u_xlat16_6<1.5;
#endif
    u_xlatb15 = u_xlatb15 && u_xlatb2;
    if(u_xlatb15){
        u_xlat16_2 = _OutlineColor1;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.5<u_xlat16_6);
#else
        u_xlatb15 = 1.5<u_xlat16_6;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_6<2.5);
#else
        u_xlatb3.x = u_xlat16_6<2.5;
#endif
        u_xlatb15 = u_xlatb15 && u_xlatb3.x;
        if(u_xlatb15){
            u_xlat16_2 = _OutlineColor2;
        } else {
            u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_6));
            u_xlatb4 = lessThan(vec4(u_xlat16_6), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
            u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
            u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
            u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
            u_xlat16_4 = (u_xlatb3.w) ? _OutlineColor6 : _OutlineColor0;
            u_xlat16_4 = (u_xlatb3.z) ? _OutlineColor5 : u_xlat16_4;
            u_xlat16_4 = (u_xlatb3.y) ? _OutlineColor4 : u_xlat16_4;
            u_xlat16_2 = (u_xlatb3.x) ? _OutlineColor3 : u_xlat16_4;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb15){
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb15 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb15){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb13.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb13.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb13.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat15 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat15 = vs_TEXCOORD2.z * 17.0 + (-u_xlat15);
            u_xlat15 = u_xlat15 + 0.99000001;
            u_xlat15 = floor(u_xlat15);
            u_xlat15 = max(u_xlat15, 0.0);
            u_xlati15 = int(u_xlat15);
            if((u_xlati15)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat16_2 * u_xlat0;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
mediump vec4 u_xlat16_2;
bool u_xlatb2;
vec2 u_xlat3;
uvec2 u_xlatu3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
bvec4 u_xlatb4;
mediump float u_xlat16_6;
bvec2 u_xlatb13;
float u_xlat15;
lowp float u_xlat10_15;
int u_xlati15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_6 = u_xlat16_6 + 1.0;
    u_xlat16_6 = floor(u_xlat16_6);
    u_xlat16_6 = max(u_xlat16_6, 0.0);
    u_xlati15 = int(u_xlat16_6);
    if((u_xlati15)==0){discard;}
    u_xlat10_15 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_6 = u_xlat10_15 * 8.0;
    u_xlat16_6 = roundEven(u_xlat16_6);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<u_xlat16_6);
#else
    u_xlatb15 = 0.5<u_xlat16_6;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_6<1.5);
#else
    u_xlatb2 = u_xlat16_6<1.5;
#endif
    u_xlatb15 = u_xlatb15 && u_xlatb2;
    if(u_xlatb15){
        u_xlat16_2 = _OutlineColor1;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.5<u_xlat16_6);
#else
        u_xlatb15 = 1.5<u_xlat16_6;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_6<2.5);
#else
        u_xlatb3.x = u_xlat16_6<2.5;
#endif
        u_xlatb15 = u_xlatb15 && u_xlatb3.x;
        if(u_xlatb15){
            u_xlat16_2 = _OutlineColor2;
        } else {
            u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_6));
            u_xlatb4 = lessThan(vec4(u_xlat16_6), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
            u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
            u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
            u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
            u_xlat16_4 = (u_xlatb3.w) ? _OutlineColor6 : _OutlineColor0;
            u_xlat16_4 = (u_xlatb3.z) ? _OutlineColor5 : u_xlat16_4;
            u_xlat16_4 = (u_xlatb3.y) ? _OutlineColor4 : u_xlat16_4;
            u_xlat16_2 = (u_xlatb3.x) ? _OutlineColor3 : u_xlat16_4;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb15){
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb15 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb15){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb13.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb13.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb13.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat15 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat15 = vs_TEXCOORD2.z * 17.0 + (-u_xlat15);
            u_xlat15 = u_xlat15 + 0.99000001;
            u_xlat15 = floor(u_xlat15);
            u_xlat15 = max(u_xlat15, 0.0);
            u_xlati15 = int(u_xlat15);
            if((u_xlati15)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat16_2 * u_xlat0;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
mediump vec4 u_xlat16_2;
bool u_xlatb2;
vec2 u_xlat3;
uvec2 u_xlatu3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
bvec4 u_xlatb4;
mediump float u_xlat16_6;
bvec2 u_xlatb13;
float u_xlat15;
lowp float u_xlat10_15;
int u_xlati15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_6 = u_xlat16_6 + 1.0;
    u_xlat16_6 = floor(u_xlat16_6);
    u_xlat16_6 = max(u_xlat16_6, 0.0);
    u_xlati15 = int(u_xlat16_6);
    if((u_xlati15)==0){discard;}
    u_xlat10_15 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_6 = u_xlat10_15 * 8.0;
    u_xlat16_6 = roundEven(u_xlat16_6);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<u_xlat16_6);
#else
    u_xlatb15 = 0.5<u_xlat16_6;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_6<1.5);
#else
    u_xlatb2 = u_xlat16_6<1.5;
#endif
    u_xlatb15 = u_xlatb15 && u_xlatb2;
    if(u_xlatb15){
        u_xlat16_2 = _OutlineColor1;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.5<u_xlat16_6);
#else
        u_xlatb15 = 1.5<u_xlat16_6;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_6<2.5);
#else
        u_xlatb3.x = u_xlat16_6<2.5;
#endif
        u_xlatb15 = u_xlatb15 && u_xlatb3.x;
        if(u_xlatb15){
            u_xlat16_2 = _OutlineColor2;
        } else {
            u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_6));
            u_xlatb4 = lessThan(vec4(u_xlat16_6), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
            u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
            u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
            u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
            u_xlat16_4 = (u_xlatb3.w) ? _OutlineColor6 : _OutlineColor0;
            u_xlat16_4 = (u_xlatb3.z) ? _OutlineColor5 : u_xlat16_4;
            u_xlat16_4 = (u_xlatb3.y) ? _OutlineColor4 : u_xlat16_4;
            u_xlat16_2 = (u_xlatb3.x) ? _OutlineColor3 : u_xlat16_4;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb15){
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb15 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb15){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb13.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb13.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb13.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat15 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat15 = vs_TEXCOORD2.z * 17.0 + (-u_xlat15);
            u_xlat15 = u_xlat15 + 0.99000001;
            u_xlat15 = floor(u_xlat15);
            u_xlat15 = max(u_xlat15, 0.0);
            u_xlati15 = int(u_xlat15);
            if((u_xlati15)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat16_2 * u_xlat0;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
mediump vec4 u_xlat16_2;
bool u_xlatb2;
vec2 u_xlat3;
uvec2 u_xlatu3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
bvec4 u_xlatb4;
mediump float u_xlat16_6;
bvec2 u_xlatb13;
float u_xlat15;
lowp float u_xlat10_15;
int u_xlati15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_6 = u_xlat16_6 + 1.0;
    u_xlat16_6 = floor(u_xlat16_6);
    u_xlat16_6 = max(u_xlat16_6, 0.0);
    u_xlati15 = int(u_xlat16_6);
    if((u_xlati15)==0){discard;}
    u_xlat10_15 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_6 = u_xlat10_15 * 8.0;
    u_xlat16_6 = roundEven(u_xlat16_6);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<u_xlat16_6);
#else
    u_xlatb15 = 0.5<u_xlat16_6;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_6<1.5);
#else
    u_xlatb2 = u_xlat16_6<1.5;
#endif
    u_xlatb15 = u_xlatb15 && u_xlatb2;
    if(u_xlatb15){
        u_xlat16_2 = _OutlineColor1;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.5<u_xlat16_6);
#else
        u_xlatb15 = 1.5<u_xlat16_6;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_6<2.5);
#else
        u_xlatb3.x = u_xlat16_6<2.5;
#endif
        u_xlatb15 = u_xlatb15 && u_xlatb3.x;
        if(u_xlatb15){
            u_xlat16_2 = _OutlineColor2;
        } else {
            u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_6));
            u_xlatb4 = lessThan(vec4(u_xlat16_6), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
            u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
            u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
            u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
            u_xlat16_4 = (u_xlatb3.w) ? _OutlineColor6 : _OutlineColor0;
            u_xlat16_4 = (u_xlatb3.z) ? _OutlineColor5 : u_xlat16_4;
            u_xlat16_4 = (u_xlatb3.y) ? _OutlineColor4 : u_xlat16_4;
            u_xlat16_2 = (u_xlatb3.x) ? _OutlineColor3 : u_xlat16_4;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb15){
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb15 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb15){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb13.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb13.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb13.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat15 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat15 = vs_TEXCOORD2.z * 17.0 + (-u_xlat15);
            u_xlat15 = u_xlat15 + 0.99000001;
            u_xlat15 = floor(u_xlat15);
            u_xlat15 = max(u_xlat15, 0.0);
            u_xlati15 = int(u_xlat15);
            if((u_xlati15)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat16_2 * u_xlat0;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
mediump vec4 u_xlat16_2;
bool u_xlatb2;
vec2 u_xlat3;
uvec2 u_xlatu3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
bvec4 u_xlatb4;
mediump float u_xlat16_6;
bvec2 u_xlatb13;
float u_xlat15;
lowp float u_xlat10_15;
int u_xlati15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_6 = u_xlat16_6 + 1.0;
    u_xlat16_6 = floor(u_xlat16_6);
    u_xlat16_6 = max(u_xlat16_6, 0.0);
    u_xlati15 = int(u_xlat16_6);
    if((u_xlati15)==0){discard;}
    u_xlat10_15 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_6 = u_xlat10_15 * 8.0;
    u_xlat16_6 = roundEven(u_xlat16_6);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<u_xlat16_6);
#else
    u_xlatb15 = 0.5<u_xlat16_6;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_6<1.5);
#else
    u_xlatb2 = u_xlat16_6<1.5;
#endif
    u_xlatb15 = u_xlatb15 && u_xlatb2;
    if(u_xlatb15){
        u_xlat16_2 = _OutlineColor1;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.5<u_xlat16_6);
#else
        u_xlatb15 = 1.5<u_xlat16_6;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_6<2.5);
#else
        u_xlatb3.x = u_xlat16_6<2.5;
#endif
        u_xlatb15 = u_xlatb15 && u_xlatb3.x;
        if(u_xlatb15){
            u_xlat16_2 = _OutlineColor2;
        } else {
            u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_6));
            u_xlatb4 = lessThan(vec4(u_xlat16_6), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
            u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
            u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
            u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
            u_xlat16_4 = (u_xlatb3.w) ? _OutlineColor6 : _OutlineColor0;
            u_xlat16_4 = (u_xlatb3.z) ? _OutlineColor5 : u_xlat16_4;
            u_xlat16_4 = (u_xlatb3.y) ? _OutlineColor4 : u_xlat16_4;
            u_xlat16_2 = (u_xlatb3.x) ? _OutlineColor3 : u_xlat16_4;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb15){
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb15 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb15){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb13.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb13.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb13.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat15 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat15 = vs_TEXCOORD2.z * 17.0 + (-u_xlat15);
            u_xlat15 = u_xlat15 + 0.99000001;
            u_xlat15 = floor(u_xlat15);
            u_xlat15 = max(u_xlat15, 0.0);
            u_xlati15 = int(u_xlat15);
            if((u_xlati15)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat16_2 * u_xlat0;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_MaxOutlineZOffset, _MaxOutlineZOffset, _MaxOutlineZOffset));
    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat1.xyw = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD2.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD2.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor0;
uniform 	mediump vec4 _OutlineColor1;
uniform 	mediump vec4 _OutlineColor2;
uniform 	mediump vec4 _OutlineColor3;
uniform 	mediump vec4 _OutlineColor4;
uniform 	mediump vec4 _OutlineColor5;
uniform 	mediump vec4 _OutlineColor6;
uniform 	mediump float _UsingDitherAlpha;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightMap;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
mediump vec4 u_xlat16_2;
bool u_xlatb2;
vec2 u_xlat3;
uvec2 u_xlatu3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
bvec4 u_xlatb4;
mediump float u_xlat16_6;
bvec2 u_xlatb13;
float u_xlat15;
lowp float u_xlat10_15;
int u_xlati15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_6 = u_xlat16_6 + 1.0;
    u_xlat16_6 = floor(u_xlat16_6);
    u_xlat16_6 = max(u_xlat16_6, 0.0);
    u_xlati15 = int(u_xlat16_6);
    if((u_xlati15)==0){discard;}
    u_xlat10_15 = texture(_LightMap, vs_TEXCOORD0.xy).w;
    u_xlat16_6 = u_xlat10_15 * 8.0;
    u_xlat16_6 = roundEven(u_xlat16_6);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<u_xlat16_6);
#else
    u_xlatb15 = 0.5<u_xlat16_6;
#endif
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_6<1.5);
#else
    u_xlatb2 = u_xlat16_6<1.5;
#endif
    u_xlatb15 = u_xlatb15 && u_xlatb2;
    if(u_xlatb15){
        u_xlat16_2 = _OutlineColor1;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.5<u_xlat16_6);
#else
        u_xlatb15 = 1.5<u_xlat16_6;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb3.x = !!(u_xlat16_6<2.5);
#else
        u_xlatb3.x = u_xlat16_6<2.5;
#endif
        u_xlatb15 = u_xlatb15 && u_xlatb3.x;
        if(u_xlatb15){
            u_xlat16_2 = _OutlineColor2;
        } else {
            u_xlatb3 = lessThan(vec4(2.5, 3.5, 4.5, 5.5), vec4(u_xlat16_6));
            u_xlatb4 = lessThan(vec4(u_xlat16_6), vec4(3.5, 4.5, 5.5, 6.5));
            u_xlatb3.x = u_xlatb3.x && u_xlatb4.x;
            u_xlatb3.y = u_xlatb3.y && u_xlatb4.y;
            u_xlatb3.z = u_xlatb3.z && u_xlatb4.z;
            u_xlatb3.w = u_xlatb3.w && u_xlatb4.w;
            u_xlat16_4 = (u_xlatb3.w) ? _OutlineColor6 : _OutlineColor0;
            u_xlat16_4 = (u_xlatb3.z) ? _OutlineColor5 : u_xlat16_4;
            u_xlat16_4 = (u_xlatb3.y) ? _OutlineColor4 : u_xlat16_4;
            u_xlat16_2 = (u_xlatb3.x) ? _OutlineColor3 : u_xlat16_4;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb15 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb15){
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(vs_TEXCOORD2.z<0.949999988);
#else
        u_xlatb15 = vs_TEXCOORD2.z<0.949999988;
#endif
        if(u_xlatb15){
            u_xlat3.xy = vs_TEXCOORD2.yx / vs_TEXCOORD2.ww;
            u_xlat3.xy = u_xlat3.xy * _ScreenParams.yx;
            u_xlat3.xy = u_xlat3.xy * vec2(0.25, 0.25);
            u_xlatb13.xy = greaterThanEqual(u_xlat3.xyxy, (-u_xlat3.xyxy)).xy;
            u_xlat3.xy = fract(abs(u_xlat3.xy));
            u_xlat3.x = (u_xlatb13.x) ? u_xlat3.x : (-u_xlat3.x);
            u_xlat3.y = (u_xlatb13.y) ? u_xlat3.y : (-u_xlat3.y);
            u_xlat3.xy = u_xlat3.xy * vec2(4.0, 4.0);
            u_xlatu3.xy = uvec2(u_xlat3.xy);
            u_xlat4.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat4.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu3.y)]);
            u_xlat15 = dot(u_xlat4, ImmCB_0_0_0[int(u_xlatu3.x)]);
            u_xlat15 = vs_TEXCOORD2.z * 17.0 + (-u_xlat15);
            u_xlat15 = u_xlat15 + 0.99000001;
            u_xlat15 = floor(u_xlat15);
            u_xlat15 = max(u_xlat15, 0.0);
            u_xlati15 = int(u_xlat15);
            if((u_xlati15)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat16_2 * u_xlat0;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_MULTI_OUTLINE_ON" "_OUTLINENORMALFROM_UV2" }
""
}
}
}
 Pass {
  Name "TRANSPARENTSLIDEFXOUTLINE"
  Tags { "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  Cull Front
  GpuProgramID 346457
Program "vp" {
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
vec2 u_xlat3;
float u_xlat5;
bvec2 u_xlatb8;
float u_xlat9;
lowp float u_xlat10_9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD4.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat1.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat1.x = (-u_xlat1.x) + vs_TEXCOORD3.y;
    u_xlat5 = float(1.0) / _SlideFxSmoothStep;
    u_xlat1.x = u_xlat5 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat9 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat5 = u_xlat5 * u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat5 * -2.0 + 3.0;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat5 = u_xlat9 * u_xlat5 + (-u_xlat1.x);
    u_xlat10_9 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat1.x = u_xlat5 * u_xlat10_9 + u_xlat1.x;
    SV_Target0.w = u_xlat0.w * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
vec2 u_xlat3;
float u_xlat5;
bvec2 u_xlatb8;
float u_xlat9;
lowp float u_xlat10_9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD4.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat1.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat1.x = (-u_xlat1.x) + vs_TEXCOORD3.y;
    u_xlat5 = float(1.0) / _SlideFxSmoothStep;
    u_xlat1.x = u_xlat5 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat9 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat5 = u_xlat5 * u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat5 * -2.0 + 3.0;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat5 = u_xlat9 * u_xlat5 + (-u_xlat1.x);
    u_xlat10_9 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat1.x = u_xlat5 * u_xlat10_9 + u_xlat1.x;
    SV_Target0.w = u_xlat0.w * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
vec2 u_xlat3;
float u_xlat5;
bvec2 u_xlatb8;
float u_xlat9;
lowp float u_xlat10_9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD4.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat1.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat1.x = (-u_xlat1.x) + vs_TEXCOORD3.y;
    u_xlat5 = float(1.0) / _SlideFxSmoothStep;
    u_xlat1.x = u_xlat5 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat9 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat5 = u_xlat5 * u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat5 * -2.0 + 3.0;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat5 = u_xlat9 * u_xlat5 + (-u_xlat1.x);
    u_xlat10_9 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat1.x = u_xlat5 * u_xlat10_9 + u_xlat1.x;
    SV_Target0.w = u_xlat0.w * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
vec2 u_xlat3;
float u_xlat5;
bvec2 u_xlatb8;
float u_xlat9;
lowp float u_xlat10_9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD4.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat1.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat1.x = (-u_xlat1.x) + vs_TEXCOORD3.y;
    u_xlat5 = float(1.0) / _SlideFxSmoothStep;
    u_xlat1.x = u_xlat5 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat9 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat5 = u_xlat5 * u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat5 * -2.0 + 3.0;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat5 = u_xlat9 * u_xlat5 + (-u_xlat1.x);
    u_xlat10_9 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat1.x = u_xlat5 * u_xlat10_9 + u_xlat1.x;
    SV_Target0.w = u_xlat0.w * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
vec2 u_xlat3;
float u_xlat5;
bvec2 u_xlatb8;
float u_xlat9;
lowp float u_xlat10_9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD4.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat1.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat1.x = (-u_xlat1.x) + vs_TEXCOORD3.y;
    u_xlat5 = float(1.0) / _SlideFxSmoothStep;
    u_xlat1.x = u_xlat5 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat9 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat5 = u_xlat5 * u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat5 * -2.0 + 3.0;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat5 = u_xlat9 * u_xlat5 + (-u_xlat1.x);
    u_xlat10_9 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat1.x = u_xlat5 * u_xlat10_9 + u_xlat1.x;
    SV_Target0.w = u_xlat0.w * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
vec2 u_xlat3;
float u_xlat5;
bvec2 u_xlatb8;
float u_xlat9;
lowp float u_xlat10_9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD4.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat1.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat1.x = (-u_xlat1.x) + vs_TEXCOORD3.y;
    u_xlat5 = float(1.0) / _SlideFxSmoothStep;
    u_xlat1.x = u_xlat5 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat9 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat5 = u_xlat5 * u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat5 * -2.0 + 3.0;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat5 = u_xlat9 * u_xlat5 + (-u_xlat1.x);
    u_xlat10_9 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat1.x = u_xlat5 * u_xlat10_9 + u_xlat1.x;
    SV_Target0.w = u_xlat0.w * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
vec2 u_xlat3;
float u_xlat5;
bvec2 u_xlatb8;
float u_xlat9;
lowp float u_xlat10_9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD4.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat1.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat1.x = (-u_xlat1.x) + vs_TEXCOORD3.y;
    u_xlat5 = float(1.0) / _SlideFxSmoothStep;
    u_xlat1.x = u_xlat5 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat9 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat5 = u_xlat5 * u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat5 * -2.0 + 3.0;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat5 = u_xlat9 * u_xlat5 + (-u_xlat1.x);
    u_xlat10_9 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat1.x = u_xlat5 * u_xlat10_9 + u_xlat1.x;
    SV_Target0.w = u_xlat0.w * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
vec2 u_xlat3;
float u_xlat5;
bvec2 u_xlatb8;
float u_xlat9;
lowp float u_xlat10_9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD4.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat1.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat1.x = (-u_xlat1.x) + vs_TEXCOORD3.y;
    u_xlat5 = float(1.0) / _SlideFxSmoothStep;
    u_xlat1.x = u_xlat5 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat9 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat5 = u_xlat5 * u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat5 * -2.0 + 3.0;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat5 = u_xlat9 * u_xlat5 + (-u_xlat1.x);
    u_xlat10_9 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat1.x = u_xlat5 * u_xlat10_9 + u_xlat1.x;
    SV_Target0.w = u_xlat0.w * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
vec2 u_xlat3;
float u_xlat5;
bvec2 u_xlatb8;
float u_xlat9;
lowp float u_xlat10_9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD4.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat1.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat1.x = (-u_xlat1.x) + vs_TEXCOORD3.y;
    u_xlat5 = float(1.0) / _SlideFxSmoothStep;
    u_xlat1.x = u_xlat5 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat9 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat5 = u_xlat5 * u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat5 * -2.0 + 3.0;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat5 = u_xlat9 * u_xlat5 + (-u_xlat1.x);
    u_xlat10_9 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat1.x = u_xlat5 * u_xlat10_9 + u_xlat1.x;
    SV_Target0.w = u_xlat0.w * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD4.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat2.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat2.x = (-u_xlat2.x) + vs_TEXCOORD3.y;
    u_xlat6 = float(1.0) / _SlideFxSmoothStep;
    u_xlat2.x = u_xlat6 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat10 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat6 = u_xlat6 * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat6 = u_xlat10 * u_xlat6 + (-u_xlat2.x);
    u_xlat10_10 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat6 * u_xlat10_10 + u_xlat2.x;
    SV_Target0.w = u_xlat0.w * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD4.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat2.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat2.x = (-u_xlat2.x) + vs_TEXCOORD3.y;
    u_xlat6 = float(1.0) / _SlideFxSmoothStep;
    u_xlat2.x = u_xlat6 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat10 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat6 = u_xlat6 * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat6 = u_xlat10 * u_xlat6 + (-u_xlat2.x);
    u_xlat10_10 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat6 * u_xlat10_10 + u_xlat2.x;
    SV_Target0.w = u_xlat0.w * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD4.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat2.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat2.x = (-u_xlat2.x) + vs_TEXCOORD3.y;
    u_xlat6 = float(1.0) / _SlideFxSmoothStep;
    u_xlat2.x = u_xlat6 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat10 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat6 = u_xlat6 * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat6 = u_xlat10 * u_xlat6 + (-u_xlat2.x);
    u_xlat10_10 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat6 * u_xlat10_10 + u_xlat2.x;
    SV_Target0.w = u_xlat0.w * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD4.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat2.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat2.x = (-u_xlat2.x) + vs_TEXCOORD3.y;
    u_xlat6 = float(1.0) / _SlideFxSmoothStep;
    u_xlat2.x = u_xlat6 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat10 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat6 = u_xlat6 * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat6 = u_xlat10 * u_xlat6 + (-u_xlat2.x);
    u_xlat10_10 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat6 * u_xlat10_10 + u_xlat2.x;
    SV_Target0.w = u_xlat0.w * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD4.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat2.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat2.x = (-u_xlat2.x) + vs_TEXCOORD3.y;
    u_xlat6 = float(1.0) / _SlideFxSmoothStep;
    u_xlat2.x = u_xlat6 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat10 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat6 = u_xlat6 * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat6 = u_xlat10 * u_xlat6 + (-u_xlat2.x);
    u_xlat10_10 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat6 * u_xlat10_10 + u_xlat2.x;
    SV_Target0.w = u_xlat0.w * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD4.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat2.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat2.x = (-u_xlat2.x) + vs_TEXCOORD3.y;
    u_xlat6 = float(1.0) / _SlideFxSmoothStep;
    u_xlat2.x = u_xlat6 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat10 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat6 = u_xlat6 * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat6 = u_xlat10 * u_xlat6 + (-u_xlat2.x);
    u_xlat10_10 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat6 * u_xlat10_10 + u_xlat2.x;
    SV_Target0.w = u_xlat0.w * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD4.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat2.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat2.x = (-u_xlat2.x) + vs_TEXCOORD3.y;
    u_xlat6 = float(1.0) / _SlideFxSmoothStep;
    u_xlat2.x = u_xlat6 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat10 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat6 = u_xlat6 * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat6 = u_xlat10 * u_xlat6 + (-u_xlat2.x);
    u_xlat10_10 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat6 * u_xlat10_10 + u_xlat2.x;
    SV_Target0.w = u_xlat0.w * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD4.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat2.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat2.x = (-u_xlat2.x) + vs_TEXCOORD3.y;
    u_xlat6 = float(1.0) / _SlideFxSmoothStep;
    u_xlat2.x = u_xlat6 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat10 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat6 = u_xlat6 * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat6 = u_xlat10 * u_xlat6 + (-u_xlat2.x);
    u_xlat10_10 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat6 * u_xlat10_10 + u_xlat2.x;
    SV_Target0.w = u_xlat0.w * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD4.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat2.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat2.x = (-u_xlat2.x) + vs_TEXCOORD3.y;
    u_xlat6 = float(1.0) / _SlideFxSmoothStep;
    u_xlat2.x = u_xlat6 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat10 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat6 = u_xlat6 * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat6 = u_xlat10 * u_xlat6 + (-u_xlat2.x);
    u_xlat10_10 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat6 * u_xlat10_10 + u_xlat2.x;
    SV_Target0.w = u_xlat0.w * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
}
}
 Pass {
  Name "TRANSPARENTSLIDEFXOUTLINE"
  Tags { "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  Cull Front
  GpuProgramID 435938
Program "vp" {
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
vec2 u_xlat3;
float u_xlat5;
bvec2 u_xlatb8;
float u_xlat9;
lowp float u_xlat10_9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD4.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat1.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat1.x = (-u_xlat1.x) + vs_TEXCOORD3.y;
    u_xlat5 = float(1.0) / _SlideFxSmoothStep;
    u_xlat1.x = u_xlat5 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat9 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat5 = u_xlat5 * u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat5 * -2.0 + 3.0;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat5 = u_xlat9 * u_xlat5 + (-u_xlat1.x);
    u_xlat10_9 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat1.x = u_xlat5 * u_xlat10_9 + u_xlat1.x;
    SV_Target0.w = u_xlat0.w * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
vec2 u_xlat3;
float u_xlat5;
bvec2 u_xlatb8;
float u_xlat9;
lowp float u_xlat10_9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD4.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat1.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat1.x = (-u_xlat1.x) + vs_TEXCOORD3.y;
    u_xlat5 = float(1.0) / _SlideFxSmoothStep;
    u_xlat1.x = u_xlat5 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat9 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat5 = u_xlat5 * u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat5 * -2.0 + 3.0;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat5 = u_xlat9 * u_xlat5 + (-u_xlat1.x);
    u_xlat10_9 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat1.x = u_xlat5 * u_xlat10_9 + u_xlat1.x;
    SV_Target0.w = u_xlat0.w * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
vec2 u_xlat3;
float u_xlat5;
bvec2 u_xlatb8;
float u_xlat9;
lowp float u_xlat10_9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD4.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat1.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat1.x = (-u_xlat1.x) + vs_TEXCOORD3.y;
    u_xlat5 = float(1.0) / _SlideFxSmoothStep;
    u_xlat1.x = u_xlat5 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat9 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat5 = u_xlat5 * u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat5 * -2.0 + 3.0;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat5 = u_xlat9 * u_xlat5 + (-u_xlat1.x);
    u_xlat10_9 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat1.x = u_xlat5 * u_xlat10_9 + u_xlat1.x;
    SV_Target0.w = u_xlat0.w * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
vec2 u_xlat3;
float u_xlat5;
bvec2 u_xlatb8;
float u_xlat9;
lowp float u_xlat10_9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD4.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat1.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat1.x = (-u_xlat1.x) + vs_TEXCOORD3.y;
    u_xlat5 = float(1.0) / _SlideFxSmoothStep;
    u_xlat1.x = u_xlat5 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat9 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat5 = u_xlat5 * u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat5 * -2.0 + 3.0;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat5 = u_xlat9 * u_xlat5 + (-u_xlat1.x);
    u_xlat10_9 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat1.x = u_xlat5 * u_xlat10_9 + u_xlat1.x;
    SV_Target0.w = u_xlat0.w * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
vec2 u_xlat3;
float u_xlat5;
bvec2 u_xlatb8;
float u_xlat9;
lowp float u_xlat10_9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD4.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat1.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat1.x = (-u_xlat1.x) + vs_TEXCOORD3.y;
    u_xlat5 = float(1.0) / _SlideFxSmoothStep;
    u_xlat1.x = u_xlat5 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat9 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat5 = u_xlat5 * u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat5 * -2.0 + 3.0;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat5 = u_xlat9 * u_xlat5 + (-u_xlat1.x);
    u_xlat10_9 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat1.x = u_xlat5 * u_xlat10_9 + u_xlat1.x;
    SV_Target0.w = u_xlat0.w * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
vec2 u_xlat3;
float u_xlat5;
bvec2 u_xlatb8;
float u_xlat9;
lowp float u_xlat10_9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD4.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat1.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat1.x = (-u_xlat1.x) + vs_TEXCOORD3.y;
    u_xlat5 = float(1.0) / _SlideFxSmoothStep;
    u_xlat1.x = u_xlat5 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat9 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat5 = u_xlat5 * u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat5 * -2.0 + 3.0;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat5 = u_xlat9 * u_xlat5 + (-u_xlat1.x);
    u_xlat10_9 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat1.x = u_xlat5 * u_xlat10_9 + u_xlat1.x;
    SV_Target0.w = u_xlat0.w * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
vec2 u_xlat3;
float u_xlat5;
bvec2 u_xlatb8;
float u_xlat9;
lowp float u_xlat10_9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD4.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat1.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat1.x = (-u_xlat1.x) + vs_TEXCOORD3.y;
    u_xlat5 = float(1.0) / _SlideFxSmoothStep;
    u_xlat1.x = u_xlat5 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat9 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat5 = u_xlat5 * u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat5 * -2.0 + 3.0;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat5 = u_xlat9 * u_xlat5 + (-u_xlat1.x);
    u_xlat10_9 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat1.x = u_xlat5 * u_xlat10_9 + u_xlat1.x;
    SV_Target0.w = u_xlat0.w * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
vec2 u_xlat3;
float u_xlat5;
bvec2 u_xlatb8;
float u_xlat9;
lowp float u_xlat10_9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD4.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat1.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat1.x = (-u_xlat1.x) + vs_TEXCOORD3.y;
    u_xlat5 = float(1.0) / _SlideFxSmoothStep;
    u_xlat1.x = u_xlat5 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat9 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat5 = u_xlat5 * u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat5 * -2.0 + 3.0;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat5 = u_xlat9 * u_xlat5 + (-u_xlat1.x);
    u_xlat10_9 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat1.x = u_xlat5 * u_xlat10_9 + u_xlat1.x;
    SV_Target0.w = u_xlat0.w * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
vec2 u_xlat3;
float u_xlat5;
bvec2 u_xlatb8;
float u_xlat9;
lowp float u_xlat10_9;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD4.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat1.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat1.x = (-u_xlat1.x) + vs_TEXCOORD3.y;
    u_xlat5 = float(1.0) / _SlideFxSmoothStep;
    u_xlat1.x = u_xlat5 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat9 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat5 = u_xlat5 * u_xlat9;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat5 * -2.0 + 3.0;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat5 = u_xlat9 * u_xlat5 + (-u_xlat1.x);
    u_xlat10_9 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat1.x = u_xlat5 * u_xlat10_9 + u_xlat1.x;
    SV_Target0.w = u_xlat0.w * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD4.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat2.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat2.x = (-u_xlat2.x) + vs_TEXCOORD3.y;
    u_xlat6 = float(1.0) / _SlideFxSmoothStep;
    u_xlat2.x = u_xlat6 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat10 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat6 = u_xlat6 * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat6 = u_xlat10 * u_xlat6 + (-u_xlat2.x);
    u_xlat10_10 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat6 * u_xlat10_10 + u_xlat2.x;
    SV_Target0.w = u_xlat0.w * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD4.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat2.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat2.x = (-u_xlat2.x) + vs_TEXCOORD3.y;
    u_xlat6 = float(1.0) / _SlideFxSmoothStep;
    u_xlat2.x = u_xlat6 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat10 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat6 = u_xlat6 * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat6 = u_xlat10 * u_xlat6 + (-u_xlat2.x);
    u_xlat10_10 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat6 * u_xlat10_10 + u_xlat2.x;
    SV_Target0.w = u_xlat0.w * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD4.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat2.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat2.x = (-u_xlat2.x) + vs_TEXCOORD3.y;
    u_xlat6 = float(1.0) / _SlideFxSmoothStep;
    u_xlat2.x = u_xlat6 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat10 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat6 = u_xlat6 * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat6 = u_xlat10 * u_xlat6 + (-u_xlat2.x);
    u_xlat10_10 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat6 * u_xlat10_10 + u_xlat2.x;
    SV_Target0.w = u_xlat0.w * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD4.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat2.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat2.x = (-u_xlat2.x) + vs_TEXCOORD3.y;
    u_xlat6 = float(1.0) / _SlideFxSmoothStep;
    u_xlat2.x = u_xlat6 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat10 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat6 = u_xlat6 * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat6 = u_xlat10 * u_xlat6 + (-u_xlat2.x);
    u_xlat10_10 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat6 * u_xlat10_10 + u_xlat2.x;
    SV_Target0.w = u_xlat0.w * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD4.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat2.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat2.x = (-u_xlat2.x) + vs_TEXCOORD3.y;
    u_xlat6 = float(1.0) / _SlideFxSmoothStep;
    u_xlat2.x = u_xlat6 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat10 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat6 = u_xlat6 * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat6 = u_xlat10 * u_xlat6 + (-u_xlat2.x);
    u_xlat10_10 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat6 * u_xlat10_10 + u_xlat2.x;
    SV_Target0.w = u_xlat0.w * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD4.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat2.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat2.x = (-u_xlat2.x) + vs_TEXCOORD3.y;
    u_xlat6 = float(1.0) / _SlideFxSmoothStep;
    u_xlat2.x = u_xlat6 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat10 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat6 = u_xlat6 * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat6 = u_xlat10 * u_xlat6 + (-u_xlat2.x);
    u_xlat10_10 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat6 * u_xlat10_10 + u_xlat2.x;
    SV_Target0.w = u_xlat0.w * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD4.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat2.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat2.x = (-u_xlat2.x) + vs_TEXCOORD3.y;
    u_xlat6 = float(1.0) / _SlideFxSmoothStep;
    u_xlat2.x = u_xlat6 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat10 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat6 = u_xlat6 * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat6 = u_xlat10 * u_xlat6 + (-u_xlat2.x);
    u_xlat10_10 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat6 * u_xlat10_10 + u_xlat2.x;
    SV_Target0.w = u_xlat0.w * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD4.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat2.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat2.x = (-u_xlat2.x) + vs_TEXCOORD3.y;
    u_xlat6 = float(1.0) / _SlideFxSmoothStep;
    u_xlat2.x = u_xlat6 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat10 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat6 = u_xlat6 * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat6 = u_xlat10 * u_xlat6 + (-u_xlat2.x);
    u_xlat10_10 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat6 * u_xlat10_10 + u_xlat2.x;
    SV_Target0.w = u_xlat0.w * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _SlideFxSlide;
uniform 	float _SlideFxEdge;
uniform 	float _SlideFxSmoothStep;
uniform 	vec4 _SlideFxNoiseTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SlideFxNoiseTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
float u_xlat6;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD4.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat2.x = _SlideFxEdge + _SlideFxSlide;
    u_xlat2.x = (-u_xlat2.x) + vs_TEXCOORD3.y;
    u_xlat6 = float(1.0) / _SlideFxSmoothStep;
    u_xlat2.x = u_xlat6 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat2.x * -2.0 + 3.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat10 = vs_TEXCOORD3.y + (-_SlideFxSlide);
    u_xlat6 = u_xlat6 * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat3.xy = vs_TEXCOORD2.xy * _SlideFxNoiseTex_ST.xy + _SlideFxNoiseTex_ST.zw;
    u_xlat6 = u_xlat10 * u_xlat6 + (-u_xlat2.x);
    u_xlat10_10 = texture(_SlideFxNoiseTex, u_xlat3.xy).x;
    u_xlat2.x = u_xlat6 * u_xlat10_10 + u_xlat2.x;
    SV_Target0.w = u_xlat0.w * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
}
}
 Pass {
  Name "TRANSPARENTBLOCKFXOUTLINE"
  Tags { "LIGHTMODE" = "FORWARDBASE" "PerformanceChecks" = "False" "QUEUE" = "Geometry" "RenderType" = "Opaque" }
  Cull Front
  GpuProgramID 523998
Program "vp" {
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _BlockFxClip1;
uniform 	float _Clip1Direction;
uniform 	float _BlockFxClip2Edge;
uniform 	float _BlockFxClip1Edge;
uniform 	vec2 _BlockFxBlockTexSpeed;
uniform 	float _BlockFxBlockTexTilline;
uniform 	vec4 _BlockFxLineTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BlockFxBlockTex;
uniform lowp sampler2D _BlockFxLineTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
vec2 u_xlat3;
vec2 u_xlat5;
lowp float u_xlat10_5;
bvec2 u_xlatb8;
float u_xlat9;
lowp float u_xlat10_9;
float u_xlat13;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD4.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat1.x = _BlockFxClip1 + _BlockFxClip1Edge;
    u_xlat5.xy = vs_TEXCOORD0.xy * vec2(vec2(_BlockFxBlockTexTilline, _BlockFxBlockTexTilline));
    u_xlat5.xy = _Time.yy * vec2(_BlockFxBlockTexSpeed.x, _BlockFxBlockTexSpeed.y) + u_xlat5.xy;
    u_xlat10_5 = texture(_BlockFxBlockTex, u_xlat5.xy).x;
    u_xlat5.x = u_xlat10_5 * vs_TEXCOORD3.y;
    u_xlat9 = _Clip1Direction + -2.0;
    u_xlat13 = _BlockFxClip2Edge + _BlockFxClip1;
    u_xlat1.x = u_xlat1.x + _BlockFxClip2Edge;
    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
    u_xlat13 = u_xlat5.x * u_xlat9 + (-u_xlat13);
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat13 = u_xlat1.x * -2.0 + 3.0;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BlockFxLineTex_ST.xy + _BlockFxLineTex_ST.zw;
    u_xlat5.x = u_xlat5.x * u_xlat9 + (-_BlockFxClip1);
    u_xlat9 = float(1.0) / _BlockFxClip1Edge;
    u_xlat1.y = u_xlat9 * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat1.y * -2.0 + 3.0;
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat5.x = u_xlat1.y * u_xlat9;
    u_xlat10_9 = texture(_BlockFxLineTex, u_xlat3.xy).x;
    u_xlat5.x = u_xlat5.x * u_xlat10_9;
    u_xlat1.x = u_xlat13 * u_xlat1.x + u_xlat5.x;
    SV_Target0.w = u_xlat0.w * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _BlockFxClip1;
uniform 	float _Clip1Direction;
uniform 	float _BlockFxClip2Edge;
uniform 	float _BlockFxClip1Edge;
uniform 	vec2 _BlockFxBlockTexSpeed;
uniform 	float _BlockFxBlockTexTilline;
uniform 	vec4 _BlockFxLineTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BlockFxBlockTex;
uniform lowp sampler2D _BlockFxLineTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
vec2 u_xlat3;
vec2 u_xlat5;
lowp float u_xlat10_5;
bvec2 u_xlatb8;
float u_xlat9;
lowp float u_xlat10_9;
float u_xlat13;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD4.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat1.x = _BlockFxClip1 + _BlockFxClip1Edge;
    u_xlat5.xy = vs_TEXCOORD0.xy * vec2(vec2(_BlockFxBlockTexTilline, _BlockFxBlockTexTilline));
    u_xlat5.xy = _Time.yy * vec2(_BlockFxBlockTexSpeed.x, _BlockFxBlockTexSpeed.y) + u_xlat5.xy;
    u_xlat10_5 = texture(_BlockFxBlockTex, u_xlat5.xy).x;
    u_xlat5.x = u_xlat10_5 * vs_TEXCOORD3.y;
    u_xlat9 = _Clip1Direction + -2.0;
    u_xlat13 = _BlockFxClip2Edge + _BlockFxClip1;
    u_xlat1.x = u_xlat1.x + _BlockFxClip2Edge;
    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
    u_xlat13 = u_xlat5.x * u_xlat9 + (-u_xlat13);
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat13 = u_xlat1.x * -2.0 + 3.0;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BlockFxLineTex_ST.xy + _BlockFxLineTex_ST.zw;
    u_xlat5.x = u_xlat5.x * u_xlat9 + (-_BlockFxClip1);
    u_xlat9 = float(1.0) / _BlockFxClip1Edge;
    u_xlat1.y = u_xlat9 * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat1.y * -2.0 + 3.0;
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat5.x = u_xlat1.y * u_xlat9;
    u_xlat10_9 = texture(_BlockFxLineTex, u_xlat3.xy).x;
    u_xlat5.x = u_xlat5.x * u_xlat10_9;
    u_xlat1.x = u_xlat13 * u_xlat1.x + u_xlat5.x;
    SV_Target0.w = u_xlat0.w * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _BlockFxClip1;
uniform 	float _Clip1Direction;
uniform 	float _BlockFxClip2Edge;
uniform 	float _BlockFxClip1Edge;
uniform 	vec2 _BlockFxBlockTexSpeed;
uniform 	float _BlockFxBlockTexTilline;
uniform 	vec4 _BlockFxLineTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BlockFxBlockTex;
uniform lowp sampler2D _BlockFxLineTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
vec2 u_xlat3;
vec2 u_xlat5;
lowp float u_xlat10_5;
bvec2 u_xlatb8;
float u_xlat9;
lowp float u_xlat10_9;
float u_xlat13;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD4.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat1.x = _BlockFxClip1 + _BlockFxClip1Edge;
    u_xlat5.xy = vs_TEXCOORD0.xy * vec2(vec2(_BlockFxBlockTexTilline, _BlockFxBlockTexTilline));
    u_xlat5.xy = _Time.yy * vec2(_BlockFxBlockTexSpeed.x, _BlockFxBlockTexSpeed.y) + u_xlat5.xy;
    u_xlat10_5 = texture(_BlockFxBlockTex, u_xlat5.xy).x;
    u_xlat5.x = u_xlat10_5 * vs_TEXCOORD3.y;
    u_xlat9 = _Clip1Direction + -2.0;
    u_xlat13 = _BlockFxClip2Edge + _BlockFxClip1;
    u_xlat1.x = u_xlat1.x + _BlockFxClip2Edge;
    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
    u_xlat13 = u_xlat5.x * u_xlat9 + (-u_xlat13);
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat13 = u_xlat1.x * -2.0 + 3.0;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BlockFxLineTex_ST.xy + _BlockFxLineTex_ST.zw;
    u_xlat5.x = u_xlat5.x * u_xlat9 + (-_BlockFxClip1);
    u_xlat9 = float(1.0) / _BlockFxClip1Edge;
    u_xlat1.y = u_xlat9 * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat1.y * -2.0 + 3.0;
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat5.x = u_xlat1.y * u_xlat9;
    u_xlat10_9 = texture(_BlockFxLineTex, u_xlat3.xy).x;
    u_xlat5.x = u_xlat5.x * u_xlat10_9;
    u_xlat1.x = u_xlat13 * u_xlat1.x + u_xlat5.x;
    SV_Target0.w = u_xlat0.w * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _BlockFxClip1;
uniform 	float _Clip1Direction;
uniform 	float _BlockFxClip2Edge;
uniform 	float _BlockFxClip1Edge;
uniform 	vec2 _BlockFxBlockTexSpeed;
uniform 	float _BlockFxBlockTexTilline;
uniform 	vec4 _BlockFxLineTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BlockFxBlockTex;
uniform lowp sampler2D _BlockFxLineTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
vec2 u_xlat3;
vec2 u_xlat5;
lowp float u_xlat10_5;
bvec2 u_xlatb8;
float u_xlat9;
lowp float u_xlat10_9;
float u_xlat13;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD4.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat1.x = _BlockFxClip1 + _BlockFxClip1Edge;
    u_xlat5.xy = vs_TEXCOORD0.xy * vec2(vec2(_BlockFxBlockTexTilline, _BlockFxBlockTexTilline));
    u_xlat5.xy = _Time.yy * vec2(_BlockFxBlockTexSpeed.x, _BlockFxBlockTexSpeed.y) + u_xlat5.xy;
    u_xlat10_5 = texture(_BlockFxBlockTex, u_xlat5.xy).x;
    u_xlat5.x = u_xlat10_5 * vs_TEXCOORD3.y;
    u_xlat9 = _Clip1Direction + -2.0;
    u_xlat13 = _BlockFxClip2Edge + _BlockFxClip1;
    u_xlat1.x = u_xlat1.x + _BlockFxClip2Edge;
    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
    u_xlat13 = u_xlat5.x * u_xlat9 + (-u_xlat13);
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat13 = u_xlat1.x * -2.0 + 3.0;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BlockFxLineTex_ST.xy + _BlockFxLineTex_ST.zw;
    u_xlat5.x = u_xlat5.x * u_xlat9 + (-_BlockFxClip1);
    u_xlat9 = float(1.0) / _BlockFxClip1Edge;
    u_xlat1.y = u_xlat9 * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat1.y * -2.0 + 3.0;
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat5.x = u_xlat1.y * u_xlat9;
    u_xlat10_9 = texture(_BlockFxLineTex, u_xlat3.xy).x;
    u_xlat5.x = u_xlat5.x * u_xlat10_9;
    u_xlat1.x = u_xlat13 * u_xlat1.x + u_xlat5.x;
    SV_Target0.w = u_xlat0.w * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _BlockFxClip1;
uniform 	float _Clip1Direction;
uniform 	float _BlockFxClip2Edge;
uniform 	float _BlockFxClip1Edge;
uniform 	vec2 _BlockFxBlockTexSpeed;
uniform 	float _BlockFxBlockTexTilline;
uniform 	vec4 _BlockFxLineTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BlockFxBlockTex;
uniform lowp sampler2D _BlockFxLineTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
vec2 u_xlat3;
vec2 u_xlat5;
lowp float u_xlat10_5;
bvec2 u_xlatb8;
float u_xlat9;
lowp float u_xlat10_9;
float u_xlat13;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD4.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat1.x = _BlockFxClip1 + _BlockFxClip1Edge;
    u_xlat5.xy = vs_TEXCOORD0.xy * vec2(vec2(_BlockFxBlockTexTilline, _BlockFxBlockTexTilline));
    u_xlat5.xy = _Time.yy * vec2(_BlockFxBlockTexSpeed.x, _BlockFxBlockTexSpeed.y) + u_xlat5.xy;
    u_xlat10_5 = texture(_BlockFxBlockTex, u_xlat5.xy).x;
    u_xlat5.x = u_xlat10_5 * vs_TEXCOORD3.y;
    u_xlat9 = _Clip1Direction + -2.0;
    u_xlat13 = _BlockFxClip2Edge + _BlockFxClip1;
    u_xlat1.x = u_xlat1.x + _BlockFxClip2Edge;
    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
    u_xlat13 = u_xlat5.x * u_xlat9 + (-u_xlat13);
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat13 = u_xlat1.x * -2.0 + 3.0;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BlockFxLineTex_ST.xy + _BlockFxLineTex_ST.zw;
    u_xlat5.x = u_xlat5.x * u_xlat9 + (-_BlockFxClip1);
    u_xlat9 = float(1.0) / _BlockFxClip1Edge;
    u_xlat1.y = u_xlat9 * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat1.y * -2.0 + 3.0;
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat5.x = u_xlat1.y * u_xlat9;
    u_xlat10_9 = texture(_BlockFxLineTex, u_xlat3.xy).x;
    u_xlat5.x = u_xlat5.x * u_xlat10_9;
    u_xlat1.x = u_xlat13 * u_xlat1.x + u_xlat5.x;
    SV_Target0.w = u_xlat0.w * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _BlockFxClip1;
uniform 	float _Clip1Direction;
uniform 	float _BlockFxClip2Edge;
uniform 	float _BlockFxClip1Edge;
uniform 	vec2 _BlockFxBlockTexSpeed;
uniform 	float _BlockFxBlockTexTilline;
uniform 	vec4 _BlockFxLineTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BlockFxBlockTex;
uniform lowp sampler2D _BlockFxLineTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
vec2 u_xlat3;
vec2 u_xlat5;
lowp float u_xlat10_5;
bvec2 u_xlatb8;
float u_xlat9;
lowp float u_xlat10_9;
float u_xlat13;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD4.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat1.x = _BlockFxClip1 + _BlockFxClip1Edge;
    u_xlat5.xy = vs_TEXCOORD0.xy * vec2(vec2(_BlockFxBlockTexTilline, _BlockFxBlockTexTilline));
    u_xlat5.xy = _Time.yy * vec2(_BlockFxBlockTexSpeed.x, _BlockFxBlockTexSpeed.y) + u_xlat5.xy;
    u_xlat10_5 = texture(_BlockFxBlockTex, u_xlat5.xy).x;
    u_xlat5.x = u_xlat10_5 * vs_TEXCOORD3.y;
    u_xlat9 = _Clip1Direction + -2.0;
    u_xlat13 = _BlockFxClip2Edge + _BlockFxClip1;
    u_xlat1.x = u_xlat1.x + _BlockFxClip2Edge;
    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
    u_xlat13 = u_xlat5.x * u_xlat9 + (-u_xlat13);
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat13 = u_xlat1.x * -2.0 + 3.0;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BlockFxLineTex_ST.xy + _BlockFxLineTex_ST.zw;
    u_xlat5.x = u_xlat5.x * u_xlat9 + (-_BlockFxClip1);
    u_xlat9 = float(1.0) / _BlockFxClip1Edge;
    u_xlat1.y = u_xlat9 * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat1.y * -2.0 + 3.0;
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat5.x = u_xlat1.y * u_xlat9;
    u_xlat10_9 = texture(_BlockFxLineTex, u_xlat3.xy).x;
    u_xlat5.x = u_xlat5.x * u_xlat10_9;
    u_xlat1.x = u_xlat13 * u_xlat1.x + u_xlat5.x;
    SV_Target0.w = u_xlat0.w * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _BlockFxClip1;
uniform 	float _Clip1Direction;
uniform 	float _BlockFxClip2Edge;
uniform 	float _BlockFxClip1Edge;
uniform 	vec2 _BlockFxBlockTexSpeed;
uniform 	float _BlockFxBlockTexTilline;
uniform 	vec4 _BlockFxLineTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BlockFxBlockTex;
uniform lowp sampler2D _BlockFxLineTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
vec2 u_xlat3;
vec2 u_xlat5;
lowp float u_xlat10_5;
bvec2 u_xlatb8;
float u_xlat9;
lowp float u_xlat10_9;
float u_xlat13;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD4.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat1.x = _BlockFxClip1 + _BlockFxClip1Edge;
    u_xlat5.xy = vs_TEXCOORD0.xy * vec2(vec2(_BlockFxBlockTexTilline, _BlockFxBlockTexTilline));
    u_xlat5.xy = _Time.yy * vec2(_BlockFxBlockTexSpeed.x, _BlockFxBlockTexSpeed.y) + u_xlat5.xy;
    u_xlat10_5 = texture(_BlockFxBlockTex, u_xlat5.xy).x;
    u_xlat5.x = u_xlat10_5 * vs_TEXCOORD3.y;
    u_xlat9 = _Clip1Direction + -2.0;
    u_xlat13 = _BlockFxClip2Edge + _BlockFxClip1;
    u_xlat1.x = u_xlat1.x + _BlockFxClip2Edge;
    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
    u_xlat13 = u_xlat5.x * u_xlat9 + (-u_xlat13);
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat13 = u_xlat1.x * -2.0 + 3.0;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BlockFxLineTex_ST.xy + _BlockFxLineTex_ST.zw;
    u_xlat5.x = u_xlat5.x * u_xlat9 + (-_BlockFxClip1);
    u_xlat9 = float(1.0) / _BlockFxClip1Edge;
    u_xlat1.y = u_xlat9 * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat1.y * -2.0 + 3.0;
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat5.x = u_xlat1.y * u_xlat9;
    u_xlat10_9 = texture(_BlockFxLineTex, u_xlat3.xy).x;
    u_xlat5.x = u_xlat5.x * u_xlat10_9;
    u_xlat1.x = u_xlat13 * u_xlat1.x + u_xlat5.x;
    SV_Target0.w = u_xlat0.w * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _BlockFxClip1;
uniform 	float _Clip1Direction;
uniform 	float _BlockFxClip2Edge;
uniform 	float _BlockFxClip1Edge;
uniform 	vec2 _BlockFxBlockTexSpeed;
uniform 	float _BlockFxBlockTexTilline;
uniform 	vec4 _BlockFxLineTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BlockFxBlockTex;
uniform lowp sampler2D _BlockFxLineTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
vec2 u_xlat3;
vec2 u_xlat5;
lowp float u_xlat10_5;
bvec2 u_xlatb8;
float u_xlat9;
lowp float u_xlat10_9;
float u_xlat13;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD4.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat1.x = _BlockFxClip1 + _BlockFxClip1Edge;
    u_xlat5.xy = vs_TEXCOORD0.xy * vec2(vec2(_BlockFxBlockTexTilline, _BlockFxBlockTexTilline));
    u_xlat5.xy = _Time.yy * vec2(_BlockFxBlockTexSpeed.x, _BlockFxBlockTexSpeed.y) + u_xlat5.xy;
    u_xlat10_5 = texture(_BlockFxBlockTex, u_xlat5.xy).x;
    u_xlat5.x = u_xlat10_5 * vs_TEXCOORD3.y;
    u_xlat9 = _Clip1Direction + -2.0;
    u_xlat13 = _BlockFxClip2Edge + _BlockFxClip1;
    u_xlat1.x = u_xlat1.x + _BlockFxClip2Edge;
    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
    u_xlat13 = u_xlat5.x * u_xlat9 + (-u_xlat13);
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat13 = u_xlat1.x * -2.0 + 3.0;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BlockFxLineTex_ST.xy + _BlockFxLineTex_ST.zw;
    u_xlat5.x = u_xlat5.x * u_xlat9 + (-_BlockFxClip1);
    u_xlat9 = float(1.0) / _BlockFxClip1Edge;
    u_xlat1.y = u_xlat9 * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat1.y * -2.0 + 3.0;
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat5.x = u_xlat1.y * u_xlat9;
    u_xlat10_9 = texture(_BlockFxLineTex, u_xlat3.xy).x;
    u_xlat5.x = u_xlat5.x * u_xlat10_9;
    u_xlat1.x = u_xlat13 * u_xlat1.x + u_xlat5.x;
    SV_Target0.w = u_xlat0.w * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _BlockFxClip1;
uniform 	float _Clip1Direction;
uniform 	float _BlockFxClip2Edge;
uniform 	float _BlockFxClip1Edge;
uniform 	vec2 _BlockFxBlockTexSpeed;
uniform 	float _BlockFxBlockTexTilline;
uniform 	vec4 _BlockFxLineTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BlockFxBlockTex;
uniform lowp sampler2D _BlockFxLineTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_2;
vec2 u_xlat3;
vec2 u_xlat5;
lowp float u_xlat10_5;
bvec2 u_xlatb8;
float u_xlat9;
lowp float u_xlat10_9;
float u_xlat13;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb8.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb8.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb8.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD4.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
#else
    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_2 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat1.x = _BlockFxClip1 + _BlockFxClip1Edge;
    u_xlat5.xy = vs_TEXCOORD0.xy * vec2(vec2(_BlockFxBlockTexTilline, _BlockFxBlockTexTilline));
    u_xlat5.xy = _Time.yy * vec2(_BlockFxBlockTexSpeed.x, _BlockFxBlockTexSpeed.y) + u_xlat5.xy;
    u_xlat10_5 = texture(_BlockFxBlockTex, u_xlat5.xy).x;
    u_xlat5.x = u_xlat10_5 * vs_TEXCOORD3.y;
    u_xlat9 = _Clip1Direction + -2.0;
    u_xlat13 = _BlockFxClip2Edge + _BlockFxClip1;
    u_xlat1.x = u_xlat1.x + _BlockFxClip2Edge;
    u_xlat1.x = (-u_xlat13) + u_xlat1.x;
    u_xlat13 = u_xlat5.x * u_xlat9 + (-u_xlat13);
    u_xlat1.x = float(1.0) / u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat13;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat13 = u_xlat1.x * -2.0 + 3.0;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BlockFxLineTex_ST.xy + _BlockFxLineTex_ST.zw;
    u_xlat5.x = u_xlat5.x * u_xlat9 + (-_BlockFxClip1);
    u_xlat9 = float(1.0) / _BlockFxClip1Edge;
    u_xlat1.y = u_xlat9 * u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.y = min(max(u_xlat1.y, 0.0), 1.0);
#else
    u_xlat1.y = clamp(u_xlat1.y, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat1.y * -2.0 + 3.0;
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat5.x = u_xlat1.y * u_xlat9;
    u_xlat10_9 = texture(_BlockFxLineTex, u_xlat3.xy).x;
    u_xlat5.x = u_xlat5.x * u_xlat10_9;
    u_xlat1.x = u_xlat13 * u_xlat1.x + u_xlat5.x;
    SV_Target0.w = u_xlat0.w * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _BlockFxClip1;
uniform 	float _Clip1Direction;
uniform 	float _BlockFxClip2Edge;
uniform 	float _BlockFxClip1Edge;
uniform 	vec2 _BlockFxBlockTexSpeed;
uniform 	float _BlockFxBlockTexTilline;
uniform 	vec4 _BlockFxLineTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BlockFxBlockTex;
uniform lowp sampler2D _BlockFxLineTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
vec2 u_xlat6;
lowp float u_xlat10_6;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
float u_xlat14;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD4.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat2.x = _BlockFxClip1 + _BlockFxClip1Edge;
    u_xlat6.xy = vs_TEXCOORD0.xy * vec2(vec2(_BlockFxBlockTexTilline, _BlockFxBlockTexTilline));
    u_xlat6.xy = _Time.yy * vec2(_BlockFxBlockTexSpeed.x, _BlockFxBlockTexSpeed.y) + u_xlat6.xy;
    u_xlat10_6 = texture(_BlockFxBlockTex, u_xlat6.xy).x;
    u_xlat6.x = u_xlat10_6 * vs_TEXCOORD3.y;
    u_xlat10 = _Clip1Direction + -2.0;
    u_xlat14 = _BlockFxClip2Edge + _BlockFxClip1;
    u_xlat2.x = u_xlat2.x + _BlockFxClip2Edge;
    u_xlat2.x = (-u_xlat14) + u_xlat2.x;
    u_xlat14 = u_xlat6.x * u_xlat10 + (-u_xlat14);
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x * u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat14 = u_xlat2.x * -2.0 + 3.0;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BlockFxLineTex_ST.xy + _BlockFxLineTex_ST.zw;
    u_xlat6.x = u_xlat6.x * u_xlat10 + (-_BlockFxClip1);
    u_xlat10 = float(1.0) / _BlockFxClip1Edge;
    u_xlat2.y = u_xlat10 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat2.y * -2.0 + 3.0;
    u_xlat2.xy = u_xlat2.xy * u_xlat2.xy;
    u_xlat6.x = u_xlat2.y * u_xlat10;
    u_xlat10_10 = texture(_BlockFxLineTex, u_xlat3.xy).x;
    u_xlat6.x = u_xlat6.x * u_xlat10_10;
    u_xlat2.x = u_xlat14 * u_xlat2.x + u_xlat6.x;
    SV_Target0.w = u_xlat0.w * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _BlockFxClip1;
uniform 	float _Clip1Direction;
uniform 	float _BlockFxClip2Edge;
uniform 	float _BlockFxClip1Edge;
uniform 	vec2 _BlockFxBlockTexSpeed;
uniform 	float _BlockFxBlockTexTilline;
uniform 	vec4 _BlockFxLineTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BlockFxBlockTex;
uniform lowp sampler2D _BlockFxLineTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
vec2 u_xlat6;
lowp float u_xlat10_6;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
float u_xlat14;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD4.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat2.x = _BlockFxClip1 + _BlockFxClip1Edge;
    u_xlat6.xy = vs_TEXCOORD0.xy * vec2(vec2(_BlockFxBlockTexTilline, _BlockFxBlockTexTilline));
    u_xlat6.xy = _Time.yy * vec2(_BlockFxBlockTexSpeed.x, _BlockFxBlockTexSpeed.y) + u_xlat6.xy;
    u_xlat10_6 = texture(_BlockFxBlockTex, u_xlat6.xy).x;
    u_xlat6.x = u_xlat10_6 * vs_TEXCOORD3.y;
    u_xlat10 = _Clip1Direction + -2.0;
    u_xlat14 = _BlockFxClip2Edge + _BlockFxClip1;
    u_xlat2.x = u_xlat2.x + _BlockFxClip2Edge;
    u_xlat2.x = (-u_xlat14) + u_xlat2.x;
    u_xlat14 = u_xlat6.x * u_xlat10 + (-u_xlat14);
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x * u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat14 = u_xlat2.x * -2.0 + 3.0;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BlockFxLineTex_ST.xy + _BlockFxLineTex_ST.zw;
    u_xlat6.x = u_xlat6.x * u_xlat10 + (-_BlockFxClip1);
    u_xlat10 = float(1.0) / _BlockFxClip1Edge;
    u_xlat2.y = u_xlat10 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat2.y * -2.0 + 3.0;
    u_xlat2.xy = u_xlat2.xy * u_xlat2.xy;
    u_xlat6.x = u_xlat2.y * u_xlat10;
    u_xlat10_10 = texture(_BlockFxLineTex, u_xlat3.xy).x;
    u_xlat6.x = u_xlat6.x * u_xlat10_10;
    u_xlat2.x = u_xlat14 * u_xlat2.x + u_xlat6.x;
    SV_Target0.w = u_xlat0.w * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _BlockFxClip1;
uniform 	float _Clip1Direction;
uniform 	float _BlockFxClip2Edge;
uniform 	float _BlockFxClip1Edge;
uniform 	vec2 _BlockFxBlockTexSpeed;
uniform 	float _BlockFxBlockTexTilline;
uniform 	vec4 _BlockFxLineTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BlockFxBlockTex;
uniform lowp sampler2D _BlockFxLineTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
vec2 u_xlat6;
lowp float u_xlat10_6;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
float u_xlat14;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD4.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat2.x = _BlockFxClip1 + _BlockFxClip1Edge;
    u_xlat6.xy = vs_TEXCOORD0.xy * vec2(vec2(_BlockFxBlockTexTilline, _BlockFxBlockTexTilline));
    u_xlat6.xy = _Time.yy * vec2(_BlockFxBlockTexSpeed.x, _BlockFxBlockTexSpeed.y) + u_xlat6.xy;
    u_xlat10_6 = texture(_BlockFxBlockTex, u_xlat6.xy).x;
    u_xlat6.x = u_xlat10_6 * vs_TEXCOORD3.y;
    u_xlat10 = _Clip1Direction + -2.0;
    u_xlat14 = _BlockFxClip2Edge + _BlockFxClip1;
    u_xlat2.x = u_xlat2.x + _BlockFxClip2Edge;
    u_xlat2.x = (-u_xlat14) + u_xlat2.x;
    u_xlat14 = u_xlat6.x * u_xlat10 + (-u_xlat14);
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x * u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat14 = u_xlat2.x * -2.0 + 3.0;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BlockFxLineTex_ST.xy + _BlockFxLineTex_ST.zw;
    u_xlat6.x = u_xlat6.x * u_xlat10 + (-_BlockFxClip1);
    u_xlat10 = float(1.0) / _BlockFxClip1Edge;
    u_xlat2.y = u_xlat10 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat2.y * -2.0 + 3.0;
    u_xlat2.xy = u_xlat2.xy * u_xlat2.xy;
    u_xlat6.x = u_xlat2.y * u_xlat10;
    u_xlat10_10 = texture(_BlockFxLineTex, u_xlat3.xy).x;
    u_xlat6.x = u_xlat6.x * u_xlat10_10;
    u_xlat2.x = u_xlat14 * u_xlat2.x + u_xlat6.x;
    SV_Target0.w = u_xlat0.w * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _BlockFxClip1;
uniform 	float _Clip1Direction;
uniform 	float _BlockFxClip2Edge;
uniform 	float _BlockFxClip1Edge;
uniform 	vec2 _BlockFxBlockTexSpeed;
uniform 	float _BlockFxBlockTexTilline;
uniform 	vec4 _BlockFxLineTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BlockFxBlockTex;
uniform lowp sampler2D _BlockFxLineTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
vec2 u_xlat6;
lowp float u_xlat10_6;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
float u_xlat14;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD4.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat2.x = _BlockFxClip1 + _BlockFxClip1Edge;
    u_xlat6.xy = vs_TEXCOORD0.xy * vec2(vec2(_BlockFxBlockTexTilline, _BlockFxBlockTexTilline));
    u_xlat6.xy = _Time.yy * vec2(_BlockFxBlockTexSpeed.x, _BlockFxBlockTexSpeed.y) + u_xlat6.xy;
    u_xlat10_6 = texture(_BlockFxBlockTex, u_xlat6.xy).x;
    u_xlat6.x = u_xlat10_6 * vs_TEXCOORD3.y;
    u_xlat10 = _Clip1Direction + -2.0;
    u_xlat14 = _BlockFxClip2Edge + _BlockFxClip1;
    u_xlat2.x = u_xlat2.x + _BlockFxClip2Edge;
    u_xlat2.x = (-u_xlat14) + u_xlat2.x;
    u_xlat14 = u_xlat6.x * u_xlat10 + (-u_xlat14);
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x * u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat14 = u_xlat2.x * -2.0 + 3.0;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BlockFxLineTex_ST.xy + _BlockFxLineTex_ST.zw;
    u_xlat6.x = u_xlat6.x * u_xlat10 + (-_BlockFxClip1);
    u_xlat10 = float(1.0) / _BlockFxClip1Edge;
    u_xlat2.y = u_xlat10 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat2.y * -2.0 + 3.0;
    u_xlat2.xy = u_xlat2.xy * u_xlat2.xy;
    u_xlat6.x = u_xlat2.y * u_xlat10;
    u_xlat10_10 = texture(_BlockFxLineTex, u_xlat3.xy).x;
    u_xlat6.x = u_xlat6.x * u_xlat10_10;
    u_xlat2.x = u_xlat14 * u_xlat2.x + u_xlat6.x;
    SV_Target0.w = u_xlat0.w * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _BlockFxClip1;
uniform 	float _Clip1Direction;
uniform 	float _BlockFxClip2Edge;
uniform 	float _BlockFxClip1Edge;
uniform 	vec2 _BlockFxBlockTexSpeed;
uniform 	float _BlockFxBlockTexTilline;
uniform 	vec4 _BlockFxLineTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BlockFxBlockTex;
uniform lowp sampler2D _BlockFxLineTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
vec2 u_xlat6;
lowp float u_xlat10_6;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
float u_xlat14;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD4.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat2.x = _BlockFxClip1 + _BlockFxClip1Edge;
    u_xlat6.xy = vs_TEXCOORD0.xy * vec2(vec2(_BlockFxBlockTexTilline, _BlockFxBlockTexTilline));
    u_xlat6.xy = _Time.yy * vec2(_BlockFxBlockTexSpeed.x, _BlockFxBlockTexSpeed.y) + u_xlat6.xy;
    u_xlat10_6 = texture(_BlockFxBlockTex, u_xlat6.xy).x;
    u_xlat6.x = u_xlat10_6 * vs_TEXCOORD3.y;
    u_xlat10 = _Clip1Direction + -2.0;
    u_xlat14 = _BlockFxClip2Edge + _BlockFxClip1;
    u_xlat2.x = u_xlat2.x + _BlockFxClip2Edge;
    u_xlat2.x = (-u_xlat14) + u_xlat2.x;
    u_xlat14 = u_xlat6.x * u_xlat10 + (-u_xlat14);
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x * u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat14 = u_xlat2.x * -2.0 + 3.0;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BlockFxLineTex_ST.xy + _BlockFxLineTex_ST.zw;
    u_xlat6.x = u_xlat6.x * u_xlat10 + (-_BlockFxClip1);
    u_xlat10 = float(1.0) / _BlockFxClip1Edge;
    u_xlat2.y = u_xlat10 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat2.y * -2.0 + 3.0;
    u_xlat2.xy = u_xlat2.xy * u_xlat2.xy;
    u_xlat6.x = u_xlat2.y * u_xlat10;
    u_xlat10_10 = texture(_BlockFxLineTex, u_xlat3.xy).x;
    u_xlat6.x = u_xlat6.x * u_xlat10_10;
    u_xlat2.x = u_xlat14 * u_xlat2.x + u_xlat6.x;
    SV_Target0.w = u_xlat0.w * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_TANGENT0.xyz);
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat0.y = dot(u_xlat1.xyz, in_TANGENT0.xyz);
    u_xlat0.z = 0.00999999978;
    u_xlat8 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat0.xy = vec2(u_xlat8) * u_xlat0.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _BlockFxClip1;
uniform 	float _Clip1Direction;
uniform 	float _BlockFxClip2Edge;
uniform 	float _BlockFxClip1Edge;
uniform 	vec2 _BlockFxBlockTexSpeed;
uniform 	float _BlockFxBlockTexTilline;
uniform 	vec4 _BlockFxLineTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BlockFxBlockTex;
uniform lowp sampler2D _BlockFxLineTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
vec2 u_xlat6;
lowp float u_xlat10_6;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
float u_xlat14;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD4.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat2.x = _BlockFxClip1 + _BlockFxClip1Edge;
    u_xlat6.xy = vs_TEXCOORD0.xy * vec2(vec2(_BlockFxBlockTexTilline, _BlockFxBlockTexTilline));
    u_xlat6.xy = _Time.yy * vec2(_BlockFxBlockTexSpeed.x, _BlockFxBlockTexSpeed.y) + u_xlat6.xy;
    u_xlat10_6 = texture(_BlockFxBlockTex, u_xlat6.xy).x;
    u_xlat6.x = u_xlat10_6 * vs_TEXCOORD3.y;
    u_xlat10 = _Clip1Direction + -2.0;
    u_xlat14 = _BlockFxClip2Edge + _BlockFxClip1;
    u_xlat2.x = u_xlat2.x + _BlockFxClip2Edge;
    u_xlat2.x = (-u_xlat14) + u_xlat2.x;
    u_xlat14 = u_xlat6.x * u_xlat10 + (-u_xlat14);
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x * u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat14 = u_xlat2.x * -2.0 + 3.0;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BlockFxLineTex_ST.xy + _BlockFxLineTex_ST.zw;
    u_xlat6.x = u_xlat6.x * u_xlat10 + (-_BlockFxClip1);
    u_xlat10 = float(1.0) / _BlockFxClip1Edge;
    u_xlat2.y = u_xlat10 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat2.y * -2.0 + 3.0;
    u_xlat2.xy = u_xlat2.xy * u_xlat2.xy;
    u_xlat6.x = u_xlat2.y * u_xlat10;
    u_xlat10_10 = texture(_BlockFxLineTex, u_xlat3.xy).x;
    u_xlat6.x = u_xlat6.x * u_xlat10_10;
    u_xlat2.x = u_xlat14 * u_xlat2.x + u_xlat6.x;
    SV_Target0.w = u_xlat0.w * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _BlockFxClip1;
uniform 	float _Clip1Direction;
uniform 	float _BlockFxClip2Edge;
uniform 	float _BlockFxClip1Edge;
uniform 	vec2 _BlockFxBlockTexSpeed;
uniform 	float _BlockFxBlockTexTilline;
uniform 	vec4 _BlockFxLineTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BlockFxBlockTex;
uniform lowp sampler2D _BlockFxLineTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
vec2 u_xlat6;
lowp float u_xlat10_6;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
float u_xlat14;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD4.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat2.x = _BlockFxClip1 + _BlockFxClip1Edge;
    u_xlat6.xy = vs_TEXCOORD0.xy * vec2(vec2(_BlockFxBlockTexTilline, _BlockFxBlockTexTilline));
    u_xlat6.xy = _Time.yy * vec2(_BlockFxBlockTexSpeed.x, _BlockFxBlockTexSpeed.y) + u_xlat6.xy;
    u_xlat10_6 = texture(_BlockFxBlockTex, u_xlat6.xy).x;
    u_xlat6.x = u_xlat10_6 * vs_TEXCOORD3.y;
    u_xlat10 = _Clip1Direction + -2.0;
    u_xlat14 = _BlockFxClip2Edge + _BlockFxClip1;
    u_xlat2.x = u_xlat2.x + _BlockFxClip2Edge;
    u_xlat2.x = (-u_xlat14) + u_xlat2.x;
    u_xlat14 = u_xlat6.x * u_xlat10 + (-u_xlat14);
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x * u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat14 = u_xlat2.x * -2.0 + 3.0;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BlockFxLineTex_ST.xy + _BlockFxLineTex_ST.zw;
    u_xlat6.x = u_xlat6.x * u_xlat10 + (-_BlockFxClip1);
    u_xlat10 = float(1.0) / _BlockFxClip1Edge;
    u_xlat2.y = u_xlat10 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat2.y * -2.0 + 3.0;
    u_xlat2.xy = u_xlat2.xy * u_xlat2.xy;
    u_xlat6.x = u_xlat2.y * u_xlat10;
    u_xlat10_10 = texture(_BlockFxLineTex, u_xlat3.xy).x;
    u_xlat6.x = u_xlat6.x * u_xlat10_10;
    u_xlat2.x = u_xlat14 * u_xlat2.x + u_xlat6.x;
    SV_Target0.w = u_xlat0.w * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _BlockFxClip1;
uniform 	float _Clip1Direction;
uniform 	float _BlockFxClip2Edge;
uniform 	float _BlockFxClip1Edge;
uniform 	vec2 _BlockFxBlockTexSpeed;
uniform 	float _BlockFxBlockTexTilline;
uniform 	vec4 _BlockFxLineTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BlockFxBlockTex;
uniform lowp sampler2D _BlockFxLineTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
vec2 u_xlat6;
lowp float u_xlat10_6;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
float u_xlat14;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD4.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat2.x = _BlockFxClip1 + _BlockFxClip1Edge;
    u_xlat6.xy = vs_TEXCOORD0.xy * vec2(vec2(_BlockFxBlockTexTilline, _BlockFxBlockTexTilline));
    u_xlat6.xy = _Time.yy * vec2(_BlockFxBlockTexSpeed.x, _BlockFxBlockTexSpeed.y) + u_xlat6.xy;
    u_xlat10_6 = texture(_BlockFxBlockTex, u_xlat6.xy).x;
    u_xlat6.x = u_xlat10_6 * vs_TEXCOORD3.y;
    u_xlat10 = _Clip1Direction + -2.0;
    u_xlat14 = _BlockFxClip2Edge + _BlockFxClip1;
    u_xlat2.x = u_xlat2.x + _BlockFxClip2Edge;
    u_xlat2.x = (-u_xlat14) + u_xlat2.x;
    u_xlat14 = u_xlat6.x * u_xlat10 + (-u_xlat14);
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x * u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat14 = u_xlat2.x * -2.0 + 3.0;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BlockFxLineTex_ST.xy + _BlockFxLineTex_ST.zw;
    u_xlat6.x = u_xlat6.x * u_xlat10 + (-_BlockFxClip1);
    u_xlat10 = float(1.0) / _BlockFxClip1Edge;
    u_xlat2.y = u_xlat10 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat2.y * -2.0 + 3.0;
    u_xlat2.xy = u_xlat2.xy * u_xlat2.xy;
    u_xlat6.x = u_xlat2.y * u_xlat10;
    u_xlat10_10 = texture(_BlockFxLineTex, u_xlat3.xy).x;
    u_xlat6.x = u_xlat6.x * u_xlat10_10;
    u_xlat2.x = u_xlat14 * u_xlat2.x + u_xlat6.x;
    SV_Target0.w = u_xlat0.w * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump float _UsingDitherAlpha;
uniform 	mediump float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TANGENT0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec4 in_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat8;
bool u_xlatb8;
float u_xlat12;
void main()
{
    u_xlat0.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.zxy;
    u_xlat12 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat1.xyz = vec3(u_xlat12) * in_TANGENT0.yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD2.yyy;
    u_xlat0.xyz = in_TANGENT0.xyz * in_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = in_NORMAL0.xyz * in_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat1.y = dot(u_xlat2.xyz, u_xlat0.xyz);
    u_xlat1.z = 0.00999999978;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * u_xlat1.xy;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat8 = u_xlat1.z / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat8 = abs(u_xlat8) * 100.0;
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat8 = float(1.0) / u_xlat8;
    u_xlat16_3 = _OutlineWidth * 0.00999999978;
    u_xlat12 = u_xlat16_3 * in_COLOR0.w;
    u_xlat8 = u_xlat8 * u_xlat12;
    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat8) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = vec3(1.0, 1.0, 1.0);
    vs_TEXCOORD1.w = in_COLOR0.x;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_TEXCOORD3 = in_TEXCOORD1;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD4.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD4.z = (u_xlatb8) ? _DitherAlpha : 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump float _AlphaCutoff;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _UsingDitherAlpha;
uniform 	float _BlockFxClip1;
uniform 	float _Clip1Direction;
uniform 	float _BlockFxClip2Edge;
uniform 	float _BlockFxClip1Edge;
uniform 	vec2 _BlockFxBlockTexSpeed;
uniform 	float _BlockFxBlockTexTilline;
uniform 	vec4 _BlockFxLineTex_ST;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BlockFxBlockTex;
uniform lowp sampler2D _BlockFxLineTex;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
vec2 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
mediump float u_xlat16_5;
vec2 u_xlat6;
lowp float u_xlat10_6;
float u_xlat10;
lowp float u_xlat10_10;
bvec2 u_xlatb10;
float u_xlat12;
int u_xlati12;
bool u_xlatb12;
float u_xlat14;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1 = u_xlat16_0.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat16_1 + (-_AlphaCutoff);
    u_xlat16_5 = u_xlat16_5 + 1.0;
    u_xlat16_5 = floor(u_xlat16_5);
    u_xlat16_5 = max(u_xlat16_5, 0.0);
    u_xlati12 = int(u_xlat16_5);
    if((u_xlati12)==0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb12 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb12){
#ifdef UNITY_ADRENO_ES3
        u_xlatb12 = !!(vs_TEXCOORD4.z<0.949999988);
#else
        u_xlatb12 = vs_TEXCOORD4.z<0.949999988;
#endif
        if(u_xlatb12){
            u_xlat2.xy = vs_TEXCOORD4.yx / vs_TEXCOORD4.ww;
            u_xlat2.xy = u_xlat2.xy * _ScreenParams.yx;
            u_xlat2.xy = u_xlat2.xy * vec2(0.25, 0.25);
            u_xlatb10.xy = greaterThanEqual(u_xlat2.xyxy, (-u_xlat2.xyxy)).xy;
            u_xlat2.xy = fract(abs(u_xlat2.xy));
            u_xlat2.x = (u_xlatb10.x) ? u_xlat2.x : (-u_xlat2.x);
            u_xlat2.y = (u_xlatb10.y) ? u_xlat2.y : (-u_xlat2.y);
            u_xlat2.xy = u_xlat2.xy * vec2(4.0, 4.0);
            u_xlatu2.xy = uvec2(u_xlat2.xy);
            u_xlat3.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat3.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu2.y)]);
            u_xlat12 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2.x)]);
            u_xlat12 = vs_TEXCOORD4.z * 17.0 + (-u_xlat12);
            u_xlat12 = u_xlat12 + 0.99000001;
            u_xlat12 = floor(u_xlat12);
            u_xlat12 = max(u_xlat12, 0.0);
            u_xlati12 = int(u_xlat12);
            if((u_xlati12)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_0.xyz * vs_TEXCOORD1.xyz;
    u_xlat0.w = u_xlat16_1 * vs_TEXCOORD1.w;
    u_xlat0 = u_xlat0 * _OutlineColor;
    u_xlat2.x = _BlockFxClip1 + _BlockFxClip1Edge;
    u_xlat6.xy = vs_TEXCOORD0.xy * vec2(vec2(_BlockFxBlockTexTilline, _BlockFxBlockTexTilline));
    u_xlat6.xy = _Time.yy * vec2(_BlockFxBlockTexSpeed.x, _BlockFxBlockTexSpeed.y) + u_xlat6.xy;
    u_xlat10_6 = texture(_BlockFxBlockTex, u_xlat6.xy).x;
    u_xlat6.x = u_xlat10_6 * vs_TEXCOORD3.y;
    u_xlat10 = _Clip1Direction + -2.0;
    u_xlat14 = _BlockFxClip2Edge + _BlockFxClip1;
    u_xlat2.x = u_xlat2.x + _BlockFxClip2Edge;
    u_xlat2.x = (-u_xlat14) + u_xlat2.x;
    u_xlat14 = u_xlat6.x * u_xlat10 + (-u_xlat14);
    u_xlat2.x = float(1.0) / u_xlat2.x;
    u_xlat2.x = u_xlat2.x * u_xlat14;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat14 = u_xlat2.x * -2.0 + 3.0;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BlockFxLineTex_ST.xy + _BlockFxLineTex_ST.zw;
    u_xlat6.x = u_xlat6.x * u_xlat10 + (-_BlockFxClip1);
    u_xlat10 = float(1.0) / _BlockFxClip1Edge;
    u_xlat2.y = u_xlat10 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat2.y * -2.0 + 3.0;
    u_xlat2.xy = u_xlat2.xy * u_xlat2.xy;
    u_xlat6.x = u_xlat2.y * u_xlat10;
    u_xlat10_10 = texture(_BlockFxLineTex, u_xlat3.xy).x;
    u_xlat6.x = u_xlat6.x * u_xlat10_10;
    u_xlat2.x = u_xlat14 * u_xlat2.x + u_xlat6.x;
    SV_Target0.w = u_xlat0.w * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_NORMAL" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_TANGENT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "_ALPHATEST_ON" "_OUTLINENORMALFROM_UV2" }
""
}
}
}
}
}