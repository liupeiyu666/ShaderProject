//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/miHoYo_Character/Character_Common/Avatar_Alpha_Transparent" {
Properties {
_Color ("Main Color", Color) = (1,1,1,1)
_EnvColor ("Env Color", Color) = (1,1,1,1)
_Scale ("Scale Compared to Maya", Float) = 0.01
_BloomFactor ("Bloom Factor", Float) = 0.25
_MainTex ("Main Tex (RGB)", 2D) = "white" { }
_LightMapTex ("Light Map Tex (RGB)", 2D) = "gray" { }
_LightSpecColor ("Light Specular Color", Color) = (1,1,1,1)
_LightArea ("Light Area Threshold", Range(0, 1)) = 0.51
_SecondShadow ("Second Shadow Threshold", Range(0, 1)) = 0.51
_FirstShadowMultColor ("First Shadow Multiply Color", Color) = (0.9,0.7,0.75,1)
_SecondShadowMultColor ("Second Shadow Multiply Color", Color) = (0.75,0.6,0.65,1)
_Shininess ("Specular Shininess", Range(0.1, 100)) = 10
_SpecMulti ("Specular Multiply Factor", Range(0, 1)) = 0.1
_OutlineWidth ("Outline Width", Range(0, 100)) = 0.2
_OutlineColor ("Outline Color", Color) = (0,0,0,1)
_MaxOutlineZOffset ("Max Outline Z Offset", Range(0, 100)) = 1
_OutlineCamStart ("Outline Camera Adjustment Start Distance", Range(0, 10000)) = 1000
_Opaqueness ("Opaqueness", Range(0, 1)) = 1
_FadeDistance ("Fade Start Distance", Range(0, 10)) = 0
_FadeOffset ("Fade Start Offset", Range(0, 10)) = 0
_FadeDistanceScale ("Fade Distance Scale(turn this up to stop fading)", Range(0, 1)) = 1
[Toggle(LOOKUP_COLOR)] _LookupColor ("Lookup Color", Float) = 0
[Toggle(LOOKUP_COLOR_BILINEAR)] _LookupColorBilinear ("Lookup Color Bilinear", Float) = 0
_factorTex ("Factor Tex", 2D) = "white" { }
_indexTex ("Index Tex", 2D) = "white" { }
_tableTex ("Lookup Tex", 2D) = "white" { }
[Toggle(SPECIAL_STATE)] _SpecialState ("Special State", Float) = 0
_SPTex ("SP Tex", 2D) = "white" { }
_SPNoiseTex ("SP Noise Tex", 2D) = "white" { }
_SPNoiseScaler ("SP Noise Scaler", Range(0, 10)) = 1
_SPIntensity ("SP Intensity", Range(0, 1)) = 0.5
_SPTransition ("SP Transition", Range(0, 1)) = 0
_SPTransitionColor ("SP Transition Color", Color) = (1,1,1,1)
_SPOpaqueness ("SP Opaqueness", Range(0, 1)) = 1
_SPOutlineColor ("SP Outline Color", Color) = (1,1,1,1)
_SPTransitionEmissionScaler ("SP Transition Emission Scaler", Range(1, 100)) = 1
_SPTransitionBloomFactor ("SP Transition Bloom Factor", Float) = 1
_SPCubeMap ("SP CubeMap", Cube) = "white" { }
_SPCubeMapColor ("SP CubeMap Color", Color) = (1,1,1,0)
_SPCubeMapOffset ("SP CubeMap Offset", Vector) = (0,0,0,0)
_SPCubeMapIntensity ("SP CubeMap Intensity", Range(0, 1)) = 0
_SPCubeMapNoiseIntensity ("SP CubeMap Noise Intensity", Range(0, 5)) = 0
_SPCubeMapBrightness ("SP CubeMap Brightness", Float) = 1.26
_SPOldColor ("SP Old Color", Color) = (1,1,1,0)
[Toggle(RIM_GLOW)] _RimGlow ("Rim Glow", Float) = 0
[Enum(Lerp, 1, Add, 2)] _RGBlendType ("Rim Glow Blend Type", Float) = 1
_RGColor ("Rim Glow Color", Color) = (1,1,1,1)
_RGShininess ("Rim Glow Shininess", Float) = 1
_RGScale ("Rim Glow Scale", Float) = 1
_RGBias ("Rim Glow Bias", Float) = 0
_RGRatio ("Rim Glow Ratio", Range(0, 1)) = 0.5
_RGBloomFactor ("Rim Glow Bloom Factor", Float) = 1
_HRRimIntensity ("Hard Rim Mask", Range(0, 1)) = 0
_HRRimPower ("Hard Rim Ratio", Range(1E-06, 3)) = 0.1
_MoreHardRimColor ("More HardRim Color", Range(0, 1)) = 0
_HRRimColor2 ("Hard Rim Color2(0.4>A>0.2)", Color) = (1,1,1,1)
_HRRimColor3 ("Hard Rim Color3(0.6>A>0.4)", Color) = (1,1,1,1)
_HRRimColor4 ("Hard Rim Color4(0.8>A>0.6)", Color) = (1,1,1,1)
_HRRimColor5 ("Hard Rim Color5(A>0.8)", Color) = (1,1,1,1)
[Toggle(DISTORTION)] _Distortion ("Distortion", Float) = 0
_DTTex ("Distortion Tex", 2D) = "gray" { }
_DTIntensity ("Distortion Intensity", Range(1, 9)) = 5
_DTPlaySpeed ("Distortion Play Speed", Float) = 0
_DTNormalDisplacment ("Distortion Normal Displacment", Float) = 0
_DTUVScaleInX ("Distortion UV Scale in X", Float) = 1
_DTUVScaleInY ("Distortion UV Scale in Y", Float) = 1
_DTFresnel ("Distortion Fresnel Params", Vector) = (1,1,0,0)
_VertexAlphaFactor ("Alpha From Vertex Factor (0: not use)", Range(0, 1)) = 0
[Toggle(USINGDITHERALPAH)] _UsingDitherAlpha ("UsingDitherAlpha", Float) = 0
_DitherAlpha ("Dither Alpha Value", Range(0, 1)) = 1
}
SubShader {
 LOD 200
 Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "OutlineType" = "Complex" "QUEUE" = "Transparent" "Reflected" = "Reflected" "RenderType" = "Transparent" }
 Pass {
  LOD 200
  Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "OutlineType" = "Complex" "QUEUE" = "Transparent" "Reflected" = "Reflected" "RenderType" = "Transparent" }
  GpuProgramID 7117
Program "vp" {
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" }
""
}
}
}
 Pass {
  Name "COMPLEX_TRANS"
  LOD 200
  Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "OutlineType" = "Complex" "QUEUE" = "Transparent" "Reflected" = "Reflected" "RenderType" = "Transparent" }
  GpuProgramID 89546
Program "vp" {
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_21;
    scrpos_21 = xlv_TEXCOORD3;
    mediump float a_22;
    a_22 = xlv_TEXCOORD3.z;
    if ((a_22 < 0.95)) {
      scrpos_21.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_22 = (a_22 * 17.0);
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_21.y / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float tmpvar_26;
      tmpvar_26 = (scrpos_21.x / 4.0);
      highp float tmpvar_27;
      tmpvar_27 = (fract(abs(tmpvar_26)) * 4.0);
      highp float tmpvar_28;
      if ((tmpvar_26 >= 0.0)) {
        tmpvar_28 = tmpvar_27;
      } else {
        tmpvar_28 = -(tmpvar_27);
      };
      highp float x_29;
      x_29 = ((a_22 - _DITHERMATRIX[
        int(tmpvar_25)
      ][
        int(tmpvar_28)
      ]) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_21;
    scrpos_21 = xlv_TEXCOORD3;
    mediump float a_22;
    a_22 = xlv_TEXCOORD3.z;
    if ((a_22 < 0.95)) {
      scrpos_21.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_22 = (a_22 * 17.0);
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_21.y / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float tmpvar_26;
      tmpvar_26 = (scrpos_21.x / 4.0);
      highp float tmpvar_27;
      tmpvar_27 = (fract(abs(tmpvar_26)) * 4.0);
      highp float tmpvar_28;
      if ((tmpvar_26 >= 0.0)) {
        tmpvar_28 = tmpvar_27;
      } else {
        tmpvar_28 = -(tmpvar_27);
      };
      highp float x_29;
      x_29 = ((a_22 - _DITHERMATRIX[
        int(tmpvar_25)
      ][
        int(tmpvar_28)
      ]) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_21;
    scrpos_21 = xlv_TEXCOORD3;
    mediump float a_22;
    a_22 = xlv_TEXCOORD3.z;
    if ((a_22 < 0.95)) {
      scrpos_21.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_22 = (a_22 * 17.0);
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_21.y / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float tmpvar_26;
      tmpvar_26 = (scrpos_21.x / 4.0);
      highp float tmpvar_27;
      tmpvar_27 = (fract(abs(tmpvar_26)) * 4.0);
      highp float tmpvar_28;
      if ((tmpvar_26 >= 0.0)) {
        tmpvar_28 = tmpvar_27;
      } else {
        tmpvar_28 = -(tmpvar_27);
      };
      highp float x_29;
      x_29 = ((a_22 - _DITHERMATRIX[
        int(tmpvar_25)
      ][
        int(tmpvar_28)
      ]) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_21;
    scrpos_21 = xlv_TEXCOORD3;
    mediump float a_22;
    a_22 = xlv_TEXCOORD3.z;
    if ((a_22 < 0.95)) {
      scrpos_21.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_22 = (a_22 * 17.0);
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_21.y / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float tmpvar_26;
      tmpvar_26 = (scrpos_21.x / 4.0);
      highp float tmpvar_27;
      tmpvar_27 = (fract(abs(tmpvar_26)) * 4.0);
      highp float tmpvar_28;
      if ((tmpvar_26 >= 0.0)) {
        tmpvar_28 = tmpvar_27;
      } else {
        tmpvar_28 = -(tmpvar_27);
      };
      highp float x_29;
      x_29 = ((a_22 - _DITHERMATRIX[
        int(tmpvar_25)
      ][
        int(tmpvar_28)
      ]) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_21;
    scrpos_21 = xlv_TEXCOORD3;
    mediump float a_22;
    a_22 = xlv_TEXCOORD3.z;
    if ((a_22 < 0.95)) {
      scrpos_21.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_22 = (a_22 * 17.0);
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_21.y / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float tmpvar_26;
      tmpvar_26 = (scrpos_21.x / 4.0);
      highp float tmpvar_27;
      tmpvar_27 = (fract(abs(tmpvar_26)) * 4.0);
      highp float tmpvar_28;
      if ((tmpvar_26 >= 0.0)) {
        tmpvar_28 = tmpvar_27;
      } else {
        tmpvar_28 = -(tmpvar_27);
      };
      highp float x_29;
      x_29 = ((a_22 - _DITHERMATRIX[
        int(tmpvar_25)
      ][
        int(tmpvar_28)
      ]) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_21;
    scrpos_21 = xlv_TEXCOORD3;
    mediump float a_22;
    a_22 = xlv_TEXCOORD3.z;
    if ((a_22 < 0.95)) {
      scrpos_21.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_22 = (a_22 * 17.0);
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_21.y / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float tmpvar_26;
      tmpvar_26 = (scrpos_21.x / 4.0);
      highp float tmpvar_27;
      tmpvar_27 = (fract(abs(tmpvar_26)) * 4.0);
      highp float tmpvar_28;
      if ((tmpvar_26 >= 0.0)) {
        tmpvar_28 = tmpvar_27;
      } else {
        tmpvar_28 = -(tmpvar_27);
      };
      highp float x_29;
      x_29 = ((a_22 - _DITHERMATRIX[
        int(tmpvar_25)
      ][
        int(tmpvar_28)
      ]) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_31;
    scrpos_31 = xlv_TEXCOORD3;
    mediump float a_32;
    a_32 = xlv_TEXCOORD3.z;
    if ((a_32 < 0.95)) {
      scrpos_31.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_32 = (a_32 * 17.0);
      highp float tmpvar_33;
      tmpvar_33 = (scrpos_31.y / 4.0);
      highp float tmpvar_34;
      tmpvar_34 = (fract(abs(tmpvar_33)) * 4.0);
      highp float tmpvar_35;
      if ((tmpvar_33 >= 0.0)) {
        tmpvar_35 = tmpvar_34;
      } else {
        tmpvar_35 = -(tmpvar_34);
      };
      highp float tmpvar_36;
      tmpvar_36 = (scrpos_31.x / 4.0);
      highp float tmpvar_37;
      tmpvar_37 = (fract(abs(tmpvar_36)) * 4.0);
      highp float tmpvar_38;
      if ((tmpvar_36 >= 0.0)) {
        tmpvar_38 = tmpvar_37;
      } else {
        tmpvar_38 = -(tmpvar_37);
      };
      highp float x_39;
      x_39 = ((a_32 - _DITHERMATRIX[
        int(tmpvar_35)
      ][
        int(tmpvar_38)
      ]) - 0.01);
      if ((x_39 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_31;
    scrpos_31 = xlv_TEXCOORD3;
    mediump float a_32;
    a_32 = xlv_TEXCOORD3.z;
    if ((a_32 < 0.95)) {
      scrpos_31.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_32 = (a_32 * 17.0);
      highp float tmpvar_33;
      tmpvar_33 = (scrpos_31.y / 4.0);
      highp float tmpvar_34;
      tmpvar_34 = (fract(abs(tmpvar_33)) * 4.0);
      highp float tmpvar_35;
      if ((tmpvar_33 >= 0.0)) {
        tmpvar_35 = tmpvar_34;
      } else {
        tmpvar_35 = -(tmpvar_34);
      };
      highp float tmpvar_36;
      tmpvar_36 = (scrpos_31.x / 4.0);
      highp float tmpvar_37;
      tmpvar_37 = (fract(abs(tmpvar_36)) * 4.0);
      highp float tmpvar_38;
      if ((tmpvar_36 >= 0.0)) {
        tmpvar_38 = tmpvar_37;
      } else {
        tmpvar_38 = -(tmpvar_37);
      };
      highp float x_39;
      x_39 = ((a_32 - _DITHERMATRIX[
        int(tmpvar_35)
      ][
        int(tmpvar_38)
      ]) - 0.01);
      if ((x_39 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_31;
    scrpos_31 = xlv_TEXCOORD3;
    mediump float a_32;
    a_32 = xlv_TEXCOORD3.z;
    if ((a_32 < 0.95)) {
      scrpos_31.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_32 = (a_32 * 17.0);
      highp float tmpvar_33;
      tmpvar_33 = (scrpos_31.y / 4.0);
      highp float tmpvar_34;
      tmpvar_34 = (fract(abs(tmpvar_33)) * 4.0);
      highp float tmpvar_35;
      if ((tmpvar_33 >= 0.0)) {
        tmpvar_35 = tmpvar_34;
      } else {
        tmpvar_35 = -(tmpvar_34);
      };
      highp float tmpvar_36;
      tmpvar_36 = (scrpos_31.x / 4.0);
      highp float tmpvar_37;
      tmpvar_37 = (fract(abs(tmpvar_36)) * 4.0);
      highp float tmpvar_38;
      if ((tmpvar_36 >= 0.0)) {
        tmpvar_38 = tmpvar_37;
      } else {
        tmpvar_38 = -(tmpvar_37);
      };
      highp float x_39;
      x_39 = ((a_32 - _DITHERMATRIX[
        int(tmpvar_35)
      ][
        int(tmpvar_38)
      ]) - 0.01);
      if ((x_39 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_74;
    scrpos_74 = xlv_TEXCOORD3;
    mediump float a_75;
    a_75 = xlv_TEXCOORD3.z;
    if ((a_75 < 0.95)) {
      scrpos_74.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_75 = (a_75 * 17.0);
      highp float tmpvar_76;
      tmpvar_76 = (scrpos_74.y / 4.0);
      highp float tmpvar_77;
      tmpvar_77 = (fract(abs(tmpvar_76)) * 4.0);
      highp float tmpvar_78;
      if ((tmpvar_76 >= 0.0)) {
        tmpvar_78 = tmpvar_77;
      } else {
        tmpvar_78 = -(tmpvar_77);
      };
      highp float tmpvar_79;
      tmpvar_79 = (scrpos_74.x / 4.0);
      highp float tmpvar_80;
      tmpvar_80 = (fract(abs(tmpvar_79)) * 4.0);
      highp float tmpvar_81;
      if ((tmpvar_79 >= 0.0)) {
        tmpvar_81 = tmpvar_80;
      } else {
        tmpvar_81 = -(tmpvar_80);
      };
      highp float x_82;
      x_82 = ((a_75 - _DITHERMATRIX[
        int(tmpvar_78)
      ][
        int(tmpvar_81)
      ]) - 0.01);
      if ((x_82 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_74;
    scrpos_74 = xlv_TEXCOORD3;
    mediump float a_75;
    a_75 = xlv_TEXCOORD3.z;
    if ((a_75 < 0.95)) {
      scrpos_74.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_75 = (a_75 * 17.0);
      highp float tmpvar_76;
      tmpvar_76 = (scrpos_74.y / 4.0);
      highp float tmpvar_77;
      tmpvar_77 = (fract(abs(tmpvar_76)) * 4.0);
      highp float tmpvar_78;
      if ((tmpvar_76 >= 0.0)) {
        tmpvar_78 = tmpvar_77;
      } else {
        tmpvar_78 = -(tmpvar_77);
      };
      highp float tmpvar_79;
      tmpvar_79 = (scrpos_74.x / 4.0);
      highp float tmpvar_80;
      tmpvar_80 = (fract(abs(tmpvar_79)) * 4.0);
      highp float tmpvar_81;
      if ((tmpvar_79 >= 0.0)) {
        tmpvar_81 = tmpvar_80;
      } else {
        tmpvar_81 = -(tmpvar_80);
      };
      highp float x_82;
      x_82 = ((a_75 - _DITHERMATRIX[
        int(tmpvar_78)
      ][
        int(tmpvar_81)
      ]) - 0.01);
      if ((x_82 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_74;
    scrpos_74 = xlv_TEXCOORD3;
    mediump float a_75;
    a_75 = xlv_TEXCOORD3.z;
    if ((a_75 < 0.95)) {
      scrpos_74.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_75 = (a_75 * 17.0);
      highp float tmpvar_76;
      tmpvar_76 = (scrpos_74.y / 4.0);
      highp float tmpvar_77;
      tmpvar_77 = (fract(abs(tmpvar_76)) * 4.0);
      highp float tmpvar_78;
      if ((tmpvar_76 >= 0.0)) {
        tmpvar_78 = tmpvar_77;
      } else {
        tmpvar_78 = -(tmpvar_77);
      };
      highp float tmpvar_79;
      tmpvar_79 = (scrpos_74.x / 4.0);
      highp float tmpvar_80;
      tmpvar_80 = (fract(abs(tmpvar_79)) * 4.0);
      highp float tmpvar_81;
      if ((tmpvar_79 >= 0.0)) {
        tmpvar_81 = tmpvar_80;
      } else {
        tmpvar_81 = -(tmpvar_80);
      };
      highp float x_82;
      x_82 = ((a_75 - _DITHERMATRIX[
        int(tmpvar_78)
      ][
        int(tmpvar_81)
      ]) - 0.01);
      if ((x_82 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_21;
    N_21 = tmpvar_13;
    highp vec3 V_22;
    V_22 = V_2;
    mediump float rimLightDir_23;
    mediump vec3 lightDir_24;
    mediump float rim_25;
    mediump vec4 HRRimColor_26;
    mediump vec3 rgColor_27;
    mediump float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = pow (clamp ((1.001 - 
      dot (V_22, N_21)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_28 = (_RGBias + (tmpvar_29 * _RGScale));
    mediump vec3 tmpvar_30;
    tmpvar_30 = (tmpvar_28 * _RGColor).xyz;
    rgColor_27 = tmpvar_30;
    HRRimColor_26 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_26 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_26 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_26 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_26 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_31;
    tmpvar_31 = (1.0 - max (0.0, dot (V_22, N_21)));
    rim_25 = tmpvar_31;
    highp vec3 tmpvar_32;
    tmpvar_32 = _WorldSpaceLightPos0.xyz;
    lightDir_24 = tmpvar_32;
    mediump vec3 tmpvar_33;
    tmpvar_33 = normalize(lightDir_24);
    highp float tmpvar_34;
    tmpvar_34 = dot (N_21, tmpvar_33);
    rimLightDir_23 = tmpvar_34;
    rim_25 = (rim_25 * (0.5 + rimLightDir_23));
    highp int tmpvar_35;
    if ((rim_25 > HRRimColor_26.w)) {
      tmpvar_35 = 1;
    } else {
      tmpvar_35 = 0;
    };
    rim_25 = float(tmpvar_35);
    mediump vec3 tmpvar_36;
    tmpvar_36 = (outColor_5.xyz + ((HRRimColor_26.xyz * rim_25) * _HRRimPower));
    mediump float tmpvar_37;
    tmpvar_37 = clamp (tmpvar_28, 0.0, 1.0);
    highp vec3 tmpvar_38;
    tmpvar_38 = mix (outColor_5.xyz, tmpvar_30, vec3((tmpvar_37 * _RGRatio)));
    rgColor_27 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (rgColor_27, tmpvar_36, vec3(float(_HRRimIntensity)));
    rgColor_27 = tmpvar_39;
    outColor_5.xyz = rgColor_27;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_40;
      N_40 = tmpvar_13;
      highp vec3 V_41;
      V_41 = V_2;
      mediump float rimLightDir_42;
      mediump vec3 lightDir_43;
      mediump float rim_44;
      mediump vec4 HRRimColor_45;
      mediump vec3 rgColor_46;
      mediump float tmpvar_47;
      highp float tmpvar_48;
      tmpvar_48 = pow (clamp ((1.001 - 
        dot (V_41, N_40)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_47 = (_RGBias + (tmpvar_48 * _RGScale));
      mediump vec3 tmpvar_49;
      tmpvar_49 = (tmpvar_47 * _RGColor).xyz;
      rgColor_46 = tmpvar_49;
      HRRimColor_45 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_45 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_45 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_45 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_45 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - max (0.0, dot (V_41, N_40)));
      rim_44 = tmpvar_50;
      highp vec3 tmpvar_51;
      tmpvar_51 = _WorldSpaceLightPos0.xyz;
      lightDir_43 = tmpvar_51;
      mediump vec3 tmpvar_52;
      tmpvar_52 = normalize(lightDir_43);
      highp float tmpvar_53;
      tmpvar_53 = dot (N_40, tmpvar_52);
      rimLightDir_42 = tmpvar_53;
      rim_44 = (rim_44 * (0.5 + rimLightDir_42));
      highp int tmpvar_54;
      if ((rim_44 > HRRimColor_45.w)) {
        tmpvar_54 = 1;
      } else {
        tmpvar_54 = 0;
      };
      rim_44 = float(tmpvar_54);
      mediump vec3 tmpvar_55;
      tmpvar_55 = (outColor_5.xyz + max ((
        (HRRimColor_45.xyz * rim_44)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_46 = (outColor_5.xyz + max (tmpvar_49, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_56;
      tmpvar_56 = mix (rgColor_46, tmpvar_55, vec3(float(_HRRimIntensity)));
      rgColor_46 = tmpvar_56;
      outColor_5.xyz = rgColor_46;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_57;
    scrpos_57 = xlv_TEXCOORD3;
    mediump float a_58;
    a_58 = xlv_TEXCOORD3.z;
    if ((a_58 < 0.95)) {
      scrpos_57.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_58 = (a_58 * 17.0);
      highp float tmpvar_59;
      tmpvar_59 = (scrpos_57.y / 4.0);
      highp float tmpvar_60;
      tmpvar_60 = (fract(abs(tmpvar_59)) * 4.0);
      highp float tmpvar_61;
      if ((tmpvar_59 >= 0.0)) {
        tmpvar_61 = tmpvar_60;
      } else {
        tmpvar_61 = -(tmpvar_60);
      };
      highp float tmpvar_62;
      tmpvar_62 = (scrpos_57.x / 4.0);
      highp float tmpvar_63;
      tmpvar_63 = (fract(abs(tmpvar_62)) * 4.0);
      highp float tmpvar_64;
      if ((tmpvar_62 >= 0.0)) {
        tmpvar_64 = tmpvar_63;
      } else {
        tmpvar_64 = -(tmpvar_63);
      };
      highp float x_65;
      x_65 = ((a_58 - _DITHERMATRIX[
        int(tmpvar_61)
      ][
        int(tmpvar_64)
      ]) - 0.01);
      if ((x_65 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_21;
    N_21 = tmpvar_13;
    highp vec3 V_22;
    V_22 = V_2;
    mediump float rimLightDir_23;
    mediump vec3 lightDir_24;
    mediump float rim_25;
    mediump vec4 HRRimColor_26;
    mediump vec3 rgColor_27;
    mediump float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = pow (clamp ((1.001 - 
      dot (V_22, N_21)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_28 = (_RGBias + (tmpvar_29 * _RGScale));
    mediump vec3 tmpvar_30;
    tmpvar_30 = (tmpvar_28 * _RGColor).xyz;
    rgColor_27 = tmpvar_30;
    HRRimColor_26 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_26 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_26 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_26 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_26 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_31;
    tmpvar_31 = (1.0 - max (0.0, dot (V_22, N_21)));
    rim_25 = tmpvar_31;
    highp vec3 tmpvar_32;
    tmpvar_32 = _WorldSpaceLightPos0.xyz;
    lightDir_24 = tmpvar_32;
    mediump vec3 tmpvar_33;
    tmpvar_33 = normalize(lightDir_24);
    highp float tmpvar_34;
    tmpvar_34 = dot (N_21, tmpvar_33);
    rimLightDir_23 = tmpvar_34;
    rim_25 = (rim_25 * (0.5 + rimLightDir_23));
    highp int tmpvar_35;
    if ((rim_25 > HRRimColor_26.w)) {
      tmpvar_35 = 1;
    } else {
      tmpvar_35 = 0;
    };
    rim_25 = float(tmpvar_35);
    mediump vec3 tmpvar_36;
    tmpvar_36 = (outColor_5.xyz + ((HRRimColor_26.xyz * rim_25) * _HRRimPower));
    mediump float tmpvar_37;
    tmpvar_37 = clamp (tmpvar_28, 0.0, 1.0);
    highp vec3 tmpvar_38;
    tmpvar_38 = mix (outColor_5.xyz, tmpvar_30, vec3((tmpvar_37 * _RGRatio)));
    rgColor_27 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (rgColor_27, tmpvar_36, vec3(float(_HRRimIntensity)));
    rgColor_27 = tmpvar_39;
    outColor_5.xyz = rgColor_27;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_40;
      N_40 = tmpvar_13;
      highp vec3 V_41;
      V_41 = V_2;
      mediump float rimLightDir_42;
      mediump vec3 lightDir_43;
      mediump float rim_44;
      mediump vec4 HRRimColor_45;
      mediump vec3 rgColor_46;
      mediump float tmpvar_47;
      highp float tmpvar_48;
      tmpvar_48 = pow (clamp ((1.001 - 
        dot (V_41, N_40)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_47 = (_RGBias + (tmpvar_48 * _RGScale));
      mediump vec3 tmpvar_49;
      tmpvar_49 = (tmpvar_47 * _RGColor).xyz;
      rgColor_46 = tmpvar_49;
      HRRimColor_45 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_45 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_45 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_45 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_45 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - max (0.0, dot (V_41, N_40)));
      rim_44 = tmpvar_50;
      highp vec3 tmpvar_51;
      tmpvar_51 = _WorldSpaceLightPos0.xyz;
      lightDir_43 = tmpvar_51;
      mediump vec3 tmpvar_52;
      tmpvar_52 = normalize(lightDir_43);
      highp float tmpvar_53;
      tmpvar_53 = dot (N_40, tmpvar_52);
      rimLightDir_42 = tmpvar_53;
      rim_44 = (rim_44 * (0.5 + rimLightDir_42));
      highp int tmpvar_54;
      if ((rim_44 > HRRimColor_45.w)) {
        tmpvar_54 = 1;
      } else {
        tmpvar_54 = 0;
      };
      rim_44 = float(tmpvar_54);
      mediump vec3 tmpvar_55;
      tmpvar_55 = (outColor_5.xyz + max ((
        (HRRimColor_45.xyz * rim_44)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_46 = (outColor_5.xyz + max (tmpvar_49, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_56;
      tmpvar_56 = mix (rgColor_46, tmpvar_55, vec3(float(_HRRimIntensity)));
      rgColor_46 = tmpvar_56;
      outColor_5.xyz = rgColor_46;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_57;
    scrpos_57 = xlv_TEXCOORD3;
    mediump float a_58;
    a_58 = xlv_TEXCOORD3.z;
    if ((a_58 < 0.95)) {
      scrpos_57.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_58 = (a_58 * 17.0);
      highp float tmpvar_59;
      tmpvar_59 = (scrpos_57.y / 4.0);
      highp float tmpvar_60;
      tmpvar_60 = (fract(abs(tmpvar_59)) * 4.0);
      highp float tmpvar_61;
      if ((tmpvar_59 >= 0.0)) {
        tmpvar_61 = tmpvar_60;
      } else {
        tmpvar_61 = -(tmpvar_60);
      };
      highp float tmpvar_62;
      tmpvar_62 = (scrpos_57.x / 4.0);
      highp float tmpvar_63;
      tmpvar_63 = (fract(abs(tmpvar_62)) * 4.0);
      highp float tmpvar_64;
      if ((tmpvar_62 >= 0.0)) {
        tmpvar_64 = tmpvar_63;
      } else {
        tmpvar_64 = -(tmpvar_63);
      };
      highp float x_65;
      x_65 = ((a_58 - _DITHERMATRIX[
        int(tmpvar_61)
      ][
        int(tmpvar_64)
      ]) - 0.01);
      if ((x_65 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_21;
    N_21 = tmpvar_13;
    highp vec3 V_22;
    V_22 = V_2;
    mediump float rimLightDir_23;
    mediump vec3 lightDir_24;
    mediump float rim_25;
    mediump vec4 HRRimColor_26;
    mediump vec3 rgColor_27;
    mediump float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = pow (clamp ((1.001 - 
      dot (V_22, N_21)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_28 = (_RGBias + (tmpvar_29 * _RGScale));
    mediump vec3 tmpvar_30;
    tmpvar_30 = (tmpvar_28 * _RGColor).xyz;
    rgColor_27 = tmpvar_30;
    HRRimColor_26 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_26 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_26 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_26 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_26 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_31;
    tmpvar_31 = (1.0 - max (0.0, dot (V_22, N_21)));
    rim_25 = tmpvar_31;
    highp vec3 tmpvar_32;
    tmpvar_32 = _WorldSpaceLightPos0.xyz;
    lightDir_24 = tmpvar_32;
    mediump vec3 tmpvar_33;
    tmpvar_33 = normalize(lightDir_24);
    highp float tmpvar_34;
    tmpvar_34 = dot (N_21, tmpvar_33);
    rimLightDir_23 = tmpvar_34;
    rim_25 = (rim_25 * (0.5 + rimLightDir_23));
    highp int tmpvar_35;
    if ((rim_25 > HRRimColor_26.w)) {
      tmpvar_35 = 1;
    } else {
      tmpvar_35 = 0;
    };
    rim_25 = float(tmpvar_35);
    mediump vec3 tmpvar_36;
    tmpvar_36 = (outColor_5.xyz + ((HRRimColor_26.xyz * rim_25) * _HRRimPower));
    mediump float tmpvar_37;
    tmpvar_37 = clamp (tmpvar_28, 0.0, 1.0);
    highp vec3 tmpvar_38;
    tmpvar_38 = mix (outColor_5.xyz, tmpvar_30, vec3((tmpvar_37 * _RGRatio)));
    rgColor_27 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (rgColor_27, tmpvar_36, vec3(float(_HRRimIntensity)));
    rgColor_27 = tmpvar_39;
    outColor_5.xyz = rgColor_27;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_40;
      N_40 = tmpvar_13;
      highp vec3 V_41;
      V_41 = V_2;
      mediump float rimLightDir_42;
      mediump vec3 lightDir_43;
      mediump float rim_44;
      mediump vec4 HRRimColor_45;
      mediump vec3 rgColor_46;
      mediump float tmpvar_47;
      highp float tmpvar_48;
      tmpvar_48 = pow (clamp ((1.001 - 
        dot (V_41, N_40)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_47 = (_RGBias + (tmpvar_48 * _RGScale));
      mediump vec3 tmpvar_49;
      tmpvar_49 = (tmpvar_47 * _RGColor).xyz;
      rgColor_46 = tmpvar_49;
      HRRimColor_45 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_45 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_45 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_45 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_45 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - max (0.0, dot (V_41, N_40)));
      rim_44 = tmpvar_50;
      highp vec3 tmpvar_51;
      tmpvar_51 = _WorldSpaceLightPos0.xyz;
      lightDir_43 = tmpvar_51;
      mediump vec3 tmpvar_52;
      tmpvar_52 = normalize(lightDir_43);
      highp float tmpvar_53;
      tmpvar_53 = dot (N_40, tmpvar_52);
      rimLightDir_42 = tmpvar_53;
      rim_44 = (rim_44 * (0.5 + rimLightDir_42));
      highp int tmpvar_54;
      if ((rim_44 > HRRimColor_45.w)) {
        tmpvar_54 = 1;
      } else {
        tmpvar_54 = 0;
      };
      rim_44 = float(tmpvar_54);
      mediump vec3 tmpvar_55;
      tmpvar_55 = (outColor_5.xyz + max ((
        (HRRimColor_45.xyz * rim_44)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_46 = (outColor_5.xyz + max (tmpvar_49, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_56;
      tmpvar_56 = mix (rgColor_46, tmpvar_55, vec3(float(_HRRimIntensity)));
      rgColor_46 = tmpvar_56;
      outColor_5.xyz = rgColor_46;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_57;
    scrpos_57 = xlv_TEXCOORD3;
    mediump float a_58;
    a_58 = xlv_TEXCOORD3.z;
    if ((a_58 < 0.95)) {
      scrpos_57.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_58 = (a_58 * 17.0);
      highp float tmpvar_59;
      tmpvar_59 = (scrpos_57.y / 4.0);
      highp float tmpvar_60;
      tmpvar_60 = (fract(abs(tmpvar_59)) * 4.0);
      highp float tmpvar_61;
      if ((tmpvar_59 >= 0.0)) {
        tmpvar_61 = tmpvar_60;
      } else {
        tmpvar_61 = -(tmpvar_60);
      };
      highp float tmpvar_62;
      tmpvar_62 = (scrpos_57.x / 4.0);
      highp float tmpvar_63;
      tmpvar_63 = (fract(abs(tmpvar_62)) * 4.0);
      highp float tmpvar_64;
      if ((tmpvar_62 >= 0.0)) {
        tmpvar_64 = tmpvar_63;
      } else {
        tmpvar_64 = -(tmpvar_63);
      };
      highp float x_65;
      x_65 = ((a_58 - _DITHERMATRIX[
        int(tmpvar_61)
      ][
        int(tmpvar_64)
      ]) - 0.01);
      if ((x_65 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_21;
    N_21 = tmpvar_13;
    highp vec3 V_22;
    V_22 = V_2;
    mediump float rimLightDir_23;
    mediump vec3 lightDir_24;
    mediump float rim_25;
    mediump vec4 HRRimColor_26;
    mediump vec3 rgColor_27;
    mediump float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = pow (clamp ((1.001 - 
      dot (V_22, N_21)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_28 = (_RGBias + (tmpvar_29 * _RGScale));
    mediump vec3 tmpvar_30;
    tmpvar_30 = (tmpvar_28 * _RGColor).xyz;
    rgColor_27 = tmpvar_30;
    HRRimColor_26 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_26 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_26 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_26 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_26 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_31;
    tmpvar_31 = (1.0 - max (0.0, dot (V_22, N_21)));
    rim_25 = tmpvar_31;
    highp vec3 tmpvar_32;
    tmpvar_32 = _WorldSpaceLightPos0.xyz;
    lightDir_24 = tmpvar_32;
    mediump vec3 tmpvar_33;
    tmpvar_33 = normalize(lightDir_24);
    highp float tmpvar_34;
    tmpvar_34 = dot (N_21, tmpvar_33);
    rimLightDir_23 = tmpvar_34;
    rim_25 = (rim_25 * (0.5 + rimLightDir_23));
    highp int tmpvar_35;
    if ((rim_25 > HRRimColor_26.w)) {
      tmpvar_35 = 1;
    } else {
      tmpvar_35 = 0;
    };
    rim_25 = float(tmpvar_35);
    mediump vec3 tmpvar_36;
    tmpvar_36 = (outColor_5.xyz + ((HRRimColor_26.xyz * rim_25) * _HRRimPower));
    mediump float tmpvar_37;
    tmpvar_37 = clamp (tmpvar_28, 0.0, 1.0);
    highp vec3 tmpvar_38;
    tmpvar_38 = mix (outColor_5.xyz, tmpvar_30, vec3((tmpvar_37 * _RGRatio)));
    rgColor_27 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (rgColor_27, tmpvar_36, vec3(float(_HRRimIntensity)));
    rgColor_27 = tmpvar_39;
    outColor_5.xyz = rgColor_27;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_40;
      N_40 = tmpvar_13;
      highp vec3 V_41;
      V_41 = V_2;
      mediump float rimLightDir_42;
      mediump vec3 lightDir_43;
      mediump float rim_44;
      mediump vec4 HRRimColor_45;
      mediump vec3 rgColor_46;
      mediump float tmpvar_47;
      highp float tmpvar_48;
      tmpvar_48 = pow (clamp ((1.001 - 
        dot (V_41, N_40)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_47 = (_RGBias + (tmpvar_48 * _RGScale));
      mediump vec3 tmpvar_49;
      tmpvar_49 = (tmpvar_47 * _RGColor).xyz;
      rgColor_46 = tmpvar_49;
      HRRimColor_45 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_45 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_45 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_45 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_45 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - max (0.0, dot (V_41, N_40)));
      rim_44 = tmpvar_50;
      highp vec3 tmpvar_51;
      tmpvar_51 = _WorldSpaceLightPos0.xyz;
      lightDir_43 = tmpvar_51;
      mediump vec3 tmpvar_52;
      tmpvar_52 = normalize(lightDir_43);
      highp float tmpvar_53;
      tmpvar_53 = dot (N_40, tmpvar_52);
      rimLightDir_42 = tmpvar_53;
      rim_44 = (rim_44 * (0.5 + rimLightDir_42));
      highp int tmpvar_54;
      if ((rim_44 > HRRimColor_45.w)) {
        tmpvar_54 = 1;
      } else {
        tmpvar_54 = 0;
      };
      rim_44 = float(tmpvar_54);
      mediump vec3 tmpvar_55;
      tmpvar_55 = (outColor_5.xyz + max ((
        (HRRimColor_45.xyz * rim_44)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_46 = (outColor_5.xyz + max (tmpvar_49, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_56;
      tmpvar_56 = mix (rgColor_46, tmpvar_55, vec3(float(_HRRimIntensity)));
      rgColor_46 = tmpvar_56;
      outColor_5.xyz = rgColor_46;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_57;
    scrpos_57 = xlv_TEXCOORD3;
    mediump float a_58;
    a_58 = xlv_TEXCOORD3.z;
    if ((a_58 < 0.95)) {
      scrpos_57.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_58 = (a_58 * 17.0);
      highp float tmpvar_59;
      tmpvar_59 = (scrpos_57.y / 4.0);
      highp float tmpvar_60;
      tmpvar_60 = (fract(abs(tmpvar_59)) * 4.0);
      highp float tmpvar_61;
      if ((tmpvar_59 >= 0.0)) {
        tmpvar_61 = tmpvar_60;
      } else {
        tmpvar_61 = -(tmpvar_60);
      };
      highp float tmpvar_62;
      tmpvar_62 = (scrpos_57.x / 4.0);
      highp float tmpvar_63;
      tmpvar_63 = (fract(abs(tmpvar_62)) * 4.0);
      highp float tmpvar_64;
      if ((tmpvar_62 >= 0.0)) {
        tmpvar_64 = tmpvar_63;
      } else {
        tmpvar_64 = -(tmpvar_63);
      };
      highp float x_65;
      x_65 = ((a_58 - _DITHERMATRIX[
        int(tmpvar_61)
      ][
        int(tmpvar_64)
      ]) - 0.01);
      if ((x_65 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_21;
    N_21 = tmpvar_13;
    highp vec3 V_22;
    V_22 = V_2;
    mediump float rimLightDir_23;
    mediump vec3 lightDir_24;
    mediump float rim_25;
    mediump vec4 HRRimColor_26;
    mediump vec3 rgColor_27;
    mediump float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = pow (clamp ((1.001 - 
      dot (V_22, N_21)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_28 = (_RGBias + (tmpvar_29 * _RGScale));
    mediump vec3 tmpvar_30;
    tmpvar_30 = (tmpvar_28 * _RGColor).xyz;
    rgColor_27 = tmpvar_30;
    HRRimColor_26 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_26 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_26 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_26 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_26 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_31;
    tmpvar_31 = (1.0 - max (0.0, dot (V_22, N_21)));
    rim_25 = tmpvar_31;
    highp vec3 tmpvar_32;
    tmpvar_32 = _WorldSpaceLightPos0.xyz;
    lightDir_24 = tmpvar_32;
    mediump vec3 tmpvar_33;
    tmpvar_33 = normalize(lightDir_24);
    highp float tmpvar_34;
    tmpvar_34 = dot (N_21, tmpvar_33);
    rimLightDir_23 = tmpvar_34;
    rim_25 = (rim_25 * (0.5 + rimLightDir_23));
    highp int tmpvar_35;
    if ((rim_25 > HRRimColor_26.w)) {
      tmpvar_35 = 1;
    } else {
      tmpvar_35 = 0;
    };
    rim_25 = float(tmpvar_35);
    mediump vec3 tmpvar_36;
    tmpvar_36 = (outColor_5.xyz + ((HRRimColor_26.xyz * rim_25) * _HRRimPower));
    mediump float tmpvar_37;
    tmpvar_37 = clamp (tmpvar_28, 0.0, 1.0);
    highp vec3 tmpvar_38;
    tmpvar_38 = mix (outColor_5.xyz, tmpvar_30, vec3((tmpvar_37 * _RGRatio)));
    rgColor_27 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (rgColor_27, tmpvar_36, vec3(float(_HRRimIntensity)));
    rgColor_27 = tmpvar_39;
    outColor_5.xyz = rgColor_27;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_40;
      N_40 = tmpvar_13;
      highp vec3 V_41;
      V_41 = V_2;
      mediump float rimLightDir_42;
      mediump vec3 lightDir_43;
      mediump float rim_44;
      mediump vec4 HRRimColor_45;
      mediump vec3 rgColor_46;
      mediump float tmpvar_47;
      highp float tmpvar_48;
      tmpvar_48 = pow (clamp ((1.001 - 
        dot (V_41, N_40)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_47 = (_RGBias + (tmpvar_48 * _RGScale));
      mediump vec3 tmpvar_49;
      tmpvar_49 = (tmpvar_47 * _RGColor).xyz;
      rgColor_46 = tmpvar_49;
      HRRimColor_45 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_45 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_45 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_45 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_45 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - max (0.0, dot (V_41, N_40)));
      rim_44 = tmpvar_50;
      highp vec3 tmpvar_51;
      tmpvar_51 = _WorldSpaceLightPos0.xyz;
      lightDir_43 = tmpvar_51;
      mediump vec3 tmpvar_52;
      tmpvar_52 = normalize(lightDir_43);
      highp float tmpvar_53;
      tmpvar_53 = dot (N_40, tmpvar_52);
      rimLightDir_42 = tmpvar_53;
      rim_44 = (rim_44 * (0.5 + rimLightDir_42));
      highp int tmpvar_54;
      if ((rim_44 > HRRimColor_45.w)) {
        tmpvar_54 = 1;
      } else {
        tmpvar_54 = 0;
      };
      rim_44 = float(tmpvar_54);
      mediump vec3 tmpvar_55;
      tmpvar_55 = (outColor_5.xyz + max ((
        (HRRimColor_45.xyz * rim_44)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_46 = (outColor_5.xyz + max (tmpvar_49, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_56;
      tmpvar_56 = mix (rgColor_46, tmpvar_55, vec3(float(_HRRimIntensity)));
      rgColor_46 = tmpvar_56;
      outColor_5.xyz = rgColor_46;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_57;
    scrpos_57 = xlv_TEXCOORD3;
    mediump float a_58;
    a_58 = xlv_TEXCOORD3.z;
    if ((a_58 < 0.95)) {
      scrpos_57.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_58 = (a_58 * 17.0);
      highp float tmpvar_59;
      tmpvar_59 = (scrpos_57.y / 4.0);
      highp float tmpvar_60;
      tmpvar_60 = (fract(abs(tmpvar_59)) * 4.0);
      highp float tmpvar_61;
      if ((tmpvar_59 >= 0.0)) {
        tmpvar_61 = tmpvar_60;
      } else {
        tmpvar_61 = -(tmpvar_60);
      };
      highp float tmpvar_62;
      tmpvar_62 = (scrpos_57.x / 4.0);
      highp float tmpvar_63;
      tmpvar_63 = (fract(abs(tmpvar_62)) * 4.0);
      highp float tmpvar_64;
      if ((tmpvar_62 >= 0.0)) {
        tmpvar_64 = tmpvar_63;
      } else {
        tmpvar_64 = -(tmpvar_63);
      };
      highp float x_65;
      x_65 = ((a_58 - _DITHERMATRIX[
        int(tmpvar_61)
      ][
        int(tmpvar_64)
      ]) - 0.01);
      if ((x_65 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_21;
    N_21 = tmpvar_13;
    highp vec3 V_22;
    V_22 = V_2;
    mediump float rimLightDir_23;
    mediump vec3 lightDir_24;
    mediump float rim_25;
    mediump vec4 HRRimColor_26;
    mediump vec3 rgColor_27;
    mediump float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = pow (clamp ((1.001 - 
      dot (V_22, N_21)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_28 = (_RGBias + (tmpvar_29 * _RGScale));
    mediump vec3 tmpvar_30;
    tmpvar_30 = (tmpvar_28 * _RGColor).xyz;
    rgColor_27 = tmpvar_30;
    HRRimColor_26 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_26 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_26 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_26 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_26 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_31;
    tmpvar_31 = (1.0 - max (0.0, dot (V_22, N_21)));
    rim_25 = tmpvar_31;
    highp vec3 tmpvar_32;
    tmpvar_32 = _WorldSpaceLightPos0.xyz;
    lightDir_24 = tmpvar_32;
    mediump vec3 tmpvar_33;
    tmpvar_33 = normalize(lightDir_24);
    highp float tmpvar_34;
    tmpvar_34 = dot (N_21, tmpvar_33);
    rimLightDir_23 = tmpvar_34;
    rim_25 = (rim_25 * (0.5 + rimLightDir_23));
    highp int tmpvar_35;
    if ((rim_25 > HRRimColor_26.w)) {
      tmpvar_35 = 1;
    } else {
      tmpvar_35 = 0;
    };
    rim_25 = float(tmpvar_35);
    mediump vec3 tmpvar_36;
    tmpvar_36 = (outColor_5.xyz + ((HRRimColor_26.xyz * rim_25) * _HRRimPower));
    mediump float tmpvar_37;
    tmpvar_37 = clamp (tmpvar_28, 0.0, 1.0);
    highp vec3 tmpvar_38;
    tmpvar_38 = mix (outColor_5.xyz, tmpvar_30, vec3((tmpvar_37 * _RGRatio)));
    rgColor_27 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (rgColor_27, tmpvar_36, vec3(float(_HRRimIntensity)));
    rgColor_27 = tmpvar_39;
    outColor_5.xyz = rgColor_27;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_40;
      N_40 = tmpvar_13;
      highp vec3 V_41;
      V_41 = V_2;
      mediump float rimLightDir_42;
      mediump vec3 lightDir_43;
      mediump float rim_44;
      mediump vec4 HRRimColor_45;
      mediump vec3 rgColor_46;
      mediump float tmpvar_47;
      highp float tmpvar_48;
      tmpvar_48 = pow (clamp ((1.001 - 
        dot (V_41, N_40)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_47 = (_RGBias + (tmpvar_48 * _RGScale));
      mediump vec3 tmpvar_49;
      tmpvar_49 = (tmpvar_47 * _RGColor).xyz;
      rgColor_46 = tmpvar_49;
      HRRimColor_45 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_45 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_45 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_45 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_45 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - max (0.0, dot (V_41, N_40)));
      rim_44 = tmpvar_50;
      highp vec3 tmpvar_51;
      tmpvar_51 = _WorldSpaceLightPos0.xyz;
      lightDir_43 = tmpvar_51;
      mediump vec3 tmpvar_52;
      tmpvar_52 = normalize(lightDir_43);
      highp float tmpvar_53;
      tmpvar_53 = dot (N_40, tmpvar_52);
      rimLightDir_42 = tmpvar_53;
      rim_44 = (rim_44 * (0.5 + rimLightDir_42));
      highp int tmpvar_54;
      if ((rim_44 > HRRimColor_45.w)) {
        tmpvar_54 = 1;
      } else {
        tmpvar_54 = 0;
      };
      rim_44 = float(tmpvar_54);
      mediump vec3 tmpvar_55;
      tmpvar_55 = (outColor_5.xyz + max ((
        (HRRimColor_45.xyz * rim_44)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_46 = (outColor_5.xyz + max (tmpvar_49, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_56;
      tmpvar_56 = mix (rgColor_46, tmpvar_55, vec3(float(_HRRimIntensity)));
      rgColor_46 = tmpvar_56;
      outColor_5.xyz = rgColor_46;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_57;
    scrpos_57 = xlv_TEXCOORD3;
    mediump float a_58;
    a_58 = xlv_TEXCOORD3.z;
    if ((a_58 < 0.95)) {
      scrpos_57.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_58 = (a_58 * 17.0);
      highp float tmpvar_59;
      tmpvar_59 = (scrpos_57.y / 4.0);
      highp float tmpvar_60;
      tmpvar_60 = (fract(abs(tmpvar_59)) * 4.0);
      highp float tmpvar_61;
      if ((tmpvar_59 >= 0.0)) {
        tmpvar_61 = tmpvar_60;
      } else {
        tmpvar_61 = -(tmpvar_60);
      };
      highp float tmpvar_62;
      tmpvar_62 = (scrpos_57.x / 4.0);
      highp float tmpvar_63;
      tmpvar_63 = (fract(abs(tmpvar_62)) * 4.0);
      highp float tmpvar_64;
      if ((tmpvar_62 >= 0.0)) {
        tmpvar_64 = tmpvar_63;
      } else {
        tmpvar_64 = -(tmpvar_63);
      };
      highp float x_65;
      x_65 = ((a_58 - _DITHERMATRIX[
        int(tmpvar_61)
      ][
        int(tmpvar_64)
      ]) - 0.01);
      if ((x_65 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if ((_RGBlendType == 1)) {
    highp vec3 N_31;
    N_31 = tmpvar_23;
    highp vec3 V_32;
    V_32 = V_2;
    mediump float rimLightDir_33;
    mediump vec3 lightDir_34;
    mediump float rim_35;
    mediump vec4 HRRimColor_36;
    mediump vec3 rgColor_37;
    mediump float tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow (clamp ((1.001 - 
      dot (V_32, N_31)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_38 = (_RGBias + (tmpvar_39 * _RGScale));
    mediump vec3 tmpvar_40;
    tmpvar_40 = (tmpvar_38 * _RGColor).xyz;
    rgColor_37 = tmpvar_40;
    HRRimColor_36 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_36 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_36 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_36 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_36 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_41;
    tmpvar_41 = (1.0 - max (0.0, dot (V_32, N_31)));
    rim_35 = tmpvar_41;
    highp vec3 tmpvar_42;
    tmpvar_42 = _WorldSpaceLightPos0.xyz;
    lightDir_34 = tmpvar_42;
    mediump vec3 tmpvar_43;
    tmpvar_43 = normalize(lightDir_34);
    highp float tmpvar_44;
    tmpvar_44 = dot (N_31, tmpvar_43);
    rimLightDir_33 = tmpvar_44;
    rim_35 = (rim_35 * (0.5 + rimLightDir_33));
    highp int tmpvar_45;
    if ((rim_35 > HRRimColor_36.w)) {
      tmpvar_45 = 1;
    } else {
      tmpvar_45 = 0;
    };
    rim_35 = float(tmpvar_45);
    mediump vec3 tmpvar_46;
    tmpvar_46 = (outColor_4.xyz + ((HRRimColor_36.xyz * rim_35) * _HRRimPower));
    mediump float tmpvar_47;
    tmpvar_47 = clamp (tmpvar_38, 0.0, 1.0);
    highp vec3 tmpvar_48;
    tmpvar_48 = mix (outColor_4.xyz, tmpvar_40, vec3((tmpvar_47 * _RGRatio)));
    rgColor_37 = tmpvar_48;
    highp vec3 tmpvar_49;
    tmpvar_49 = mix (rgColor_37, tmpvar_46, vec3(float(_HRRimIntensity)));
    rgColor_37 = tmpvar_49;
    outColor_4.xyz = rgColor_37;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_50;
      N_50 = tmpvar_23;
      highp vec3 V_51;
      V_51 = V_2;
      mediump float rimLightDir_52;
      mediump vec3 lightDir_53;
      mediump float rim_54;
      mediump vec4 HRRimColor_55;
      mediump vec3 rgColor_56;
      mediump float tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = pow (clamp ((1.001 - 
        dot (V_51, N_50)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_57 = (_RGBias + (tmpvar_58 * _RGScale));
      mediump vec3 tmpvar_59;
      tmpvar_59 = (tmpvar_57 * _RGColor).xyz;
      rgColor_56 = tmpvar_59;
      HRRimColor_55 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_55 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_55 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_55 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_55 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - max (0.0, dot (V_51, N_50)));
      rim_54 = tmpvar_60;
      highp vec3 tmpvar_61;
      tmpvar_61 = _WorldSpaceLightPos0.xyz;
      lightDir_53 = tmpvar_61;
      mediump vec3 tmpvar_62;
      tmpvar_62 = normalize(lightDir_53);
      highp float tmpvar_63;
      tmpvar_63 = dot (N_50, tmpvar_62);
      rimLightDir_52 = tmpvar_63;
      rim_54 = (rim_54 * (0.5 + rimLightDir_52));
      highp int tmpvar_64;
      if ((rim_54 > HRRimColor_55.w)) {
        tmpvar_64 = 1;
      } else {
        tmpvar_64 = 0;
      };
      rim_54 = float(tmpvar_64);
      mediump vec3 tmpvar_65;
      tmpvar_65 = (outColor_4.xyz + max ((
        (HRRimColor_55.xyz * rim_54)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_56 = (outColor_4.xyz + max (tmpvar_59, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_66;
      tmpvar_66 = mix (rgColor_56, tmpvar_65, vec3(float(_HRRimIntensity)));
      rgColor_56 = tmpvar_66;
      outColor_4.xyz = rgColor_56;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_67;
    scrpos_67 = xlv_TEXCOORD3;
    mediump float a_68;
    a_68 = xlv_TEXCOORD3.z;
    if ((a_68 < 0.95)) {
      scrpos_67.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_68 = (a_68 * 17.0);
      highp float tmpvar_69;
      tmpvar_69 = (scrpos_67.y / 4.0);
      highp float tmpvar_70;
      tmpvar_70 = (fract(abs(tmpvar_69)) * 4.0);
      highp float tmpvar_71;
      if ((tmpvar_69 >= 0.0)) {
        tmpvar_71 = tmpvar_70;
      } else {
        tmpvar_71 = -(tmpvar_70);
      };
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_67.x / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float x_75;
      x_75 = ((a_68 - _DITHERMATRIX[
        int(tmpvar_71)
      ][
        int(tmpvar_74)
      ]) - 0.01);
      if ((x_75 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if ((_RGBlendType == 1)) {
    highp vec3 N_31;
    N_31 = tmpvar_23;
    highp vec3 V_32;
    V_32 = V_2;
    mediump float rimLightDir_33;
    mediump vec3 lightDir_34;
    mediump float rim_35;
    mediump vec4 HRRimColor_36;
    mediump vec3 rgColor_37;
    mediump float tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow (clamp ((1.001 - 
      dot (V_32, N_31)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_38 = (_RGBias + (tmpvar_39 * _RGScale));
    mediump vec3 tmpvar_40;
    tmpvar_40 = (tmpvar_38 * _RGColor).xyz;
    rgColor_37 = tmpvar_40;
    HRRimColor_36 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_36 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_36 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_36 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_36 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_41;
    tmpvar_41 = (1.0 - max (0.0, dot (V_32, N_31)));
    rim_35 = tmpvar_41;
    highp vec3 tmpvar_42;
    tmpvar_42 = _WorldSpaceLightPos0.xyz;
    lightDir_34 = tmpvar_42;
    mediump vec3 tmpvar_43;
    tmpvar_43 = normalize(lightDir_34);
    highp float tmpvar_44;
    tmpvar_44 = dot (N_31, tmpvar_43);
    rimLightDir_33 = tmpvar_44;
    rim_35 = (rim_35 * (0.5 + rimLightDir_33));
    highp int tmpvar_45;
    if ((rim_35 > HRRimColor_36.w)) {
      tmpvar_45 = 1;
    } else {
      tmpvar_45 = 0;
    };
    rim_35 = float(tmpvar_45);
    mediump vec3 tmpvar_46;
    tmpvar_46 = (outColor_4.xyz + ((HRRimColor_36.xyz * rim_35) * _HRRimPower));
    mediump float tmpvar_47;
    tmpvar_47 = clamp (tmpvar_38, 0.0, 1.0);
    highp vec3 tmpvar_48;
    tmpvar_48 = mix (outColor_4.xyz, tmpvar_40, vec3((tmpvar_47 * _RGRatio)));
    rgColor_37 = tmpvar_48;
    highp vec3 tmpvar_49;
    tmpvar_49 = mix (rgColor_37, tmpvar_46, vec3(float(_HRRimIntensity)));
    rgColor_37 = tmpvar_49;
    outColor_4.xyz = rgColor_37;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_50;
      N_50 = tmpvar_23;
      highp vec3 V_51;
      V_51 = V_2;
      mediump float rimLightDir_52;
      mediump vec3 lightDir_53;
      mediump float rim_54;
      mediump vec4 HRRimColor_55;
      mediump vec3 rgColor_56;
      mediump float tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = pow (clamp ((1.001 - 
        dot (V_51, N_50)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_57 = (_RGBias + (tmpvar_58 * _RGScale));
      mediump vec3 tmpvar_59;
      tmpvar_59 = (tmpvar_57 * _RGColor).xyz;
      rgColor_56 = tmpvar_59;
      HRRimColor_55 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_55 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_55 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_55 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_55 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - max (0.0, dot (V_51, N_50)));
      rim_54 = tmpvar_60;
      highp vec3 tmpvar_61;
      tmpvar_61 = _WorldSpaceLightPos0.xyz;
      lightDir_53 = tmpvar_61;
      mediump vec3 tmpvar_62;
      tmpvar_62 = normalize(lightDir_53);
      highp float tmpvar_63;
      tmpvar_63 = dot (N_50, tmpvar_62);
      rimLightDir_52 = tmpvar_63;
      rim_54 = (rim_54 * (0.5 + rimLightDir_52));
      highp int tmpvar_64;
      if ((rim_54 > HRRimColor_55.w)) {
        tmpvar_64 = 1;
      } else {
        tmpvar_64 = 0;
      };
      rim_54 = float(tmpvar_64);
      mediump vec3 tmpvar_65;
      tmpvar_65 = (outColor_4.xyz + max ((
        (HRRimColor_55.xyz * rim_54)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_56 = (outColor_4.xyz + max (tmpvar_59, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_66;
      tmpvar_66 = mix (rgColor_56, tmpvar_65, vec3(float(_HRRimIntensity)));
      rgColor_56 = tmpvar_66;
      outColor_4.xyz = rgColor_56;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_67;
    scrpos_67 = xlv_TEXCOORD3;
    mediump float a_68;
    a_68 = xlv_TEXCOORD3.z;
    if ((a_68 < 0.95)) {
      scrpos_67.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_68 = (a_68 * 17.0);
      highp float tmpvar_69;
      tmpvar_69 = (scrpos_67.y / 4.0);
      highp float tmpvar_70;
      tmpvar_70 = (fract(abs(tmpvar_69)) * 4.0);
      highp float tmpvar_71;
      if ((tmpvar_69 >= 0.0)) {
        tmpvar_71 = tmpvar_70;
      } else {
        tmpvar_71 = -(tmpvar_70);
      };
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_67.x / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float x_75;
      x_75 = ((a_68 - _DITHERMATRIX[
        int(tmpvar_71)
      ][
        int(tmpvar_74)
      ]) - 0.01);
      if ((x_75 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if ((_RGBlendType == 1)) {
    highp vec3 N_31;
    N_31 = tmpvar_23;
    highp vec3 V_32;
    V_32 = V_2;
    mediump float rimLightDir_33;
    mediump vec3 lightDir_34;
    mediump float rim_35;
    mediump vec4 HRRimColor_36;
    mediump vec3 rgColor_37;
    mediump float tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow (clamp ((1.001 - 
      dot (V_32, N_31)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_38 = (_RGBias + (tmpvar_39 * _RGScale));
    mediump vec3 tmpvar_40;
    tmpvar_40 = (tmpvar_38 * _RGColor).xyz;
    rgColor_37 = tmpvar_40;
    HRRimColor_36 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_36 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_36 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_36 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_36 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_41;
    tmpvar_41 = (1.0 - max (0.0, dot (V_32, N_31)));
    rim_35 = tmpvar_41;
    highp vec3 tmpvar_42;
    tmpvar_42 = _WorldSpaceLightPos0.xyz;
    lightDir_34 = tmpvar_42;
    mediump vec3 tmpvar_43;
    tmpvar_43 = normalize(lightDir_34);
    highp float tmpvar_44;
    tmpvar_44 = dot (N_31, tmpvar_43);
    rimLightDir_33 = tmpvar_44;
    rim_35 = (rim_35 * (0.5 + rimLightDir_33));
    highp int tmpvar_45;
    if ((rim_35 > HRRimColor_36.w)) {
      tmpvar_45 = 1;
    } else {
      tmpvar_45 = 0;
    };
    rim_35 = float(tmpvar_45);
    mediump vec3 tmpvar_46;
    tmpvar_46 = (outColor_4.xyz + ((HRRimColor_36.xyz * rim_35) * _HRRimPower));
    mediump float tmpvar_47;
    tmpvar_47 = clamp (tmpvar_38, 0.0, 1.0);
    highp vec3 tmpvar_48;
    tmpvar_48 = mix (outColor_4.xyz, tmpvar_40, vec3((tmpvar_47 * _RGRatio)));
    rgColor_37 = tmpvar_48;
    highp vec3 tmpvar_49;
    tmpvar_49 = mix (rgColor_37, tmpvar_46, vec3(float(_HRRimIntensity)));
    rgColor_37 = tmpvar_49;
    outColor_4.xyz = rgColor_37;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_50;
      N_50 = tmpvar_23;
      highp vec3 V_51;
      V_51 = V_2;
      mediump float rimLightDir_52;
      mediump vec3 lightDir_53;
      mediump float rim_54;
      mediump vec4 HRRimColor_55;
      mediump vec3 rgColor_56;
      mediump float tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = pow (clamp ((1.001 - 
        dot (V_51, N_50)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_57 = (_RGBias + (tmpvar_58 * _RGScale));
      mediump vec3 tmpvar_59;
      tmpvar_59 = (tmpvar_57 * _RGColor).xyz;
      rgColor_56 = tmpvar_59;
      HRRimColor_55 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_55 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_55 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_55 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_55 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - max (0.0, dot (V_51, N_50)));
      rim_54 = tmpvar_60;
      highp vec3 tmpvar_61;
      tmpvar_61 = _WorldSpaceLightPos0.xyz;
      lightDir_53 = tmpvar_61;
      mediump vec3 tmpvar_62;
      tmpvar_62 = normalize(lightDir_53);
      highp float tmpvar_63;
      tmpvar_63 = dot (N_50, tmpvar_62);
      rimLightDir_52 = tmpvar_63;
      rim_54 = (rim_54 * (0.5 + rimLightDir_52));
      highp int tmpvar_64;
      if ((rim_54 > HRRimColor_55.w)) {
        tmpvar_64 = 1;
      } else {
        tmpvar_64 = 0;
      };
      rim_54 = float(tmpvar_64);
      mediump vec3 tmpvar_65;
      tmpvar_65 = (outColor_4.xyz + max ((
        (HRRimColor_55.xyz * rim_54)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_56 = (outColor_4.xyz + max (tmpvar_59, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_66;
      tmpvar_66 = mix (rgColor_56, tmpvar_65, vec3(float(_HRRimIntensity)));
      rgColor_56 = tmpvar_66;
      outColor_4.xyz = rgColor_56;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_67;
    scrpos_67 = xlv_TEXCOORD3;
    mediump float a_68;
    a_68 = xlv_TEXCOORD3.z;
    if ((a_68 < 0.95)) {
      scrpos_67.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_68 = (a_68 * 17.0);
      highp float tmpvar_69;
      tmpvar_69 = (scrpos_67.y / 4.0);
      highp float tmpvar_70;
      tmpvar_70 = (fract(abs(tmpvar_69)) * 4.0);
      highp float tmpvar_71;
      if ((tmpvar_69 >= 0.0)) {
        tmpvar_71 = tmpvar_70;
      } else {
        tmpvar_71 = -(tmpvar_70);
      };
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_67.x / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float x_75;
      x_75 = ((a_68 - _DITHERMATRIX[
        int(tmpvar_71)
      ][
        int(tmpvar_74)
      ]) - 0.01);
      if ((x_75 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_74;
    N_74 = tmpvar_66;
    highp vec3 V_75;
    V_75 = V_2;
    mediump float rimLightDir_76;
    mediump vec3 lightDir_77;
    mediump float rim_78;
    mediump vec4 HRRimColor_79;
    mediump vec3 rgColor_80;
    mediump float tmpvar_81;
    highp float tmpvar_82;
    tmpvar_82 = pow (clamp ((1.001 - 
      dot (V_75, N_74)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_81 = (_RGBias + (tmpvar_82 * _RGScale));
    mediump vec3 tmpvar_83;
    tmpvar_83 = (tmpvar_81 * _RGColor).xyz;
    rgColor_80 = tmpvar_83;
    HRRimColor_79 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_79 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_79 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_79 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_79 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_84;
    tmpvar_84 = (1.0 - max (0.0, dot (V_75, N_74)));
    rim_78 = tmpvar_84;
    highp vec3 tmpvar_85;
    tmpvar_85 = _WorldSpaceLightPos0.xyz;
    lightDir_77 = tmpvar_85;
    mediump vec3 tmpvar_86;
    tmpvar_86 = normalize(lightDir_77);
    highp float tmpvar_87;
    tmpvar_87 = dot (N_74, tmpvar_86);
    rimLightDir_76 = tmpvar_87;
    rim_78 = (rim_78 * (0.5 + rimLightDir_76));
    highp int tmpvar_88;
    if ((rim_78 > HRRimColor_79.w)) {
      tmpvar_88 = 1;
    } else {
      tmpvar_88 = 0;
    };
    rim_78 = float(tmpvar_88);
    mediump vec3 tmpvar_89;
    tmpvar_89 = (outColor_4.xyz + ((HRRimColor_79.xyz * rim_78) * _HRRimPower));
    mediump float tmpvar_90;
    tmpvar_90 = clamp (tmpvar_81, 0.0, 1.0);
    highp vec3 tmpvar_91;
    tmpvar_91 = mix (outColor_4.xyz, tmpvar_83, vec3((tmpvar_90 * _RGRatio)));
    rgColor_80 = tmpvar_91;
    highp vec3 tmpvar_92;
    tmpvar_92 = mix (rgColor_80, tmpvar_89, vec3(float(_HRRimIntensity)));
    rgColor_80 = tmpvar_92;
    outColor_4.xyz = rgColor_80;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_93;
      N_93 = tmpvar_66;
      highp vec3 V_94;
      V_94 = V_2;
      mediump float rimLightDir_95;
      mediump vec3 lightDir_96;
      mediump float rim_97;
      mediump vec4 HRRimColor_98;
      mediump vec3 rgColor_99;
      mediump float tmpvar_100;
      highp float tmpvar_101;
      tmpvar_101 = pow (clamp ((1.001 - 
        dot (V_94, N_93)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_100 = (_RGBias + (tmpvar_101 * _RGScale));
      mediump vec3 tmpvar_102;
      tmpvar_102 = (tmpvar_100 * _RGColor).xyz;
      rgColor_99 = tmpvar_102;
      HRRimColor_98 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_98 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_98 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_98 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_98 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_103;
      tmpvar_103 = (1.0 - max (0.0, dot (V_94, N_93)));
      rim_97 = tmpvar_103;
      highp vec3 tmpvar_104;
      tmpvar_104 = _WorldSpaceLightPos0.xyz;
      lightDir_96 = tmpvar_104;
      mediump vec3 tmpvar_105;
      tmpvar_105 = normalize(lightDir_96);
      highp float tmpvar_106;
      tmpvar_106 = dot (N_93, tmpvar_105);
      rimLightDir_95 = tmpvar_106;
      rim_97 = (rim_97 * (0.5 + rimLightDir_95));
      highp int tmpvar_107;
      if ((rim_97 > HRRimColor_98.w)) {
        tmpvar_107 = 1;
      } else {
        tmpvar_107 = 0;
      };
      rim_97 = float(tmpvar_107);
      mediump vec3 tmpvar_108;
      tmpvar_108 = (outColor_4.xyz + max ((
        (HRRimColor_98.xyz * rim_97)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_99 = (outColor_4.xyz + max (tmpvar_102, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_109;
      tmpvar_109 = mix (rgColor_99, tmpvar_108, vec3(float(_HRRimIntensity)));
      rgColor_99 = tmpvar_109;
      outColor_4.xyz = rgColor_99;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_110;
    scrpos_110 = xlv_TEXCOORD3;
    mediump float a_111;
    a_111 = xlv_TEXCOORD3.z;
    if ((a_111 < 0.95)) {
      scrpos_110.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_111 = (a_111 * 17.0);
      highp float tmpvar_112;
      tmpvar_112 = (scrpos_110.y / 4.0);
      highp float tmpvar_113;
      tmpvar_113 = (fract(abs(tmpvar_112)) * 4.0);
      highp float tmpvar_114;
      if ((tmpvar_112 >= 0.0)) {
        tmpvar_114 = tmpvar_113;
      } else {
        tmpvar_114 = -(tmpvar_113);
      };
      highp float tmpvar_115;
      tmpvar_115 = (scrpos_110.x / 4.0);
      highp float tmpvar_116;
      tmpvar_116 = (fract(abs(tmpvar_115)) * 4.0);
      highp float tmpvar_117;
      if ((tmpvar_115 >= 0.0)) {
        tmpvar_117 = tmpvar_116;
      } else {
        tmpvar_117 = -(tmpvar_116);
      };
      highp float x_118;
      x_118 = ((a_111 - _DITHERMATRIX[
        int(tmpvar_114)
      ][
        int(tmpvar_117)
      ]) - 0.01);
      if ((x_118 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_74;
    N_74 = tmpvar_66;
    highp vec3 V_75;
    V_75 = V_2;
    mediump float rimLightDir_76;
    mediump vec3 lightDir_77;
    mediump float rim_78;
    mediump vec4 HRRimColor_79;
    mediump vec3 rgColor_80;
    mediump float tmpvar_81;
    highp float tmpvar_82;
    tmpvar_82 = pow (clamp ((1.001 - 
      dot (V_75, N_74)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_81 = (_RGBias + (tmpvar_82 * _RGScale));
    mediump vec3 tmpvar_83;
    tmpvar_83 = (tmpvar_81 * _RGColor).xyz;
    rgColor_80 = tmpvar_83;
    HRRimColor_79 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_79 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_79 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_79 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_79 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_84;
    tmpvar_84 = (1.0 - max (0.0, dot (V_75, N_74)));
    rim_78 = tmpvar_84;
    highp vec3 tmpvar_85;
    tmpvar_85 = _WorldSpaceLightPos0.xyz;
    lightDir_77 = tmpvar_85;
    mediump vec3 tmpvar_86;
    tmpvar_86 = normalize(lightDir_77);
    highp float tmpvar_87;
    tmpvar_87 = dot (N_74, tmpvar_86);
    rimLightDir_76 = tmpvar_87;
    rim_78 = (rim_78 * (0.5 + rimLightDir_76));
    highp int tmpvar_88;
    if ((rim_78 > HRRimColor_79.w)) {
      tmpvar_88 = 1;
    } else {
      tmpvar_88 = 0;
    };
    rim_78 = float(tmpvar_88);
    mediump vec3 tmpvar_89;
    tmpvar_89 = (outColor_4.xyz + ((HRRimColor_79.xyz * rim_78) * _HRRimPower));
    mediump float tmpvar_90;
    tmpvar_90 = clamp (tmpvar_81, 0.0, 1.0);
    highp vec3 tmpvar_91;
    tmpvar_91 = mix (outColor_4.xyz, tmpvar_83, vec3((tmpvar_90 * _RGRatio)));
    rgColor_80 = tmpvar_91;
    highp vec3 tmpvar_92;
    tmpvar_92 = mix (rgColor_80, tmpvar_89, vec3(float(_HRRimIntensity)));
    rgColor_80 = tmpvar_92;
    outColor_4.xyz = rgColor_80;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_93;
      N_93 = tmpvar_66;
      highp vec3 V_94;
      V_94 = V_2;
      mediump float rimLightDir_95;
      mediump vec3 lightDir_96;
      mediump float rim_97;
      mediump vec4 HRRimColor_98;
      mediump vec3 rgColor_99;
      mediump float tmpvar_100;
      highp float tmpvar_101;
      tmpvar_101 = pow (clamp ((1.001 - 
        dot (V_94, N_93)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_100 = (_RGBias + (tmpvar_101 * _RGScale));
      mediump vec3 tmpvar_102;
      tmpvar_102 = (tmpvar_100 * _RGColor).xyz;
      rgColor_99 = tmpvar_102;
      HRRimColor_98 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_98 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_98 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_98 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_98 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_103;
      tmpvar_103 = (1.0 - max (0.0, dot (V_94, N_93)));
      rim_97 = tmpvar_103;
      highp vec3 tmpvar_104;
      tmpvar_104 = _WorldSpaceLightPos0.xyz;
      lightDir_96 = tmpvar_104;
      mediump vec3 tmpvar_105;
      tmpvar_105 = normalize(lightDir_96);
      highp float tmpvar_106;
      tmpvar_106 = dot (N_93, tmpvar_105);
      rimLightDir_95 = tmpvar_106;
      rim_97 = (rim_97 * (0.5 + rimLightDir_95));
      highp int tmpvar_107;
      if ((rim_97 > HRRimColor_98.w)) {
        tmpvar_107 = 1;
      } else {
        tmpvar_107 = 0;
      };
      rim_97 = float(tmpvar_107);
      mediump vec3 tmpvar_108;
      tmpvar_108 = (outColor_4.xyz + max ((
        (HRRimColor_98.xyz * rim_97)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_99 = (outColor_4.xyz + max (tmpvar_102, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_109;
      tmpvar_109 = mix (rgColor_99, tmpvar_108, vec3(float(_HRRimIntensity)));
      rgColor_99 = tmpvar_109;
      outColor_4.xyz = rgColor_99;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_110;
    scrpos_110 = xlv_TEXCOORD3;
    mediump float a_111;
    a_111 = xlv_TEXCOORD3.z;
    if ((a_111 < 0.95)) {
      scrpos_110.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_111 = (a_111 * 17.0);
      highp float tmpvar_112;
      tmpvar_112 = (scrpos_110.y / 4.0);
      highp float tmpvar_113;
      tmpvar_113 = (fract(abs(tmpvar_112)) * 4.0);
      highp float tmpvar_114;
      if ((tmpvar_112 >= 0.0)) {
        tmpvar_114 = tmpvar_113;
      } else {
        tmpvar_114 = -(tmpvar_113);
      };
      highp float tmpvar_115;
      tmpvar_115 = (scrpos_110.x / 4.0);
      highp float tmpvar_116;
      tmpvar_116 = (fract(abs(tmpvar_115)) * 4.0);
      highp float tmpvar_117;
      if ((tmpvar_115 >= 0.0)) {
        tmpvar_117 = tmpvar_116;
      } else {
        tmpvar_117 = -(tmpvar_116);
      };
      highp float x_118;
      x_118 = ((a_111 - _DITHERMATRIX[
        int(tmpvar_114)
      ][
        int(tmpvar_117)
      ]) - 0.01);
      if ((x_118 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_74;
    N_74 = tmpvar_66;
    highp vec3 V_75;
    V_75 = V_2;
    mediump float rimLightDir_76;
    mediump vec3 lightDir_77;
    mediump float rim_78;
    mediump vec4 HRRimColor_79;
    mediump vec3 rgColor_80;
    mediump float tmpvar_81;
    highp float tmpvar_82;
    tmpvar_82 = pow (clamp ((1.001 - 
      dot (V_75, N_74)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_81 = (_RGBias + (tmpvar_82 * _RGScale));
    mediump vec3 tmpvar_83;
    tmpvar_83 = (tmpvar_81 * _RGColor).xyz;
    rgColor_80 = tmpvar_83;
    HRRimColor_79 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_79 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_79 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_79 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_79 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_84;
    tmpvar_84 = (1.0 - max (0.0, dot (V_75, N_74)));
    rim_78 = tmpvar_84;
    highp vec3 tmpvar_85;
    tmpvar_85 = _WorldSpaceLightPos0.xyz;
    lightDir_77 = tmpvar_85;
    mediump vec3 tmpvar_86;
    tmpvar_86 = normalize(lightDir_77);
    highp float tmpvar_87;
    tmpvar_87 = dot (N_74, tmpvar_86);
    rimLightDir_76 = tmpvar_87;
    rim_78 = (rim_78 * (0.5 + rimLightDir_76));
    highp int tmpvar_88;
    if ((rim_78 > HRRimColor_79.w)) {
      tmpvar_88 = 1;
    } else {
      tmpvar_88 = 0;
    };
    rim_78 = float(tmpvar_88);
    mediump vec3 tmpvar_89;
    tmpvar_89 = (outColor_4.xyz + ((HRRimColor_79.xyz * rim_78) * _HRRimPower));
    mediump float tmpvar_90;
    tmpvar_90 = clamp (tmpvar_81, 0.0, 1.0);
    highp vec3 tmpvar_91;
    tmpvar_91 = mix (outColor_4.xyz, tmpvar_83, vec3((tmpvar_90 * _RGRatio)));
    rgColor_80 = tmpvar_91;
    highp vec3 tmpvar_92;
    tmpvar_92 = mix (rgColor_80, tmpvar_89, vec3(float(_HRRimIntensity)));
    rgColor_80 = tmpvar_92;
    outColor_4.xyz = rgColor_80;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_93;
      N_93 = tmpvar_66;
      highp vec3 V_94;
      V_94 = V_2;
      mediump float rimLightDir_95;
      mediump vec3 lightDir_96;
      mediump float rim_97;
      mediump vec4 HRRimColor_98;
      mediump vec3 rgColor_99;
      mediump float tmpvar_100;
      highp float tmpvar_101;
      tmpvar_101 = pow (clamp ((1.001 - 
        dot (V_94, N_93)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_100 = (_RGBias + (tmpvar_101 * _RGScale));
      mediump vec3 tmpvar_102;
      tmpvar_102 = (tmpvar_100 * _RGColor).xyz;
      rgColor_99 = tmpvar_102;
      HRRimColor_98 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_98 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_98 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_98 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_98 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_103;
      tmpvar_103 = (1.0 - max (0.0, dot (V_94, N_93)));
      rim_97 = tmpvar_103;
      highp vec3 tmpvar_104;
      tmpvar_104 = _WorldSpaceLightPos0.xyz;
      lightDir_96 = tmpvar_104;
      mediump vec3 tmpvar_105;
      tmpvar_105 = normalize(lightDir_96);
      highp float tmpvar_106;
      tmpvar_106 = dot (N_93, tmpvar_105);
      rimLightDir_95 = tmpvar_106;
      rim_97 = (rim_97 * (0.5 + rimLightDir_95));
      highp int tmpvar_107;
      if ((rim_97 > HRRimColor_98.w)) {
        tmpvar_107 = 1;
      } else {
        tmpvar_107 = 0;
      };
      rim_97 = float(tmpvar_107);
      mediump vec3 tmpvar_108;
      tmpvar_108 = (outColor_4.xyz + max ((
        (HRRimColor_98.xyz * rim_97)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_99 = (outColor_4.xyz + max (tmpvar_102, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_109;
      tmpvar_109 = mix (rgColor_99, tmpvar_108, vec3(float(_HRRimIntensity)));
      rgColor_99 = tmpvar_109;
      outColor_4.xyz = rgColor_99;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_110;
    scrpos_110 = xlv_TEXCOORD3;
    mediump float a_111;
    a_111 = xlv_TEXCOORD3.z;
    if ((a_111 < 0.95)) {
      scrpos_110.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_111 = (a_111 * 17.0);
      highp float tmpvar_112;
      tmpvar_112 = (scrpos_110.y / 4.0);
      highp float tmpvar_113;
      tmpvar_113 = (fract(abs(tmpvar_112)) * 4.0);
      highp float tmpvar_114;
      if ((tmpvar_112 >= 0.0)) {
        tmpvar_114 = tmpvar_113;
      } else {
        tmpvar_114 = -(tmpvar_113);
      };
      highp float tmpvar_115;
      tmpvar_115 = (scrpos_110.x / 4.0);
      highp float tmpvar_116;
      tmpvar_116 = (fract(abs(tmpvar_115)) * 4.0);
      highp float tmpvar_117;
      if ((tmpvar_115 >= 0.0)) {
        tmpvar_117 = tmpvar_116;
      } else {
        tmpvar_117 = -(tmpvar_116);
      };
      highp float x_118;
      x_118 = ((a_111 - _DITHERMATRIX[
        int(tmpvar_114)
      ][
        int(tmpvar_117)
      ]) - 0.01);
      if ((x_118 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_36;
    scrpos_36 = xlv_TEXCOORD3;
    mediump float a_37;
    a_37 = xlv_TEXCOORD3.z;
    if ((a_37 < 0.95)) {
      scrpos_36.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_37 = (a_37 * 17.0);
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_36.y / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float tmpvar_41;
      tmpvar_41 = (scrpos_36.x / 4.0);
      highp float tmpvar_42;
      tmpvar_42 = (fract(abs(tmpvar_41)) * 4.0);
      highp float tmpvar_43;
      if ((tmpvar_41 >= 0.0)) {
        tmpvar_43 = tmpvar_42;
      } else {
        tmpvar_43 = -(tmpvar_42);
      };
      highp float x_44;
      x_44 = ((a_37 - _DITHERMATRIX[
        int(tmpvar_40)
      ][
        int(tmpvar_43)
      ]) - 0.01);
      if ((x_44 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_36;
    scrpos_36 = xlv_TEXCOORD3;
    mediump float a_37;
    a_37 = xlv_TEXCOORD3.z;
    if ((a_37 < 0.95)) {
      scrpos_36.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_37 = (a_37 * 17.0);
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_36.y / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float tmpvar_41;
      tmpvar_41 = (scrpos_36.x / 4.0);
      highp float tmpvar_42;
      tmpvar_42 = (fract(abs(tmpvar_41)) * 4.0);
      highp float tmpvar_43;
      if ((tmpvar_41 >= 0.0)) {
        tmpvar_43 = tmpvar_42;
      } else {
        tmpvar_43 = -(tmpvar_42);
      };
      highp float x_44;
      x_44 = ((a_37 - _DITHERMATRIX[
        int(tmpvar_40)
      ][
        int(tmpvar_43)
      ]) - 0.01);
      if ((x_44 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_36;
    scrpos_36 = xlv_TEXCOORD3;
    mediump float a_37;
    a_37 = xlv_TEXCOORD3.z;
    if ((a_37 < 0.95)) {
      scrpos_36.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_37 = (a_37 * 17.0);
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_36.y / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float tmpvar_41;
      tmpvar_41 = (scrpos_36.x / 4.0);
      highp float tmpvar_42;
      tmpvar_42 = (fract(abs(tmpvar_41)) * 4.0);
      highp float tmpvar_43;
      if ((tmpvar_41 >= 0.0)) {
        tmpvar_43 = tmpvar_42;
      } else {
        tmpvar_43 = -(tmpvar_42);
      };
      highp float x_44;
      x_44 = ((a_37 - _DITHERMATRIX[
        int(tmpvar_40)
      ][
        int(tmpvar_43)
      ]) - 0.01);
      if ((x_44 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_36;
    scrpos_36 = xlv_TEXCOORD3;
    mediump float a_37;
    a_37 = xlv_TEXCOORD3.z;
    if ((a_37 < 0.95)) {
      scrpos_36.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_37 = (a_37 * 17.0);
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_36.y / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float tmpvar_41;
      tmpvar_41 = (scrpos_36.x / 4.0);
      highp float tmpvar_42;
      tmpvar_42 = (fract(abs(tmpvar_41)) * 4.0);
      highp float tmpvar_43;
      if ((tmpvar_41 >= 0.0)) {
        tmpvar_43 = tmpvar_42;
      } else {
        tmpvar_43 = -(tmpvar_42);
      };
      highp float x_44;
      x_44 = ((a_37 - _DITHERMATRIX[
        int(tmpvar_40)
      ][
        int(tmpvar_43)
      ]) - 0.01);
      if ((x_44 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_36;
    scrpos_36 = xlv_TEXCOORD3;
    mediump float a_37;
    a_37 = xlv_TEXCOORD3.z;
    if ((a_37 < 0.95)) {
      scrpos_36.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_37 = (a_37 * 17.0);
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_36.y / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float tmpvar_41;
      tmpvar_41 = (scrpos_36.x / 4.0);
      highp float tmpvar_42;
      tmpvar_42 = (fract(abs(tmpvar_41)) * 4.0);
      highp float tmpvar_43;
      if ((tmpvar_41 >= 0.0)) {
        tmpvar_43 = tmpvar_42;
      } else {
        tmpvar_43 = -(tmpvar_42);
      };
      highp float x_44;
      x_44 = ((a_37 - _DITHERMATRIX[
        int(tmpvar_40)
      ][
        int(tmpvar_43)
      ]) - 0.01);
      if ((x_44 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_36;
    scrpos_36 = xlv_TEXCOORD3;
    mediump float a_37;
    a_37 = xlv_TEXCOORD3.z;
    if ((a_37 < 0.95)) {
      scrpos_36.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_37 = (a_37 * 17.0);
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_36.y / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float tmpvar_41;
      tmpvar_41 = (scrpos_36.x / 4.0);
      highp float tmpvar_42;
      tmpvar_42 = (fract(abs(tmpvar_41)) * 4.0);
      highp float tmpvar_43;
      if ((tmpvar_41 >= 0.0)) {
        tmpvar_43 = tmpvar_42;
      } else {
        tmpvar_43 = -(tmpvar_42);
      };
      highp float x_44;
      x_44 = ((a_37 - _DITHERMATRIX[
        int(tmpvar_40)
      ][
        int(tmpvar_43)
      ]) - 0.01);
      if ((x_44 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_35 = tmpvar_36;
  spColor_35.w = (spColor_35.w * _SPOpaqueness);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * tmpvar_37.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (tmpvar_23, I_40)
   * tmpvar_23)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_44;
      tmpvar_44 = mix (spColor_35.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35.xyz = tmpvar_44;
    };
  };
  spColor_35.xyz = (spColor_35.xyz * _Color.xyz);
  highp vec4 tmpvar_45;
  tmpvar_45 = mix (outColor_4, spColor_35, vec4(xlat_mutable_SPIntensity));
  spColor_35 = tmpvar_45;
  outColor_4 = spColor_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_46;
    scrpos_46 = xlv_TEXCOORD3;
    mediump float a_47;
    a_47 = xlv_TEXCOORD3.z;
    if ((a_47 < 0.95)) {
      scrpos_46.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_47 = (a_47 * 17.0);
      highp float tmpvar_48;
      tmpvar_48 = (scrpos_46.y / 4.0);
      highp float tmpvar_49;
      tmpvar_49 = (fract(abs(tmpvar_48)) * 4.0);
      highp float tmpvar_50;
      if ((tmpvar_48 >= 0.0)) {
        tmpvar_50 = tmpvar_49;
      } else {
        tmpvar_50 = -(tmpvar_49);
      };
      highp float tmpvar_51;
      tmpvar_51 = (scrpos_46.x / 4.0);
      highp float tmpvar_52;
      tmpvar_52 = (fract(abs(tmpvar_51)) * 4.0);
      highp float tmpvar_53;
      if ((tmpvar_51 >= 0.0)) {
        tmpvar_53 = tmpvar_52;
      } else {
        tmpvar_53 = -(tmpvar_52);
      };
      highp float x_54;
      x_54 = ((a_47 - _DITHERMATRIX[
        int(tmpvar_50)
      ][
        int(tmpvar_53)
      ]) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_35.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_35 = tmpvar_36;
  spColor_35.w = (spColor_35.w * _SPOpaqueness);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * tmpvar_37.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (tmpvar_23, I_40)
   * tmpvar_23)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_44;
      tmpvar_44 = mix (spColor_35.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35.xyz = tmpvar_44;
    };
  };
  spColor_35.xyz = (spColor_35.xyz * _Color.xyz);
  highp vec4 tmpvar_45;
  tmpvar_45 = mix (outColor_4, spColor_35, vec4(xlat_mutable_SPIntensity));
  spColor_35 = tmpvar_45;
  outColor_4 = spColor_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_46;
    scrpos_46 = xlv_TEXCOORD3;
    mediump float a_47;
    a_47 = xlv_TEXCOORD3.z;
    if ((a_47 < 0.95)) {
      scrpos_46.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_47 = (a_47 * 17.0);
      highp float tmpvar_48;
      tmpvar_48 = (scrpos_46.y / 4.0);
      highp float tmpvar_49;
      tmpvar_49 = (fract(abs(tmpvar_48)) * 4.0);
      highp float tmpvar_50;
      if ((tmpvar_48 >= 0.0)) {
        tmpvar_50 = tmpvar_49;
      } else {
        tmpvar_50 = -(tmpvar_49);
      };
      highp float tmpvar_51;
      tmpvar_51 = (scrpos_46.x / 4.0);
      highp float tmpvar_52;
      tmpvar_52 = (fract(abs(tmpvar_51)) * 4.0);
      highp float tmpvar_53;
      if ((tmpvar_51 >= 0.0)) {
        tmpvar_53 = tmpvar_52;
      } else {
        tmpvar_53 = -(tmpvar_52);
      };
      highp float x_54;
      x_54 = ((a_47 - _DITHERMATRIX[
        int(tmpvar_50)
      ][
        int(tmpvar_53)
      ]) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_35.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_35 = tmpvar_36;
  spColor_35.w = (spColor_35.w * _SPOpaqueness);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * tmpvar_37.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (tmpvar_23, I_40)
   * tmpvar_23)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_44;
      tmpvar_44 = mix (spColor_35.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35.xyz = tmpvar_44;
    };
  };
  spColor_35.xyz = (spColor_35.xyz * _Color.xyz);
  highp vec4 tmpvar_45;
  tmpvar_45 = mix (outColor_4, spColor_35, vec4(xlat_mutable_SPIntensity));
  spColor_35 = tmpvar_45;
  outColor_4 = spColor_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_46;
    scrpos_46 = xlv_TEXCOORD3;
    mediump float a_47;
    a_47 = xlv_TEXCOORD3.z;
    if ((a_47 < 0.95)) {
      scrpos_46.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_47 = (a_47 * 17.0);
      highp float tmpvar_48;
      tmpvar_48 = (scrpos_46.y / 4.0);
      highp float tmpvar_49;
      tmpvar_49 = (fract(abs(tmpvar_48)) * 4.0);
      highp float tmpvar_50;
      if ((tmpvar_48 >= 0.0)) {
        tmpvar_50 = tmpvar_49;
      } else {
        tmpvar_50 = -(tmpvar_49);
      };
      highp float tmpvar_51;
      tmpvar_51 = (scrpos_46.x / 4.0);
      highp float tmpvar_52;
      tmpvar_52 = (fract(abs(tmpvar_51)) * 4.0);
      highp float tmpvar_53;
      if ((tmpvar_51 >= 0.0)) {
        tmpvar_53 = tmpvar_52;
      } else {
        tmpvar_53 = -(tmpvar_52);
      };
      highp float x_54;
      x_54 = ((a_47 - _DITHERMATRIX[
        int(tmpvar_50)
      ][
        int(tmpvar_53)
      ]) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_35.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_78 = tmpvar_79;
  spColor_78.w = (spColor_78.w * _SPOpaqueness);
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * tmpvar_80.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (tmpvar_66, I_83)
   * tmpvar_66)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_87;
      tmpvar_87 = mix (spColor_78.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78.xyz = tmpvar_87;
    };
  };
  spColor_78.xyz = (spColor_78.xyz * _Color.xyz);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (outColor_4, spColor_78, vec4(xlat_mutable_SPIntensity));
  spColor_78 = tmpvar_88;
  outColor_4 = spColor_78;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_89;
    scrpos_89 = xlv_TEXCOORD3;
    mediump float a_90;
    a_90 = xlv_TEXCOORD3.z;
    if ((a_90 < 0.95)) {
      scrpos_89.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_90 = (a_90 * 17.0);
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_89.y / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float tmpvar_94;
      tmpvar_94 = (scrpos_89.x / 4.0);
      highp float tmpvar_95;
      tmpvar_95 = (fract(abs(tmpvar_94)) * 4.0);
      highp float tmpvar_96;
      if ((tmpvar_94 >= 0.0)) {
        tmpvar_96 = tmpvar_95;
      } else {
        tmpvar_96 = -(tmpvar_95);
      };
      highp float x_97;
      x_97 = ((a_90 - _DITHERMATRIX[
        int(tmpvar_93)
      ][
        int(tmpvar_96)
      ]) - 0.01);
      if ((x_97 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_78.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_78 = tmpvar_79;
  spColor_78.w = (spColor_78.w * _SPOpaqueness);
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * tmpvar_80.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (tmpvar_66, I_83)
   * tmpvar_66)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_87;
      tmpvar_87 = mix (spColor_78.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78.xyz = tmpvar_87;
    };
  };
  spColor_78.xyz = (spColor_78.xyz * _Color.xyz);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (outColor_4, spColor_78, vec4(xlat_mutable_SPIntensity));
  spColor_78 = tmpvar_88;
  outColor_4 = spColor_78;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_89;
    scrpos_89 = xlv_TEXCOORD3;
    mediump float a_90;
    a_90 = xlv_TEXCOORD3.z;
    if ((a_90 < 0.95)) {
      scrpos_89.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_90 = (a_90 * 17.0);
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_89.y / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float tmpvar_94;
      tmpvar_94 = (scrpos_89.x / 4.0);
      highp float tmpvar_95;
      tmpvar_95 = (fract(abs(tmpvar_94)) * 4.0);
      highp float tmpvar_96;
      if ((tmpvar_94 >= 0.0)) {
        tmpvar_96 = tmpvar_95;
      } else {
        tmpvar_96 = -(tmpvar_95);
      };
      highp float x_97;
      x_97 = ((a_90 - _DITHERMATRIX[
        int(tmpvar_93)
      ][
        int(tmpvar_96)
      ]) - 0.01);
      if ((x_97 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_78.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_78 = tmpvar_79;
  spColor_78.w = (spColor_78.w * _SPOpaqueness);
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * tmpvar_80.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (tmpvar_66, I_83)
   * tmpvar_66)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_87;
      tmpvar_87 = mix (spColor_78.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78.xyz = tmpvar_87;
    };
  };
  spColor_78.xyz = (spColor_78.xyz * _Color.xyz);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (outColor_4, spColor_78, vec4(xlat_mutable_SPIntensity));
  spColor_78 = tmpvar_88;
  outColor_4 = spColor_78;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_89;
    scrpos_89 = xlv_TEXCOORD3;
    mediump float a_90;
    a_90 = xlv_TEXCOORD3.z;
    if ((a_90 < 0.95)) {
      scrpos_89.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_90 = (a_90 * 17.0);
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_89.y / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float tmpvar_94;
      tmpvar_94 = (scrpos_89.x / 4.0);
      highp float tmpvar_95;
      tmpvar_95 = (fract(abs(tmpvar_94)) * 4.0);
      highp float tmpvar_96;
      if ((tmpvar_94 >= 0.0)) {
        tmpvar_96 = tmpvar_95;
      } else {
        tmpvar_96 = -(tmpvar_95);
      };
      highp float x_97;
      x_97 = ((a_90 - _DITHERMATRIX[
        int(tmpvar_93)
      ][
        int(tmpvar_96)
      ]) - 0.01);
      if ((x_97 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_78.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if ((_RGBlendType == 1)) {
    highp vec3 N_36;
    N_36 = tmpvar_13;
    highp vec3 V_37;
    V_37 = V_2;
    mediump float rimLightDir_38;
    mediump vec3 lightDir_39;
    mediump float rim_40;
    mediump vec4 HRRimColor_41;
    mediump vec3 rgColor_42;
    mediump float tmpvar_43;
    highp float tmpvar_44;
    tmpvar_44 = pow (clamp ((1.001 - 
      dot (V_37, N_36)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_43 = (_RGBias + (tmpvar_44 * _RGScale));
    mediump vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_43 * _RGColor).xyz;
    rgColor_42 = tmpvar_45;
    HRRimColor_41 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_41 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_41 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_41 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_41 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_46;
    tmpvar_46 = (1.0 - max (0.0, dot (V_37, N_36)));
    rim_40 = tmpvar_46;
    highp vec3 tmpvar_47;
    tmpvar_47 = _WorldSpaceLightPos0.xyz;
    lightDir_39 = tmpvar_47;
    mediump vec3 tmpvar_48;
    tmpvar_48 = normalize(lightDir_39);
    highp float tmpvar_49;
    tmpvar_49 = dot (N_36, tmpvar_48);
    rimLightDir_38 = tmpvar_49;
    rim_40 = (rim_40 * (0.5 + rimLightDir_38));
    highp int tmpvar_50;
    if ((rim_40 > HRRimColor_41.w)) {
      tmpvar_50 = 1;
    } else {
      tmpvar_50 = 0;
    };
    rim_40 = float(tmpvar_50);
    mediump vec3 tmpvar_51;
    tmpvar_51 = (spColor_25.xyz + ((HRRimColor_41.xyz * rim_40) * _HRRimPower));
    mediump float tmpvar_52;
    tmpvar_52 = clamp (tmpvar_43, 0.0, 1.0);
    highp vec3 tmpvar_53;
    tmpvar_53 = mix (spColor_25.xyz, tmpvar_45, vec3((tmpvar_52 * _RGRatio)));
    rgColor_42 = tmpvar_53;
    highp vec3 tmpvar_54;
    tmpvar_54 = mix (rgColor_42, tmpvar_51, vec3(float(_HRRimIntensity)));
    rgColor_42 = tmpvar_54;
    outColor_5.xyz = rgColor_42;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_55;
      N_55 = tmpvar_13;
      highp vec3 V_56;
      V_56 = V_2;
      mediump float rimLightDir_57;
      mediump vec3 lightDir_58;
      mediump float rim_59;
      mediump vec4 HRRimColor_60;
      mediump vec3 rgColor_61;
      mediump float tmpvar_62;
      highp float tmpvar_63;
      tmpvar_63 = pow (clamp ((1.001 - 
        dot (V_56, N_55)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_62 = (_RGBias + (tmpvar_63 * _RGScale));
      mediump vec3 tmpvar_64;
      tmpvar_64 = (tmpvar_62 * _RGColor).xyz;
      rgColor_61 = tmpvar_64;
      HRRimColor_60 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_60 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_60 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_60 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_60 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - max (0.0, dot (V_56, N_55)));
      rim_59 = tmpvar_65;
      highp vec3 tmpvar_66;
      tmpvar_66 = _WorldSpaceLightPos0.xyz;
      lightDir_58 = tmpvar_66;
      mediump vec3 tmpvar_67;
      tmpvar_67 = normalize(lightDir_58);
      highp float tmpvar_68;
      tmpvar_68 = dot (N_55, tmpvar_67);
      rimLightDir_57 = tmpvar_68;
      rim_59 = (rim_59 * (0.5 + rimLightDir_57));
      highp int tmpvar_69;
      if ((rim_59 > HRRimColor_60.w)) {
        tmpvar_69 = 1;
      } else {
        tmpvar_69 = 0;
      };
      rim_59 = float(tmpvar_69);
      mediump vec3 tmpvar_70;
      tmpvar_70 = (outColor_5.xyz + max ((
        (HRRimColor_60.xyz * rim_59)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_61 = (outColor_5.xyz + max (tmpvar_64, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_71;
      tmpvar_71 = mix (rgColor_61, tmpvar_70, vec3(float(_HRRimIntensity)));
      rgColor_61 = tmpvar_71;
      outColor_5.xyz = rgColor_61;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_72;
    scrpos_72 = xlv_TEXCOORD3;
    mediump float a_73;
    a_73 = xlv_TEXCOORD3.z;
    if ((a_73 < 0.95)) {
      scrpos_72.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_73 = (a_73 * 17.0);
      highp float tmpvar_74;
      tmpvar_74 = (scrpos_72.y / 4.0);
      highp float tmpvar_75;
      tmpvar_75 = (fract(abs(tmpvar_74)) * 4.0);
      highp float tmpvar_76;
      if ((tmpvar_74 >= 0.0)) {
        tmpvar_76 = tmpvar_75;
      } else {
        tmpvar_76 = -(tmpvar_75);
      };
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_72.x / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float x_80;
      x_80 = ((a_73 - _DITHERMATRIX[
        int(tmpvar_76)
      ][
        int(tmpvar_79)
      ]) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if ((_RGBlendType == 1)) {
    highp vec3 N_36;
    N_36 = tmpvar_13;
    highp vec3 V_37;
    V_37 = V_2;
    mediump float rimLightDir_38;
    mediump vec3 lightDir_39;
    mediump float rim_40;
    mediump vec4 HRRimColor_41;
    mediump vec3 rgColor_42;
    mediump float tmpvar_43;
    highp float tmpvar_44;
    tmpvar_44 = pow (clamp ((1.001 - 
      dot (V_37, N_36)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_43 = (_RGBias + (tmpvar_44 * _RGScale));
    mediump vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_43 * _RGColor).xyz;
    rgColor_42 = tmpvar_45;
    HRRimColor_41 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_41 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_41 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_41 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_41 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_46;
    tmpvar_46 = (1.0 - max (0.0, dot (V_37, N_36)));
    rim_40 = tmpvar_46;
    highp vec3 tmpvar_47;
    tmpvar_47 = _WorldSpaceLightPos0.xyz;
    lightDir_39 = tmpvar_47;
    mediump vec3 tmpvar_48;
    tmpvar_48 = normalize(lightDir_39);
    highp float tmpvar_49;
    tmpvar_49 = dot (N_36, tmpvar_48);
    rimLightDir_38 = tmpvar_49;
    rim_40 = (rim_40 * (0.5 + rimLightDir_38));
    highp int tmpvar_50;
    if ((rim_40 > HRRimColor_41.w)) {
      tmpvar_50 = 1;
    } else {
      tmpvar_50 = 0;
    };
    rim_40 = float(tmpvar_50);
    mediump vec3 tmpvar_51;
    tmpvar_51 = (spColor_25.xyz + ((HRRimColor_41.xyz * rim_40) * _HRRimPower));
    mediump float tmpvar_52;
    tmpvar_52 = clamp (tmpvar_43, 0.0, 1.0);
    highp vec3 tmpvar_53;
    tmpvar_53 = mix (spColor_25.xyz, tmpvar_45, vec3((tmpvar_52 * _RGRatio)));
    rgColor_42 = tmpvar_53;
    highp vec3 tmpvar_54;
    tmpvar_54 = mix (rgColor_42, tmpvar_51, vec3(float(_HRRimIntensity)));
    rgColor_42 = tmpvar_54;
    outColor_5.xyz = rgColor_42;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_55;
      N_55 = tmpvar_13;
      highp vec3 V_56;
      V_56 = V_2;
      mediump float rimLightDir_57;
      mediump vec3 lightDir_58;
      mediump float rim_59;
      mediump vec4 HRRimColor_60;
      mediump vec3 rgColor_61;
      mediump float tmpvar_62;
      highp float tmpvar_63;
      tmpvar_63 = pow (clamp ((1.001 - 
        dot (V_56, N_55)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_62 = (_RGBias + (tmpvar_63 * _RGScale));
      mediump vec3 tmpvar_64;
      tmpvar_64 = (tmpvar_62 * _RGColor).xyz;
      rgColor_61 = tmpvar_64;
      HRRimColor_60 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_60 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_60 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_60 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_60 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - max (0.0, dot (V_56, N_55)));
      rim_59 = tmpvar_65;
      highp vec3 tmpvar_66;
      tmpvar_66 = _WorldSpaceLightPos0.xyz;
      lightDir_58 = tmpvar_66;
      mediump vec3 tmpvar_67;
      tmpvar_67 = normalize(lightDir_58);
      highp float tmpvar_68;
      tmpvar_68 = dot (N_55, tmpvar_67);
      rimLightDir_57 = tmpvar_68;
      rim_59 = (rim_59 * (0.5 + rimLightDir_57));
      highp int tmpvar_69;
      if ((rim_59 > HRRimColor_60.w)) {
        tmpvar_69 = 1;
      } else {
        tmpvar_69 = 0;
      };
      rim_59 = float(tmpvar_69);
      mediump vec3 tmpvar_70;
      tmpvar_70 = (outColor_5.xyz + max ((
        (HRRimColor_60.xyz * rim_59)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_61 = (outColor_5.xyz + max (tmpvar_64, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_71;
      tmpvar_71 = mix (rgColor_61, tmpvar_70, vec3(float(_HRRimIntensity)));
      rgColor_61 = tmpvar_71;
      outColor_5.xyz = rgColor_61;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_72;
    scrpos_72 = xlv_TEXCOORD3;
    mediump float a_73;
    a_73 = xlv_TEXCOORD3.z;
    if ((a_73 < 0.95)) {
      scrpos_72.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_73 = (a_73 * 17.0);
      highp float tmpvar_74;
      tmpvar_74 = (scrpos_72.y / 4.0);
      highp float tmpvar_75;
      tmpvar_75 = (fract(abs(tmpvar_74)) * 4.0);
      highp float tmpvar_76;
      if ((tmpvar_74 >= 0.0)) {
        tmpvar_76 = tmpvar_75;
      } else {
        tmpvar_76 = -(tmpvar_75);
      };
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_72.x / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float x_80;
      x_80 = ((a_73 - _DITHERMATRIX[
        int(tmpvar_76)
      ][
        int(tmpvar_79)
      ]) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if ((_RGBlendType == 1)) {
    highp vec3 N_36;
    N_36 = tmpvar_13;
    highp vec3 V_37;
    V_37 = V_2;
    mediump float rimLightDir_38;
    mediump vec3 lightDir_39;
    mediump float rim_40;
    mediump vec4 HRRimColor_41;
    mediump vec3 rgColor_42;
    mediump float tmpvar_43;
    highp float tmpvar_44;
    tmpvar_44 = pow (clamp ((1.001 - 
      dot (V_37, N_36)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_43 = (_RGBias + (tmpvar_44 * _RGScale));
    mediump vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_43 * _RGColor).xyz;
    rgColor_42 = tmpvar_45;
    HRRimColor_41 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_41 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_41 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_41 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_41 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_46;
    tmpvar_46 = (1.0 - max (0.0, dot (V_37, N_36)));
    rim_40 = tmpvar_46;
    highp vec3 tmpvar_47;
    tmpvar_47 = _WorldSpaceLightPos0.xyz;
    lightDir_39 = tmpvar_47;
    mediump vec3 tmpvar_48;
    tmpvar_48 = normalize(lightDir_39);
    highp float tmpvar_49;
    tmpvar_49 = dot (N_36, tmpvar_48);
    rimLightDir_38 = tmpvar_49;
    rim_40 = (rim_40 * (0.5 + rimLightDir_38));
    highp int tmpvar_50;
    if ((rim_40 > HRRimColor_41.w)) {
      tmpvar_50 = 1;
    } else {
      tmpvar_50 = 0;
    };
    rim_40 = float(tmpvar_50);
    mediump vec3 tmpvar_51;
    tmpvar_51 = (spColor_25.xyz + ((HRRimColor_41.xyz * rim_40) * _HRRimPower));
    mediump float tmpvar_52;
    tmpvar_52 = clamp (tmpvar_43, 0.0, 1.0);
    highp vec3 tmpvar_53;
    tmpvar_53 = mix (spColor_25.xyz, tmpvar_45, vec3((tmpvar_52 * _RGRatio)));
    rgColor_42 = tmpvar_53;
    highp vec3 tmpvar_54;
    tmpvar_54 = mix (rgColor_42, tmpvar_51, vec3(float(_HRRimIntensity)));
    rgColor_42 = tmpvar_54;
    outColor_5.xyz = rgColor_42;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_55;
      N_55 = tmpvar_13;
      highp vec3 V_56;
      V_56 = V_2;
      mediump float rimLightDir_57;
      mediump vec3 lightDir_58;
      mediump float rim_59;
      mediump vec4 HRRimColor_60;
      mediump vec3 rgColor_61;
      mediump float tmpvar_62;
      highp float tmpvar_63;
      tmpvar_63 = pow (clamp ((1.001 - 
        dot (V_56, N_55)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_62 = (_RGBias + (tmpvar_63 * _RGScale));
      mediump vec3 tmpvar_64;
      tmpvar_64 = (tmpvar_62 * _RGColor).xyz;
      rgColor_61 = tmpvar_64;
      HRRimColor_60 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_60 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_60 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_60 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_60 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - max (0.0, dot (V_56, N_55)));
      rim_59 = tmpvar_65;
      highp vec3 tmpvar_66;
      tmpvar_66 = _WorldSpaceLightPos0.xyz;
      lightDir_58 = tmpvar_66;
      mediump vec3 tmpvar_67;
      tmpvar_67 = normalize(lightDir_58);
      highp float tmpvar_68;
      tmpvar_68 = dot (N_55, tmpvar_67);
      rimLightDir_57 = tmpvar_68;
      rim_59 = (rim_59 * (0.5 + rimLightDir_57));
      highp int tmpvar_69;
      if ((rim_59 > HRRimColor_60.w)) {
        tmpvar_69 = 1;
      } else {
        tmpvar_69 = 0;
      };
      rim_59 = float(tmpvar_69);
      mediump vec3 tmpvar_70;
      tmpvar_70 = (outColor_5.xyz + max ((
        (HRRimColor_60.xyz * rim_59)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_61 = (outColor_5.xyz + max (tmpvar_64, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_71;
      tmpvar_71 = mix (rgColor_61, tmpvar_70, vec3(float(_HRRimIntensity)));
      rgColor_61 = tmpvar_71;
      outColor_5.xyz = rgColor_61;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_72;
    scrpos_72 = xlv_TEXCOORD3;
    mediump float a_73;
    a_73 = xlv_TEXCOORD3.z;
    if ((a_73 < 0.95)) {
      scrpos_72.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_73 = (a_73 * 17.0);
      highp float tmpvar_74;
      tmpvar_74 = (scrpos_72.y / 4.0);
      highp float tmpvar_75;
      tmpvar_75 = (fract(abs(tmpvar_74)) * 4.0);
      highp float tmpvar_76;
      if ((tmpvar_74 >= 0.0)) {
        tmpvar_76 = tmpvar_75;
      } else {
        tmpvar_76 = -(tmpvar_75);
      };
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_72.x / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float x_80;
      x_80 = ((a_73 - _DITHERMATRIX[
        int(tmpvar_76)
      ][
        int(tmpvar_79)
      ]) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if ((_RGBlendType == 1)) {
    highp vec3 N_36;
    N_36 = tmpvar_13;
    highp vec3 V_37;
    V_37 = V_2;
    mediump float rimLightDir_38;
    mediump vec3 lightDir_39;
    mediump float rim_40;
    mediump vec4 HRRimColor_41;
    mediump vec3 rgColor_42;
    mediump float tmpvar_43;
    highp float tmpvar_44;
    tmpvar_44 = pow (clamp ((1.001 - 
      dot (V_37, N_36)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_43 = (_RGBias + (tmpvar_44 * _RGScale));
    mediump vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_43 * _RGColor).xyz;
    rgColor_42 = tmpvar_45;
    HRRimColor_41 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_41 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_41 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_41 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_41 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_46;
    tmpvar_46 = (1.0 - max (0.0, dot (V_37, N_36)));
    rim_40 = tmpvar_46;
    highp vec3 tmpvar_47;
    tmpvar_47 = _WorldSpaceLightPos0.xyz;
    lightDir_39 = tmpvar_47;
    mediump vec3 tmpvar_48;
    tmpvar_48 = normalize(lightDir_39);
    highp float tmpvar_49;
    tmpvar_49 = dot (N_36, tmpvar_48);
    rimLightDir_38 = tmpvar_49;
    rim_40 = (rim_40 * (0.5 + rimLightDir_38));
    highp int tmpvar_50;
    if ((rim_40 > HRRimColor_41.w)) {
      tmpvar_50 = 1;
    } else {
      tmpvar_50 = 0;
    };
    rim_40 = float(tmpvar_50);
    mediump vec3 tmpvar_51;
    tmpvar_51 = (spColor_25.xyz + ((HRRimColor_41.xyz * rim_40) * _HRRimPower));
    mediump float tmpvar_52;
    tmpvar_52 = clamp (tmpvar_43, 0.0, 1.0);
    highp vec3 tmpvar_53;
    tmpvar_53 = mix (spColor_25.xyz, tmpvar_45, vec3((tmpvar_52 * _RGRatio)));
    rgColor_42 = tmpvar_53;
    highp vec3 tmpvar_54;
    tmpvar_54 = mix (rgColor_42, tmpvar_51, vec3(float(_HRRimIntensity)));
    rgColor_42 = tmpvar_54;
    outColor_5.xyz = rgColor_42;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_55;
      N_55 = tmpvar_13;
      highp vec3 V_56;
      V_56 = V_2;
      mediump float rimLightDir_57;
      mediump vec3 lightDir_58;
      mediump float rim_59;
      mediump vec4 HRRimColor_60;
      mediump vec3 rgColor_61;
      mediump float tmpvar_62;
      highp float tmpvar_63;
      tmpvar_63 = pow (clamp ((1.001 - 
        dot (V_56, N_55)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_62 = (_RGBias + (tmpvar_63 * _RGScale));
      mediump vec3 tmpvar_64;
      tmpvar_64 = (tmpvar_62 * _RGColor).xyz;
      rgColor_61 = tmpvar_64;
      HRRimColor_60 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_60 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_60 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_60 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_60 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - max (0.0, dot (V_56, N_55)));
      rim_59 = tmpvar_65;
      highp vec3 tmpvar_66;
      tmpvar_66 = _WorldSpaceLightPos0.xyz;
      lightDir_58 = tmpvar_66;
      mediump vec3 tmpvar_67;
      tmpvar_67 = normalize(lightDir_58);
      highp float tmpvar_68;
      tmpvar_68 = dot (N_55, tmpvar_67);
      rimLightDir_57 = tmpvar_68;
      rim_59 = (rim_59 * (0.5 + rimLightDir_57));
      highp int tmpvar_69;
      if ((rim_59 > HRRimColor_60.w)) {
        tmpvar_69 = 1;
      } else {
        tmpvar_69 = 0;
      };
      rim_59 = float(tmpvar_69);
      mediump vec3 tmpvar_70;
      tmpvar_70 = (outColor_5.xyz + max ((
        (HRRimColor_60.xyz * rim_59)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_61 = (outColor_5.xyz + max (tmpvar_64, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_71;
      tmpvar_71 = mix (rgColor_61, tmpvar_70, vec3(float(_HRRimIntensity)));
      rgColor_61 = tmpvar_71;
      outColor_5.xyz = rgColor_61;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_72;
    scrpos_72 = xlv_TEXCOORD3;
    mediump float a_73;
    a_73 = xlv_TEXCOORD3.z;
    if ((a_73 < 0.95)) {
      scrpos_72.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_73 = (a_73 * 17.0);
      highp float tmpvar_74;
      tmpvar_74 = (scrpos_72.y / 4.0);
      highp float tmpvar_75;
      tmpvar_75 = (fract(abs(tmpvar_74)) * 4.0);
      highp float tmpvar_76;
      if ((tmpvar_74 >= 0.0)) {
        tmpvar_76 = tmpvar_75;
      } else {
        tmpvar_76 = -(tmpvar_75);
      };
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_72.x / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float x_80;
      x_80 = ((a_73 - _DITHERMATRIX[
        int(tmpvar_76)
      ][
        int(tmpvar_79)
      ]) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if ((_RGBlendType == 1)) {
    highp vec3 N_36;
    N_36 = tmpvar_13;
    highp vec3 V_37;
    V_37 = V_2;
    mediump float rimLightDir_38;
    mediump vec3 lightDir_39;
    mediump float rim_40;
    mediump vec4 HRRimColor_41;
    mediump vec3 rgColor_42;
    mediump float tmpvar_43;
    highp float tmpvar_44;
    tmpvar_44 = pow (clamp ((1.001 - 
      dot (V_37, N_36)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_43 = (_RGBias + (tmpvar_44 * _RGScale));
    mediump vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_43 * _RGColor).xyz;
    rgColor_42 = tmpvar_45;
    HRRimColor_41 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_41 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_41 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_41 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_41 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_46;
    tmpvar_46 = (1.0 - max (0.0, dot (V_37, N_36)));
    rim_40 = tmpvar_46;
    highp vec3 tmpvar_47;
    tmpvar_47 = _WorldSpaceLightPos0.xyz;
    lightDir_39 = tmpvar_47;
    mediump vec3 tmpvar_48;
    tmpvar_48 = normalize(lightDir_39);
    highp float tmpvar_49;
    tmpvar_49 = dot (N_36, tmpvar_48);
    rimLightDir_38 = tmpvar_49;
    rim_40 = (rim_40 * (0.5 + rimLightDir_38));
    highp int tmpvar_50;
    if ((rim_40 > HRRimColor_41.w)) {
      tmpvar_50 = 1;
    } else {
      tmpvar_50 = 0;
    };
    rim_40 = float(tmpvar_50);
    mediump vec3 tmpvar_51;
    tmpvar_51 = (spColor_25.xyz + ((HRRimColor_41.xyz * rim_40) * _HRRimPower));
    mediump float tmpvar_52;
    tmpvar_52 = clamp (tmpvar_43, 0.0, 1.0);
    highp vec3 tmpvar_53;
    tmpvar_53 = mix (spColor_25.xyz, tmpvar_45, vec3((tmpvar_52 * _RGRatio)));
    rgColor_42 = tmpvar_53;
    highp vec3 tmpvar_54;
    tmpvar_54 = mix (rgColor_42, tmpvar_51, vec3(float(_HRRimIntensity)));
    rgColor_42 = tmpvar_54;
    outColor_5.xyz = rgColor_42;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_55;
      N_55 = tmpvar_13;
      highp vec3 V_56;
      V_56 = V_2;
      mediump float rimLightDir_57;
      mediump vec3 lightDir_58;
      mediump float rim_59;
      mediump vec4 HRRimColor_60;
      mediump vec3 rgColor_61;
      mediump float tmpvar_62;
      highp float tmpvar_63;
      tmpvar_63 = pow (clamp ((1.001 - 
        dot (V_56, N_55)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_62 = (_RGBias + (tmpvar_63 * _RGScale));
      mediump vec3 tmpvar_64;
      tmpvar_64 = (tmpvar_62 * _RGColor).xyz;
      rgColor_61 = tmpvar_64;
      HRRimColor_60 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_60 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_60 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_60 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_60 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - max (0.0, dot (V_56, N_55)));
      rim_59 = tmpvar_65;
      highp vec3 tmpvar_66;
      tmpvar_66 = _WorldSpaceLightPos0.xyz;
      lightDir_58 = tmpvar_66;
      mediump vec3 tmpvar_67;
      tmpvar_67 = normalize(lightDir_58);
      highp float tmpvar_68;
      tmpvar_68 = dot (N_55, tmpvar_67);
      rimLightDir_57 = tmpvar_68;
      rim_59 = (rim_59 * (0.5 + rimLightDir_57));
      highp int tmpvar_69;
      if ((rim_59 > HRRimColor_60.w)) {
        tmpvar_69 = 1;
      } else {
        tmpvar_69 = 0;
      };
      rim_59 = float(tmpvar_69);
      mediump vec3 tmpvar_70;
      tmpvar_70 = (outColor_5.xyz + max ((
        (HRRimColor_60.xyz * rim_59)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_61 = (outColor_5.xyz + max (tmpvar_64, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_71;
      tmpvar_71 = mix (rgColor_61, tmpvar_70, vec3(float(_HRRimIntensity)));
      rgColor_61 = tmpvar_71;
      outColor_5.xyz = rgColor_61;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_72;
    scrpos_72 = xlv_TEXCOORD3;
    mediump float a_73;
    a_73 = xlv_TEXCOORD3.z;
    if ((a_73 < 0.95)) {
      scrpos_72.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_73 = (a_73 * 17.0);
      highp float tmpvar_74;
      tmpvar_74 = (scrpos_72.y / 4.0);
      highp float tmpvar_75;
      tmpvar_75 = (fract(abs(tmpvar_74)) * 4.0);
      highp float tmpvar_76;
      if ((tmpvar_74 >= 0.0)) {
        tmpvar_76 = tmpvar_75;
      } else {
        tmpvar_76 = -(tmpvar_75);
      };
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_72.x / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float x_80;
      x_80 = ((a_73 - _DITHERMATRIX[
        int(tmpvar_76)
      ][
        int(tmpvar_79)
      ]) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if ((_RGBlendType == 1)) {
    highp vec3 N_36;
    N_36 = tmpvar_13;
    highp vec3 V_37;
    V_37 = V_2;
    mediump float rimLightDir_38;
    mediump vec3 lightDir_39;
    mediump float rim_40;
    mediump vec4 HRRimColor_41;
    mediump vec3 rgColor_42;
    mediump float tmpvar_43;
    highp float tmpvar_44;
    tmpvar_44 = pow (clamp ((1.001 - 
      dot (V_37, N_36)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_43 = (_RGBias + (tmpvar_44 * _RGScale));
    mediump vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_43 * _RGColor).xyz;
    rgColor_42 = tmpvar_45;
    HRRimColor_41 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_41 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_41 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_41 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_41 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_46;
    tmpvar_46 = (1.0 - max (0.0, dot (V_37, N_36)));
    rim_40 = tmpvar_46;
    highp vec3 tmpvar_47;
    tmpvar_47 = _WorldSpaceLightPos0.xyz;
    lightDir_39 = tmpvar_47;
    mediump vec3 tmpvar_48;
    tmpvar_48 = normalize(lightDir_39);
    highp float tmpvar_49;
    tmpvar_49 = dot (N_36, tmpvar_48);
    rimLightDir_38 = tmpvar_49;
    rim_40 = (rim_40 * (0.5 + rimLightDir_38));
    highp int tmpvar_50;
    if ((rim_40 > HRRimColor_41.w)) {
      tmpvar_50 = 1;
    } else {
      tmpvar_50 = 0;
    };
    rim_40 = float(tmpvar_50);
    mediump vec3 tmpvar_51;
    tmpvar_51 = (spColor_25.xyz + ((HRRimColor_41.xyz * rim_40) * _HRRimPower));
    mediump float tmpvar_52;
    tmpvar_52 = clamp (tmpvar_43, 0.0, 1.0);
    highp vec3 tmpvar_53;
    tmpvar_53 = mix (spColor_25.xyz, tmpvar_45, vec3((tmpvar_52 * _RGRatio)));
    rgColor_42 = tmpvar_53;
    highp vec3 tmpvar_54;
    tmpvar_54 = mix (rgColor_42, tmpvar_51, vec3(float(_HRRimIntensity)));
    rgColor_42 = tmpvar_54;
    outColor_5.xyz = rgColor_42;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_55;
      N_55 = tmpvar_13;
      highp vec3 V_56;
      V_56 = V_2;
      mediump float rimLightDir_57;
      mediump vec3 lightDir_58;
      mediump float rim_59;
      mediump vec4 HRRimColor_60;
      mediump vec3 rgColor_61;
      mediump float tmpvar_62;
      highp float tmpvar_63;
      tmpvar_63 = pow (clamp ((1.001 - 
        dot (V_56, N_55)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_62 = (_RGBias + (tmpvar_63 * _RGScale));
      mediump vec3 tmpvar_64;
      tmpvar_64 = (tmpvar_62 * _RGColor).xyz;
      rgColor_61 = tmpvar_64;
      HRRimColor_60 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_60 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_60 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_60 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_60 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - max (0.0, dot (V_56, N_55)));
      rim_59 = tmpvar_65;
      highp vec3 tmpvar_66;
      tmpvar_66 = _WorldSpaceLightPos0.xyz;
      lightDir_58 = tmpvar_66;
      mediump vec3 tmpvar_67;
      tmpvar_67 = normalize(lightDir_58);
      highp float tmpvar_68;
      tmpvar_68 = dot (N_55, tmpvar_67);
      rimLightDir_57 = tmpvar_68;
      rim_59 = (rim_59 * (0.5 + rimLightDir_57));
      highp int tmpvar_69;
      if ((rim_59 > HRRimColor_60.w)) {
        tmpvar_69 = 1;
      } else {
        tmpvar_69 = 0;
      };
      rim_59 = float(tmpvar_69);
      mediump vec3 tmpvar_70;
      tmpvar_70 = (outColor_5.xyz + max ((
        (HRRimColor_60.xyz * rim_59)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_61 = (outColor_5.xyz + max (tmpvar_64, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_71;
      tmpvar_71 = mix (rgColor_61, tmpvar_70, vec3(float(_HRRimIntensity)));
      rgColor_61 = tmpvar_71;
      outColor_5.xyz = rgColor_61;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_72;
    scrpos_72 = xlv_TEXCOORD3;
    mediump float a_73;
    a_73 = xlv_TEXCOORD3.z;
    if ((a_73 < 0.95)) {
      scrpos_72.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_73 = (a_73 * 17.0);
      highp float tmpvar_74;
      tmpvar_74 = (scrpos_72.y / 4.0);
      highp float tmpvar_75;
      tmpvar_75 = (fract(abs(tmpvar_74)) * 4.0);
      highp float tmpvar_76;
      if ((tmpvar_74 >= 0.0)) {
        tmpvar_76 = tmpvar_75;
      } else {
        tmpvar_76 = -(tmpvar_75);
      };
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_72.x / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float x_80;
      x_80 = ((a_73 - _DITHERMATRIX[
        int(tmpvar_76)
      ][
        int(tmpvar_79)
      ]) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_35 = tmpvar_36;
  spColor_35.w = (spColor_35.w * _SPOpaqueness);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * tmpvar_37.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (tmpvar_23, I_40)
   * tmpvar_23)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_44;
      tmpvar_44 = mix (spColor_35.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35.xyz = tmpvar_44;
    };
  };
  spColor_35.xyz = (spColor_35.xyz * _Color.xyz);
  highp vec4 tmpvar_45;
  tmpvar_45 = mix (outColor_4, spColor_35, vec4(xlat_mutable_SPIntensity));
  spColor_35 = tmpvar_45;
  outColor_4 = spColor_35;
  if ((_RGBlendType == 1)) {
    highp vec3 N_46;
    N_46 = tmpvar_23;
    highp vec3 V_47;
    V_47 = V_2;
    mediump float rimLightDir_48;
    mediump vec3 lightDir_49;
    mediump float rim_50;
    mediump vec4 HRRimColor_51;
    mediump vec3 rgColor_52;
    mediump float tmpvar_53;
    highp float tmpvar_54;
    tmpvar_54 = pow (clamp ((1.001 - 
      dot (V_47, N_46)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_53 = (_RGBias + (tmpvar_54 * _RGScale));
    mediump vec3 tmpvar_55;
    tmpvar_55 = (tmpvar_53 * _RGColor).xyz;
    rgColor_52 = tmpvar_55;
    HRRimColor_51 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_51 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_51 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_51 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_51 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_56;
    tmpvar_56 = (1.0 - max (0.0, dot (V_47, N_46)));
    rim_50 = tmpvar_56;
    highp vec3 tmpvar_57;
    tmpvar_57 = _WorldSpaceLightPos0.xyz;
    lightDir_49 = tmpvar_57;
    mediump vec3 tmpvar_58;
    tmpvar_58 = normalize(lightDir_49);
    highp float tmpvar_59;
    tmpvar_59 = dot (N_46, tmpvar_58);
    rimLightDir_48 = tmpvar_59;
    rim_50 = (rim_50 * (0.5 + rimLightDir_48));
    highp int tmpvar_60;
    if ((rim_50 > HRRimColor_51.w)) {
      tmpvar_60 = 1;
    } else {
      tmpvar_60 = 0;
    };
    rim_50 = float(tmpvar_60);
    mediump vec3 tmpvar_61;
    tmpvar_61 = (spColor_35.xyz + ((HRRimColor_51.xyz * rim_50) * _HRRimPower));
    mediump float tmpvar_62;
    tmpvar_62 = clamp (tmpvar_53, 0.0, 1.0);
    highp vec3 tmpvar_63;
    tmpvar_63 = mix (spColor_35.xyz, tmpvar_55, vec3((tmpvar_62 * _RGRatio)));
    rgColor_52 = tmpvar_63;
    highp vec3 tmpvar_64;
    tmpvar_64 = mix (rgColor_52, tmpvar_61, vec3(float(_HRRimIntensity)));
    rgColor_52 = tmpvar_64;
    outColor_4.xyz = rgColor_52;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_65;
      N_65 = tmpvar_23;
      highp vec3 V_66;
      V_66 = V_2;
      mediump float rimLightDir_67;
      mediump vec3 lightDir_68;
      mediump float rim_69;
      mediump vec4 HRRimColor_70;
      mediump vec3 rgColor_71;
      mediump float tmpvar_72;
      highp float tmpvar_73;
      tmpvar_73 = pow (clamp ((1.001 - 
        dot (V_66, N_65)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_72 = (_RGBias + (tmpvar_73 * _RGScale));
      mediump vec3 tmpvar_74;
      tmpvar_74 = (tmpvar_72 * _RGColor).xyz;
      rgColor_71 = tmpvar_74;
      HRRimColor_70 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_70 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_70 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_70 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_70 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_75;
      tmpvar_75 = (1.0 - max (0.0, dot (V_66, N_65)));
      rim_69 = tmpvar_75;
      highp vec3 tmpvar_76;
      tmpvar_76 = _WorldSpaceLightPos0.xyz;
      lightDir_68 = tmpvar_76;
      mediump vec3 tmpvar_77;
      tmpvar_77 = normalize(lightDir_68);
      highp float tmpvar_78;
      tmpvar_78 = dot (N_65, tmpvar_77);
      rimLightDir_67 = tmpvar_78;
      rim_69 = (rim_69 * (0.5 + rimLightDir_67));
      highp int tmpvar_79;
      if ((rim_69 > HRRimColor_70.w)) {
        tmpvar_79 = 1;
      } else {
        tmpvar_79 = 0;
      };
      rim_69 = float(tmpvar_79);
      mediump vec3 tmpvar_80;
      tmpvar_80 = (outColor_4.xyz + max ((
        (HRRimColor_70.xyz * rim_69)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_71 = (outColor_4.xyz + max (tmpvar_74, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_81;
      tmpvar_81 = mix (rgColor_71, tmpvar_80, vec3(float(_HRRimIntensity)));
      rgColor_71 = tmpvar_81;
      outColor_4.xyz = rgColor_71;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_82;
    scrpos_82 = xlv_TEXCOORD3;
    mediump float a_83;
    a_83 = xlv_TEXCOORD3.z;
    if ((a_83 < 0.95)) {
      scrpos_82.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_83 = (a_83 * 17.0);
      highp float tmpvar_84;
      tmpvar_84 = (scrpos_82.y / 4.0);
      highp float tmpvar_85;
      tmpvar_85 = (fract(abs(tmpvar_84)) * 4.0);
      highp float tmpvar_86;
      if ((tmpvar_84 >= 0.0)) {
        tmpvar_86 = tmpvar_85;
      } else {
        tmpvar_86 = -(tmpvar_85);
      };
      highp float tmpvar_87;
      tmpvar_87 = (scrpos_82.x / 4.0);
      highp float tmpvar_88;
      tmpvar_88 = (fract(abs(tmpvar_87)) * 4.0);
      highp float tmpvar_89;
      if ((tmpvar_87 >= 0.0)) {
        tmpvar_89 = tmpvar_88;
      } else {
        tmpvar_89 = -(tmpvar_88);
      };
      highp float x_90;
      x_90 = ((a_83 - _DITHERMATRIX[
        int(tmpvar_86)
      ][
        int(tmpvar_89)
      ]) - 0.01);
      if ((x_90 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_35.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_35 = tmpvar_36;
  spColor_35.w = (spColor_35.w * _SPOpaqueness);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * tmpvar_37.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (tmpvar_23, I_40)
   * tmpvar_23)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_44;
      tmpvar_44 = mix (spColor_35.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35.xyz = tmpvar_44;
    };
  };
  spColor_35.xyz = (spColor_35.xyz * _Color.xyz);
  highp vec4 tmpvar_45;
  tmpvar_45 = mix (outColor_4, spColor_35, vec4(xlat_mutable_SPIntensity));
  spColor_35 = tmpvar_45;
  outColor_4 = spColor_35;
  if ((_RGBlendType == 1)) {
    highp vec3 N_46;
    N_46 = tmpvar_23;
    highp vec3 V_47;
    V_47 = V_2;
    mediump float rimLightDir_48;
    mediump vec3 lightDir_49;
    mediump float rim_50;
    mediump vec4 HRRimColor_51;
    mediump vec3 rgColor_52;
    mediump float tmpvar_53;
    highp float tmpvar_54;
    tmpvar_54 = pow (clamp ((1.001 - 
      dot (V_47, N_46)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_53 = (_RGBias + (tmpvar_54 * _RGScale));
    mediump vec3 tmpvar_55;
    tmpvar_55 = (tmpvar_53 * _RGColor).xyz;
    rgColor_52 = tmpvar_55;
    HRRimColor_51 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_51 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_51 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_51 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_51 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_56;
    tmpvar_56 = (1.0 - max (0.0, dot (V_47, N_46)));
    rim_50 = tmpvar_56;
    highp vec3 tmpvar_57;
    tmpvar_57 = _WorldSpaceLightPos0.xyz;
    lightDir_49 = tmpvar_57;
    mediump vec3 tmpvar_58;
    tmpvar_58 = normalize(lightDir_49);
    highp float tmpvar_59;
    tmpvar_59 = dot (N_46, tmpvar_58);
    rimLightDir_48 = tmpvar_59;
    rim_50 = (rim_50 * (0.5 + rimLightDir_48));
    highp int tmpvar_60;
    if ((rim_50 > HRRimColor_51.w)) {
      tmpvar_60 = 1;
    } else {
      tmpvar_60 = 0;
    };
    rim_50 = float(tmpvar_60);
    mediump vec3 tmpvar_61;
    tmpvar_61 = (spColor_35.xyz + ((HRRimColor_51.xyz * rim_50) * _HRRimPower));
    mediump float tmpvar_62;
    tmpvar_62 = clamp (tmpvar_53, 0.0, 1.0);
    highp vec3 tmpvar_63;
    tmpvar_63 = mix (spColor_35.xyz, tmpvar_55, vec3((tmpvar_62 * _RGRatio)));
    rgColor_52 = tmpvar_63;
    highp vec3 tmpvar_64;
    tmpvar_64 = mix (rgColor_52, tmpvar_61, vec3(float(_HRRimIntensity)));
    rgColor_52 = tmpvar_64;
    outColor_4.xyz = rgColor_52;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_65;
      N_65 = tmpvar_23;
      highp vec3 V_66;
      V_66 = V_2;
      mediump float rimLightDir_67;
      mediump vec3 lightDir_68;
      mediump float rim_69;
      mediump vec4 HRRimColor_70;
      mediump vec3 rgColor_71;
      mediump float tmpvar_72;
      highp float tmpvar_73;
      tmpvar_73 = pow (clamp ((1.001 - 
        dot (V_66, N_65)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_72 = (_RGBias + (tmpvar_73 * _RGScale));
      mediump vec3 tmpvar_74;
      tmpvar_74 = (tmpvar_72 * _RGColor).xyz;
      rgColor_71 = tmpvar_74;
      HRRimColor_70 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_70 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_70 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_70 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_70 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_75;
      tmpvar_75 = (1.0 - max (0.0, dot (V_66, N_65)));
      rim_69 = tmpvar_75;
      highp vec3 tmpvar_76;
      tmpvar_76 = _WorldSpaceLightPos0.xyz;
      lightDir_68 = tmpvar_76;
      mediump vec3 tmpvar_77;
      tmpvar_77 = normalize(lightDir_68);
      highp float tmpvar_78;
      tmpvar_78 = dot (N_65, tmpvar_77);
      rimLightDir_67 = tmpvar_78;
      rim_69 = (rim_69 * (0.5 + rimLightDir_67));
      highp int tmpvar_79;
      if ((rim_69 > HRRimColor_70.w)) {
        tmpvar_79 = 1;
      } else {
        tmpvar_79 = 0;
      };
      rim_69 = float(tmpvar_79);
      mediump vec3 tmpvar_80;
      tmpvar_80 = (outColor_4.xyz + max ((
        (HRRimColor_70.xyz * rim_69)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_71 = (outColor_4.xyz + max (tmpvar_74, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_81;
      tmpvar_81 = mix (rgColor_71, tmpvar_80, vec3(float(_HRRimIntensity)));
      rgColor_71 = tmpvar_81;
      outColor_4.xyz = rgColor_71;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_82;
    scrpos_82 = xlv_TEXCOORD3;
    mediump float a_83;
    a_83 = xlv_TEXCOORD3.z;
    if ((a_83 < 0.95)) {
      scrpos_82.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_83 = (a_83 * 17.0);
      highp float tmpvar_84;
      tmpvar_84 = (scrpos_82.y / 4.0);
      highp float tmpvar_85;
      tmpvar_85 = (fract(abs(tmpvar_84)) * 4.0);
      highp float tmpvar_86;
      if ((tmpvar_84 >= 0.0)) {
        tmpvar_86 = tmpvar_85;
      } else {
        tmpvar_86 = -(tmpvar_85);
      };
      highp float tmpvar_87;
      tmpvar_87 = (scrpos_82.x / 4.0);
      highp float tmpvar_88;
      tmpvar_88 = (fract(abs(tmpvar_87)) * 4.0);
      highp float tmpvar_89;
      if ((tmpvar_87 >= 0.0)) {
        tmpvar_89 = tmpvar_88;
      } else {
        tmpvar_89 = -(tmpvar_88);
      };
      highp float x_90;
      x_90 = ((a_83 - _DITHERMATRIX[
        int(tmpvar_86)
      ][
        int(tmpvar_89)
      ]) - 0.01);
      if ((x_90 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_35.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_35 = tmpvar_36;
  spColor_35.w = (spColor_35.w * _SPOpaqueness);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * tmpvar_37.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (tmpvar_23, I_40)
   * tmpvar_23)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_44;
      tmpvar_44 = mix (spColor_35.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35.xyz = tmpvar_44;
    };
  };
  spColor_35.xyz = (spColor_35.xyz * _Color.xyz);
  highp vec4 tmpvar_45;
  tmpvar_45 = mix (outColor_4, spColor_35, vec4(xlat_mutable_SPIntensity));
  spColor_35 = tmpvar_45;
  outColor_4 = spColor_35;
  if ((_RGBlendType == 1)) {
    highp vec3 N_46;
    N_46 = tmpvar_23;
    highp vec3 V_47;
    V_47 = V_2;
    mediump float rimLightDir_48;
    mediump vec3 lightDir_49;
    mediump float rim_50;
    mediump vec4 HRRimColor_51;
    mediump vec3 rgColor_52;
    mediump float tmpvar_53;
    highp float tmpvar_54;
    tmpvar_54 = pow (clamp ((1.001 - 
      dot (V_47, N_46)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_53 = (_RGBias + (tmpvar_54 * _RGScale));
    mediump vec3 tmpvar_55;
    tmpvar_55 = (tmpvar_53 * _RGColor).xyz;
    rgColor_52 = tmpvar_55;
    HRRimColor_51 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_51 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_51 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_51 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_51 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_56;
    tmpvar_56 = (1.0 - max (0.0, dot (V_47, N_46)));
    rim_50 = tmpvar_56;
    highp vec3 tmpvar_57;
    tmpvar_57 = _WorldSpaceLightPos0.xyz;
    lightDir_49 = tmpvar_57;
    mediump vec3 tmpvar_58;
    tmpvar_58 = normalize(lightDir_49);
    highp float tmpvar_59;
    tmpvar_59 = dot (N_46, tmpvar_58);
    rimLightDir_48 = tmpvar_59;
    rim_50 = (rim_50 * (0.5 + rimLightDir_48));
    highp int tmpvar_60;
    if ((rim_50 > HRRimColor_51.w)) {
      tmpvar_60 = 1;
    } else {
      tmpvar_60 = 0;
    };
    rim_50 = float(tmpvar_60);
    mediump vec3 tmpvar_61;
    tmpvar_61 = (spColor_35.xyz + ((HRRimColor_51.xyz * rim_50) * _HRRimPower));
    mediump float tmpvar_62;
    tmpvar_62 = clamp (tmpvar_53, 0.0, 1.0);
    highp vec3 tmpvar_63;
    tmpvar_63 = mix (spColor_35.xyz, tmpvar_55, vec3((tmpvar_62 * _RGRatio)));
    rgColor_52 = tmpvar_63;
    highp vec3 tmpvar_64;
    tmpvar_64 = mix (rgColor_52, tmpvar_61, vec3(float(_HRRimIntensity)));
    rgColor_52 = tmpvar_64;
    outColor_4.xyz = rgColor_52;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_65;
      N_65 = tmpvar_23;
      highp vec3 V_66;
      V_66 = V_2;
      mediump float rimLightDir_67;
      mediump vec3 lightDir_68;
      mediump float rim_69;
      mediump vec4 HRRimColor_70;
      mediump vec3 rgColor_71;
      mediump float tmpvar_72;
      highp float tmpvar_73;
      tmpvar_73 = pow (clamp ((1.001 - 
        dot (V_66, N_65)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_72 = (_RGBias + (tmpvar_73 * _RGScale));
      mediump vec3 tmpvar_74;
      tmpvar_74 = (tmpvar_72 * _RGColor).xyz;
      rgColor_71 = tmpvar_74;
      HRRimColor_70 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_70 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_70 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_70 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_70 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_75;
      tmpvar_75 = (1.0 - max (0.0, dot (V_66, N_65)));
      rim_69 = tmpvar_75;
      highp vec3 tmpvar_76;
      tmpvar_76 = _WorldSpaceLightPos0.xyz;
      lightDir_68 = tmpvar_76;
      mediump vec3 tmpvar_77;
      tmpvar_77 = normalize(lightDir_68);
      highp float tmpvar_78;
      tmpvar_78 = dot (N_65, tmpvar_77);
      rimLightDir_67 = tmpvar_78;
      rim_69 = (rim_69 * (0.5 + rimLightDir_67));
      highp int tmpvar_79;
      if ((rim_69 > HRRimColor_70.w)) {
        tmpvar_79 = 1;
      } else {
        tmpvar_79 = 0;
      };
      rim_69 = float(tmpvar_79);
      mediump vec3 tmpvar_80;
      tmpvar_80 = (outColor_4.xyz + max ((
        (HRRimColor_70.xyz * rim_69)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_71 = (outColor_4.xyz + max (tmpvar_74, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_81;
      tmpvar_81 = mix (rgColor_71, tmpvar_80, vec3(float(_HRRimIntensity)));
      rgColor_71 = tmpvar_81;
      outColor_4.xyz = rgColor_71;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_82;
    scrpos_82 = xlv_TEXCOORD3;
    mediump float a_83;
    a_83 = xlv_TEXCOORD3.z;
    if ((a_83 < 0.95)) {
      scrpos_82.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_83 = (a_83 * 17.0);
      highp float tmpvar_84;
      tmpvar_84 = (scrpos_82.y / 4.0);
      highp float tmpvar_85;
      tmpvar_85 = (fract(abs(tmpvar_84)) * 4.0);
      highp float tmpvar_86;
      if ((tmpvar_84 >= 0.0)) {
        tmpvar_86 = tmpvar_85;
      } else {
        tmpvar_86 = -(tmpvar_85);
      };
      highp float tmpvar_87;
      tmpvar_87 = (scrpos_82.x / 4.0);
      highp float tmpvar_88;
      tmpvar_88 = (fract(abs(tmpvar_87)) * 4.0);
      highp float tmpvar_89;
      if ((tmpvar_87 >= 0.0)) {
        tmpvar_89 = tmpvar_88;
      } else {
        tmpvar_89 = -(tmpvar_88);
      };
      highp float x_90;
      x_90 = ((a_83 - _DITHERMATRIX[
        int(tmpvar_86)
      ][
        int(tmpvar_89)
      ]) - 0.01);
      if ((x_90 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_35.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_78 = tmpvar_79;
  spColor_78.w = (spColor_78.w * _SPOpaqueness);
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * tmpvar_80.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (tmpvar_66, I_83)
   * tmpvar_66)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_87;
      tmpvar_87 = mix (spColor_78.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78.xyz = tmpvar_87;
    };
  };
  spColor_78.xyz = (spColor_78.xyz * _Color.xyz);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (outColor_4, spColor_78, vec4(xlat_mutable_SPIntensity));
  spColor_78 = tmpvar_88;
  outColor_4 = spColor_78;
  if ((_RGBlendType == 1)) {
    highp vec3 N_89;
    N_89 = tmpvar_66;
    highp vec3 V_90;
    V_90 = V_2;
    mediump float rimLightDir_91;
    mediump vec3 lightDir_92;
    mediump float rim_93;
    mediump vec4 HRRimColor_94;
    mediump vec3 rgColor_95;
    mediump float tmpvar_96;
    highp float tmpvar_97;
    tmpvar_97 = pow (clamp ((1.001 - 
      dot (V_90, N_89)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_96 = (_RGBias + (tmpvar_97 * _RGScale));
    mediump vec3 tmpvar_98;
    tmpvar_98 = (tmpvar_96 * _RGColor).xyz;
    rgColor_95 = tmpvar_98;
    HRRimColor_94 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_94 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_94 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_94 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_94 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_99;
    tmpvar_99 = (1.0 - max (0.0, dot (V_90, N_89)));
    rim_93 = tmpvar_99;
    highp vec3 tmpvar_100;
    tmpvar_100 = _WorldSpaceLightPos0.xyz;
    lightDir_92 = tmpvar_100;
    mediump vec3 tmpvar_101;
    tmpvar_101 = normalize(lightDir_92);
    highp float tmpvar_102;
    tmpvar_102 = dot (N_89, tmpvar_101);
    rimLightDir_91 = tmpvar_102;
    rim_93 = (rim_93 * (0.5 + rimLightDir_91));
    highp int tmpvar_103;
    if ((rim_93 > HRRimColor_94.w)) {
      tmpvar_103 = 1;
    } else {
      tmpvar_103 = 0;
    };
    rim_93 = float(tmpvar_103);
    mediump vec3 tmpvar_104;
    tmpvar_104 = (spColor_78.xyz + ((HRRimColor_94.xyz * rim_93) * _HRRimPower));
    mediump float tmpvar_105;
    tmpvar_105 = clamp (tmpvar_96, 0.0, 1.0);
    highp vec3 tmpvar_106;
    tmpvar_106 = mix (spColor_78.xyz, tmpvar_98, vec3((tmpvar_105 * _RGRatio)));
    rgColor_95 = tmpvar_106;
    highp vec3 tmpvar_107;
    tmpvar_107 = mix (rgColor_95, tmpvar_104, vec3(float(_HRRimIntensity)));
    rgColor_95 = tmpvar_107;
    outColor_4.xyz = rgColor_95;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_108;
      N_108 = tmpvar_66;
      highp vec3 V_109;
      V_109 = V_2;
      mediump float rimLightDir_110;
      mediump vec3 lightDir_111;
      mediump float rim_112;
      mediump vec4 HRRimColor_113;
      mediump vec3 rgColor_114;
      mediump float tmpvar_115;
      highp float tmpvar_116;
      tmpvar_116 = pow (clamp ((1.001 - 
        dot (V_109, N_108)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_115 = (_RGBias + (tmpvar_116 * _RGScale));
      mediump vec3 tmpvar_117;
      tmpvar_117 = (tmpvar_115 * _RGColor).xyz;
      rgColor_114 = tmpvar_117;
      HRRimColor_113 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_113 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_113 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_113 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_113 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_118;
      tmpvar_118 = (1.0 - max (0.0, dot (V_109, N_108)));
      rim_112 = tmpvar_118;
      highp vec3 tmpvar_119;
      tmpvar_119 = _WorldSpaceLightPos0.xyz;
      lightDir_111 = tmpvar_119;
      mediump vec3 tmpvar_120;
      tmpvar_120 = normalize(lightDir_111);
      highp float tmpvar_121;
      tmpvar_121 = dot (N_108, tmpvar_120);
      rimLightDir_110 = tmpvar_121;
      rim_112 = (rim_112 * (0.5 + rimLightDir_110));
      highp int tmpvar_122;
      if ((rim_112 > HRRimColor_113.w)) {
        tmpvar_122 = 1;
      } else {
        tmpvar_122 = 0;
      };
      rim_112 = float(tmpvar_122);
      mediump vec3 tmpvar_123;
      tmpvar_123 = (outColor_4.xyz + max ((
        (HRRimColor_113.xyz * rim_112)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_114 = (outColor_4.xyz + max (tmpvar_117, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_124;
      tmpvar_124 = mix (rgColor_114, tmpvar_123, vec3(float(_HRRimIntensity)));
      rgColor_114 = tmpvar_124;
      outColor_4.xyz = rgColor_114;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_125;
    scrpos_125 = xlv_TEXCOORD3;
    mediump float a_126;
    a_126 = xlv_TEXCOORD3.z;
    if ((a_126 < 0.95)) {
      scrpos_125.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_126 = (a_126 * 17.0);
      highp float tmpvar_127;
      tmpvar_127 = (scrpos_125.y / 4.0);
      highp float tmpvar_128;
      tmpvar_128 = (fract(abs(tmpvar_127)) * 4.0);
      highp float tmpvar_129;
      if ((tmpvar_127 >= 0.0)) {
        tmpvar_129 = tmpvar_128;
      } else {
        tmpvar_129 = -(tmpvar_128);
      };
      highp float tmpvar_130;
      tmpvar_130 = (scrpos_125.x / 4.0);
      highp float tmpvar_131;
      tmpvar_131 = (fract(abs(tmpvar_130)) * 4.0);
      highp float tmpvar_132;
      if ((tmpvar_130 >= 0.0)) {
        tmpvar_132 = tmpvar_131;
      } else {
        tmpvar_132 = -(tmpvar_131);
      };
      highp float x_133;
      x_133 = ((a_126 - _DITHERMATRIX[
        int(tmpvar_129)
      ][
        int(tmpvar_132)
      ]) - 0.01);
      if ((x_133 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_78.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_78 = tmpvar_79;
  spColor_78.w = (spColor_78.w * _SPOpaqueness);
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * tmpvar_80.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (tmpvar_66, I_83)
   * tmpvar_66)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_87;
      tmpvar_87 = mix (spColor_78.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78.xyz = tmpvar_87;
    };
  };
  spColor_78.xyz = (spColor_78.xyz * _Color.xyz);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (outColor_4, spColor_78, vec4(xlat_mutable_SPIntensity));
  spColor_78 = tmpvar_88;
  outColor_4 = spColor_78;
  if ((_RGBlendType == 1)) {
    highp vec3 N_89;
    N_89 = tmpvar_66;
    highp vec3 V_90;
    V_90 = V_2;
    mediump float rimLightDir_91;
    mediump vec3 lightDir_92;
    mediump float rim_93;
    mediump vec4 HRRimColor_94;
    mediump vec3 rgColor_95;
    mediump float tmpvar_96;
    highp float tmpvar_97;
    tmpvar_97 = pow (clamp ((1.001 - 
      dot (V_90, N_89)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_96 = (_RGBias + (tmpvar_97 * _RGScale));
    mediump vec3 tmpvar_98;
    tmpvar_98 = (tmpvar_96 * _RGColor).xyz;
    rgColor_95 = tmpvar_98;
    HRRimColor_94 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_94 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_94 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_94 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_94 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_99;
    tmpvar_99 = (1.0 - max (0.0, dot (V_90, N_89)));
    rim_93 = tmpvar_99;
    highp vec3 tmpvar_100;
    tmpvar_100 = _WorldSpaceLightPos0.xyz;
    lightDir_92 = tmpvar_100;
    mediump vec3 tmpvar_101;
    tmpvar_101 = normalize(lightDir_92);
    highp float tmpvar_102;
    tmpvar_102 = dot (N_89, tmpvar_101);
    rimLightDir_91 = tmpvar_102;
    rim_93 = (rim_93 * (0.5 + rimLightDir_91));
    highp int tmpvar_103;
    if ((rim_93 > HRRimColor_94.w)) {
      tmpvar_103 = 1;
    } else {
      tmpvar_103 = 0;
    };
    rim_93 = float(tmpvar_103);
    mediump vec3 tmpvar_104;
    tmpvar_104 = (spColor_78.xyz + ((HRRimColor_94.xyz * rim_93) * _HRRimPower));
    mediump float tmpvar_105;
    tmpvar_105 = clamp (tmpvar_96, 0.0, 1.0);
    highp vec3 tmpvar_106;
    tmpvar_106 = mix (spColor_78.xyz, tmpvar_98, vec3((tmpvar_105 * _RGRatio)));
    rgColor_95 = tmpvar_106;
    highp vec3 tmpvar_107;
    tmpvar_107 = mix (rgColor_95, tmpvar_104, vec3(float(_HRRimIntensity)));
    rgColor_95 = tmpvar_107;
    outColor_4.xyz = rgColor_95;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_108;
      N_108 = tmpvar_66;
      highp vec3 V_109;
      V_109 = V_2;
      mediump float rimLightDir_110;
      mediump vec3 lightDir_111;
      mediump float rim_112;
      mediump vec4 HRRimColor_113;
      mediump vec3 rgColor_114;
      mediump float tmpvar_115;
      highp float tmpvar_116;
      tmpvar_116 = pow (clamp ((1.001 - 
        dot (V_109, N_108)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_115 = (_RGBias + (tmpvar_116 * _RGScale));
      mediump vec3 tmpvar_117;
      tmpvar_117 = (tmpvar_115 * _RGColor).xyz;
      rgColor_114 = tmpvar_117;
      HRRimColor_113 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_113 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_113 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_113 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_113 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_118;
      tmpvar_118 = (1.0 - max (0.0, dot (V_109, N_108)));
      rim_112 = tmpvar_118;
      highp vec3 tmpvar_119;
      tmpvar_119 = _WorldSpaceLightPos0.xyz;
      lightDir_111 = tmpvar_119;
      mediump vec3 tmpvar_120;
      tmpvar_120 = normalize(lightDir_111);
      highp float tmpvar_121;
      tmpvar_121 = dot (N_108, tmpvar_120);
      rimLightDir_110 = tmpvar_121;
      rim_112 = (rim_112 * (0.5 + rimLightDir_110));
      highp int tmpvar_122;
      if ((rim_112 > HRRimColor_113.w)) {
        tmpvar_122 = 1;
      } else {
        tmpvar_122 = 0;
      };
      rim_112 = float(tmpvar_122);
      mediump vec3 tmpvar_123;
      tmpvar_123 = (outColor_4.xyz + max ((
        (HRRimColor_113.xyz * rim_112)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_114 = (outColor_4.xyz + max (tmpvar_117, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_124;
      tmpvar_124 = mix (rgColor_114, tmpvar_123, vec3(float(_HRRimIntensity)));
      rgColor_114 = tmpvar_124;
      outColor_4.xyz = rgColor_114;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_125;
    scrpos_125 = xlv_TEXCOORD3;
    mediump float a_126;
    a_126 = xlv_TEXCOORD3.z;
    if ((a_126 < 0.95)) {
      scrpos_125.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_126 = (a_126 * 17.0);
      highp float tmpvar_127;
      tmpvar_127 = (scrpos_125.y / 4.0);
      highp float tmpvar_128;
      tmpvar_128 = (fract(abs(tmpvar_127)) * 4.0);
      highp float tmpvar_129;
      if ((tmpvar_127 >= 0.0)) {
        tmpvar_129 = tmpvar_128;
      } else {
        tmpvar_129 = -(tmpvar_128);
      };
      highp float tmpvar_130;
      tmpvar_130 = (scrpos_125.x / 4.0);
      highp float tmpvar_131;
      tmpvar_131 = (fract(abs(tmpvar_130)) * 4.0);
      highp float tmpvar_132;
      if ((tmpvar_130 >= 0.0)) {
        tmpvar_132 = tmpvar_131;
      } else {
        tmpvar_132 = -(tmpvar_131);
      };
      highp float x_133;
      x_133 = ((a_126 - _DITHERMATRIX[
        int(tmpvar_129)
      ][
        int(tmpvar_132)
      ]) - 0.01);
      if ((x_133 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_78.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_78 = tmpvar_79;
  spColor_78.w = (spColor_78.w * _SPOpaqueness);
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * tmpvar_80.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (tmpvar_66, I_83)
   * tmpvar_66)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_87;
      tmpvar_87 = mix (spColor_78.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78.xyz = tmpvar_87;
    };
  };
  spColor_78.xyz = (spColor_78.xyz * _Color.xyz);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (outColor_4, spColor_78, vec4(xlat_mutable_SPIntensity));
  spColor_78 = tmpvar_88;
  outColor_4 = spColor_78;
  if ((_RGBlendType == 1)) {
    highp vec3 N_89;
    N_89 = tmpvar_66;
    highp vec3 V_90;
    V_90 = V_2;
    mediump float rimLightDir_91;
    mediump vec3 lightDir_92;
    mediump float rim_93;
    mediump vec4 HRRimColor_94;
    mediump vec3 rgColor_95;
    mediump float tmpvar_96;
    highp float tmpvar_97;
    tmpvar_97 = pow (clamp ((1.001 - 
      dot (V_90, N_89)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_96 = (_RGBias + (tmpvar_97 * _RGScale));
    mediump vec3 tmpvar_98;
    tmpvar_98 = (tmpvar_96 * _RGColor).xyz;
    rgColor_95 = tmpvar_98;
    HRRimColor_94 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_94 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_94 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_94 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_94 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_99;
    tmpvar_99 = (1.0 - max (0.0, dot (V_90, N_89)));
    rim_93 = tmpvar_99;
    highp vec3 tmpvar_100;
    tmpvar_100 = _WorldSpaceLightPos0.xyz;
    lightDir_92 = tmpvar_100;
    mediump vec3 tmpvar_101;
    tmpvar_101 = normalize(lightDir_92);
    highp float tmpvar_102;
    tmpvar_102 = dot (N_89, tmpvar_101);
    rimLightDir_91 = tmpvar_102;
    rim_93 = (rim_93 * (0.5 + rimLightDir_91));
    highp int tmpvar_103;
    if ((rim_93 > HRRimColor_94.w)) {
      tmpvar_103 = 1;
    } else {
      tmpvar_103 = 0;
    };
    rim_93 = float(tmpvar_103);
    mediump vec3 tmpvar_104;
    tmpvar_104 = (spColor_78.xyz + ((HRRimColor_94.xyz * rim_93) * _HRRimPower));
    mediump float tmpvar_105;
    tmpvar_105 = clamp (tmpvar_96, 0.0, 1.0);
    highp vec3 tmpvar_106;
    tmpvar_106 = mix (spColor_78.xyz, tmpvar_98, vec3((tmpvar_105 * _RGRatio)));
    rgColor_95 = tmpvar_106;
    highp vec3 tmpvar_107;
    tmpvar_107 = mix (rgColor_95, tmpvar_104, vec3(float(_HRRimIntensity)));
    rgColor_95 = tmpvar_107;
    outColor_4.xyz = rgColor_95;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_108;
      N_108 = tmpvar_66;
      highp vec3 V_109;
      V_109 = V_2;
      mediump float rimLightDir_110;
      mediump vec3 lightDir_111;
      mediump float rim_112;
      mediump vec4 HRRimColor_113;
      mediump vec3 rgColor_114;
      mediump float tmpvar_115;
      highp float tmpvar_116;
      tmpvar_116 = pow (clamp ((1.001 - 
        dot (V_109, N_108)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_115 = (_RGBias + (tmpvar_116 * _RGScale));
      mediump vec3 tmpvar_117;
      tmpvar_117 = (tmpvar_115 * _RGColor).xyz;
      rgColor_114 = tmpvar_117;
      HRRimColor_113 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_113 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_113 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_113 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_113 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_118;
      tmpvar_118 = (1.0 - max (0.0, dot (V_109, N_108)));
      rim_112 = tmpvar_118;
      highp vec3 tmpvar_119;
      tmpvar_119 = _WorldSpaceLightPos0.xyz;
      lightDir_111 = tmpvar_119;
      mediump vec3 tmpvar_120;
      tmpvar_120 = normalize(lightDir_111);
      highp float tmpvar_121;
      tmpvar_121 = dot (N_108, tmpvar_120);
      rimLightDir_110 = tmpvar_121;
      rim_112 = (rim_112 * (0.5 + rimLightDir_110));
      highp int tmpvar_122;
      if ((rim_112 > HRRimColor_113.w)) {
        tmpvar_122 = 1;
      } else {
        tmpvar_122 = 0;
      };
      rim_112 = float(tmpvar_122);
      mediump vec3 tmpvar_123;
      tmpvar_123 = (outColor_4.xyz + max ((
        (HRRimColor_113.xyz * rim_112)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_114 = (outColor_4.xyz + max (tmpvar_117, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_124;
      tmpvar_124 = mix (rgColor_114, tmpvar_123, vec3(float(_HRRimIntensity)));
      rgColor_114 = tmpvar_124;
      outColor_4.xyz = rgColor_114;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_125;
    scrpos_125 = xlv_TEXCOORD3;
    mediump float a_126;
    a_126 = xlv_TEXCOORD3.z;
    if ((a_126 < 0.95)) {
      scrpos_125.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_126 = (a_126 * 17.0);
      highp float tmpvar_127;
      tmpvar_127 = (scrpos_125.y / 4.0);
      highp float tmpvar_128;
      tmpvar_128 = (fract(abs(tmpvar_127)) * 4.0);
      highp float tmpvar_129;
      if ((tmpvar_127 >= 0.0)) {
        tmpvar_129 = tmpvar_128;
      } else {
        tmpvar_129 = -(tmpvar_128);
      };
      highp float tmpvar_130;
      tmpvar_130 = (scrpos_125.x / 4.0);
      highp float tmpvar_131;
      tmpvar_131 = (fract(abs(tmpvar_130)) * 4.0);
      highp float tmpvar_132;
      if ((tmpvar_130 >= 0.0)) {
        tmpvar_132 = tmpvar_131;
      } else {
        tmpvar_132 = -(tmpvar_131);
      };
      highp float x_133;
      x_133 = ((a_126 - _DITHERMATRIX[
        int(tmpvar_129)
      ][
        int(tmpvar_132)
      ]) - 0.01);
      if ((x_133 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_78.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_21;
    scrpos_21 = xlv_TEXCOORD3;
    mediump float a_22;
    a_22 = xlv_TEXCOORD3.z;
    if ((a_22 < 0.95)) {
      scrpos_21.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_22 = (a_22 * 17.0);
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_21.y / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float tmpvar_26;
      tmpvar_26 = (scrpos_21.x / 4.0);
      highp float tmpvar_27;
      tmpvar_27 = (fract(abs(tmpvar_26)) * 4.0);
      highp float tmpvar_28;
      if ((tmpvar_26 >= 0.0)) {
        tmpvar_28 = tmpvar_27;
      } else {
        tmpvar_28 = -(tmpvar_27);
      };
      highp float x_29;
      x_29 = ((a_22 - _DITHERMATRIX[
        int(tmpvar_25)
      ][
        int(tmpvar_28)
      ]) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_21;
    scrpos_21 = xlv_TEXCOORD3;
    mediump float a_22;
    a_22 = xlv_TEXCOORD3.z;
    if ((a_22 < 0.95)) {
      scrpos_21.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_22 = (a_22 * 17.0);
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_21.y / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float tmpvar_26;
      tmpvar_26 = (scrpos_21.x / 4.0);
      highp float tmpvar_27;
      tmpvar_27 = (fract(abs(tmpvar_26)) * 4.0);
      highp float tmpvar_28;
      if ((tmpvar_26 >= 0.0)) {
        tmpvar_28 = tmpvar_27;
      } else {
        tmpvar_28 = -(tmpvar_27);
      };
      highp float x_29;
      x_29 = ((a_22 - _DITHERMATRIX[
        int(tmpvar_25)
      ][
        int(tmpvar_28)
      ]) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_21;
    scrpos_21 = xlv_TEXCOORD3;
    mediump float a_22;
    a_22 = xlv_TEXCOORD3.z;
    if ((a_22 < 0.95)) {
      scrpos_21.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_22 = (a_22 * 17.0);
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_21.y / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float tmpvar_26;
      tmpvar_26 = (scrpos_21.x / 4.0);
      highp float tmpvar_27;
      tmpvar_27 = (fract(abs(tmpvar_26)) * 4.0);
      highp float tmpvar_28;
      if ((tmpvar_26 >= 0.0)) {
        tmpvar_28 = tmpvar_27;
      } else {
        tmpvar_28 = -(tmpvar_27);
      };
      highp float x_29;
      x_29 = ((a_22 - _DITHERMATRIX[
        int(tmpvar_25)
      ][
        int(tmpvar_28)
      ]) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_21;
    scrpos_21 = xlv_TEXCOORD3;
    mediump float a_22;
    a_22 = xlv_TEXCOORD3.z;
    if ((a_22 < 0.95)) {
      scrpos_21.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_22 = (a_22 * 17.0);
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_21.y / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float tmpvar_26;
      tmpvar_26 = (scrpos_21.x / 4.0);
      highp float tmpvar_27;
      tmpvar_27 = (fract(abs(tmpvar_26)) * 4.0);
      highp float tmpvar_28;
      if ((tmpvar_26 >= 0.0)) {
        tmpvar_28 = tmpvar_27;
      } else {
        tmpvar_28 = -(tmpvar_27);
      };
      highp float x_29;
      x_29 = ((a_22 - _DITHERMATRIX[
        int(tmpvar_25)
      ][
        int(tmpvar_28)
      ]) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_21;
    scrpos_21 = xlv_TEXCOORD3;
    mediump float a_22;
    a_22 = xlv_TEXCOORD3.z;
    if ((a_22 < 0.95)) {
      scrpos_21.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_22 = (a_22 * 17.0);
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_21.y / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float tmpvar_26;
      tmpvar_26 = (scrpos_21.x / 4.0);
      highp float tmpvar_27;
      tmpvar_27 = (fract(abs(tmpvar_26)) * 4.0);
      highp float tmpvar_28;
      if ((tmpvar_26 >= 0.0)) {
        tmpvar_28 = tmpvar_27;
      } else {
        tmpvar_28 = -(tmpvar_27);
      };
      highp float x_29;
      x_29 = ((a_22 - _DITHERMATRIX[
        int(tmpvar_25)
      ][
        int(tmpvar_28)
      ]) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_21;
    scrpos_21 = xlv_TEXCOORD3;
    mediump float a_22;
    a_22 = xlv_TEXCOORD3.z;
    if ((a_22 < 0.95)) {
      scrpos_21.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_22 = (a_22 * 17.0);
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_21.y / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float tmpvar_26;
      tmpvar_26 = (scrpos_21.x / 4.0);
      highp float tmpvar_27;
      tmpvar_27 = (fract(abs(tmpvar_26)) * 4.0);
      highp float tmpvar_28;
      if ((tmpvar_26 >= 0.0)) {
        tmpvar_28 = tmpvar_27;
      } else {
        tmpvar_28 = -(tmpvar_27);
      };
      highp float x_29;
      x_29 = ((a_22 - _DITHERMATRIX[
        int(tmpvar_25)
      ][
        int(tmpvar_28)
      ]) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_31;
    scrpos_31 = xlv_TEXCOORD3;
    mediump float a_32;
    a_32 = xlv_TEXCOORD3.z;
    if ((a_32 < 0.95)) {
      scrpos_31.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_32 = (a_32 * 17.0);
      highp float tmpvar_33;
      tmpvar_33 = (scrpos_31.y / 4.0);
      highp float tmpvar_34;
      tmpvar_34 = (fract(abs(tmpvar_33)) * 4.0);
      highp float tmpvar_35;
      if ((tmpvar_33 >= 0.0)) {
        tmpvar_35 = tmpvar_34;
      } else {
        tmpvar_35 = -(tmpvar_34);
      };
      highp float tmpvar_36;
      tmpvar_36 = (scrpos_31.x / 4.0);
      highp float tmpvar_37;
      tmpvar_37 = (fract(abs(tmpvar_36)) * 4.0);
      highp float tmpvar_38;
      if ((tmpvar_36 >= 0.0)) {
        tmpvar_38 = tmpvar_37;
      } else {
        tmpvar_38 = -(tmpvar_37);
      };
      highp float x_39;
      x_39 = ((a_32 - _DITHERMATRIX[
        int(tmpvar_35)
      ][
        int(tmpvar_38)
      ]) - 0.01);
      if ((x_39 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_31;
    scrpos_31 = xlv_TEXCOORD3;
    mediump float a_32;
    a_32 = xlv_TEXCOORD3.z;
    if ((a_32 < 0.95)) {
      scrpos_31.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_32 = (a_32 * 17.0);
      highp float tmpvar_33;
      tmpvar_33 = (scrpos_31.y / 4.0);
      highp float tmpvar_34;
      tmpvar_34 = (fract(abs(tmpvar_33)) * 4.0);
      highp float tmpvar_35;
      if ((tmpvar_33 >= 0.0)) {
        tmpvar_35 = tmpvar_34;
      } else {
        tmpvar_35 = -(tmpvar_34);
      };
      highp float tmpvar_36;
      tmpvar_36 = (scrpos_31.x / 4.0);
      highp float tmpvar_37;
      tmpvar_37 = (fract(abs(tmpvar_36)) * 4.0);
      highp float tmpvar_38;
      if ((tmpvar_36 >= 0.0)) {
        tmpvar_38 = tmpvar_37;
      } else {
        tmpvar_38 = -(tmpvar_37);
      };
      highp float x_39;
      x_39 = ((a_32 - _DITHERMATRIX[
        int(tmpvar_35)
      ][
        int(tmpvar_38)
      ]) - 0.01);
      if ((x_39 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_31;
    scrpos_31 = xlv_TEXCOORD3;
    mediump float a_32;
    a_32 = xlv_TEXCOORD3.z;
    if ((a_32 < 0.95)) {
      scrpos_31.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_32 = (a_32 * 17.0);
      highp float tmpvar_33;
      tmpvar_33 = (scrpos_31.y / 4.0);
      highp float tmpvar_34;
      tmpvar_34 = (fract(abs(tmpvar_33)) * 4.0);
      highp float tmpvar_35;
      if ((tmpvar_33 >= 0.0)) {
        tmpvar_35 = tmpvar_34;
      } else {
        tmpvar_35 = -(tmpvar_34);
      };
      highp float tmpvar_36;
      tmpvar_36 = (scrpos_31.x / 4.0);
      highp float tmpvar_37;
      tmpvar_37 = (fract(abs(tmpvar_36)) * 4.0);
      highp float tmpvar_38;
      if ((tmpvar_36 >= 0.0)) {
        tmpvar_38 = tmpvar_37;
      } else {
        tmpvar_38 = -(tmpvar_37);
      };
      highp float x_39;
      x_39 = ((a_32 - _DITHERMATRIX[
        int(tmpvar_35)
      ][
        int(tmpvar_38)
      ]) - 0.01);
      if ((x_39 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_74;
    scrpos_74 = xlv_TEXCOORD3;
    mediump float a_75;
    a_75 = xlv_TEXCOORD3.z;
    if ((a_75 < 0.95)) {
      scrpos_74.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_75 = (a_75 * 17.0);
      highp float tmpvar_76;
      tmpvar_76 = (scrpos_74.y / 4.0);
      highp float tmpvar_77;
      tmpvar_77 = (fract(abs(tmpvar_76)) * 4.0);
      highp float tmpvar_78;
      if ((tmpvar_76 >= 0.0)) {
        tmpvar_78 = tmpvar_77;
      } else {
        tmpvar_78 = -(tmpvar_77);
      };
      highp float tmpvar_79;
      tmpvar_79 = (scrpos_74.x / 4.0);
      highp float tmpvar_80;
      tmpvar_80 = (fract(abs(tmpvar_79)) * 4.0);
      highp float tmpvar_81;
      if ((tmpvar_79 >= 0.0)) {
        tmpvar_81 = tmpvar_80;
      } else {
        tmpvar_81 = -(tmpvar_80);
      };
      highp float x_82;
      x_82 = ((a_75 - _DITHERMATRIX[
        int(tmpvar_78)
      ][
        int(tmpvar_81)
      ]) - 0.01);
      if ((x_82 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_74;
    scrpos_74 = xlv_TEXCOORD3;
    mediump float a_75;
    a_75 = xlv_TEXCOORD3.z;
    if ((a_75 < 0.95)) {
      scrpos_74.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_75 = (a_75 * 17.0);
      highp float tmpvar_76;
      tmpvar_76 = (scrpos_74.y / 4.0);
      highp float tmpvar_77;
      tmpvar_77 = (fract(abs(tmpvar_76)) * 4.0);
      highp float tmpvar_78;
      if ((tmpvar_76 >= 0.0)) {
        tmpvar_78 = tmpvar_77;
      } else {
        tmpvar_78 = -(tmpvar_77);
      };
      highp float tmpvar_79;
      tmpvar_79 = (scrpos_74.x / 4.0);
      highp float tmpvar_80;
      tmpvar_80 = (fract(abs(tmpvar_79)) * 4.0);
      highp float tmpvar_81;
      if ((tmpvar_79 >= 0.0)) {
        tmpvar_81 = tmpvar_80;
      } else {
        tmpvar_81 = -(tmpvar_80);
      };
      highp float x_82;
      x_82 = ((a_75 - _DITHERMATRIX[
        int(tmpvar_78)
      ][
        int(tmpvar_81)
      ]) - 0.01);
      if ((x_82 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_74;
    scrpos_74 = xlv_TEXCOORD3;
    mediump float a_75;
    a_75 = xlv_TEXCOORD3.z;
    if ((a_75 < 0.95)) {
      scrpos_74.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_75 = (a_75 * 17.0);
      highp float tmpvar_76;
      tmpvar_76 = (scrpos_74.y / 4.0);
      highp float tmpvar_77;
      tmpvar_77 = (fract(abs(tmpvar_76)) * 4.0);
      highp float tmpvar_78;
      if ((tmpvar_76 >= 0.0)) {
        tmpvar_78 = tmpvar_77;
      } else {
        tmpvar_78 = -(tmpvar_77);
      };
      highp float tmpvar_79;
      tmpvar_79 = (scrpos_74.x / 4.0);
      highp float tmpvar_80;
      tmpvar_80 = (fract(abs(tmpvar_79)) * 4.0);
      highp float tmpvar_81;
      if ((tmpvar_79 >= 0.0)) {
        tmpvar_81 = tmpvar_80;
      } else {
        tmpvar_81 = -(tmpvar_80);
      };
      highp float x_82;
      x_82 = ((a_75 - _DITHERMATRIX[
        int(tmpvar_78)
      ][
        int(tmpvar_81)
      ]) - 0.01);
      if ((x_82 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_21;
    N_21 = tmpvar_13;
    highp vec3 V_22;
    V_22 = V_2;
    mediump float rimLightDir_23;
    mediump vec3 lightDir_24;
    mediump float rim_25;
    mediump vec4 HRRimColor_26;
    mediump vec3 rgColor_27;
    mediump float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = pow (clamp ((1.001 - 
      dot (V_22, N_21)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_28 = (_RGBias + (tmpvar_29 * _RGScale));
    mediump vec3 tmpvar_30;
    tmpvar_30 = (tmpvar_28 * _RGColor).xyz;
    rgColor_27 = tmpvar_30;
    HRRimColor_26 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_26 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_26 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_26 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_26 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_31;
    tmpvar_31 = (1.0 - max (0.0, dot (V_22, N_21)));
    rim_25 = tmpvar_31;
    highp vec3 tmpvar_32;
    tmpvar_32 = _WorldSpaceLightPos0.xyz;
    lightDir_24 = tmpvar_32;
    mediump vec3 tmpvar_33;
    tmpvar_33 = normalize(lightDir_24);
    highp float tmpvar_34;
    tmpvar_34 = dot (N_21, tmpvar_33);
    rimLightDir_23 = tmpvar_34;
    rim_25 = (rim_25 * (0.5 + rimLightDir_23));
    highp int tmpvar_35;
    if ((rim_25 > HRRimColor_26.w)) {
      tmpvar_35 = 1;
    } else {
      tmpvar_35 = 0;
    };
    rim_25 = float(tmpvar_35);
    mediump vec3 tmpvar_36;
    tmpvar_36 = (outColor_5.xyz + ((HRRimColor_26.xyz * rim_25) * _HRRimPower));
    mediump float tmpvar_37;
    tmpvar_37 = clamp (tmpvar_28, 0.0, 1.0);
    highp vec3 tmpvar_38;
    tmpvar_38 = mix (outColor_5.xyz, tmpvar_30, vec3((tmpvar_37 * _RGRatio)));
    rgColor_27 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (rgColor_27, tmpvar_36, vec3(float(_HRRimIntensity)));
    rgColor_27 = tmpvar_39;
    outColor_5.xyz = rgColor_27;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_40;
      N_40 = tmpvar_13;
      highp vec3 V_41;
      V_41 = V_2;
      mediump float rimLightDir_42;
      mediump vec3 lightDir_43;
      mediump float rim_44;
      mediump vec4 HRRimColor_45;
      mediump vec3 rgColor_46;
      mediump float tmpvar_47;
      highp float tmpvar_48;
      tmpvar_48 = pow (clamp ((1.001 - 
        dot (V_41, N_40)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_47 = (_RGBias + (tmpvar_48 * _RGScale));
      mediump vec3 tmpvar_49;
      tmpvar_49 = (tmpvar_47 * _RGColor).xyz;
      rgColor_46 = tmpvar_49;
      HRRimColor_45 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_45 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_45 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_45 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_45 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - max (0.0, dot (V_41, N_40)));
      rim_44 = tmpvar_50;
      highp vec3 tmpvar_51;
      tmpvar_51 = _WorldSpaceLightPos0.xyz;
      lightDir_43 = tmpvar_51;
      mediump vec3 tmpvar_52;
      tmpvar_52 = normalize(lightDir_43);
      highp float tmpvar_53;
      tmpvar_53 = dot (N_40, tmpvar_52);
      rimLightDir_42 = tmpvar_53;
      rim_44 = (rim_44 * (0.5 + rimLightDir_42));
      highp int tmpvar_54;
      if ((rim_44 > HRRimColor_45.w)) {
        tmpvar_54 = 1;
      } else {
        tmpvar_54 = 0;
      };
      rim_44 = float(tmpvar_54);
      mediump vec3 tmpvar_55;
      tmpvar_55 = (outColor_5.xyz + max ((
        (HRRimColor_45.xyz * rim_44)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_46 = (outColor_5.xyz + max (tmpvar_49, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_56;
      tmpvar_56 = mix (rgColor_46, tmpvar_55, vec3(float(_HRRimIntensity)));
      rgColor_46 = tmpvar_56;
      outColor_5.xyz = rgColor_46;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_57;
    scrpos_57 = xlv_TEXCOORD3;
    mediump float a_58;
    a_58 = xlv_TEXCOORD3.z;
    if ((a_58 < 0.95)) {
      scrpos_57.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_58 = (a_58 * 17.0);
      highp float tmpvar_59;
      tmpvar_59 = (scrpos_57.y / 4.0);
      highp float tmpvar_60;
      tmpvar_60 = (fract(abs(tmpvar_59)) * 4.0);
      highp float tmpvar_61;
      if ((tmpvar_59 >= 0.0)) {
        tmpvar_61 = tmpvar_60;
      } else {
        tmpvar_61 = -(tmpvar_60);
      };
      highp float tmpvar_62;
      tmpvar_62 = (scrpos_57.x / 4.0);
      highp float tmpvar_63;
      tmpvar_63 = (fract(abs(tmpvar_62)) * 4.0);
      highp float tmpvar_64;
      if ((tmpvar_62 >= 0.0)) {
        tmpvar_64 = tmpvar_63;
      } else {
        tmpvar_64 = -(tmpvar_63);
      };
      highp float x_65;
      x_65 = ((a_58 - _DITHERMATRIX[
        int(tmpvar_61)
      ][
        int(tmpvar_64)
      ]) - 0.01);
      if ((x_65 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_21;
    N_21 = tmpvar_13;
    highp vec3 V_22;
    V_22 = V_2;
    mediump float rimLightDir_23;
    mediump vec3 lightDir_24;
    mediump float rim_25;
    mediump vec4 HRRimColor_26;
    mediump vec3 rgColor_27;
    mediump float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = pow (clamp ((1.001 - 
      dot (V_22, N_21)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_28 = (_RGBias + (tmpvar_29 * _RGScale));
    mediump vec3 tmpvar_30;
    tmpvar_30 = (tmpvar_28 * _RGColor).xyz;
    rgColor_27 = tmpvar_30;
    HRRimColor_26 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_26 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_26 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_26 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_26 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_31;
    tmpvar_31 = (1.0 - max (0.0, dot (V_22, N_21)));
    rim_25 = tmpvar_31;
    highp vec3 tmpvar_32;
    tmpvar_32 = _WorldSpaceLightPos0.xyz;
    lightDir_24 = tmpvar_32;
    mediump vec3 tmpvar_33;
    tmpvar_33 = normalize(lightDir_24);
    highp float tmpvar_34;
    tmpvar_34 = dot (N_21, tmpvar_33);
    rimLightDir_23 = tmpvar_34;
    rim_25 = (rim_25 * (0.5 + rimLightDir_23));
    highp int tmpvar_35;
    if ((rim_25 > HRRimColor_26.w)) {
      tmpvar_35 = 1;
    } else {
      tmpvar_35 = 0;
    };
    rim_25 = float(tmpvar_35);
    mediump vec3 tmpvar_36;
    tmpvar_36 = (outColor_5.xyz + ((HRRimColor_26.xyz * rim_25) * _HRRimPower));
    mediump float tmpvar_37;
    tmpvar_37 = clamp (tmpvar_28, 0.0, 1.0);
    highp vec3 tmpvar_38;
    tmpvar_38 = mix (outColor_5.xyz, tmpvar_30, vec3((tmpvar_37 * _RGRatio)));
    rgColor_27 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (rgColor_27, tmpvar_36, vec3(float(_HRRimIntensity)));
    rgColor_27 = tmpvar_39;
    outColor_5.xyz = rgColor_27;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_40;
      N_40 = tmpvar_13;
      highp vec3 V_41;
      V_41 = V_2;
      mediump float rimLightDir_42;
      mediump vec3 lightDir_43;
      mediump float rim_44;
      mediump vec4 HRRimColor_45;
      mediump vec3 rgColor_46;
      mediump float tmpvar_47;
      highp float tmpvar_48;
      tmpvar_48 = pow (clamp ((1.001 - 
        dot (V_41, N_40)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_47 = (_RGBias + (tmpvar_48 * _RGScale));
      mediump vec3 tmpvar_49;
      tmpvar_49 = (tmpvar_47 * _RGColor).xyz;
      rgColor_46 = tmpvar_49;
      HRRimColor_45 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_45 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_45 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_45 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_45 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - max (0.0, dot (V_41, N_40)));
      rim_44 = tmpvar_50;
      highp vec3 tmpvar_51;
      tmpvar_51 = _WorldSpaceLightPos0.xyz;
      lightDir_43 = tmpvar_51;
      mediump vec3 tmpvar_52;
      tmpvar_52 = normalize(lightDir_43);
      highp float tmpvar_53;
      tmpvar_53 = dot (N_40, tmpvar_52);
      rimLightDir_42 = tmpvar_53;
      rim_44 = (rim_44 * (0.5 + rimLightDir_42));
      highp int tmpvar_54;
      if ((rim_44 > HRRimColor_45.w)) {
        tmpvar_54 = 1;
      } else {
        tmpvar_54 = 0;
      };
      rim_44 = float(tmpvar_54);
      mediump vec3 tmpvar_55;
      tmpvar_55 = (outColor_5.xyz + max ((
        (HRRimColor_45.xyz * rim_44)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_46 = (outColor_5.xyz + max (tmpvar_49, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_56;
      tmpvar_56 = mix (rgColor_46, tmpvar_55, vec3(float(_HRRimIntensity)));
      rgColor_46 = tmpvar_56;
      outColor_5.xyz = rgColor_46;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_57;
    scrpos_57 = xlv_TEXCOORD3;
    mediump float a_58;
    a_58 = xlv_TEXCOORD3.z;
    if ((a_58 < 0.95)) {
      scrpos_57.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_58 = (a_58 * 17.0);
      highp float tmpvar_59;
      tmpvar_59 = (scrpos_57.y / 4.0);
      highp float tmpvar_60;
      tmpvar_60 = (fract(abs(tmpvar_59)) * 4.0);
      highp float tmpvar_61;
      if ((tmpvar_59 >= 0.0)) {
        tmpvar_61 = tmpvar_60;
      } else {
        tmpvar_61 = -(tmpvar_60);
      };
      highp float tmpvar_62;
      tmpvar_62 = (scrpos_57.x / 4.0);
      highp float tmpvar_63;
      tmpvar_63 = (fract(abs(tmpvar_62)) * 4.0);
      highp float tmpvar_64;
      if ((tmpvar_62 >= 0.0)) {
        tmpvar_64 = tmpvar_63;
      } else {
        tmpvar_64 = -(tmpvar_63);
      };
      highp float x_65;
      x_65 = ((a_58 - _DITHERMATRIX[
        int(tmpvar_61)
      ][
        int(tmpvar_64)
      ]) - 0.01);
      if ((x_65 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_21;
    N_21 = tmpvar_13;
    highp vec3 V_22;
    V_22 = V_2;
    mediump float rimLightDir_23;
    mediump vec3 lightDir_24;
    mediump float rim_25;
    mediump vec4 HRRimColor_26;
    mediump vec3 rgColor_27;
    mediump float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = pow (clamp ((1.001 - 
      dot (V_22, N_21)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_28 = (_RGBias + (tmpvar_29 * _RGScale));
    mediump vec3 tmpvar_30;
    tmpvar_30 = (tmpvar_28 * _RGColor).xyz;
    rgColor_27 = tmpvar_30;
    HRRimColor_26 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_26 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_26 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_26 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_26 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_31;
    tmpvar_31 = (1.0 - max (0.0, dot (V_22, N_21)));
    rim_25 = tmpvar_31;
    highp vec3 tmpvar_32;
    tmpvar_32 = _WorldSpaceLightPos0.xyz;
    lightDir_24 = tmpvar_32;
    mediump vec3 tmpvar_33;
    tmpvar_33 = normalize(lightDir_24);
    highp float tmpvar_34;
    tmpvar_34 = dot (N_21, tmpvar_33);
    rimLightDir_23 = tmpvar_34;
    rim_25 = (rim_25 * (0.5 + rimLightDir_23));
    highp int tmpvar_35;
    if ((rim_25 > HRRimColor_26.w)) {
      tmpvar_35 = 1;
    } else {
      tmpvar_35 = 0;
    };
    rim_25 = float(tmpvar_35);
    mediump vec3 tmpvar_36;
    tmpvar_36 = (outColor_5.xyz + ((HRRimColor_26.xyz * rim_25) * _HRRimPower));
    mediump float tmpvar_37;
    tmpvar_37 = clamp (tmpvar_28, 0.0, 1.0);
    highp vec3 tmpvar_38;
    tmpvar_38 = mix (outColor_5.xyz, tmpvar_30, vec3((tmpvar_37 * _RGRatio)));
    rgColor_27 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (rgColor_27, tmpvar_36, vec3(float(_HRRimIntensity)));
    rgColor_27 = tmpvar_39;
    outColor_5.xyz = rgColor_27;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_40;
      N_40 = tmpvar_13;
      highp vec3 V_41;
      V_41 = V_2;
      mediump float rimLightDir_42;
      mediump vec3 lightDir_43;
      mediump float rim_44;
      mediump vec4 HRRimColor_45;
      mediump vec3 rgColor_46;
      mediump float tmpvar_47;
      highp float tmpvar_48;
      tmpvar_48 = pow (clamp ((1.001 - 
        dot (V_41, N_40)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_47 = (_RGBias + (tmpvar_48 * _RGScale));
      mediump vec3 tmpvar_49;
      tmpvar_49 = (tmpvar_47 * _RGColor).xyz;
      rgColor_46 = tmpvar_49;
      HRRimColor_45 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_45 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_45 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_45 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_45 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - max (0.0, dot (V_41, N_40)));
      rim_44 = tmpvar_50;
      highp vec3 tmpvar_51;
      tmpvar_51 = _WorldSpaceLightPos0.xyz;
      lightDir_43 = tmpvar_51;
      mediump vec3 tmpvar_52;
      tmpvar_52 = normalize(lightDir_43);
      highp float tmpvar_53;
      tmpvar_53 = dot (N_40, tmpvar_52);
      rimLightDir_42 = tmpvar_53;
      rim_44 = (rim_44 * (0.5 + rimLightDir_42));
      highp int tmpvar_54;
      if ((rim_44 > HRRimColor_45.w)) {
        tmpvar_54 = 1;
      } else {
        tmpvar_54 = 0;
      };
      rim_44 = float(tmpvar_54);
      mediump vec3 tmpvar_55;
      tmpvar_55 = (outColor_5.xyz + max ((
        (HRRimColor_45.xyz * rim_44)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_46 = (outColor_5.xyz + max (tmpvar_49, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_56;
      tmpvar_56 = mix (rgColor_46, tmpvar_55, vec3(float(_HRRimIntensity)));
      rgColor_46 = tmpvar_56;
      outColor_5.xyz = rgColor_46;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_57;
    scrpos_57 = xlv_TEXCOORD3;
    mediump float a_58;
    a_58 = xlv_TEXCOORD3.z;
    if ((a_58 < 0.95)) {
      scrpos_57.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_58 = (a_58 * 17.0);
      highp float tmpvar_59;
      tmpvar_59 = (scrpos_57.y / 4.0);
      highp float tmpvar_60;
      tmpvar_60 = (fract(abs(tmpvar_59)) * 4.0);
      highp float tmpvar_61;
      if ((tmpvar_59 >= 0.0)) {
        tmpvar_61 = tmpvar_60;
      } else {
        tmpvar_61 = -(tmpvar_60);
      };
      highp float tmpvar_62;
      tmpvar_62 = (scrpos_57.x / 4.0);
      highp float tmpvar_63;
      tmpvar_63 = (fract(abs(tmpvar_62)) * 4.0);
      highp float tmpvar_64;
      if ((tmpvar_62 >= 0.0)) {
        tmpvar_64 = tmpvar_63;
      } else {
        tmpvar_64 = -(tmpvar_63);
      };
      highp float x_65;
      x_65 = ((a_58 - _DITHERMATRIX[
        int(tmpvar_61)
      ][
        int(tmpvar_64)
      ]) - 0.01);
      if ((x_65 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_21;
    N_21 = tmpvar_13;
    highp vec3 V_22;
    V_22 = V_2;
    mediump float rimLightDir_23;
    mediump vec3 lightDir_24;
    mediump float rim_25;
    mediump vec4 HRRimColor_26;
    mediump vec3 rgColor_27;
    mediump float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = pow (clamp ((1.001 - 
      dot (V_22, N_21)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_28 = (_RGBias + (tmpvar_29 * _RGScale));
    mediump vec3 tmpvar_30;
    tmpvar_30 = (tmpvar_28 * _RGColor).xyz;
    rgColor_27 = tmpvar_30;
    HRRimColor_26 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_26 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_26 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_26 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_26 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_31;
    tmpvar_31 = (1.0 - max (0.0, dot (V_22, N_21)));
    rim_25 = tmpvar_31;
    highp vec3 tmpvar_32;
    tmpvar_32 = _WorldSpaceLightPos0.xyz;
    lightDir_24 = tmpvar_32;
    mediump vec3 tmpvar_33;
    tmpvar_33 = normalize(lightDir_24);
    highp float tmpvar_34;
    tmpvar_34 = dot (N_21, tmpvar_33);
    rimLightDir_23 = tmpvar_34;
    rim_25 = (rim_25 * (0.5 + rimLightDir_23));
    highp int tmpvar_35;
    if ((rim_25 > HRRimColor_26.w)) {
      tmpvar_35 = 1;
    } else {
      tmpvar_35 = 0;
    };
    rim_25 = float(tmpvar_35);
    mediump vec3 tmpvar_36;
    tmpvar_36 = (outColor_5.xyz + ((HRRimColor_26.xyz * rim_25) * _HRRimPower));
    mediump float tmpvar_37;
    tmpvar_37 = clamp (tmpvar_28, 0.0, 1.0);
    highp vec3 tmpvar_38;
    tmpvar_38 = mix (outColor_5.xyz, tmpvar_30, vec3((tmpvar_37 * _RGRatio)));
    rgColor_27 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (rgColor_27, tmpvar_36, vec3(float(_HRRimIntensity)));
    rgColor_27 = tmpvar_39;
    outColor_5.xyz = rgColor_27;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_40;
      N_40 = tmpvar_13;
      highp vec3 V_41;
      V_41 = V_2;
      mediump float rimLightDir_42;
      mediump vec3 lightDir_43;
      mediump float rim_44;
      mediump vec4 HRRimColor_45;
      mediump vec3 rgColor_46;
      mediump float tmpvar_47;
      highp float tmpvar_48;
      tmpvar_48 = pow (clamp ((1.001 - 
        dot (V_41, N_40)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_47 = (_RGBias + (tmpvar_48 * _RGScale));
      mediump vec3 tmpvar_49;
      tmpvar_49 = (tmpvar_47 * _RGColor).xyz;
      rgColor_46 = tmpvar_49;
      HRRimColor_45 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_45 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_45 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_45 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_45 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - max (0.0, dot (V_41, N_40)));
      rim_44 = tmpvar_50;
      highp vec3 tmpvar_51;
      tmpvar_51 = _WorldSpaceLightPos0.xyz;
      lightDir_43 = tmpvar_51;
      mediump vec3 tmpvar_52;
      tmpvar_52 = normalize(lightDir_43);
      highp float tmpvar_53;
      tmpvar_53 = dot (N_40, tmpvar_52);
      rimLightDir_42 = tmpvar_53;
      rim_44 = (rim_44 * (0.5 + rimLightDir_42));
      highp int tmpvar_54;
      if ((rim_44 > HRRimColor_45.w)) {
        tmpvar_54 = 1;
      } else {
        tmpvar_54 = 0;
      };
      rim_44 = float(tmpvar_54);
      mediump vec3 tmpvar_55;
      tmpvar_55 = (outColor_5.xyz + max ((
        (HRRimColor_45.xyz * rim_44)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_46 = (outColor_5.xyz + max (tmpvar_49, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_56;
      tmpvar_56 = mix (rgColor_46, tmpvar_55, vec3(float(_HRRimIntensity)));
      rgColor_46 = tmpvar_56;
      outColor_5.xyz = rgColor_46;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_57;
    scrpos_57 = xlv_TEXCOORD3;
    mediump float a_58;
    a_58 = xlv_TEXCOORD3.z;
    if ((a_58 < 0.95)) {
      scrpos_57.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_58 = (a_58 * 17.0);
      highp float tmpvar_59;
      tmpvar_59 = (scrpos_57.y / 4.0);
      highp float tmpvar_60;
      tmpvar_60 = (fract(abs(tmpvar_59)) * 4.0);
      highp float tmpvar_61;
      if ((tmpvar_59 >= 0.0)) {
        tmpvar_61 = tmpvar_60;
      } else {
        tmpvar_61 = -(tmpvar_60);
      };
      highp float tmpvar_62;
      tmpvar_62 = (scrpos_57.x / 4.0);
      highp float tmpvar_63;
      tmpvar_63 = (fract(abs(tmpvar_62)) * 4.0);
      highp float tmpvar_64;
      if ((tmpvar_62 >= 0.0)) {
        tmpvar_64 = tmpvar_63;
      } else {
        tmpvar_64 = -(tmpvar_63);
      };
      highp float x_65;
      x_65 = ((a_58 - _DITHERMATRIX[
        int(tmpvar_61)
      ][
        int(tmpvar_64)
      ]) - 0.01);
      if ((x_65 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_21;
    N_21 = tmpvar_13;
    highp vec3 V_22;
    V_22 = V_2;
    mediump float rimLightDir_23;
    mediump vec3 lightDir_24;
    mediump float rim_25;
    mediump vec4 HRRimColor_26;
    mediump vec3 rgColor_27;
    mediump float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = pow (clamp ((1.001 - 
      dot (V_22, N_21)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_28 = (_RGBias + (tmpvar_29 * _RGScale));
    mediump vec3 tmpvar_30;
    tmpvar_30 = (tmpvar_28 * _RGColor).xyz;
    rgColor_27 = tmpvar_30;
    HRRimColor_26 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_26 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_26 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_26 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_26 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_31;
    tmpvar_31 = (1.0 - max (0.0, dot (V_22, N_21)));
    rim_25 = tmpvar_31;
    highp vec3 tmpvar_32;
    tmpvar_32 = _WorldSpaceLightPos0.xyz;
    lightDir_24 = tmpvar_32;
    mediump vec3 tmpvar_33;
    tmpvar_33 = normalize(lightDir_24);
    highp float tmpvar_34;
    tmpvar_34 = dot (N_21, tmpvar_33);
    rimLightDir_23 = tmpvar_34;
    rim_25 = (rim_25 * (0.5 + rimLightDir_23));
    highp int tmpvar_35;
    if ((rim_25 > HRRimColor_26.w)) {
      tmpvar_35 = 1;
    } else {
      tmpvar_35 = 0;
    };
    rim_25 = float(tmpvar_35);
    mediump vec3 tmpvar_36;
    tmpvar_36 = (outColor_5.xyz + ((HRRimColor_26.xyz * rim_25) * _HRRimPower));
    mediump float tmpvar_37;
    tmpvar_37 = clamp (tmpvar_28, 0.0, 1.0);
    highp vec3 tmpvar_38;
    tmpvar_38 = mix (outColor_5.xyz, tmpvar_30, vec3((tmpvar_37 * _RGRatio)));
    rgColor_27 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (rgColor_27, tmpvar_36, vec3(float(_HRRimIntensity)));
    rgColor_27 = tmpvar_39;
    outColor_5.xyz = rgColor_27;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_40;
      N_40 = tmpvar_13;
      highp vec3 V_41;
      V_41 = V_2;
      mediump float rimLightDir_42;
      mediump vec3 lightDir_43;
      mediump float rim_44;
      mediump vec4 HRRimColor_45;
      mediump vec3 rgColor_46;
      mediump float tmpvar_47;
      highp float tmpvar_48;
      tmpvar_48 = pow (clamp ((1.001 - 
        dot (V_41, N_40)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_47 = (_RGBias + (tmpvar_48 * _RGScale));
      mediump vec3 tmpvar_49;
      tmpvar_49 = (tmpvar_47 * _RGColor).xyz;
      rgColor_46 = tmpvar_49;
      HRRimColor_45 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_45 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_45 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_45 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_45 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - max (0.0, dot (V_41, N_40)));
      rim_44 = tmpvar_50;
      highp vec3 tmpvar_51;
      tmpvar_51 = _WorldSpaceLightPos0.xyz;
      lightDir_43 = tmpvar_51;
      mediump vec3 tmpvar_52;
      tmpvar_52 = normalize(lightDir_43);
      highp float tmpvar_53;
      tmpvar_53 = dot (N_40, tmpvar_52);
      rimLightDir_42 = tmpvar_53;
      rim_44 = (rim_44 * (0.5 + rimLightDir_42));
      highp int tmpvar_54;
      if ((rim_44 > HRRimColor_45.w)) {
        tmpvar_54 = 1;
      } else {
        tmpvar_54 = 0;
      };
      rim_44 = float(tmpvar_54);
      mediump vec3 tmpvar_55;
      tmpvar_55 = (outColor_5.xyz + max ((
        (HRRimColor_45.xyz * rim_44)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_46 = (outColor_5.xyz + max (tmpvar_49, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_56;
      tmpvar_56 = mix (rgColor_46, tmpvar_55, vec3(float(_HRRimIntensity)));
      rgColor_46 = tmpvar_56;
      outColor_5.xyz = rgColor_46;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_57;
    scrpos_57 = xlv_TEXCOORD3;
    mediump float a_58;
    a_58 = xlv_TEXCOORD3.z;
    if ((a_58 < 0.95)) {
      scrpos_57.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_58 = (a_58 * 17.0);
      highp float tmpvar_59;
      tmpvar_59 = (scrpos_57.y / 4.0);
      highp float tmpvar_60;
      tmpvar_60 = (fract(abs(tmpvar_59)) * 4.0);
      highp float tmpvar_61;
      if ((tmpvar_59 >= 0.0)) {
        tmpvar_61 = tmpvar_60;
      } else {
        tmpvar_61 = -(tmpvar_60);
      };
      highp float tmpvar_62;
      tmpvar_62 = (scrpos_57.x / 4.0);
      highp float tmpvar_63;
      tmpvar_63 = (fract(abs(tmpvar_62)) * 4.0);
      highp float tmpvar_64;
      if ((tmpvar_62 >= 0.0)) {
        tmpvar_64 = tmpvar_63;
      } else {
        tmpvar_64 = -(tmpvar_63);
      };
      highp float x_65;
      x_65 = ((a_58 - _DITHERMATRIX[
        int(tmpvar_61)
      ][
        int(tmpvar_64)
      ]) - 0.01);
      if ((x_65 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_21;
    N_21 = tmpvar_13;
    highp vec3 V_22;
    V_22 = V_2;
    mediump float rimLightDir_23;
    mediump vec3 lightDir_24;
    mediump float rim_25;
    mediump vec4 HRRimColor_26;
    mediump vec3 rgColor_27;
    mediump float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = pow (clamp ((1.001 - 
      dot (V_22, N_21)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_28 = (_RGBias + (tmpvar_29 * _RGScale));
    mediump vec3 tmpvar_30;
    tmpvar_30 = (tmpvar_28 * _RGColor).xyz;
    rgColor_27 = tmpvar_30;
    HRRimColor_26 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_26 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_26 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_26 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_26 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_31;
    tmpvar_31 = (1.0 - max (0.0, dot (V_22, N_21)));
    rim_25 = tmpvar_31;
    highp vec3 tmpvar_32;
    tmpvar_32 = _WorldSpaceLightPos0.xyz;
    lightDir_24 = tmpvar_32;
    mediump vec3 tmpvar_33;
    tmpvar_33 = normalize(lightDir_24);
    highp float tmpvar_34;
    tmpvar_34 = dot (N_21, tmpvar_33);
    rimLightDir_23 = tmpvar_34;
    rim_25 = (rim_25 * (0.5 + rimLightDir_23));
    highp int tmpvar_35;
    if ((rim_25 > HRRimColor_26.w)) {
      tmpvar_35 = 1;
    } else {
      tmpvar_35 = 0;
    };
    rim_25 = float(tmpvar_35);
    mediump vec3 tmpvar_36;
    tmpvar_36 = (outColor_5.xyz + ((HRRimColor_26.xyz * rim_25) * _HRRimPower));
    mediump float tmpvar_37;
    tmpvar_37 = clamp (tmpvar_28, 0.0, 1.0);
    highp vec3 tmpvar_38;
    tmpvar_38 = mix (outColor_5.xyz, tmpvar_30, vec3((tmpvar_37 * _RGRatio)));
    rgColor_27 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (rgColor_27, tmpvar_36, vec3(float(_HRRimIntensity)));
    rgColor_27 = tmpvar_39;
    outColor_5.xyz = rgColor_27;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_40;
      N_40 = tmpvar_13;
      highp vec3 V_41;
      V_41 = V_2;
      mediump float rimLightDir_42;
      mediump vec3 lightDir_43;
      mediump float rim_44;
      mediump vec4 HRRimColor_45;
      mediump vec3 rgColor_46;
      mediump float tmpvar_47;
      highp float tmpvar_48;
      tmpvar_48 = pow (clamp ((1.001 - 
        dot (V_41, N_40)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_47 = (_RGBias + (tmpvar_48 * _RGScale));
      mediump vec3 tmpvar_49;
      tmpvar_49 = (tmpvar_47 * _RGColor).xyz;
      rgColor_46 = tmpvar_49;
      HRRimColor_45 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_45 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_45 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_45 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_45 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - max (0.0, dot (V_41, N_40)));
      rim_44 = tmpvar_50;
      highp vec3 tmpvar_51;
      tmpvar_51 = _WorldSpaceLightPos0.xyz;
      lightDir_43 = tmpvar_51;
      mediump vec3 tmpvar_52;
      tmpvar_52 = normalize(lightDir_43);
      highp float tmpvar_53;
      tmpvar_53 = dot (N_40, tmpvar_52);
      rimLightDir_42 = tmpvar_53;
      rim_44 = (rim_44 * (0.5 + rimLightDir_42));
      highp int tmpvar_54;
      if ((rim_44 > HRRimColor_45.w)) {
        tmpvar_54 = 1;
      } else {
        tmpvar_54 = 0;
      };
      rim_44 = float(tmpvar_54);
      mediump vec3 tmpvar_55;
      tmpvar_55 = (outColor_5.xyz + max ((
        (HRRimColor_45.xyz * rim_44)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_46 = (outColor_5.xyz + max (tmpvar_49, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_56;
      tmpvar_56 = mix (rgColor_46, tmpvar_55, vec3(float(_HRRimIntensity)));
      rgColor_46 = tmpvar_56;
      outColor_5.xyz = rgColor_46;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_57;
    scrpos_57 = xlv_TEXCOORD3;
    mediump float a_58;
    a_58 = xlv_TEXCOORD3.z;
    if ((a_58 < 0.95)) {
      scrpos_57.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_58 = (a_58 * 17.0);
      highp float tmpvar_59;
      tmpvar_59 = (scrpos_57.y / 4.0);
      highp float tmpvar_60;
      tmpvar_60 = (fract(abs(tmpvar_59)) * 4.0);
      highp float tmpvar_61;
      if ((tmpvar_59 >= 0.0)) {
        tmpvar_61 = tmpvar_60;
      } else {
        tmpvar_61 = -(tmpvar_60);
      };
      highp float tmpvar_62;
      tmpvar_62 = (scrpos_57.x / 4.0);
      highp float tmpvar_63;
      tmpvar_63 = (fract(abs(tmpvar_62)) * 4.0);
      highp float tmpvar_64;
      if ((tmpvar_62 >= 0.0)) {
        tmpvar_64 = tmpvar_63;
      } else {
        tmpvar_64 = -(tmpvar_63);
      };
      highp float x_65;
      x_65 = ((a_58 - _DITHERMATRIX[
        int(tmpvar_61)
      ][
        int(tmpvar_64)
      ]) - 0.01);
      if ((x_65 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if ((_RGBlendType == 1)) {
    highp vec3 N_31;
    N_31 = tmpvar_23;
    highp vec3 V_32;
    V_32 = V_2;
    mediump float rimLightDir_33;
    mediump vec3 lightDir_34;
    mediump float rim_35;
    mediump vec4 HRRimColor_36;
    mediump vec3 rgColor_37;
    mediump float tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow (clamp ((1.001 - 
      dot (V_32, N_31)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_38 = (_RGBias + (tmpvar_39 * _RGScale));
    mediump vec3 tmpvar_40;
    tmpvar_40 = (tmpvar_38 * _RGColor).xyz;
    rgColor_37 = tmpvar_40;
    HRRimColor_36 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_36 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_36 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_36 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_36 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_41;
    tmpvar_41 = (1.0 - max (0.0, dot (V_32, N_31)));
    rim_35 = tmpvar_41;
    highp vec3 tmpvar_42;
    tmpvar_42 = _WorldSpaceLightPos0.xyz;
    lightDir_34 = tmpvar_42;
    mediump vec3 tmpvar_43;
    tmpvar_43 = normalize(lightDir_34);
    highp float tmpvar_44;
    tmpvar_44 = dot (N_31, tmpvar_43);
    rimLightDir_33 = tmpvar_44;
    rim_35 = (rim_35 * (0.5 + rimLightDir_33));
    highp int tmpvar_45;
    if ((rim_35 > HRRimColor_36.w)) {
      tmpvar_45 = 1;
    } else {
      tmpvar_45 = 0;
    };
    rim_35 = float(tmpvar_45);
    mediump vec3 tmpvar_46;
    tmpvar_46 = (outColor_4.xyz + ((HRRimColor_36.xyz * rim_35) * _HRRimPower));
    mediump float tmpvar_47;
    tmpvar_47 = clamp (tmpvar_38, 0.0, 1.0);
    highp vec3 tmpvar_48;
    tmpvar_48 = mix (outColor_4.xyz, tmpvar_40, vec3((tmpvar_47 * _RGRatio)));
    rgColor_37 = tmpvar_48;
    highp vec3 tmpvar_49;
    tmpvar_49 = mix (rgColor_37, tmpvar_46, vec3(float(_HRRimIntensity)));
    rgColor_37 = tmpvar_49;
    outColor_4.xyz = rgColor_37;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_50;
      N_50 = tmpvar_23;
      highp vec3 V_51;
      V_51 = V_2;
      mediump float rimLightDir_52;
      mediump vec3 lightDir_53;
      mediump float rim_54;
      mediump vec4 HRRimColor_55;
      mediump vec3 rgColor_56;
      mediump float tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = pow (clamp ((1.001 - 
        dot (V_51, N_50)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_57 = (_RGBias + (tmpvar_58 * _RGScale));
      mediump vec3 tmpvar_59;
      tmpvar_59 = (tmpvar_57 * _RGColor).xyz;
      rgColor_56 = tmpvar_59;
      HRRimColor_55 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_55 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_55 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_55 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_55 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - max (0.0, dot (V_51, N_50)));
      rim_54 = tmpvar_60;
      highp vec3 tmpvar_61;
      tmpvar_61 = _WorldSpaceLightPos0.xyz;
      lightDir_53 = tmpvar_61;
      mediump vec3 tmpvar_62;
      tmpvar_62 = normalize(lightDir_53);
      highp float tmpvar_63;
      tmpvar_63 = dot (N_50, tmpvar_62);
      rimLightDir_52 = tmpvar_63;
      rim_54 = (rim_54 * (0.5 + rimLightDir_52));
      highp int tmpvar_64;
      if ((rim_54 > HRRimColor_55.w)) {
        tmpvar_64 = 1;
      } else {
        tmpvar_64 = 0;
      };
      rim_54 = float(tmpvar_64);
      mediump vec3 tmpvar_65;
      tmpvar_65 = (outColor_4.xyz + max ((
        (HRRimColor_55.xyz * rim_54)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_56 = (outColor_4.xyz + max (tmpvar_59, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_66;
      tmpvar_66 = mix (rgColor_56, tmpvar_65, vec3(float(_HRRimIntensity)));
      rgColor_56 = tmpvar_66;
      outColor_4.xyz = rgColor_56;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_67;
    scrpos_67 = xlv_TEXCOORD3;
    mediump float a_68;
    a_68 = xlv_TEXCOORD3.z;
    if ((a_68 < 0.95)) {
      scrpos_67.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_68 = (a_68 * 17.0);
      highp float tmpvar_69;
      tmpvar_69 = (scrpos_67.y / 4.0);
      highp float tmpvar_70;
      tmpvar_70 = (fract(abs(tmpvar_69)) * 4.0);
      highp float tmpvar_71;
      if ((tmpvar_69 >= 0.0)) {
        tmpvar_71 = tmpvar_70;
      } else {
        tmpvar_71 = -(tmpvar_70);
      };
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_67.x / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float x_75;
      x_75 = ((a_68 - _DITHERMATRIX[
        int(tmpvar_71)
      ][
        int(tmpvar_74)
      ]) - 0.01);
      if ((x_75 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if ((_RGBlendType == 1)) {
    highp vec3 N_31;
    N_31 = tmpvar_23;
    highp vec3 V_32;
    V_32 = V_2;
    mediump float rimLightDir_33;
    mediump vec3 lightDir_34;
    mediump float rim_35;
    mediump vec4 HRRimColor_36;
    mediump vec3 rgColor_37;
    mediump float tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow (clamp ((1.001 - 
      dot (V_32, N_31)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_38 = (_RGBias + (tmpvar_39 * _RGScale));
    mediump vec3 tmpvar_40;
    tmpvar_40 = (tmpvar_38 * _RGColor).xyz;
    rgColor_37 = tmpvar_40;
    HRRimColor_36 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_36 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_36 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_36 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_36 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_41;
    tmpvar_41 = (1.0 - max (0.0, dot (V_32, N_31)));
    rim_35 = tmpvar_41;
    highp vec3 tmpvar_42;
    tmpvar_42 = _WorldSpaceLightPos0.xyz;
    lightDir_34 = tmpvar_42;
    mediump vec3 tmpvar_43;
    tmpvar_43 = normalize(lightDir_34);
    highp float tmpvar_44;
    tmpvar_44 = dot (N_31, tmpvar_43);
    rimLightDir_33 = tmpvar_44;
    rim_35 = (rim_35 * (0.5 + rimLightDir_33));
    highp int tmpvar_45;
    if ((rim_35 > HRRimColor_36.w)) {
      tmpvar_45 = 1;
    } else {
      tmpvar_45 = 0;
    };
    rim_35 = float(tmpvar_45);
    mediump vec3 tmpvar_46;
    tmpvar_46 = (outColor_4.xyz + ((HRRimColor_36.xyz * rim_35) * _HRRimPower));
    mediump float tmpvar_47;
    tmpvar_47 = clamp (tmpvar_38, 0.0, 1.0);
    highp vec3 tmpvar_48;
    tmpvar_48 = mix (outColor_4.xyz, tmpvar_40, vec3((tmpvar_47 * _RGRatio)));
    rgColor_37 = tmpvar_48;
    highp vec3 tmpvar_49;
    tmpvar_49 = mix (rgColor_37, tmpvar_46, vec3(float(_HRRimIntensity)));
    rgColor_37 = tmpvar_49;
    outColor_4.xyz = rgColor_37;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_50;
      N_50 = tmpvar_23;
      highp vec3 V_51;
      V_51 = V_2;
      mediump float rimLightDir_52;
      mediump vec3 lightDir_53;
      mediump float rim_54;
      mediump vec4 HRRimColor_55;
      mediump vec3 rgColor_56;
      mediump float tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = pow (clamp ((1.001 - 
        dot (V_51, N_50)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_57 = (_RGBias + (tmpvar_58 * _RGScale));
      mediump vec3 tmpvar_59;
      tmpvar_59 = (tmpvar_57 * _RGColor).xyz;
      rgColor_56 = tmpvar_59;
      HRRimColor_55 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_55 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_55 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_55 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_55 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - max (0.0, dot (V_51, N_50)));
      rim_54 = tmpvar_60;
      highp vec3 tmpvar_61;
      tmpvar_61 = _WorldSpaceLightPos0.xyz;
      lightDir_53 = tmpvar_61;
      mediump vec3 tmpvar_62;
      tmpvar_62 = normalize(lightDir_53);
      highp float tmpvar_63;
      tmpvar_63 = dot (N_50, tmpvar_62);
      rimLightDir_52 = tmpvar_63;
      rim_54 = (rim_54 * (0.5 + rimLightDir_52));
      highp int tmpvar_64;
      if ((rim_54 > HRRimColor_55.w)) {
        tmpvar_64 = 1;
      } else {
        tmpvar_64 = 0;
      };
      rim_54 = float(tmpvar_64);
      mediump vec3 tmpvar_65;
      tmpvar_65 = (outColor_4.xyz + max ((
        (HRRimColor_55.xyz * rim_54)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_56 = (outColor_4.xyz + max (tmpvar_59, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_66;
      tmpvar_66 = mix (rgColor_56, tmpvar_65, vec3(float(_HRRimIntensity)));
      rgColor_56 = tmpvar_66;
      outColor_4.xyz = rgColor_56;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_67;
    scrpos_67 = xlv_TEXCOORD3;
    mediump float a_68;
    a_68 = xlv_TEXCOORD3.z;
    if ((a_68 < 0.95)) {
      scrpos_67.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_68 = (a_68 * 17.0);
      highp float tmpvar_69;
      tmpvar_69 = (scrpos_67.y / 4.0);
      highp float tmpvar_70;
      tmpvar_70 = (fract(abs(tmpvar_69)) * 4.0);
      highp float tmpvar_71;
      if ((tmpvar_69 >= 0.0)) {
        tmpvar_71 = tmpvar_70;
      } else {
        tmpvar_71 = -(tmpvar_70);
      };
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_67.x / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float x_75;
      x_75 = ((a_68 - _DITHERMATRIX[
        int(tmpvar_71)
      ][
        int(tmpvar_74)
      ]) - 0.01);
      if ((x_75 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if ((_RGBlendType == 1)) {
    highp vec3 N_31;
    N_31 = tmpvar_23;
    highp vec3 V_32;
    V_32 = V_2;
    mediump float rimLightDir_33;
    mediump vec3 lightDir_34;
    mediump float rim_35;
    mediump vec4 HRRimColor_36;
    mediump vec3 rgColor_37;
    mediump float tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow (clamp ((1.001 - 
      dot (V_32, N_31)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_38 = (_RGBias + (tmpvar_39 * _RGScale));
    mediump vec3 tmpvar_40;
    tmpvar_40 = (tmpvar_38 * _RGColor).xyz;
    rgColor_37 = tmpvar_40;
    HRRimColor_36 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_36 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_36 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_36 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_36 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_41;
    tmpvar_41 = (1.0 - max (0.0, dot (V_32, N_31)));
    rim_35 = tmpvar_41;
    highp vec3 tmpvar_42;
    tmpvar_42 = _WorldSpaceLightPos0.xyz;
    lightDir_34 = tmpvar_42;
    mediump vec3 tmpvar_43;
    tmpvar_43 = normalize(lightDir_34);
    highp float tmpvar_44;
    tmpvar_44 = dot (N_31, tmpvar_43);
    rimLightDir_33 = tmpvar_44;
    rim_35 = (rim_35 * (0.5 + rimLightDir_33));
    highp int tmpvar_45;
    if ((rim_35 > HRRimColor_36.w)) {
      tmpvar_45 = 1;
    } else {
      tmpvar_45 = 0;
    };
    rim_35 = float(tmpvar_45);
    mediump vec3 tmpvar_46;
    tmpvar_46 = (outColor_4.xyz + ((HRRimColor_36.xyz * rim_35) * _HRRimPower));
    mediump float tmpvar_47;
    tmpvar_47 = clamp (tmpvar_38, 0.0, 1.0);
    highp vec3 tmpvar_48;
    tmpvar_48 = mix (outColor_4.xyz, tmpvar_40, vec3((tmpvar_47 * _RGRatio)));
    rgColor_37 = tmpvar_48;
    highp vec3 tmpvar_49;
    tmpvar_49 = mix (rgColor_37, tmpvar_46, vec3(float(_HRRimIntensity)));
    rgColor_37 = tmpvar_49;
    outColor_4.xyz = rgColor_37;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_50;
      N_50 = tmpvar_23;
      highp vec3 V_51;
      V_51 = V_2;
      mediump float rimLightDir_52;
      mediump vec3 lightDir_53;
      mediump float rim_54;
      mediump vec4 HRRimColor_55;
      mediump vec3 rgColor_56;
      mediump float tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = pow (clamp ((1.001 - 
        dot (V_51, N_50)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_57 = (_RGBias + (tmpvar_58 * _RGScale));
      mediump vec3 tmpvar_59;
      tmpvar_59 = (tmpvar_57 * _RGColor).xyz;
      rgColor_56 = tmpvar_59;
      HRRimColor_55 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_55 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_55 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_55 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_55 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - max (0.0, dot (V_51, N_50)));
      rim_54 = tmpvar_60;
      highp vec3 tmpvar_61;
      tmpvar_61 = _WorldSpaceLightPos0.xyz;
      lightDir_53 = tmpvar_61;
      mediump vec3 tmpvar_62;
      tmpvar_62 = normalize(lightDir_53);
      highp float tmpvar_63;
      tmpvar_63 = dot (N_50, tmpvar_62);
      rimLightDir_52 = tmpvar_63;
      rim_54 = (rim_54 * (0.5 + rimLightDir_52));
      highp int tmpvar_64;
      if ((rim_54 > HRRimColor_55.w)) {
        tmpvar_64 = 1;
      } else {
        tmpvar_64 = 0;
      };
      rim_54 = float(tmpvar_64);
      mediump vec3 tmpvar_65;
      tmpvar_65 = (outColor_4.xyz + max ((
        (HRRimColor_55.xyz * rim_54)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_56 = (outColor_4.xyz + max (tmpvar_59, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_66;
      tmpvar_66 = mix (rgColor_56, tmpvar_65, vec3(float(_HRRimIntensity)));
      rgColor_56 = tmpvar_66;
      outColor_4.xyz = rgColor_56;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_67;
    scrpos_67 = xlv_TEXCOORD3;
    mediump float a_68;
    a_68 = xlv_TEXCOORD3.z;
    if ((a_68 < 0.95)) {
      scrpos_67.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_68 = (a_68 * 17.0);
      highp float tmpvar_69;
      tmpvar_69 = (scrpos_67.y / 4.0);
      highp float tmpvar_70;
      tmpvar_70 = (fract(abs(tmpvar_69)) * 4.0);
      highp float tmpvar_71;
      if ((tmpvar_69 >= 0.0)) {
        tmpvar_71 = tmpvar_70;
      } else {
        tmpvar_71 = -(tmpvar_70);
      };
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_67.x / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float x_75;
      x_75 = ((a_68 - _DITHERMATRIX[
        int(tmpvar_71)
      ][
        int(tmpvar_74)
      ]) - 0.01);
      if ((x_75 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_74;
    N_74 = tmpvar_66;
    highp vec3 V_75;
    V_75 = V_2;
    mediump float rimLightDir_76;
    mediump vec3 lightDir_77;
    mediump float rim_78;
    mediump vec4 HRRimColor_79;
    mediump vec3 rgColor_80;
    mediump float tmpvar_81;
    highp float tmpvar_82;
    tmpvar_82 = pow (clamp ((1.001 - 
      dot (V_75, N_74)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_81 = (_RGBias + (tmpvar_82 * _RGScale));
    mediump vec3 tmpvar_83;
    tmpvar_83 = (tmpvar_81 * _RGColor).xyz;
    rgColor_80 = tmpvar_83;
    HRRimColor_79 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_79 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_79 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_79 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_79 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_84;
    tmpvar_84 = (1.0 - max (0.0, dot (V_75, N_74)));
    rim_78 = tmpvar_84;
    highp vec3 tmpvar_85;
    tmpvar_85 = _WorldSpaceLightPos0.xyz;
    lightDir_77 = tmpvar_85;
    mediump vec3 tmpvar_86;
    tmpvar_86 = normalize(lightDir_77);
    highp float tmpvar_87;
    tmpvar_87 = dot (N_74, tmpvar_86);
    rimLightDir_76 = tmpvar_87;
    rim_78 = (rim_78 * (0.5 + rimLightDir_76));
    highp int tmpvar_88;
    if ((rim_78 > HRRimColor_79.w)) {
      tmpvar_88 = 1;
    } else {
      tmpvar_88 = 0;
    };
    rim_78 = float(tmpvar_88);
    mediump vec3 tmpvar_89;
    tmpvar_89 = (outColor_4.xyz + ((HRRimColor_79.xyz * rim_78) * _HRRimPower));
    mediump float tmpvar_90;
    tmpvar_90 = clamp (tmpvar_81, 0.0, 1.0);
    highp vec3 tmpvar_91;
    tmpvar_91 = mix (outColor_4.xyz, tmpvar_83, vec3((tmpvar_90 * _RGRatio)));
    rgColor_80 = tmpvar_91;
    highp vec3 tmpvar_92;
    tmpvar_92 = mix (rgColor_80, tmpvar_89, vec3(float(_HRRimIntensity)));
    rgColor_80 = tmpvar_92;
    outColor_4.xyz = rgColor_80;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_93;
      N_93 = tmpvar_66;
      highp vec3 V_94;
      V_94 = V_2;
      mediump float rimLightDir_95;
      mediump vec3 lightDir_96;
      mediump float rim_97;
      mediump vec4 HRRimColor_98;
      mediump vec3 rgColor_99;
      mediump float tmpvar_100;
      highp float tmpvar_101;
      tmpvar_101 = pow (clamp ((1.001 - 
        dot (V_94, N_93)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_100 = (_RGBias + (tmpvar_101 * _RGScale));
      mediump vec3 tmpvar_102;
      tmpvar_102 = (tmpvar_100 * _RGColor).xyz;
      rgColor_99 = tmpvar_102;
      HRRimColor_98 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_98 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_98 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_98 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_98 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_103;
      tmpvar_103 = (1.0 - max (0.0, dot (V_94, N_93)));
      rim_97 = tmpvar_103;
      highp vec3 tmpvar_104;
      tmpvar_104 = _WorldSpaceLightPos0.xyz;
      lightDir_96 = tmpvar_104;
      mediump vec3 tmpvar_105;
      tmpvar_105 = normalize(lightDir_96);
      highp float tmpvar_106;
      tmpvar_106 = dot (N_93, tmpvar_105);
      rimLightDir_95 = tmpvar_106;
      rim_97 = (rim_97 * (0.5 + rimLightDir_95));
      highp int tmpvar_107;
      if ((rim_97 > HRRimColor_98.w)) {
        tmpvar_107 = 1;
      } else {
        tmpvar_107 = 0;
      };
      rim_97 = float(tmpvar_107);
      mediump vec3 tmpvar_108;
      tmpvar_108 = (outColor_4.xyz + max ((
        (HRRimColor_98.xyz * rim_97)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_99 = (outColor_4.xyz + max (tmpvar_102, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_109;
      tmpvar_109 = mix (rgColor_99, tmpvar_108, vec3(float(_HRRimIntensity)));
      rgColor_99 = tmpvar_109;
      outColor_4.xyz = rgColor_99;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_110;
    scrpos_110 = xlv_TEXCOORD3;
    mediump float a_111;
    a_111 = xlv_TEXCOORD3.z;
    if ((a_111 < 0.95)) {
      scrpos_110.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_111 = (a_111 * 17.0);
      highp float tmpvar_112;
      tmpvar_112 = (scrpos_110.y / 4.0);
      highp float tmpvar_113;
      tmpvar_113 = (fract(abs(tmpvar_112)) * 4.0);
      highp float tmpvar_114;
      if ((tmpvar_112 >= 0.0)) {
        tmpvar_114 = tmpvar_113;
      } else {
        tmpvar_114 = -(tmpvar_113);
      };
      highp float tmpvar_115;
      tmpvar_115 = (scrpos_110.x / 4.0);
      highp float tmpvar_116;
      tmpvar_116 = (fract(abs(tmpvar_115)) * 4.0);
      highp float tmpvar_117;
      if ((tmpvar_115 >= 0.0)) {
        tmpvar_117 = tmpvar_116;
      } else {
        tmpvar_117 = -(tmpvar_116);
      };
      highp float x_118;
      x_118 = ((a_111 - _DITHERMATRIX[
        int(tmpvar_114)
      ][
        int(tmpvar_117)
      ]) - 0.01);
      if ((x_118 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_74;
    N_74 = tmpvar_66;
    highp vec3 V_75;
    V_75 = V_2;
    mediump float rimLightDir_76;
    mediump vec3 lightDir_77;
    mediump float rim_78;
    mediump vec4 HRRimColor_79;
    mediump vec3 rgColor_80;
    mediump float tmpvar_81;
    highp float tmpvar_82;
    tmpvar_82 = pow (clamp ((1.001 - 
      dot (V_75, N_74)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_81 = (_RGBias + (tmpvar_82 * _RGScale));
    mediump vec3 tmpvar_83;
    tmpvar_83 = (tmpvar_81 * _RGColor).xyz;
    rgColor_80 = tmpvar_83;
    HRRimColor_79 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_79 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_79 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_79 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_79 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_84;
    tmpvar_84 = (1.0 - max (0.0, dot (V_75, N_74)));
    rim_78 = tmpvar_84;
    highp vec3 tmpvar_85;
    tmpvar_85 = _WorldSpaceLightPos0.xyz;
    lightDir_77 = tmpvar_85;
    mediump vec3 tmpvar_86;
    tmpvar_86 = normalize(lightDir_77);
    highp float tmpvar_87;
    tmpvar_87 = dot (N_74, tmpvar_86);
    rimLightDir_76 = tmpvar_87;
    rim_78 = (rim_78 * (0.5 + rimLightDir_76));
    highp int tmpvar_88;
    if ((rim_78 > HRRimColor_79.w)) {
      tmpvar_88 = 1;
    } else {
      tmpvar_88 = 0;
    };
    rim_78 = float(tmpvar_88);
    mediump vec3 tmpvar_89;
    tmpvar_89 = (outColor_4.xyz + ((HRRimColor_79.xyz * rim_78) * _HRRimPower));
    mediump float tmpvar_90;
    tmpvar_90 = clamp (tmpvar_81, 0.0, 1.0);
    highp vec3 tmpvar_91;
    tmpvar_91 = mix (outColor_4.xyz, tmpvar_83, vec3((tmpvar_90 * _RGRatio)));
    rgColor_80 = tmpvar_91;
    highp vec3 tmpvar_92;
    tmpvar_92 = mix (rgColor_80, tmpvar_89, vec3(float(_HRRimIntensity)));
    rgColor_80 = tmpvar_92;
    outColor_4.xyz = rgColor_80;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_93;
      N_93 = tmpvar_66;
      highp vec3 V_94;
      V_94 = V_2;
      mediump float rimLightDir_95;
      mediump vec3 lightDir_96;
      mediump float rim_97;
      mediump vec4 HRRimColor_98;
      mediump vec3 rgColor_99;
      mediump float tmpvar_100;
      highp float tmpvar_101;
      tmpvar_101 = pow (clamp ((1.001 - 
        dot (V_94, N_93)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_100 = (_RGBias + (tmpvar_101 * _RGScale));
      mediump vec3 tmpvar_102;
      tmpvar_102 = (tmpvar_100 * _RGColor).xyz;
      rgColor_99 = tmpvar_102;
      HRRimColor_98 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_98 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_98 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_98 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_98 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_103;
      tmpvar_103 = (1.0 - max (0.0, dot (V_94, N_93)));
      rim_97 = tmpvar_103;
      highp vec3 tmpvar_104;
      tmpvar_104 = _WorldSpaceLightPos0.xyz;
      lightDir_96 = tmpvar_104;
      mediump vec3 tmpvar_105;
      tmpvar_105 = normalize(lightDir_96);
      highp float tmpvar_106;
      tmpvar_106 = dot (N_93, tmpvar_105);
      rimLightDir_95 = tmpvar_106;
      rim_97 = (rim_97 * (0.5 + rimLightDir_95));
      highp int tmpvar_107;
      if ((rim_97 > HRRimColor_98.w)) {
        tmpvar_107 = 1;
      } else {
        tmpvar_107 = 0;
      };
      rim_97 = float(tmpvar_107);
      mediump vec3 tmpvar_108;
      tmpvar_108 = (outColor_4.xyz + max ((
        (HRRimColor_98.xyz * rim_97)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_99 = (outColor_4.xyz + max (tmpvar_102, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_109;
      tmpvar_109 = mix (rgColor_99, tmpvar_108, vec3(float(_HRRimIntensity)));
      rgColor_99 = tmpvar_109;
      outColor_4.xyz = rgColor_99;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_110;
    scrpos_110 = xlv_TEXCOORD3;
    mediump float a_111;
    a_111 = xlv_TEXCOORD3.z;
    if ((a_111 < 0.95)) {
      scrpos_110.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_111 = (a_111 * 17.0);
      highp float tmpvar_112;
      tmpvar_112 = (scrpos_110.y / 4.0);
      highp float tmpvar_113;
      tmpvar_113 = (fract(abs(tmpvar_112)) * 4.0);
      highp float tmpvar_114;
      if ((tmpvar_112 >= 0.0)) {
        tmpvar_114 = tmpvar_113;
      } else {
        tmpvar_114 = -(tmpvar_113);
      };
      highp float tmpvar_115;
      tmpvar_115 = (scrpos_110.x / 4.0);
      highp float tmpvar_116;
      tmpvar_116 = (fract(abs(tmpvar_115)) * 4.0);
      highp float tmpvar_117;
      if ((tmpvar_115 >= 0.0)) {
        tmpvar_117 = tmpvar_116;
      } else {
        tmpvar_117 = -(tmpvar_116);
      };
      highp float x_118;
      x_118 = ((a_111 - _DITHERMATRIX[
        int(tmpvar_114)
      ][
        int(tmpvar_117)
      ]) - 0.01);
      if ((x_118 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_74;
    N_74 = tmpvar_66;
    highp vec3 V_75;
    V_75 = V_2;
    mediump float rimLightDir_76;
    mediump vec3 lightDir_77;
    mediump float rim_78;
    mediump vec4 HRRimColor_79;
    mediump vec3 rgColor_80;
    mediump float tmpvar_81;
    highp float tmpvar_82;
    tmpvar_82 = pow (clamp ((1.001 - 
      dot (V_75, N_74)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_81 = (_RGBias + (tmpvar_82 * _RGScale));
    mediump vec3 tmpvar_83;
    tmpvar_83 = (tmpvar_81 * _RGColor).xyz;
    rgColor_80 = tmpvar_83;
    HRRimColor_79 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_79 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_79 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_79 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_79 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_84;
    tmpvar_84 = (1.0 - max (0.0, dot (V_75, N_74)));
    rim_78 = tmpvar_84;
    highp vec3 tmpvar_85;
    tmpvar_85 = _WorldSpaceLightPos0.xyz;
    lightDir_77 = tmpvar_85;
    mediump vec3 tmpvar_86;
    tmpvar_86 = normalize(lightDir_77);
    highp float tmpvar_87;
    tmpvar_87 = dot (N_74, tmpvar_86);
    rimLightDir_76 = tmpvar_87;
    rim_78 = (rim_78 * (0.5 + rimLightDir_76));
    highp int tmpvar_88;
    if ((rim_78 > HRRimColor_79.w)) {
      tmpvar_88 = 1;
    } else {
      tmpvar_88 = 0;
    };
    rim_78 = float(tmpvar_88);
    mediump vec3 tmpvar_89;
    tmpvar_89 = (outColor_4.xyz + ((HRRimColor_79.xyz * rim_78) * _HRRimPower));
    mediump float tmpvar_90;
    tmpvar_90 = clamp (tmpvar_81, 0.0, 1.0);
    highp vec3 tmpvar_91;
    tmpvar_91 = mix (outColor_4.xyz, tmpvar_83, vec3((tmpvar_90 * _RGRatio)));
    rgColor_80 = tmpvar_91;
    highp vec3 tmpvar_92;
    tmpvar_92 = mix (rgColor_80, tmpvar_89, vec3(float(_HRRimIntensity)));
    rgColor_80 = tmpvar_92;
    outColor_4.xyz = rgColor_80;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_93;
      N_93 = tmpvar_66;
      highp vec3 V_94;
      V_94 = V_2;
      mediump float rimLightDir_95;
      mediump vec3 lightDir_96;
      mediump float rim_97;
      mediump vec4 HRRimColor_98;
      mediump vec3 rgColor_99;
      mediump float tmpvar_100;
      highp float tmpvar_101;
      tmpvar_101 = pow (clamp ((1.001 - 
        dot (V_94, N_93)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_100 = (_RGBias + (tmpvar_101 * _RGScale));
      mediump vec3 tmpvar_102;
      tmpvar_102 = (tmpvar_100 * _RGColor).xyz;
      rgColor_99 = tmpvar_102;
      HRRimColor_98 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_98 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_98 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_98 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_98 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_103;
      tmpvar_103 = (1.0 - max (0.0, dot (V_94, N_93)));
      rim_97 = tmpvar_103;
      highp vec3 tmpvar_104;
      tmpvar_104 = _WorldSpaceLightPos0.xyz;
      lightDir_96 = tmpvar_104;
      mediump vec3 tmpvar_105;
      tmpvar_105 = normalize(lightDir_96);
      highp float tmpvar_106;
      tmpvar_106 = dot (N_93, tmpvar_105);
      rimLightDir_95 = tmpvar_106;
      rim_97 = (rim_97 * (0.5 + rimLightDir_95));
      highp int tmpvar_107;
      if ((rim_97 > HRRimColor_98.w)) {
        tmpvar_107 = 1;
      } else {
        tmpvar_107 = 0;
      };
      rim_97 = float(tmpvar_107);
      mediump vec3 tmpvar_108;
      tmpvar_108 = (outColor_4.xyz + max ((
        (HRRimColor_98.xyz * rim_97)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_99 = (outColor_4.xyz + max (tmpvar_102, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_109;
      tmpvar_109 = mix (rgColor_99, tmpvar_108, vec3(float(_HRRimIntensity)));
      rgColor_99 = tmpvar_109;
      outColor_4.xyz = rgColor_99;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_110;
    scrpos_110 = xlv_TEXCOORD3;
    mediump float a_111;
    a_111 = xlv_TEXCOORD3.z;
    if ((a_111 < 0.95)) {
      scrpos_110.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_111 = (a_111 * 17.0);
      highp float tmpvar_112;
      tmpvar_112 = (scrpos_110.y / 4.0);
      highp float tmpvar_113;
      tmpvar_113 = (fract(abs(tmpvar_112)) * 4.0);
      highp float tmpvar_114;
      if ((tmpvar_112 >= 0.0)) {
        tmpvar_114 = tmpvar_113;
      } else {
        tmpvar_114 = -(tmpvar_113);
      };
      highp float tmpvar_115;
      tmpvar_115 = (scrpos_110.x / 4.0);
      highp float tmpvar_116;
      tmpvar_116 = (fract(abs(tmpvar_115)) * 4.0);
      highp float tmpvar_117;
      if ((tmpvar_115 >= 0.0)) {
        tmpvar_117 = tmpvar_116;
      } else {
        tmpvar_117 = -(tmpvar_116);
      };
      highp float x_118;
      x_118 = ((a_111 - _DITHERMATRIX[
        int(tmpvar_114)
      ][
        int(tmpvar_117)
      ]) - 0.01);
      if ((x_118 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_36;
    scrpos_36 = xlv_TEXCOORD3;
    mediump float a_37;
    a_37 = xlv_TEXCOORD3.z;
    if ((a_37 < 0.95)) {
      scrpos_36.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_37 = (a_37 * 17.0);
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_36.y / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float tmpvar_41;
      tmpvar_41 = (scrpos_36.x / 4.0);
      highp float tmpvar_42;
      tmpvar_42 = (fract(abs(tmpvar_41)) * 4.0);
      highp float tmpvar_43;
      if ((tmpvar_41 >= 0.0)) {
        tmpvar_43 = tmpvar_42;
      } else {
        tmpvar_43 = -(tmpvar_42);
      };
      highp float x_44;
      x_44 = ((a_37 - _DITHERMATRIX[
        int(tmpvar_40)
      ][
        int(tmpvar_43)
      ]) - 0.01);
      if ((x_44 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_36;
    scrpos_36 = xlv_TEXCOORD3;
    mediump float a_37;
    a_37 = xlv_TEXCOORD3.z;
    if ((a_37 < 0.95)) {
      scrpos_36.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_37 = (a_37 * 17.0);
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_36.y / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float tmpvar_41;
      tmpvar_41 = (scrpos_36.x / 4.0);
      highp float tmpvar_42;
      tmpvar_42 = (fract(abs(tmpvar_41)) * 4.0);
      highp float tmpvar_43;
      if ((tmpvar_41 >= 0.0)) {
        tmpvar_43 = tmpvar_42;
      } else {
        tmpvar_43 = -(tmpvar_42);
      };
      highp float x_44;
      x_44 = ((a_37 - _DITHERMATRIX[
        int(tmpvar_40)
      ][
        int(tmpvar_43)
      ]) - 0.01);
      if ((x_44 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_36;
    scrpos_36 = xlv_TEXCOORD3;
    mediump float a_37;
    a_37 = xlv_TEXCOORD3.z;
    if ((a_37 < 0.95)) {
      scrpos_36.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_37 = (a_37 * 17.0);
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_36.y / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float tmpvar_41;
      tmpvar_41 = (scrpos_36.x / 4.0);
      highp float tmpvar_42;
      tmpvar_42 = (fract(abs(tmpvar_41)) * 4.0);
      highp float tmpvar_43;
      if ((tmpvar_41 >= 0.0)) {
        tmpvar_43 = tmpvar_42;
      } else {
        tmpvar_43 = -(tmpvar_42);
      };
      highp float x_44;
      x_44 = ((a_37 - _DITHERMATRIX[
        int(tmpvar_40)
      ][
        int(tmpvar_43)
      ]) - 0.01);
      if ((x_44 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_36;
    scrpos_36 = xlv_TEXCOORD3;
    mediump float a_37;
    a_37 = xlv_TEXCOORD3.z;
    if ((a_37 < 0.95)) {
      scrpos_36.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_37 = (a_37 * 17.0);
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_36.y / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float tmpvar_41;
      tmpvar_41 = (scrpos_36.x / 4.0);
      highp float tmpvar_42;
      tmpvar_42 = (fract(abs(tmpvar_41)) * 4.0);
      highp float tmpvar_43;
      if ((tmpvar_41 >= 0.0)) {
        tmpvar_43 = tmpvar_42;
      } else {
        tmpvar_43 = -(tmpvar_42);
      };
      highp float x_44;
      x_44 = ((a_37 - _DITHERMATRIX[
        int(tmpvar_40)
      ][
        int(tmpvar_43)
      ]) - 0.01);
      if ((x_44 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_36;
    scrpos_36 = xlv_TEXCOORD3;
    mediump float a_37;
    a_37 = xlv_TEXCOORD3.z;
    if ((a_37 < 0.95)) {
      scrpos_36.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_37 = (a_37 * 17.0);
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_36.y / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float tmpvar_41;
      tmpvar_41 = (scrpos_36.x / 4.0);
      highp float tmpvar_42;
      tmpvar_42 = (fract(abs(tmpvar_41)) * 4.0);
      highp float tmpvar_43;
      if ((tmpvar_41 >= 0.0)) {
        tmpvar_43 = tmpvar_42;
      } else {
        tmpvar_43 = -(tmpvar_42);
      };
      highp float x_44;
      x_44 = ((a_37 - _DITHERMATRIX[
        int(tmpvar_40)
      ][
        int(tmpvar_43)
      ]) - 0.01);
      if ((x_44 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_36;
    scrpos_36 = xlv_TEXCOORD3;
    mediump float a_37;
    a_37 = xlv_TEXCOORD3.z;
    if ((a_37 < 0.95)) {
      scrpos_36.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_37 = (a_37 * 17.0);
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_36.y / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float tmpvar_41;
      tmpvar_41 = (scrpos_36.x / 4.0);
      highp float tmpvar_42;
      tmpvar_42 = (fract(abs(tmpvar_41)) * 4.0);
      highp float tmpvar_43;
      if ((tmpvar_41 >= 0.0)) {
        tmpvar_43 = tmpvar_42;
      } else {
        tmpvar_43 = -(tmpvar_42);
      };
      highp float x_44;
      x_44 = ((a_37 - _DITHERMATRIX[
        int(tmpvar_40)
      ][
        int(tmpvar_43)
      ]) - 0.01);
      if ((x_44 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_35 = tmpvar_36;
  spColor_35.w = (spColor_35.w * _SPOpaqueness);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * tmpvar_37.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (tmpvar_23, I_40)
   * tmpvar_23)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_44;
      tmpvar_44 = mix (spColor_35.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35.xyz = tmpvar_44;
    };
  };
  spColor_35.xyz = (spColor_35.xyz * _Color.xyz);
  highp vec4 tmpvar_45;
  tmpvar_45 = mix (outColor_4, spColor_35, vec4(xlat_mutable_SPIntensity));
  spColor_35 = tmpvar_45;
  outColor_4 = spColor_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_46;
    scrpos_46 = xlv_TEXCOORD3;
    mediump float a_47;
    a_47 = xlv_TEXCOORD3.z;
    if ((a_47 < 0.95)) {
      scrpos_46.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_47 = (a_47 * 17.0);
      highp float tmpvar_48;
      tmpvar_48 = (scrpos_46.y / 4.0);
      highp float tmpvar_49;
      tmpvar_49 = (fract(abs(tmpvar_48)) * 4.0);
      highp float tmpvar_50;
      if ((tmpvar_48 >= 0.0)) {
        tmpvar_50 = tmpvar_49;
      } else {
        tmpvar_50 = -(tmpvar_49);
      };
      highp float tmpvar_51;
      tmpvar_51 = (scrpos_46.x / 4.0);
      highp float tmpvar_52;
      tmpvar_52 = (fract(abs(tmpvar_51)) * 4.0);
      highp float tmpvar_53;
      if ((tmpvar_51 >= 0.0)) {
        tmpvar_53 = tmpvar_52;
      } else {
        tmpvar_53 = -(tmpvar_52);
      };
      highp float x_54;
      x_54 = ((a_47 - _DITHERMATRIX[
        int(tmpvar_50)
      ][
        int(tmpvar_53)
      ]) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_35.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_35 = tmpvar_36;
  spColor_35.w = (spColor_35.w * _SPOpaqueness);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * tmpvar_37.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (tmpvar_23, I_40)
   * tmpvar_23)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_44;
      tmpvar_44 = mix (spColor_35.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35.xyz = tmpvar_44;
    };
  };
  spColor_35.xyz = (spColor_35.xyz * _Color.xyz);
  highp vec4 tmpvar_45;
  tmpvar_45 = mix (outColor_4, spColor_35, vec4(xlat_mutable_SPIntensity));
  spColor_35 = tmpvar_45;
  outColor_4 = spColor_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_46;
    scrpos_46 = xlv_TEXCOORD3;
    mediump float a_47;
    a_47 = xlv_TEXCOORD3.z;
    if ((a_47 < 0.95)) {
      scrpos_46.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_47 = (a_47 * 17.0);
      highp float tmpvar_48;
      tmpvar_48 = (scrpos_46.y / 4.0);
      highp float tmpvar_49;
      tmpvar_49 = (fract(abs(tmpvar_48)) * 4.0);
      highp float tmpvar_50;
      if ((tmpvar_48 >= 0.0)) {
        tmpvar_50 = tmpvar_49;
      } else {
        tmpvar_50 = -(tmpvar_49);
      };
      highp float tmpvar_51;
      tmpvar_51 = (scrpos_46.x / 4.0);
      highp float tmpvar_52;
      tmpvar_52 = (fract(abs(tmpvar_51)) * 4.0);
      highp float tmpvar_53;
      if ((tmpvar_51 >= 0.0)) {
        tmpvar_53 = tmpvar_52;
      } else {
        tmpvar_53 = -(tmpvar_52);
      };
      highp float x_54;
      x_54 = ((a_47 - _DITHERMATRIX[
        int(tmpvar_50)
      ][
        int(tmpvar_53)
      ]) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_35.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_35 = tmpvar_36;
  spColor_35.w = (spColor_35.w * _SPOpaqueness);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * tmpvar_37.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (tmpvar_23, I_40)
   * tmpvar_23)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_44;
      tmpvar_44 = mix (spColor_35.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35.xyz = tmpvar_44;
    };
  };
  spColor_35.xyz = (spColor_35.xyz * _Color.xyz);
  highp vec4 tmpvar_45;
  tmpvar_45 = mix (outColor_4, spColor_35, vec4(xlat_mutable_SPIntensity));
  spColor_35 = tmpvar_45;
  outColor_4 = spColor_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_46;
    scrpos_46 = xlv_TEXCOORD3;
    mediump float a_47;
    a_47 = xlv_TEXCOORD3.z;
    if ((a_47 < 0.95)) {
      scrpos_46.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_47 = (a_47 * 17.0);
      highp float tmpvar_48;
      tmpvar_48 = (scrpos_46.y / 4.0);
      highp float tmpvar_49;
      tmpvar_49 = (fract(abs(tmpvar_48)) * 4.0);
      highp float tmpvar_50;
      if ((tmpvar_48 >= 0.0)) {
        tmpvar_50 = tmpvar_49;
      } else {
        tmpvar_50 = -(tmpvar_49);
      };
      highp float tmpvar_51;
      tmpvar_51 = (scrpos_46.x / 4.0);
      highp float tmpvar_52;
      tmpvar_52 = (fract(abs(tmpvar_51)) * 4.0);
      highp float tmpvar_53;
      if ((tmpvar_51 >= 0.0)) {
        tmpvar_53 = tmpvar_52;
      } else {
        tmpvar_53 = -(tmpvar_52);
      };
      highp float x_54;
      x_54 = ((a_47 - _DITHERMATRIX[
        int(tmpvar_50)
      ][
        int(tmpvar_53)
      ]) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_35.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_78 = tmpvar_79;
  spColor_78.w = (spColor_78.w * _SPOpaqueness);
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * tmpvar_80.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (tmpvar_66, I_83)
   * tmpvar_66)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_87;
      tmpvar_87 = mix (spColor_78.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78.xyz = tmpvar_87;
    };
  };
  spColor_78.xyz = (spColor_78.xyz * _Color.xyz);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (outColor_4, spColor_78, vec4(xlat_mutable_SPIntensity));
  spColor_78 = tmpvar_88;
  outColor_4 = spColor_78;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_89;
    scrpos_89 = xlv_TEXCOORD3;
    mediump float a_90;
    a_90 = xlv_TEXCOORD3.z;
    if ((a_90 < 0.95)) {
      scrpos_89.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_90 = (a_90 * 17.0);
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_89.y / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float tmpvar_94;
      tmpvar_94 = (scrpos_89.x / 4.0);
      highp float tmpvar_95;
      tmpvar_95 = (fract(abs(tmpvar_94)) * 4.0);
      highp float tmpvar_96;
      if ((tmpvar_94 >= 0.0)) {
        tmpvar_96 = tmpvar_95;
      } else {
        tmpvar_96 = -(tmpvar_95);
      };
      highp float x_97;
      x_97 = ((a_90 - _DITHERMATRIX[
        int(tmpvar_93)
      ][
        int(tmpvar_96)
      ]) - 0.01);
      if ((x_97 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_78.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_78 = tmpvar_79;
  spColor_78.w = (spColor_78.w * _SPOpaqueness);
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * tmpvar_80.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (tmpvar_66, I_83)
   * tmpvar_66)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_87;
      tmpvar_87 = mix (spColor_78.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78.xyz = tmpvar_87;
    };
  };
  spColor_78.xyz = (spColor_78.xyz * _Color.xyz);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (outColor_4, spColor_78, vec4(xlat_mutable_SPIntensity));
  spColor_78 = tmpvar_88;
  outColor_4 = spColor_78;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_89;
    scrpos_89 = xlv_TEXCOORD3;
    mediump float a_90;
    a_90 = xlv_TEXCOORD3.z;
    if ((a_90 < 0.95)) {
      scrpos_89.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_90 = (a_90 * 17.0);
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_89.y / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float tmpvar_94;
      tmpvar_94 = (scrpos_89.x / 4.0);
      highp float tmpvar_95;
      tmpvar_95 = (fract(abs(tmpvar_94)) * 4.0);
      highp float tmpvar_96;
      if ((tmpvar_94 >= 0.0)) {
        tmpvar_96 = tmpvar_95;
      } else {
        tmpvar_96 = -(tmpvar_95);
      };
      highp float x_97;
      x_97 = ((a_90 - _DITHERMATRIX[
        int(tmpvar_93)
      ][
        int(tmpvar_96)
      ]) - 0.01);
      if ((x_97 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_78.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_78 = tmpvar_79;
  spColor_78.w = (spColor_78.w * _SPOpaqueness);
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * tmpvar_80.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (tmpvar_66, I_83)
   * tmpvar_66)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_87;
      tmpvar_87 = mix (spColor_78.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78.xyz = tmpvar_87;
    };
  };
  spColor_78.xyz = (spColor_78.xyz * _Color.xyz);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (outColor_4, spColor_78, vec4(xlat_mutable_SPIntensity));
  spColor_78 = tmpvar_88;
  outColor_4 = spColor_78;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_89;
    scrpos_89 = xlv_TEXCOORD3;
    mediump float a_90;
    a_90 = xlv_TEXCOORD3.z;
    if ((a_90 < 0.95)) {
      scrpos_89.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_90 = (a_90 * 17.0);
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_89.y / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float tmpvar_94;
      tmpvar_94 = (scrpos_89.x / 4.0);
      highp float tmpvar_95;
      tmpvar_95 = (fract(abs(tmpvar_94)) * 4.0);
      highp float tmpvar_96;
      if ((tmpvar_94 >= 0.0)) {
        tmpvar_96 = tmpvar_95;
      } else {
        tmpvar_96 = -(tmpvar_95);
      };
      highp float x_97;
      x_97 = ((a_90 - _DITHERMATRIX[
        int(tmpvar_93)
      ][
        int(tmpvar_96)
      ]) - 0.01);
      if ((x_97 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_78.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if ((_RGBlendType == 1)) {
    highp vec3 N_36;
    N_36 = tmpvar_13;
    highp vec3 V_37;
    V_37 = V_2;
    mediump float rimLightDir_38;
    mediump vec3 lightDir_39;
    mediump float rim_40;
    mediump vec4 HRRimColor_41;
    mediump vec3 rgColor_42;
    mediump float tmpvar_43;
    highp float tmpvar_44;
    tmpvar_44 = pow (clamp ((1.001 - 
      dot (V_37, N_36)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_43 = (_RGBias + (tmpvar_44 * _RGScale));
    mediump vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_43 * _RGColor).xyz;
    rgColor_42 = tmpvar_45;
    HRRimColor_41 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_41 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_41 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_41 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_41 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_46;
    tmpvar_46 = (1.0 - max (0.0, dot (V_37, N_36)));
    rim_40 = tmpvar_46;
    highp vec3 tmpvar_47;
    tmpvar_47 = _WorldSpaceLightPos0.xyz;
    lightDir_39 = tmpvar_47;
    mediump vec3 tmpvar_48;
    tmpvar_48 = normalize(lightDir_39);
    highp float tmpvar_49;
    tmpvar_49 = dot (N_36, tmpvar_48);
    rimLightDir_38 = tmpvar_49;
    rim_40 = (rim_40 * (0.5 + rimLightDir_38));
    highp int tmpvar_50;
    if ((rim_40 > HRRimColor_41.w)) {
      tmpvar_50 = 1;
    } else {
      tmpvar_50 = 0;
    };
    rim_40 = float(tmpvar_50);
    mediump vec3 tmpvar_51;
    tmpvar_51 = (spColor_25.xyz + ((HRRimColor_41.xyz * rim_40) * _HRRimPower));
    mediump float tmpvar_52;
    tmpvar_52 = clamp (tmpvar_43, 0.0, 1.0);
    highp vec3 tmpvar_53;
    tmpvar_53 = mix (spColor_25.xyz, tmpvar_45, vec3((tmpvar_52 * _RGRatio)));
    rgColor_42 = tmpvar_53;
    highp vec3 tmpvar_54;
    tmpvar_54 = mix (rgColor_42, tmpvar_51, vec3(float(_HRRimIntensity)));
    rgColor_42 = tmpvar_54;
    outColor_5.xyz = rgColor_42;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_55;
      N_55 = tmpvar_13;
      highp vec3 V_56;
      V_56 = V_2;
      mediump float rimLightDir_57;
      mediump vec3 lightDir_58;
      mediump float rim_59;
      mediump vec4 HRRimColor_60;
      mediump vec3 rgColor_61;
      mediump float tmpvar_62;
      highp float tmpvar_63;
      tmpvar_63 = pow (clamp ((1.001 - 
        dot (V_56, N_55)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_62 = (_RGBias + (tmpvar_63 * _RGScale));
      mediump vec3 tmpvar_64;
      tmpvar_64 = (tmpvar_62 * _RGColor).xyz;
      rgColor_61 = tmpvar_64;
      HRRimColor_60 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_60 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_60 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_60 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_60 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - max (0.0, dot (V_56, N_55)));
      rim_59 = tmpvar_65;
      highp vec3 tmpvar_66;
      tmpvar_66 = _WorldSpaceLightPos0.xyz;
      lightDir_58 = tmpvar_66;
      mediump vec3 tmpvar_67;
      tmpvar_67 = normalize(lightDir_58);
      highp float tmpvar_68;
      tmpvar_68 = dot (N_55, tmpvar_67);
      rimLightDir_57 = tmpvar_68;
      rim_59 = (rim_59 * (0.5 + rimLightDir_57));
      highp int tmpvar_69;
      if ((rim_59 > HRRimColor_60.w)) {
        tmpvar_69 = 1;
      } else {
        tmpvar_69 = 0;
      };
      rim_59 = float(tmpvar_69);
      mediump vec3 tmpvar_70;
      tmpvar_70 = (outColor_5.xyz + max ((
        (HRRimColor_60.xyz * rim_59)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_61 = (outColor_5.xyz + max (tmpvar_64, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_71;
      tmpvar_71 = mix (rgColor_61, tmpvar_70, vec3(float(_HRRimIntensity)));
      rgColor_61 = tmpvar_71;
      outColor_5.xyz = rgColor_61;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_72;
    scrpos_72 = xlv_TEXCOORD3;
    mediump float a_73;
    a_73 = xlv_TEXCOORD3.z;
    if ((a_73 < 0.95)) {
      scrpos_72.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_73 = (a_73 * 17.0);
      highp float tmpvar_74;
      tmpvar_74 = (scrpos_72.y / 4.0);
      highp float tmpvar_75;
      tmpvar_75 = (fract(abs(tmpvar_74)) * 4.0);
      highp float tmpvar_76;
      if ((tmpvar_74 >= 0.0)) {
        tmpvar_76 = tmpvar_75;
      } else {
        tmpvar_76 = -(tmpvar_75);
      };
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_72.x / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float x_80;
      x_80 = ((a_73 - _DITHERMATRIX[
        int(tmpvar_76)
      ][
        int(tmpvar_79)
      ]) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if ((_RGBlendType == 1)) {
    highp vec3 N_36;
    N_36 = tmpvar_13;
    highp vec3 V_37;
    V_37 = V_2;
    mediump float rimLightDir_38;
    mediump vec3 lightDir_39;
    mediump float rim_40;
    mediump vec4 HRRimColor_41;
    mediump vec3 rgColor_42;
    mediump float tmpvar_43;
    highp float tmpvar_44;
    tmpvar_44 = pow (clamp ((1.001 - 
      dot (V_37, N_36)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_43 = (_RGBias + (tmpvar_44 * _RGScale));
    mediump vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_43 * _RGColor).xyz;
    rgColor_42 = tmpvar_45;
    HRRimColor_41 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_41 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_41 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_41 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_41 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_46;
    tmpvar_46 = (1.0 - max (0.0, dot (V_37, N_36)));
    rim_40 = tmpvar_46;
    highp vec3 tmpvar_47;
    tmpvar_47 = _WorldSpaceLightPos0.xyz;
    lightDir_39 = tmpvar_47;
    mediump vec3 tmpvar_48;
    tmpvar_48 = normalize(lightDir_39);
    highp float tmpvar_49;
    tmpvar_49 = dot (N_36, tmpvar_48);
    rimLightDir_38 = tmpvar_49;
    rim_40 = (rim_40 * (0.5 + rimLightDir_38));
    highp int tmpvar_50;
    if ((rim_40 > HRRimColor_41.w)) {
      tmpvar_50 = 1;
    } else {
      tmpvar_50 = 0;
    };
    rim_40 = float(tmpvar_50);
    mediump vec3 tmpvar_51;
    tmpvar_51 = (spColor_25.xyz + ((HRRimColor_41.xyz * rim_40) * _HRRimPower));
    mediump float tmpvar_52;
    tmpvar_52 = clamp (tmpvar_43, 0.0, 1.0);
    highp vec3 tmpvar_53;
    tmpvar_53 = mix (spColor_25.xyz, tmpvar_45, vec3((tmpvar_52 * _RGRatio)));
    rgColor_42 = tmpvar_53;
    highp vec3 tmpvar_54;
    tmpvar_54 = mix (rgColor_42, tmpvar_51, vec3(float(_HRRimIntensity)));
    rgColor_42 = tmpvar_54;
    outColor_5.xyz = rgColor_42;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_55;
      N_55 = tmpvar_13;
      highp vec3 V_56;
      V_56 = V_2;
      mediump float rimLightDir_57;
      mediump vec3 lightDir_58;
      mediump float rim_59;
      mediump vec4 HRRimColor_60;
      mediump vec3 rgColor_61;
      mediump float tmpvar_62;
      highp float tmpvar_63;
      tmpvar_63 = pow (clamp ((1.001 - 
        dot (V_56, N_55)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_62 = (_RGBias + (tmpvar_63 * _RGScale));
      mediump vec3 tmpvar_64;
      tmpvar_64 = (tmpvar_62 * _RGColor).xyz;
      rgColor_61 = tmpvar_64;
      HRRimColor_60 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_60 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_60 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_60 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_60 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - max (0.0, dot (V_56, N_55)));
      rim_59 = tmpvar_65;
      highp vec3 tmpvar_66;
      tmpvar_66 = _WorldSpaceLightPos0.xyz;
      lightDir_58 = tmpvar_66;
      mediump vec3 tmpvar_67;
      tmpvar_67 = normalize(lightDir_58);
      highp float tmpvar_68;
      tmpvar_68 = dot (N_55, tmpvar_67);
      rimLightDir_57 = tmpvar_68;
      rim_59 = (rim_59 * (0.5 + rimLightDir_57));
      highp int tmpvar_69;
      if ((rim_59 > HRRimColor_60.w)) {
        tmpvar_69 = 1;
      } else {
        tmpvar_69 = 0;
      };
      rim_59 = float(tmpvar_69);
      mediump vec3 tmpvar_70;
      tmpvar_70 = (outColor_5.xyz + max ((
        (HRRimColor_60.xyz * rim_59)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_61 = (outColor_5.xyz + max (tmpvar_64, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_71;
      tmpvar_71 = mix (rgColor_61, tmpvar_70, vec3(float(_HRRimIntensity)));
      rgColor_61 = tmpvar_71;
      outColor_5.xyz = rgColor_61;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_72;
    scrpos_72 = xlv_TEXCOORD3;
    mediump float a_73;
    a_73 = xlv_TEXCOORD3.z;
    if ((a_73 < 0.95)) {
      scrpos_72.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_73 = (a_73 * 17.0);
      highp float tmpvar_74;
      tmpvar_74 = (scrpos_72.y / 4.0);
      highp float tmpvar_75;
      tmpvar_75 = (fract(abs(tmpvar_74)) * 4.0);
      highp float tmpvar_76;
      if ((tmpvar_74 >= 0.0)) {
        tmpvar_76 = tmpvar_75;
      } else {
        tmpvar_76 = -(tmpvar_75);
      };
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_72.x / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float x_80;
      x_80 = ((a_73 - _DITHERMATRIX[
        int(tmpvar_76)
      ][
        int(tmpvar_79)
      ]) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if ((_RGBlendType == 1)) {
    highp vec3 N_36;
    N_36 = tmpvar_13;
    highp vec3 V_37;
    V_37 = V_2;
    mediump float rimLightDir_38;
    mediump vec3 lightDir_39;
    mediump float rim_40;
    mediump vec4 HRRimColor_41;
    mediump vec3 rgColor_42;
    mediump float tmpvar_43;
    highp float tmpvar_44;
    tmpvar_44 = pow (clamp ((1.001 - 
      dot (V_37, N_36)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_43 = (_RGBias + (tmpvar_44 * _RGScale));
    mediump vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_43 * _RGColor).xyz;
    rgColor_42 = tmpvar_45;
    HRRimColor_41 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_41 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_41 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_41 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_41 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_46;
    tmpvar_46 = (1.0 - max (0.0, dot (V_37, N_36)));
    rim_40 = tmpvar_46;
    highp vec3 tmpvar_47;
    tmpvar_47 = _WorldSpaceLightPos0.xyz;
    lightDir_39 = tmpvar_47;
    mediump vec3 tmpvar_48;
    tmpvar_48 = normalize(lightDir_39);
    highp float tmpvar_49;
    tmpvar_49 = dot (N_36, tmpvar_48);
    rimLightDir_38 = tmpvar_49;
    rim_40 = (rim_40 * (0.5 + rimLightDir_38));
    highp int tmpvar_50;
    if ((rim_40 > HRRimColor_41.w)) {
      tmpvar_50 = 1;
    } else {
      tmpvar_50 = 0;
    };
    rim_40 = float(tmpvar_50);
    mediump vec3 tmpvar_51;
    tmpvar_51 = (spColor_25.xyz + ((HRRimColor_41.xyz * rim_40) * _HRRimPower));
    mediump float tmpvar_52;
    tmpvar_52 = clamp (tmpvar_43, 0.0, 1.0);
    highp vec3 tmpvar_53;
    tmpvar_53 = mix (spColor_25.xyz, tmpvar_45, vec3((tmpvar_52 * _RGRatio)));
    rgColor_42 = tmpvar_53;
    highp vec3 tmpvar_54;
    tmpvar_54 = mix (rgColor_42, tmpvar_51, vec3(float(_HRRimIntensity)));
    rgColor_42 = tmpvar_54;
    outColor_5.xyz = rgColor_42;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_55;
      N_55 = tmpvar_13;
      highp vec3 V_56;
      V_56 = V_2;
      mediump float rimLightDir_57;
      mediump vec3 lightDir_58;
      mediump float rim_59;
      mediump vec4 HRRimColor_60;
      mediump vec3 rgColor_61;
      mediump float tmpvar_62;
      highp float tmpvar_63;
      tmpvar_63 = pow (clamp ((1.001 - 
        dot (V_56, N_55)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_62 = (_RGBias + (tmpvar_63 * _RGScale));
      mediump vec3 tmpvar_64;
      tmpvar_64 = (tmpvar_62 * _RGColor).xyz;
      rgColor_61 = tmpvar_64;
      HRRimColor_60 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_60 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_60 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_60 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_60 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - max (0.0, dot (V_56, N_55)));
      rim_59 = tmpvar_65;
      highp vec3 tmpvar_66;
      tmpvar_66 = _WorldSpaceLightPos0.xyz;
      lightDir_58 = tmpvar_66;
      mediump vec3 tmpvar_67;
      tmpvar_67 = normalize(lightDir_58);
      highp float tmpvar_68;
      tmpvar_68 = dot (N_55, tmpvar_67);
      rimLightDir_57 = tmpvar_68;
      rim_59 = (rim_59 * (0.5 + rimLightDir_57));
      highp int tmpvar_69;
      if ((rim_59 > HRRimColor_60.w)) {
        tmpvar_69 = 1;
      } else {
        tmpvar_69 = 0;
      };
      rim_59 = float(tmpvar_69);
      mediump vec3 tmpvar_70;
      tmpvar_70 = (outColor_5.xyz + max ((
        (HRRimColor_60.xyz * rim_59)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_61 = (outColor_5.xyz + max (tmpvar_64, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_71;
      tmpvar_71 = mix (rgColor_61, tmpvar_70, vec3(float(_HRRimIntensity)));
      rgColor_61 = tmpvar_71;
      outColor_5.xyz = rgColor_61;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_72;
    scrpos_72 = xlv_TEXCOORD3;
    mediump float a_73;
    a_73 = xlv_TEXCOORD3.z;
    if ((a_73 < 0.95)) {
      scrpos_72.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_73 = (a_73 * 17.0);
      highp float tmpvar_74;
      tmpvar_74 = (scrpos_72.y / 4.0);
      highp float tmpvar_75;
      tmpvar_75 = (fract(abs(tmpvar_74)) * 4.0);
      highp float tmpvar_76;
      if ((tmpvar_74 >= 0.0)) {
        tmpvar_76 = tmpvar_75;
      } else {
        tmpvar_76 = -(tmpvar_75);
      };
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_72.x / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float x_80;
      x_80 = ((a_73 - _DITHERMATRIX[
        int(tmpvar_76)
      ][
        int(tmpvar_79)
      ]) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if ((_RGBlendType == 1)) {
    highp vec3 N_36;
    N_36 = tmpvar_13;
    highp vec3 V_37;
    V_37 = V_2;
    mediump float rimLightDir_38;
    mediump vec3 lightDir_39;
    mediump float rim_40;
    mediump vec4 HRRimColor_41;
    mediump vec3 rgColor_42;
    mediump float tmpvar_43;
    highp float tmpvar_44;
    tmpvar_44 = pow (clamp ((1.001 - 
      dot (V_37, N_36)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_43 = (_RGBias + (tmpvar_44 * _RGScale));
    mediump vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_43 * _RGColor).xyz;
    rgColor_42 = tmpvar_45;
    HRRimColor_41 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_41 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_41 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_41 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_41 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_46;
    tmpvar_46 = (1.0 - max (0.0, dot (V_37, N_36)));
    rim_40 = tmpvar_46;
    highp vec3 tmpvar_47;
    tmpvar_47 = _WorldSpaceLightPos0.xyz;
    lightDir_39 = tmpvar_47;
    mediump vec3 tmpvar_48;
    tmpvar_48 = normalize(lightDir_39);
    highp float tmpvar_49;
    tmpvar_49 = dot (N_36, tmpvar_48);
    rimLightDir_38 = tmpvar_49;
    rim_40 = (rim_40 * (0.5 + rimLightDir_38));
    highp int tmpvar_50;
    if ((rim_40 > HRRimColor_41.w)) {
      tmpvar_50 = 1;
    } else {
      tmpvar_50 = 0;
    };
    rim_40 = float(tmpvar_50);
    mediump vec3 tmpvar_51;
    tmpvar_51 = (spColor_25.xyz + ((HRRimColor_41.xyz * rim_40) * _HRRimPower));
    mediump float tmpvar_52;
    tmpvar_52 = clamp (tmpvar_43, 0.0, 1.0);
    highp vec3 tmpvar_53;
    tmpvar_53 = mix (spColor_25.xyz, tmpvar_45, vec3((tmpvar_52 * _RGRatio)));
    rgColor_42 = tmpvar_53;
    highp vec3 tmpvar_54;
    tmpvar_54 = mix (rgColor_42, tmpvar_51, vec3(float(_HRRimIntensity)));
    rgColor_42 = tmpvar_54;
    outColor_5.xyz = rgColor_42;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_55;
      N_55 = tmpvar_13;
      highp vec3 V_56;
      V_56 = V_2;
      mediump float rimLightDir_57;
      mediump vec3 lightDir_58;
      mediump float rim_59;
      mediump vec4 HRRimColor_60;
      mediump vec3 rgColor_61;
      mediump float tmpvar_62;
      highp float tmpvar_63;
      tmpvar_63 = pow (clamp ((1.001 - 
        dot (V_56, N_55)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_62 = (_RGBias + (tmpvar_63 * _RGScale));
      mediump vec3 tmpvar_64;
      tmpvar_64 = (tmpvar_62 * _RGColor).xyz;
      rgColor_61 = tmpvar_64;
      HRRimColor_60 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_60 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_60 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_60 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_60 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - max (0.0, dot (V_56, N_55)));
      rim_59 = tmpvar_65;
      highp vec3 tmpvar_66;
      tmpvar_66 = _WorldSpaceLightPos0.xyz;
      lightDir_58 = tmpvar_66;
      mediump vec3 tmpvar_67;
      tmpvar_67 = normalize(lightDir_58);
      highp float tmpvar_68;
      tmpvar_68 = dot (N_55, tmpvar_67);
      rimLightDir_57 = tmpvar_68;
      rim_59 = (rim_59 * (0.5 + rimLightDir_57));
      highp int tmpvar_69;
      if ((rim_59 > HRRimColor_60.w)) {
        tmpvar_69 = 1;
      } else {
        tmpvar_69 = 0;
      };
      rim_59 = float(tmpvar_69);
      mediump vec3 tmpvar_70;
      tmpvar_70 = (outColor_5.xyz + max ((
        (HRRimColor_60.xyz * rim_59)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_61 = (outColor_5.xyz + max (tmpvar_64, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_71;
      tmpvar_71 = mix (rgColor_61, tmpvar_70, vec3(float(_HRRimIntensity)));
      rgColor_61 = tmpvar_71;
      outColor_5.xyz = rgColor_61;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_72;
    scrpos_72 = xlv_TEXCOORD3;
    mediump float a_73;
    a_73 = xlv_TEXCOORD3.z;
    if ((a_73 < 0.95)) {
      scrpos_72.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_73 = (a_73 * 17.0);
      highp float tmpvar_74;
      tmpvar_74 = (scrpos_72.y / 4.0);
      highp float tmpvar_75;
      tmpvar_75 = (fract(abs(tmpvar_74)) * 4.0);
      highp float tmpvar_76;
      if ((tmpvar_74 >= 0.0)) {
        tmpvar_76 = tmpvar_75;
      } else {
        tmpvar_76 = -(tmpvar_75);
      };
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_72.x / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float x_80;
      x_80 = ((a_73 - _DITHERMATRIX[
        int(tmpvar_76)
      ][
        int(tmpvar_79)
      ]) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if ((_RGBlendType == 1)) {
    highp vec3 N_36;
    N_36 = tmpvar_13;
    highp vec3 V_37;
    V_37 = V_2;
    mediump float rimLightDir_38;
    mediump vec3 lightDir_39;
    mediump float rim_40;
    mediump vec4 HRRimColor_41;
    mediump vec3 rgColor_42;
    mediump float tmpvar_43;
    highp float tmpvar_44;
    tmpvar_44 = pow (clamp ((1.001 - 
      dot (V_37, N_36)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_43 = (_RGBias + (tmpvar_44 * _RGScale));
    mediump vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_43 * _RGColor).xyz;
    rgColor_42 = tmpvar_45;
    HRRimColor_41 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_41 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_41 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_41 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_41 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_46;
    tmpvar_46 = (1.0 - max (0.0, dot (V_37, N_36)));
    rim_40 = tmpvar_46;
    highp vec3 tmpvar_47;
    tmpvar_47 = _WorldSpaceLightPos0.xyz;
    lightDir_39 = tmpvar_47;
    mediump vec3 tmpvar_48;
    tmpvar_48 = normalize(lightDir_39);
    highp float tmpvar_49;
    tmpvar_49 = dot (N_36, tmpvar_48);
    rimLightDir_38 = tmpvar_49;
    rim_40 = (rim_40 * (0.5 + rimLightDir_38));
    highp int tmpvar_50;
    if ((rim_40 > HRRimColor_41.w)) {
      tmpvar_50 = 1;
    } else {
      tmpvar_50 = 0;
    };
    rim_40 = float(tmpvar_50);
    mediump vec3 tmpvar_51;
    tmpvar_51 = (spColor_25.xyz + ((HRRimColor_41.xyz * rim_40) * _HRRimPower));
    mediump float tmpvar_52;
    tmpvar_52 = clamp (tmpvar_43, 0.0, 1.0);
    highp vec3 tmpvar_53;
    tmpvar_53 = mix (spColor_25.xyz, tmpvar_45, vec3((tmpvar_52 * _RGRatio)));
    rgColor_42 = tmpvar_53;
    highp vec3 tmpvar_54;
    tmpvar_54 = mix (rgColor_42, tmpvar_51, vec3(float(_HRRimIntensity)));
    rgColor_42 = tmpvar_54;
    outColor_5.xyz = rgColor_42;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_55;
      N_55 = tmpvar_13;
      highp vec3 V_56;
      V_56 = V_2;
      mediump float rimLightDir_57;
      mediump vec3 lightDir_58;
      mediump float rim_59;
      mediump vec4 HRRimColor_60;
      mediump vec3 rgColor_61;
      mediump float tmpvar_62;
      highp float tmpvar_63;
      tmpvar_63 = pow (clamp ((1.001 - 
        dot (V_56, N_55)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_62 = (_RGBias + (tmpvar_63 * _RGScale));
      mediump vec3 tmpvar_64;
      tmpvar_64 = (tmpvar_62 * _RGColor).xyz;
      rgColor_61 = tmpvar_64;
      HRRimColor_60 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_60 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_60 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_60 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_60 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - max (0.0, dot (V_56, N_55)));
      rim_59 = tmpvar_65;
      highp vec3 tmpvar_66;
      tmpvar_66 = _WorldSpaceLightPos0.xyz;
      lightDir_58 = tmpvar_66;
      mediump vec3 tmpvar_67;
      tmpvar_67 = normalize(lightDir_58);
      highp float tmpvar_68;
      tmpvar_68 = dot (N_55, tmpvar_67);
      rimLightDir_57 = tmpvar_68;
      rim_59 = (rim_59 * (0.5 + rimLightDir_57));
      highp int tmpvar_69;
      if ((rim_59 > HRRimColor_60.w)) {
        tmpvar_69 = 1;
      } else {
        tmpvar_69 = 0;
      };
      rim_59 = float(tmpvar_69);
      mediump vec3 tmpvar_70;
      tmpvar_70 = (outColor_5.xyz + max ((
        (HRRimColor_60.xyz * rim_59)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_61 = (outColor_5.xyz + max (tmpvar_64, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_71;
      tmpvar_71 = mix (rgColor_61, tmpvar_70, vec3(float(_HRRimIntensity)));
      rgColor_61 = tmpvar_71;
      outColor_5.xyz = rgColor_61;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_72;
    scrpos_72 = xlv_TEXCOORD3;
    mediump float a_73;
    a_73 = xlv_TEXCOORD3.z;
    if ((a_73 < 0.95)) {
      scrpos_72.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_73 = (a_73 * 17.0);
      highp float tmpvar_74;
      tmpvar_74 = (scrpos_72.y / 4.0);
      highp float tmpvar_75;
      tmpvar_75 = (fract(abs(tmpvar_74)) * 4.0);
      highp float tmpvar_76;
      if ((tmpvar_74 >= 0.0)) {
        tmpvar_76 = tmpvar_75;
      } else {
        tmpvar_76 = -(tmpvar_75);
      };
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_72.x / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float x_80;
      x_80 = ((a_73 - _DITHERMATRIX[
        int(tmpvar_76)
      ][
        int(tmpvar_79)
      ]) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if ((_RGBlendType == 1)) {
    highp vec3 N_36;
    N_36 = tmpvar_13;
    highp vec3 V_37;
    V_37 = V_2;
    mediump float rimLightDir_38;
    mediump vec3 lightDir_39;
    mediump float rim_40;
    mediump vec4 HRRimColor_41;
    mediump vec3 rgColor_42;
    mediump float tmpvar_43;
    highp float tmpvar_44;
    tmpvar_44 = pow (clamp ((1.001 - 
      dot (V_37, N_36)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_43 = (_RGBias + (tmpvar_44 * _RGScale));
    mediump vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_43 * _RGColor).xyz;
    rgColor_42 = tmpvar_45;
    HRRimColor_41 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_41 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_41 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_41 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_41 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_46;
    tmpvar_46 = (1.0 - max (0.0, dot (V_37, N_36)));
    rim_40 = tmpvar_46;
    highp vec3 tmpvar_47;
    tmpvar_47 = _WorldSpaceLightPos0.xyz;
    lightDir_39 = tmpvar_47;
    mediump vec3 tmpvar_48;
    tmpvar_48 = normalize(lightDir_39);
    highp float tmpvar_49;
    tmpvar_49 = dot (N_36, tmpvar_48);
    rimLightDir_38 = tmpvar_49;
    rim_40 = (rim_40 * (0.5 + rimLightDir_38));
    highp int tmpvar_50;
    if ((rim_40 > HRRimColor_41.w)) {
      tmpvar_50 = 1;
    } else {
      tmpvar_50 = 0;
    };
    rim_40 = float(tmpvar_50);
    mediump vec3 tmpvar_51;
    tmpvar_51 = (spColor_25.xyz + ((HRRimColor_41.xyz * rim_40) * _HRRimPower));
    mediump float tmpvar_52;
    tmpvar_52 = clamp (tmpvar_43, 0.0, 1.0);
    highp vec3 tmpvar_53;
    tmpvar_53 = mix (spColor_25.xyz, tmpvar_45, vec3((tmpvar_52 * _RGRatio)));
    rgColor_42 = tmpvar_53;
    highp vec3 tmpvar_54;
    tmpvar_54 = mix (rgColor_42, tmpvar_51, vec3(float(_HRRimIntensity)));
    rgColor_42 = tmpvar_54;
    outColor_5.xyz = rgColor_42;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_55;
      N_55 = tmpvar_13;
      highp vec3 V_56;
      V_56 = V_2;
      mediump float rimLightDir_57;
      mediump vec3 lightDir_58;
      mediump float rim_59;
      mediump vec4 HRRimColor_60;
      mediump vec3 rgColor_61;
      mediump float tmpvar_62;
      highp float tmpvar_63;
      tmpvar_63 = pow (clamp ((1.001 - 
        dot (V_56, N_55)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_62 = (_RGBias + (tmpvar_63 * _RGScale));
      mediump vec3 tmpvar_64;
      tmpvar_64 = (tmpvar_62 * _RGColor).xyz;
      rgColor_61 = tmpvar_64;
      HRRimColor_60 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_60 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_60 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_60 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_60 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - max (0.0, dot (V_56, N_55)));
      rim_59 = tmpvar_65;
      highp vec3 tmpvar_66;
      tmpvar_66 = _WorldSpaceLightPos0.xyz;
      lightDir_58 = tmpvar_66;
      mediump vec3 tmpvar_67;
      tmpvar_67 = normalize(lightDir_58);
      highp float tmpvar_68;
      tmpvar_68 = dot (N_55, tmpvar_67);
      rimLightDir_57 = tmpvar_68;
      rim_59 = (rim_59 * (0.5 + rimLightDir_57));
      highp int tmpvar_69;
      if ((rim_59 > HRRimColor_60.w)) {
        tmpvar_69 = 1;
      } else {
        tmpvar_69 = 0;
      };
      rim_59 = float(tmpvar_69);
      mediump vec3 tmpvar_70;
      tmpvar_70 = (outColor_5.xyz + max ((
        (HRRimColor_60.xyz * rim_59)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_61 = (outColor_5.xyz + max (tmpvar_64, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_71;
      tmpvar_71 = mix (rgColor_61, tmpvar_70, vec3(float(_HRRimIntensity)));
      rgColor_61 = tmpvar_71;
      outColor_5.xyz = rgColor_61;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_72;
    scrpos_72 = xlv_TEXCOORD3;
    mediump float a_73;
    a_73 = xlv_TEXCOORD3.z;
    if ((a_73 < 0.95)) {
      scrpos_72.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_73 = (a_73 * 17.0);
      highp float tmpvar_74;
      tmpvar_74 = (scrpos_72.y / 4.0);
      highp float tmpvar_75;
      tmpvar_75 = (fract(abs(tmpvar_74)) * 4.0);
      highp float tmpvar_76;
      if ((tmpvar_74 >= 0.0)) {
        tmpvar_76 = tmpvar_75;
      } else {
        tmpvar_76 = -(tmpvar_75);
      };
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_72.x / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float x_80;
      x_80 = ((a_73 - _DITHERMATRIX[
        int(tmpvar_76)
      ][
        int(tmpvar_79)
      ]) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_35 = tmpvar_36;
  spColor_35.w = (spColor_35.w * _SPOpaqueness);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * tmpvar_37.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (tmpvar_23, I_40)
   * tmpvar_23)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_44;
      tmpvar_44 = mix (spColor_35.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35.xyz = tmpvar_44;
    };
  };
  spColor_35.xyz = (spColor_35.xyz * _Color.xyz);
  highp vec4 tmpvar_45;
  tmpvar_45 = mix (outColor_4, spColor_35, vec4(xlat_mutable_SPIntensity));
  spColor_35 = tmpvar_45;
  outColor_4 = spColor_35;
  if ((_RGBlendType == 1)) {
    highp vec3 N_46;
    N_46 = tmpvar_23;
    highp vec3 V_47;
    V_47 = V_2;
    mediump float rimLightDir_48;
    mediump vec3 lightDir_49;
    mediump float rim_50;
    mediump vec4 HRRimColor_51;
    mediump vec3 rgColor_52;
    mediump float tmpvar_53;
    highp float tmpvar_54;
    tmpvar_54 = pow (clamp ((1.001 - 
      dot (V_47, N_46)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_53 = (_RGBias + (tmpvar_54 * _RGScale));
    mediump vec3 tmpvar_55;
    tmpvar_55 = (tmpvar_53 * _RGColor).xyz;
    rgColor_52 = tmpvar_55;
    HRRimColor_51 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_51 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_51 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_51 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_51 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_56;
    tmpvar_56 = (1.0 - max (0.0, dot (V_47, N_46)));
    rim_50 = tmpvar_56;
    highp vec3 tmpvar_57;
    tmpvar_57 = _WorldSpaceLightPos0.xyz;
    lightDir_49 = tmpvar_57;
    mediump vec3 tmpvar_58;
    tmpvar_58 = normalize(lightDir_49);
    highp float tmpvar_59;
    tmpvar_59 = dot (N_46, tmpvar_58);
    rimLightDir_48 = tmpvar_59;
    rim_50 = (rim_50 * (0.5 + rimLightDir_48));
    highp int tmpvar_60;
    if ((rim_50 > HRRimColor_51.w)) {
      tmpvar_60 = 1;
    } else {
      tmpvar_60 = 0;
    };
    rim_50 = float(tmpvar_60);
    mediump vec3 tmpvar_61;
    tmpvar_61 = (spColor_35.xyz + ((HRRimColor_51.xyz * rim_50) * _HRRimPower));
    mediump float tmpvar_62;
    tmpvar_62 = clamp (tmpvar_53, 0.0, 1.0);
    highp vec3 tmpvar_63;
    tmpvar_63 = mix (spColor_35.xyz, tmpvar_55, vec3((tmpvar_62 * _RGRatio)));
    rgColor_52 = tmpvar_63;
    highp vec3 tmpvar_64;
    tmpvar_64 = mix (rgColor_52, tmpvar_61, vec3(float(_HRRimIntensity)));
    rgColor_52 = tmpvar_64;
    outColor_4.xyz = rgColor_52;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_65;
      N_65 = tmpvar_23;
      highp vec3 V_66;
      V_66 = V_2;
      mediump float rimLightDir_67;
      mediump vec3 lightDir_68;
      mediump float rim_69;
      mediump vec4 HRRimColor_70;
      mediump vec3 rgColor_71;
      mediump float tmpvar_72;
      highp float tmpvar_73;
      tmpvar_73 = pow (clamp ((1.001 - 
        dot (V_66, N_65)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_72 = (_RGBias + (tmpvar_73 * _RGScale));
      mediump vec3 tmpvar_74;
      tmpvar_74 = (tmpvar_72 * _RGColor).xyz;
      rgColor_71 = tmpvar_74;
      HRRimColor_70 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_70 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_70 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_70 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_70 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_75;
      tmpvar_75 = (1.0 - max (0.0, dot (V_66, N_65)));
      rim_69 = tmpvar_75;
      highp vec3 tmpvar_76;
      tmpvar_76 = _WorldSpaceLightPos0.xyz;
      lightDir_68 = tmpvar_76;
      mediump vec3 tmpvar_77;
      tmpvar_77 = normalize(lightDir_68);
      highp float tmpvar_78;
      tmpvar_78 = dot (N_65, tmpvar_77);
      rimLightDir_67 = tmpvar_78;
      rim_69 = (rim_69 * (0.5 + rimLightDir_67));
      highp int tmpvar_79;
      if ((rim_69 > HRRimColor_70.w)) {
        tmpvar_79 = 1;
      } else {
        tmpvar_79 = 0;
      };
      rim_69 = float(tmpvar_79);
      mediump vec3 tmpvar_80;
      tmpvar_80 = (outColor_4.xyz + max ((
        (HRRimColor_70.xyz * rim_69)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_71 = (outColor_4.xyz + max (tmpvar_74, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_81;
      tmpvar_81 = mix (rgColor_71, tmpvar_80, vec3(float(_HRRimIntensity)));
      rgColor_71 = tmpvar_81;
      outColor_4.xyz = rgColor_71;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_82;
    scrpos_82 = xlv_TEXCOORD3;
    mediump float a_83;
    a_83 = xlv_TEXCOORD3.z;
    if ((a_83 < 0.95)) {
      scrpos_82.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_83 = (a_83 * 17.0);
      highp float tmpvar_84;
      tmpvar_84 = (scrpos_82.y / 4.0);
      highp float tmpvar_85;
      tmpvar_85 = (fract(abs(tmpvar_84)) * 4.0);
      highp float tmpvar_86;
      if ((tmpvar_84 >= 0.0)) {
        tmpvar_86 = tmpvar_85;
      } else {
        tmpvar_86 = -(tmpvar_85);
      };
      highp float tmpvar_87;
      tmpvar_87 = (scrpos_82.x / 4.0);
      highp float tmpvar_88;
      tmpvar_88 = (fract(abs(tmpvar_87)) * 4.0);
      highp float tmpvar_89;
      if ((tmpvar_87 >= 0.0)) {
        tmpvar_89 = tmpvar_88;
      } else {
        tmpvar_89 = -(tmpvar_88);
      };
      highp float x_90;
      x_90 = ((a_83 - _DITHERMATRIX[
        int(tmpvar_86)
      ][
        int(tmpvar_89)
      ]) - 0.01);
      if ((x_90 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_35.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_35 = tmpvar_36;
  spColor_35.w = (spColor_35.w * _SPOpaqueness);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * tmpvar_37.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (tmpvar_23, I_40)
   * tmpvar_23)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_44;
      tmpvar_44 = mix (spColor_35.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35.xyz = tmpvar_44;
    };
  };
  spColor_35.xyz = (spColor_35.xyz * _Color.xyz);
  highp vec4 tmpvar_45;
  tmpvar_45 = mix (outColor_4, spColor_35, vec4(xlat_mutable_SPIntensity));
  spColor_35 = tmpvar_45;
  outColor_4 = spColor_35;
  if ((_RGBlendType == 1)) {
    highp vec3 N_46;
    N_46 = tmpvar_23;
    highp vec3 V_47;
    V_47 = V_2;
    mediump float rimLightDir_48;
    mediump vec3 lightDir_49;
    mediump float rim_50;
    mediump vec4 HRRimColor_51;
    mediump vec3 rgColor_52;
    mediump float tmpvar_53;
    highp float tmpvar_54;
    tmpvar_54 = pow (clamp ((1.001 - 
      dot (V_47, N_46)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_53 = (_RGBias + (tmpvar_54 * _RGScale));
    mediump vec3 tmpvar_55;
    tmpvar_55 = (tmpvar_53 * _RGColor).xyz;
    rgColor_52 = tmpvar_55;
    HRRimColor_51 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_51 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_51 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_51 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_51 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_56;
    tmpvar_56 = (1.0 - max (0.0, dot (V_47, N_46)));
    rim_50 = tmpvar_56;
    highp vec3 tmpvar_57;
    tmpvar_57 = _WorldSpaceLightPos0.xyz;
    lightDir_49 = tmpvar_57;
    mediump vec3 tmpvar_58;
    tmpvar_58 = normalize(lightDir_49);
    highp float tmpvar_59;
    tmpvar_59 = dot (N_46, tmpvar_58);
    rimLightDir_48 = tmpvar_59;
    rim_50 = (rim_50 * (0.5 + rimLightDir_48));
    highp int tmpvar_60;
    if ((rim_50 > HRRimColor_51.w)) {
      tmpvar_60 = 1;
    } else {
      tmpvar_60 = 0;
    };
    rim_50 = float(tmpvar_60);
    mediump vec3 tmpvar_61;
    tmpvar_61 = (spColor_35.xyz + ((HRRimColor_51.xyz * rim_50) * _HRRimPower));
    mediump float tmpvar_62;
    tmpvar_62 = clamp (tmpvar_53, 0.0, 1.0);
    highp vec3 tmpvar_63;
    tmpvar_63 = mix (spColor_35.xyz, tmpvar_55, vec3((tmpvar_62 * _RGRatio)));
    rgColor_52 = tmpvar_63;
    highp vec3 tmpvar_64;
    tmpvar_64 = mix (rgColor_52, tmpvar_61, vec3(float(_HRRimIntensity)));
    rgColor_52 = tmpvar_64;
    outColor_4.xyz = rgColor_52;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_65;
      N_65 = tmpvar_23;
      highp vec3 V_66;
      V_66 = V_2;
      mediump float rimLightDir_67;
      mediump vec3 lightDir_68;
      mediump float rim_69;
      mediump vec4 HRRimColor_70;
      mediump vec3 rgColor_71;
      mediump float tmpvar_72;
      highp float tmpvar_73;
      tmpvar_73 = pow (clamp ((1.001 - 
        dot (V_66, N_65)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_72 = (_RGBias + (tmpvar_73 * _RGScale));
      mediump vec3 tmpvar_74;
      tmpvar_74 = (tmpvar_72 * _RGColor).xyz;
      rgColor_71 = tmpvar_74;
      HRRimColor_70 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_70 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_70 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_70 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_70 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_75;
      tmpvar_75 = (1.0 - max (0.0, dot (V_66, N_65)));
      rim_69 = tmpvar_75;
      highp vec3 tmpvar_76;
      tmpvar_76 = _WorldSpaceLightPos0.xyz;
      lightDir_68 = tmpvar_76;
      mediump vec3 tmpvar_77;
      tmpvar_77 = normalize(lightDir_68);
      highp float tmpvar_78;
      tmpvar_78 = dot (N_65, tmpvar_77);
      rimLightDir_67 = tmpvar_78;
      rim_69 = (rim_69 * (0.5 + rimLightDir_67));
      highp int tmpvar_79;
      if ((rim_69 > HRRimColor_70.w)) {
        tmpvar_79 = 1;
      } else {
        tmpvar_79 = 0;
      };
      rim_69 = float(tmpvar_79);
      mediump vec3 tmpvar_80;
      tmpvar_80 = (outColor_4.xyz + max ((
        (HRRimColor_70.xyz * rim_69)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_71 = (outColor_4.xyz + max (tmpvar_74, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_81;
      tmpvar_81 = mix (rgColor_71, tmpvar_80, vec3(float(_HRRimIntensity)));
      rgColor_71 = tmpvar_81;
      outColor_4.xyz = rgColor_71;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_82;
    scrpos_82 = xlv_TEXCOORD3;
    mediump float a_83;
    a_83 = xlv_TEXCOORD3.z;
    if ((a_83 < 0.95)) {
      scrpos_82.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_83 = (a_83 * 17.0);
      highp float tmpvar_84;
      tmpvar_84 = (scrpos_82.y / 4.0);
      highp float tmpvar_85;
      tmpvar_85 = (fract(abs(tmpvar_84)) * 4.0);
      highp float tmpvar_86;
      if ((tmpvar_84 >= 0.0)) {
        tmpvar_86 = tmpvar_85;
      } else {
        tmpvar_86 = -(tmpvar_85);
      };
      highp float tmpvar_87;
      tmpvar_87 = (scrpos_82.x / 4.0);
      highp float tmpvar_88;
      tmpvar_88 = (fract(abs(tmpvar_87)) * 4.0);
      highp float tmpvar_89;
      if ((tmpvar_87 >= 0.0)) {
        tmpvar_89 = tmpvar_88;
      } else {
        tmpvar_89 = -(tmpvar_88);
      };
      highp float x_90;
      x_90 = ((a_83 - _DITHERMATRIX[
        int(tmpvar_86)
      ][
        int(tmpvar_89)
      ]) - 0.01);
      if ((x_90 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_35.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_35 = tmpvar_36;
  spColor_35.w = (spColor_35.w * _SPOpaqueness);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * tmpvar_37.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (tmpvar_23, I_40)
   * tmpvar_23)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_44;
      tmpvar_44 = mix (spColor_35.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35.xyz = tmpvar_44;
    };
  };
  spColor_35.xyz = (spColor_35.xyz * _Color.xyz);
  highp vec4 tmpvar_45;
  tmpvar_45 = mix (outColor_4, spColor_35, vec4(xlat_mutable_SPIntensity));
  spColor_35 = tmpvar_45;
  outColor_4 = spColor_35;
  if ((_RGBlendType == 1)) {
    highp vec3 N_46;
    N_46 = tmpvar_23;
    highp vec3 V_47;
    V_47 = V_2;
    mediump float rimLightDir_48;
    mediump vec3 lightDir_49;
    mediump float rim_50;
    mediump vec4 HRRimColor_51;
    mediump vec3 rgColor_52;
    mediump float tmpvar_53;
    highp float tmpvar_54;
    tmpvar_54 = pow (clamp ((1.001 - 
      dot (V_47, N_46)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_53 = (_RGBias + (tmpvar_54 * _RGScale));
    mediump vec3 tmpvar_55;
    tmpvar_55 = (tmpvar_53 * _RGColor).xyz;
    rgColor_52 = tmpvar_55;
    HRRimColor_51 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_51 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_51 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_51 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_51 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_56;
    tmpvar_56 = (1.0 - max (0.0, dot (V_47, N_46)));
    rim_50 = tmpvar_56;
    highp vec3 tmpvar_57;
    tmpvar_57 = _WorldSpaceLightPos0.xyz;
    lightDir_49 = tmpvar_57;
    mediump vec3 tmpvar_58;
    tmpvar_58 = normalize(lightDir_49);
    highp float tmpvar_59;
    tmpvar_59 = dot (N_46, tmpvar_58);
    rimLightDir_48 = tmpvar_59;
    rim_50 = (rim_50 * (0.5 + rimLightDir_48));
    highp int tmpvar_60;
    if ((rim_50 > HRRimColor_51.w)) {
      tmpvar_60 = 1;
    } else {
      tmpvar_60 = 0;
    };
    rim_50 = float(tmpvar_60);
    mediump vec3 tmpvar_61;
    tmpvar_61 = (spColor_35.xyz + ((HRRimColor_51.xyz * rim_50) * _HRRimPower));
    mediump float tmpvar_62;
    tmpvar_62 = clamp (tmpvar_53, 0.0, 1.0);
    highp vec3 tmpvar_63;
    tmpvar_63 = mix (spColor_35.xyz, tmpvar_55, vec3((tmpvar_62 * _RGRatio)));
    rgColor_52 = tmpvar_63;
    highp vec3 tmpvar_64;
    tmpvar_64 = mix (rgColor_52, tmpvar_61, vec3(float(_HRRimIntensity)));
    rgColor_52 = tmpvar_64;
    outColor_4.xyz = rgColor_52;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_65;
      N_65 = tmpvar_23;
      highp vec3 V_66;
      V_66 = V_2;
      mediump float rimLightDir_67;
      mediump vec3 lightDir_68;
      mediump float rim_69;
      mediump vec4 HRRimColor_70;
      mediump vec3 rgColor_71;
      mediump float tmpvar_72;
      highp float tmpvar_73;
      tmpvar_73 = pow (clamp ((1.001 - 
        dot (V_66, N_65)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_72 = (_RGBias + (tmpvar_73 * _RGScale));
      mediump vec3 tmpvar_74;
      tmpvar_74 = (tmpvar_72 * _RGColor).xyz;
      rgColor_71 = tmpvar_74;
      HRRimColor_70 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_70 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_70 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_70 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_70 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_75;
      tmpvar_75 = (1.0 - max (0.0, dot (V_66, N_65)));
      rim_69 = tmpvar_75;
      highp vec3 tmpvar_76;
      tmpvar_76 = _WorldSpaceLightPos0.xyz;
      lightDir_68 = tmpvar_76;
      mediump vec3 tmpvar_77;
      tmpvar_77 = normalize(lightDir_68);
      highp float tmpvar_78;
      tmpvar_78 = dot (N_65, tmpvar_77);
      rimLightDir_67 = tmpvar_78;
      rim_69 = (rim_69 * (0.5 + rimLightDir_67));
      highp int tmpvar_79;
      if ((rim_69 > HRRimColor_70.w)) {
        tmpvar_79 = 1;
      } else {
        tmpvar_79 = 0;
      };
      rim_69 = float(tmpvar_79);
      mediump vec3 tmpvar_80;
      tmpvar_80 = (outColor_4.xyz + max ((
        (HRRimColor_70.xyz * rim_69)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_71 = (outColor_4.xyz + max (tmpvar_74, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_81;
      tmpvar_81 = mix (rgColor_71, tmpvar_80, vec3(float(_HRRimIntensity)));
      rgColor_71 = tmpvar_81;
      outColor_4.xyz = rgColor_71;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_82;
    scrpos_82 = xlv_TEXCOORD3;
    mediump float a_83;
    a_83 = xlv_TEXCOORD3.z;
    if ((a_83 < 0.95)) {
      scrpos_82.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_83 = (a_83 * 17.0);
      highp float tmpvar_84;
      tmpvar_84 = (scrpos_82.y / 4.0);
      highp float tmpvar_85;
      tmpvar_85 = (fract(abs(tmpvar_84)) * 4.0);
      highp float tmpvar_86;
      if ((tmpvar_84 >= 0.0)) {
        tmpvar_86 = tmpvar_85;
      } else {
        tmpvar_86 = -(tmpvar_85);
      };
      highp float tmpvar_87;
      tmpvar_87 = (scrpos_82.x / 4.0);
      highp float tmpvar_88;
      tmpvar_88 = (fract(abs(tmpvar_87)) * 4.0);
      highp float tmpvar_89;
      if ((tmpvar_87 >= 0.0)) {
        tmpvar_89 = tmpvar_88;
      } else {
        tmpvar_89 = -(tmpvar_88);
      };
      highp float x_90;
      x_90 = ((a_83 - _DITHERMATRIX[
        int(tmpvar_86)
      ][
        int(tmpvar_89)
      ]) - 0.01);
      if ((x_90 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_35.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_78 = tmpvar_79;
  spColor_78.w = (spColor_78.w * _SPOpaqueness);
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * tmpvar_80.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (tmpvar_66, I_83)
   * tmpvar_66)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_87;
      tmpvar_87 = mix (spColor_78.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78.xyz = tmpvar_87;
    };
  };
  spColor_78.xyz = (spColor_78.xyz * _Color.xyz);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (outColor_4, spColor_78, vec4(xlat_mutable_SPIntensity));
  spColor_78 = tmpvar_88;
  outColor_4 = spColor_78;
  if ((_RGBlendType == 1)) {
    highp vec3 N_89;
    N_89 = tmpvar_66;
    highp vec3 V_90;
    V_90 = V_2;
    mediump float rimLightDir_91;
    mediump vec3 lightDir_92;
    mediump float rim_93;
    mediump vec4 HRRimColor_94;
    mediump vec3 rgColor_95;
    mediump float tmpvar_96;
    highp float tmpvar_97;
    tmpvar_97 = pow (clamp ((1.001 - 
      dot (V_90, N_89)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_96 = (_RGBias + (tmpvar_97 * _RGScale));
    mediump vec3 tmpvar_98;
    tmpvar_98 = (tmpvar_96 * _RGColor).xyz;
    rgColor_95 = tmpvar_98;
    HRRimColor_94 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_94 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_94 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_94 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_94 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_99;
    tmpvar_99 = (1.0 - max (0.0, dot (V_90, N_89)));
    rim_93 = tmpvar_99;
    highp vec3 tmpvar_100;
    tmpvar_100 = _WorldSpaceLightPos0.xyz;
    lightDir_92 = tmpvar_100;
    mediump vec3 tmpvar_101;
    tmpvar_101 = normalize(lightDir_92);
    highp float tmpvar_102;
    tmpvar_102 = dot (N_89, tmpvar_101);
    rimLightDir_91 = tmpvar_102;
    rim_93 = (rim_93 * (0.5 + rimLightDir_91));
    highp int tmpvar_103;
    if ((rim_93 > HRRimColor_94.w)) {
      tmpvar_103 = 1;
    } else {
      tmpvar_103 = 0;
    };
    rim_93 = float(tmpvar_103);
    mediump vec3 tmpvar_104;
    tmpvar_104 = (spColor_78.xyz + ((HRRimColor_94.xyz * rim_93) * _HRRimPower));
    mediump float tmpvar_105;
    tmpvar_105 = clamp (tmpvar_96, 0.0, 1.0);
    highp vec3 tmpvar_106;
    tmpvar_106 = mix (spColor_78.xyz, tmpvar_98, vec3((tmpvar_105 * _RGRatio)));
    rgColor_95 = tmpvar_106;
    highp vec3 tmpvar_107;
    tmpvar_107 = mix (rgColor_95, tmpvar_104, vec3(float(_HRRimIntensity)));
    rgColor_95 = tmpvar_107;
    outColor_4.xyz = rgColor_95;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_108;
      N_108 = tmpvar_66;
      highp vec3 V_109;
      V_109 = V_2;
      mediump float rimLightDir_110;
      mediump vec3 lightDir_111;
      mediump float rim_112;
      mediump vec4 HRRimColor_113;
      mediump vec3 rgColor_114;
      mediump float tmpvar_115;
      highp float tmpvar_116;
      tmpvar_116 = pow (clamp ((1.001 - 
        dot (V_109, N_108)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_115 = (_RGBias + (tmpvar_116 * _RGScale));
      mediump vec3 tmpvar_117;
      tmpvar_117 = (tmpvar_115 * _RGColor).xyz;
      rgColor_114 = tmpvar_117;
      HRRimColor_113 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_113 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_113 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_113 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_113 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_118;
      tmpvar_118 = (1.0 - max (0.0, dot (V_109, N_108)));
      rim_112 = tmpvar_118;
      highp vec3 tmpvar_119;
      tmpvar_119 = _WorldSpaceLightPos0.xyz;
      lightDir_111 = tmpvar_119;
      mediump vec3 tmpvar_120;
      tmpvar_120 = normalize(lightDir_111);
      highp float tmpvar_121;
      tmpvar_121 = dot (N_108, tmpvar_120);
      rimLightDir_110 = tmpvar_121;
      rim_112 = (rim_112 * (0.5 + rimLightDir_110));
      highp int tmpvar_122;
      if ((rim_112 > HRRimColor_113.w)) {
        tmpvar_122 = 1;
      } else {
        tmpvar_122 = 0;
      };
      rim_112 = float(tmpvar_122);
      mediump vec3 tmpvar_123;
      tmpvar_123 = (outColor_4.xyz + max ((
        (HRRimColor_113.xyz * rim_112)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_114 = (outColor_4.xyz + max (tmpvar_117, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_124;
      tmpvar_124 = mix (rgColor_114, tmpvar_123, vec3(float(_HRRimIntensity)));
      rgColor_114 = tmpvar_124;
      outColor_4.xyz = rgColor_114;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_125;
    scrpos_125 = xlv_TEXCOORD3;
    mediump float a_126;
    a_126 = xlv_TEXCOORD3.z;
    if ((a_126 < 0.95)) {
      scrpos_125.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_126 = (a_126 * 17.0);
      highp float tmpvar_127;
      tmpvar_127 = (scrpos_125.y / 4.0);
      highp float tmpvar_128;
      tmpvar_128 = (fract(abs(tmpvar_127)) * 4.0);
      highp float tmpvar_129;
      if ((tmpvar_127 >= 0.0)) {
        tmpvar_129 = tmpvar_128;
      } else {
        tmpvar_129 = -(tmpvar_128);
      };
      highp float tmpvar_130;
      tmpvar_130 = (scrpos_125.x / 4.0);
      highp float tmpvar_131;
      tmpvar_131 = (fract(abs(tmpvar_130)) * 4.0);
      highp float tmpvar_132;
      if ((tmpvar_130 >= 0.0)) {
        tmpvar_132 = tmpvar_131;
      } else {
        tmpvar_132 = -(tmpvar_131);
      };
      highp float x_133;
      x_133 = ((a_126 - _DITHERMATRIX[
        int(tmpvar_129)
      ][
        int(tmpvar_132)
      ]) - 0.01);
      if ((x_133 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_78.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_78 = tmpvar_79;
  spColor_78.w = (spColor_78.w * _SPOpaqueness);
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * tmpvar_80.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (tmpvar_66, I_83)
   * tmpvar_66)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_87;
      tmpvar_87 = mix (spColor_78.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78.xyz = tmpvar_87;
    };
  };
  spColor_78.xyz = (spColor_78.xyz * _Color.xyz);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (outColor_4, spColor_78, vec4(xlat_mutable_SPIntensity));
  spColor_78 = tmpvar_88;
  outColor_4 = spColor_78;
  if ((_RGBlendType == 1)) {
    highp vec3 N_89;
    N_89 = tmpvar_66;
    highp vec3 V_90;
    V_90 = V_2;
    mediump float rimLightDir_91;
    mediump vec3 lightDir_92;
    mediump float rim_93;
    mediump vec4 HRRimColor_94;
    mediump vec3 rgColor_95;
    mediump float tmpvar_96;
    highp float tmpvar_97;
    tmpvar_97 = pow (clamp ((1.001 - 
      dot (V_90, N_89)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_96 = (_RGBias + (tmpvar_97 * _RGScale));
    mediump vec3 tmpvar_98;
    tmpvar_98 = (tmpvar_96 * _RGColor).xyz;
    rgColor_95 = tmpvar_98;
    HRRimColor_94 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_94 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_94 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_94 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_94 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_99;
    tmpvar_99 = (1.0 - max (0.0, dot (V_90, N_89)));
    rim_93 = tmpvar_99;
    highp vec3 tmpvar_100;
    tmpvar_100 = _WorldSpaceLightPos0.xyz;
    lightDir_92 = tmpvar_100;
    mediump vec3 tmpvar_101;
    tmpvar_101 = normalize(lightDir_92);
    highp float tmpvar_102;
    tmpvar_102 = dot (N_89, tmpvar_101);
    rimLightDir_91 = tmpvar_102;
    rim_93 = (rim_93 * (0.5 + rimLightDir_91));
    highp int tmpvar_103;
    if ((rim_93 > HRRimColor_94.w)) {
      tmpvar_103 = 1;
    } else {
      tmpvar_103 = 0;
    };
    rim_93 = float(tmpvar_103);
    mediump vec3 tmpvar_104;
    tmpvar_104 = (spColor_78.xyz + ((HRRimColor_94.xyz * rim_93) * _HRRimPower));
    mediump float tmpvar_105;
    tmpvar_105 = clamp (tmpvar_96, 0.0, 1.0);
    highp vec3 tmpvar_106;
    tmpvar_106 = mix (spColor_78.xyz, tmpvar_98, vec3((tmpvar_105 * _RGRatio)));
    rgColor_95 = tmpvar_106;
    highp vec3 tmpvar_107;
    tmpvar_107 = mix (rgColor_95, tmpvar_104, vec3(float(_HRRimIntensity)));
    rgColor_95 = tmpvar_107;
    outColor_4.xyz = rgColor_95;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_108;
      N_108 = tmpvar_66;
      highp vec3 V_109;
      V_109 = V_2;
      mediump float rimLightDir_110;
      mediump vec3 lightDir_111;
      mediump float rim_112;
      mediump vec4 HRRimColor_113;
      mediump vec3 rgColor_114;
      mediump float tmpvar_115;
      highp float tmpvar_116;
      tmpvar_116 = pow (clamp ((1.001 - 
        dot (V_109, N_108)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_115 = (_RGBias + (tmpvar_116 * _RGScale));
      mediump vec3 tmpvar_117;
      tmpvar_117 = (tmpvar_115 * _RGColor).xyz;
      rgColor_114 = tmpvar_117;
      HRRimColor_113 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_113 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_113 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_113 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_113 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_118;
      tmpvar_118 = (1.0 - max (0.0, dot (V_109, N_108)));
      rim_112 = tmpvar_118;
      highp vec3 tmpvar_119;
      tmpvar_119 = _WorldSpaceLightPos0.xyz;
      lightDir_111 = tmpvar_119;
      mediump vec3 tmpvar_120;
      tmpvar_120 = normalize(lightDir_111);
      highp float tmpvar_121;
      tmpvar_121 = dot (N_108, tmpvar_120);
      rimLightDir_110 = tmpvar_121;
      rim_112 = (rim_112 * (0.5 + rimLightDir_110));
      highp int tmpvar_122;
      if ((rim_112 > HRRimColor_113.w)) {
        tmpvar_122 = 1;
      } else {
        tmpvar_122 = 0;
      };
      rim_112 = float(tmpvar_122);
      mediump vec3 tmpvar_123;
      tmpvar_123 = (outColor_4.xyz + max ((
        (HRRimColor_113.xyz * rim_112)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_114 = (outColor_4.xyz + max (tmpvar_117, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_124;
      tmpvar_124 = mix (rgColor_114, tmpvar_123, vec3(float(_HRRimIntensity)));
      rgColor_114 = tmpvar_124;
      outColor_4.xyz = rgColor_114;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_125;
    scrpos_125 = xlv_TEXCOORD3;
    mediump float a_126;
    a_126 = xlv_TEXCOORD3.z;
    if ((a_126 < 0.95)) {
      scrpos_125.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_126 = (a_126 * 17.0);
      highp float tmpvar_127;
      tmpvar_127 = (scrpos_125.y / 4.0);
      highp float tmpvar_128;
      tmpvar_128 = (fract(abs(tmpvar_127)) * 4.0);
      highp float tmpvar_129;
      if ((tmpvar_127 >= 0.0)) {
        tmpvar_129 = tmpvar_128;
      } else {
        tmpvar_129 = -(tmpvar_128);
      };
      highp float tmpvar_130;
      tmpvar_130 = (scrpos_125.x / 4.0);
      highp float tmpvar_131;
      tmpvar_131 = (fract(abs(tmpvar_130)) * 4.0);
      highp float tmpvar_132;
      if ((tmpvar_130 >= 0.0)) {
        tmpvar_132 = tmpvar_131;
      } else {
        tmpvar_132 = -(tmpvar_131);
      };
      highp float x_133;
      x_133 = ((a_126 - _DITHERMATRIX[
        int(tmpvar_129)
      ][
        int(tmpvar_132)
      ]) - 0.01);
      if ((x_133 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_78.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_78 = tmpvar_79;
  spColor_78.w = (spColor_78.w * _SPOpaqueness);
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * tmpvar_80.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (tmpvar_66, I_83)
   * tmpvar_66)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_87;
      tmpvar_87 = mix (spColor_78.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78.xyz = tmpvar_87;
    };
  };
  spColor_78.xyz = (spColor_78.xyz * _Color.xyz);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (outColor_4, spColor_78, vec4(xlat_mutable_SPIntensity));
  spColor_78 = tmpvar_88;
  outColor_4 = spColor_78;
  if ((_RGBlendType == 1)) {
    highp vec3 N_89;
    N_89 = tmpvar_66;
    highp vec3 V_90;
    V_90 = V_2;
    mediump float rimLightDir_91;
    mediump vec3 lightDir_92;
    mediump float rim_93;
    mediump vec4 HRRimColor_94;
    mediump vec3 rgColor_95;
    mediump float tmpvar_96;
    highp float tmpvar_97;
    tmpvar_97 = pow (clamp ((1.001 - 
      dot (V_90, N_89)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_96 = (_RGBias + (tmpvar_97 * _RGScale));
    mediump vec3 tmpvar_98;
    tmpvar_98 = (tmpvar_96 * _RGColor).xyz;
    rgColor_95 = tmpvar_98;
    HRRimColor_94 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_94 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_94 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_94 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_94 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_99;
    tmpvar_99 = (1.0 - max (0.0, dot (V_90, N_89)));
    rim_93 = tmpvar_99;
    highp vec3 tmpvar_100;
    tmpvar_100 = _WorldSpaceLightPos0.xyz;
    lightDir_92 = tmpvar_100;
    mediump vec3 tmpvar_101;
    tmpvar_101 = normalize(lightDir_92);
    highp float tmpvar_102;
    tmpvar_102 = dot (N_89, tmpvar_101);
    rimLightDir_91 = tmpvar_102;
    rim_93 = (rim_93 * (0.5 + rimLightDir_91));
    highp int tmpvar_103;
    if ((rim_93 > HRRimColor_94.w)) {
      tmpvar_103 = 1;
    } else {
      tmpvar_103 = 0;
    };
    rim_93 = float(tmpvar_103);
    mediump vec3 tmpvar_104;
    tmpvar_104 = (spColor_78.xyz + ((HRRimColor_94.xyz * rim_93) * _HRRimPower));
    mediump float tmpvar_105;
    tmpvar_105 = clamp (tmpvar_96, 0.0, 1.0);
    highp vec3 tmpvar_106;
    tmpvar_106 = mix (spColor_78.xyz, tmpvar_98, vec3((tmpvar_105 * _RGRatio)));
    rgColor_95 = tmpvar_106;
    highp vec3 tmpvar_107;
    tmpvar_107 = mix (rgColor_95, tmpvar_104, vec3(float(_HRRimIntensity)));
    rgColor_95 = tmpvar_107;
    outColor_4.xyz = rgColor_95;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_108;
      N_108 = tmpvar_66;
      highp vec3 V_109;
      V_109 = V_2;
      mediump float rimLightDir_110;
      mediump vec3 lightDir_111;
      mediump float rim_112;
      mediump vec4 HRRimColor_113;
      mediump vec3 rgColor_114;
      mediump float tmpvar_115;
      highp float tmpvar_116;
      tmpvar_116 = pow (clamp ((1.001 - 
        dot (V_109, N_108)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_115 = (_RGBias + (tmpvar_116 * _RGScale));
      mediump vec3 tmpvar_117;
      tmpvar_117 = (tmpvar_115 * _RGColor).xyz;
      rgColor_114 = tmpvar_117;
      HRRimColor_113 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_113 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_113 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_113 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_113 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_118;
      tmpvar_118 = (1.0 - max (0.0, dot (V_109, N_108)));
      rim_112 = tmpvar_118;
      highp vec3 tmpvar_119;
      tmpvar_119 = _WorldSpaceLightPos0.xyz;
      lightDir_111 = tmpvar_119;
      mediump vec3 tmpvar_120;
      tmpvar_120 = normalize(lightDir_111);
      highp float tmpvar_121;
      tmpvar_121 = dot (N_108, tmpvar_120);
      rimLightDir_110 = tmpvar_121;
      rim_112 = (rim_112 * (0.5 + rimLightDir_110));
      highp int tmpvar_122;
      if ((rim_112 > HRRimColor_113.w)) {
        tmpvar_122 = 1;
      } else {
        tmpvar_122 = 0;
      };
      rim_112 = float(tmpvar_122);
      mediump vec3 tmpvar_123;
      tmpvar_123 = (outColor_4.xyz + max ((
        (HRRimColor_113.xyz * rim_112)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_114 = (outColor_4.xyz + max (tmpvar_117, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_124;
      tmpvar_124 = mix (rgColor_114, tmpvar_123, vec3(float(_HRRimIntensity)));
      rgColor_114 = tmpvar_124;
      outColor_4.xyz = rgColor_114;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_125;
    scrpos_125 = xlv_TEXCOORD3;
    mediump float a_126;
    a_126 = xlv_TEXCOORD3.z;
    if ((a_126 < 0.95)) {
      scrpos_125.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_126 = (a_126 * 17.0);
      highp float tmpvar_127;
      tmpvar_127 = (scrpos_125.y / 4.0);
      highp float tmpvar_128;
      tmpvar_128 = (fract(abs(tmpvar_127)) * 4.0);
      highp float tmpvar_129;
      if ((tmpvar_127 >= 0.0)) {
        tmpvar_129 = tmpvar_128;
      } else {
        tmpvar_129 = -(tmpvar_128);
      };
      highp float tmpvar_130;
      tmpvar_130 = (scrpos_125.x / 4.0);
      highp float tmpvar_131;
      tmpvar_131 = (fract(abs(tmpvar_130)) * 4.0);
      highp float tmpvar_132;
      if ((tmpvar_130 >= 0.0)) {
        tmpvar_132 = tmpvar_131;
      } else {
        tmpvar_132 = -(tmpvar_131);
      };
      highp float x_133;
      x_133 = ((a_126 - _DITHERMATRIX[
        int(tmpvar_129)
      ][
        int(tmpvar_132)
      ]) - 0.01);
      if ((x_133 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_78.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_21;
    scrpos_21 = xlv_TEXCOORD3;
    mediump float a_22;
    a_22 = xlv_TEXCOORD3.z;
    if ((a_22 < 0.95)) {
      scrpos_21.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_22 = (a_22 * 17.0);
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_21.y / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float tmpvar_26;
      tmpvar_26 = (scrpos_21.x / 4.0);
      highp float tmpvar_27;
      tmpvar_27 = (fract(abs(tmpvar_26)) * 4.0);
      highp float tmpvar_28;
      if ((tmpvar_26 >= 0.0)) {
        tmpvar_28 = tmpvar_27;
      } else {
        tmpvar_28 = -(tmpvar_27);
      };
      highp float x_29;
      x_29 = ((a_22 - _DITHERMATRIX[
        int(tmpvar_25)
      ][
        int(tmpvar_28)
      ]) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_21;
    scrpos_21 = xlv_TEXCOORD3;
    mediump float a_22;
    a_22 = xlv_TEXCOORD3.z;
    if ((a_22 < 0.95)) {
      scrpos_21.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_22 = (a_22 * 17.0);
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_21.y / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float tmpvar_26;
      tmpvar_26 = (scrpos_21.x / 4.0);
      highp float tmpvar_27;
      tmpvar_27 = (fract(abs(tmpvar_26)) * 4.0);
      highp float tmpvar_28;
      if ((tmpvar_26 >= 0.0)) {
        tmpvar_28 = tmpvar_27;
      } else {
        tmpvar_28 = -(tmpvar_27);
      };
      highp float x_29;
      x_29 = ((a_22 - _DITHERMATRIX[
        int(tmpvar_25)
      ][
        int(tmpvar_28)
      ]) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_21;
    scrpos_21 = xlv_TEXCOORD3;
    mediump float a_22;
    a_22 = xlv_TEXCOORD3.z;
    if ((a_22 < 0.95)) {
      scrpos_21.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_22 = (a_22 * 17.0);
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_21.y / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float tmpvar_26;
      tmpvar_26 = (scrpos_21.x / 4.0);
      highp float tmpvar_27;
      tmpvar_27 = (fract(abs(tmpvar_26)) * 4.0);
      highp float tmpvar_28;
      if ((tmpvar_26 >= 0.0)) {
        tmpvar_28 = tmpvar_27;
      } else {
        tmpvar_28 = -(tmpvar_27);
      };
      highp float x_29;
      x_29 = ((a_22 - _DITHERMATRIX[
        int(tmpvar_25)
      ][
        int(tmpvar_28)
      ]) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_21;
    scrpos_21 = xlv_TEXCOORD3;
    mediump float a_22;
    a_22 = xlv_TEXCOORD3.z;
    if ((a_22 < 0.95)) {
      scrpos_21.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_22 = (a_22 * 17.0);
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_21.y / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float tmpvar_26;
      tmpvar_26 = (scrpos_21.x / 4.0);
      highp float tmpvar_27;
      tmpvar_27 = (fract(abs(tmpvar_26)) * 4.0);
      highp float tmpvar_28;
      if ((tmpvar_26 >= 0.0)) {
        tmpvar_28 = tmpvar_27;
      } else {
        tmpvar_28 = -(tmpvar_27);
      };
      highp float x_29;
      x_29 = ((a_22 - _DITHERMATRIX[
        int(tmpvar_25)
      ][
        int(tmpvar_28)
      ]) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_21;
    scrpos_21 = xlv_TEXCOORD3;
    mediump float a_22;
    a_22 = xlv_TEXCOORD3.z;
    if ((a_22 < 0.95)) {
      scrpos_21.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_22 = (a_22 * 17.0);
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_21.y / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float tmpvar_26;
      tmpvar_26 = (scrpos_21.x / 4.0);
      highp float tmpvar_27;
      tmpvar_27 = (fract(abs(tmpvar_26)) * 4.0);
      highp float tmpvar_28;
      if ((tmpvar_26 >= 0.0)) {
        tmpvar_28 = tmpvar_27;
      } else {
        tmpvar_28 = -(tmpvar_27);
      };
      highp float x_29;
      x_29 = ((a_22 - _DITHERMATRIX[
        int(tmpvar_25)
      ][
        int(tmpvar_28)
      ]) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_21;
    scrpos_21 = xlv_TEXCOORD3;
    mediump float a_22;
    a_22 = xlv_TEXCOORD3.z;
    if ((a_22 < 0.95)) {
      scrpos_21.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_22 = (a_22 * 17.0);
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_21.y / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float tmpvar_26;
      tmpvar_26 = (scrpos_21.x / 4.0);
      highp float tmpvar_27;
      tmpvar_27 = (fract(abs(tmpvar_26)) * 4.0);
      highp float tmpvar_28;
      if ((tmpvar_26 >= 0.0)) {
        tmpvar_28 = tmpvar_27;
      } else {
        tmpvar_28 = -(tmpvar_27);
      };
      highp float x_29;
      x_29 = ((a_22 - _DITHERMATRIX[
        int(tmpvar_25)
      ][
        int(tmpvar_28)
      ]) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_31;
    scrpos_31 = xlv_TEXCOORD3;
    mediump float a_32;
    a_32 = xlv_TEXCOORD3.z;
    if ((a_32 < 0.95)) {
      scrpos_31.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_32 = (a_32 * 17.0);
      highp float tmpvar_33;
      tmpvar_33 = (scrpos_31.y / 4.0);
      highp float tmpvar_34;
      tmpvar_34 = (fract(abs(tmpvar_33)) * 4.0);
      highp float tmpvar_35;
      if ((tmpvar_33 >= 0.0)) {
        tmpvar_35 = tmpvar_34;
      } else {
        tmpvar_35 = -(tmpvar_34);
      };
      highp float tmpvar_36;
      tmpvar_36 = (scrpos_31.x / 4.0);
      highp float tmpvar_37;
      tmpvar_37 = (fract(abs(tmpvar_36)) * 4.0);
      highp float tmpvar_38;
      if ((tmpvar_36 >= 0.0)) {
        tmpvar_38 = tmpvar_37;
      } else {
        tmpvar_38 = -(tmpvar_37);
      };
      highp float x_39;
      x_39 = ((a_32 - _DITHERMATRIX[
        int(tmpvar_35)
      ][
        int(tmpvar_38)
      ]) - 0.01);
      if ((x_39 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_31;
    scrpos_31 = xlv_TEXCOORD3;
    mediump float a_32;
    a_32 = xlv_TEXCOORD3.z;
    if ((a_32 < 0.95)) {
      scrpos_31.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_32 = (a_32 * 17.0);
      highp float tmpvar_33;
      tmpvar_33 = (scrpos_31.y / 4.0);
      highp float tmpvar_34;
      tmpvar_34 = (fract(abs(tmpvar_33)) * 4.0);
      highp float tmpvar_35;
      if ((tmpvar_33 >= 0.0)) {
        tmpvar_35 = tmpvar_34;
      } else {
        tmpvar_35 = -(tmpvar_34);
      };
      highp float tmpvar_36;
      tmpvar_36 = (scrpos_31.x / 4.0);
      highp float tmpvar_37;
      tmpvar_37 = (fract(abs(tmpvar_36)) * 4.0);
      highp float tmpvar_38;
      if ((tmpvar_36 >= 0.0)) {
        tmpvar_38 = tmpvar_37;
      } else {
        tmpvar_38 = -(tmpvar_37);
      };
      highp float x_39;
      x_39 = ((a_32 - _DITHERMATRIX[
        int(tmpvar_35)
      ][
        int(tmpvar_38)
      ]) - 0.01);
      if ((x_39 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_31;
    scrpos_31 = xlv_TEXCOORD3;
    mediump float a_32;
    a_32 = xlv_TEXCOORD3.z;
    if ((a_32 < 0.95)) {
      scrpos_31.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_32 = (a_32 * 17.0);
      highp float tmpvar_33;
      tmpvar_33 = (scrpos_31.y / 4.0);
      highp float tmpvar_34;
      tmpvar_34 = (fract(abs(tmpvar_33)) * 4.0);
      highp float tmpvar_35;
      if ((tmpvar_33 >= 0.0)) {
        tmpvar_35 = tmpvar_34;
      } else {
        tmpvar_35 = -(tmpvar_34);
      };
      highp float tmpvar_36;
      tmpvar_36 = (scrpos_31.x / 4.0);
      highp float tmpvar_37;
      tmpvar_37 = (fract(abs(tmpvar_36)) * 4.0);
      highp float tmpvar_38;
      if ((tmpvar_36 >= 0.0)) {
        tmpvar_38 = tmpvar_37;
      } else {
        tmpvar_38 = -(tmpvar_37);
      };
      highp float x_39;
      x_39 = ((a_32 - _DITHERMATRIX[
        int(tmpvar_35)
      ][
        int(tmpvar_38)
      ]) - 0.01);
      if ((x_39 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_74;
    scrpos_74 = xlv_TEXCOORD3;
    mediump float a_75;
    a_75 = xlv_TEXCOORD3.z;
    if ((a_75 < 0.95)) {
      scrpos_74.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_75 = (a_75 * 17.0);
      highp float tmpvar_76;
      tmpvar_76 = (scrpos_74.y / 4.0);
      highp float tmpvar_77;
      tmpvar_77 = (fract(abs(tmpvar_76)) * 4.0);
      highp float tmpvar_78;
      if ((tmpvar_76 >= 0.0)) {
        tmpvar_78 = tmpvar_77;
      } else {
        tmpvar_78 = -(tmpvar_77);
      };
      highp float tmpvar_79;
      tmpvar_79 = (scrpos_74.x / 4.0);
      highp float tmpvar_80;
      tmpvar_80 = (fract(abs(tmpvar_79)) * 4.0);
      highp float tmpvar_81;
      if ((tmpvar_79 >= 0.0)) {
        tmpvar_81 = tmpvar_80;
      } else {
        tmpvar_81 = -(tmpvar_80);
      };
      highp float x_82;
      x_82 = ((a_75 - _DITHERMATRIX[
        int(tmpvar_78)
      ][
        int(tmpvar_81)
      ]) - 0.01);
      if ((x_82 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_74;
    scrpos_74 = xlv_TEXCOORD3;
    mediump float a_75;
    a_75 = xlv_TEXCOORD3.z;
    if ((a_75 < 0.95)) {
      scrpos_74.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_75 = (a_75 * 17.0);
      highp float tmpvar_76;
      tmpvar_76 = (scrpos_74.y / 4.0);
      highp float tmpvar_77;
      tmpvar_77 = (fract(abs(tmpvar_76)) * 4.0);
      highp float tmpvar_78;
      if ((tmpvar_76 >= 0.0)) {
        tmpvar_78 = tmpvar_77;
      } else {
        tmpvar_78 = -(tmpvar_77);
      };
      highp float tmpvar_79;
      tmpvar_79 = (scrpos_74.x / 4.0);
      highp float tmpvar_80;
      tmpvar_80 = (fract(abs(tmpvar_79)) * 4.0);
      highp float tmpvar_81;
      if ((tmpvar_79 >= 0.0)) {
        tmpvar_81 = tmpvar_80;
      } else {
        tmpvar_81 = -(tmpvar_80);
      };
      highp float x_82;
      x_82 = ((a_75 - _DITHERMATRIX[
        int(tmpvar_78)
      ][
        int(tmpvar_81)
      ]) - 0.01);
      if ((x_82 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_74;
    scrpos_74 = xlv_TEXCOORD3;
    mediump float a_75;
    a_75 = xlv_TEXCOORD3.z;
    if ((a_75 < 0.95)) {
      scrpos_74.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_75 = (a_75 * 17.0);
      highp float tmpvar_76;
      tmpvar_76 = (scrpos_74.y / 4.0);
      highp float tmpvar_77;
      tmpvar_77 = (fract(abs(tmpvar_76)) * 4.0);
      highp float tmpvar_78;
      if ((tmpvar_76 >= 0.0)) {
        tmpvar_78 = tmpvar_77;
      } else {
        tmpvar_78 = -(tmpvar_77);
      };
      highp float tmpvar_79;
      tmpvar_79 = (scrpos_74.x / 4.0);
      highp float tmpvar_80;
      tmpvar_80 = (fract(abs(tmpvar_79)) * 4.0);
      highp float tmpvar_81;
      if ((tmpvar_79 >= 0.0)) {
        tmpvar_81 = tmpvar_80;
      } else {
        tmpvar_81 = -(tmpvar_80);
      };
      highp float x_82;
      x_82 = ((a_75 - _DITHERMATRIX[
        int(tmpvar_78)
      ][
        int(tmpvar_81)
      ]) - 0.01);
      if ((x_82 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_21;
    N_21 = tmpvar_13;
    highp vec3 V_22;
    V_22 = V_2;
    mediump float rimLightDir_23;
    mediump vec3 lightDir_24;
    mediump float rim_25;
    mediump vec4 HRRimColor_26;
    mediump vec3 rgColor_27;
    mediump float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = pow (clamp ((1.001 - 
      dot (V_22, N_21)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_28 = (_RGBias + (tmpvar_29 * _RGScale));
    mediump vec3 tmpvar_30;
    tmpvar_30 = (tmpvar_28 * _RGColor).xyz;
    rgColor_27 = tmpvar_30;
    HRRimColor_26 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_26 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_26 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_26 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_26 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_31;
    tmpvar_31 = (1.0 - max (0.0, dot (V_22, N_21)));
    rim_25 = tmpvar_31;
    highp vec3 tmpvar_32;
    tmpvar_32 = _WorldSpaceLightPos0.xyz;
    lightDir_24 = tmpvar_32;
    mediump vec3 tmpvar_33;
    tmpvar_33 = normalize(lightDir_24);
    highp float tmpvar_34;
    tmpvar_34 = dot (N_21, tmpvar_33);
    rimLightDir_23 = tmpvar_34;
    rim_25 = (rim_25 * (0.5 + rimLightDir_23));
    highp int tmpvar_35;
    if ((rim_25 > HRRimColor_26.w)) {
      tmpvar_35 = 1;
    } else {
      tmpvar_35 = 0;
    };
    rim_25 = float(tmpvar_35);
    mediump vec3 tmpvar_36;
    tmpvar_36 = (outColor_5.xyz + ((HRRimColor_26.xyz * rim_25) * _HRRimPower));
    mediump float tmpvar_37;
    tmpvar_37 = clamp (tmpvar_28, 0.0, 1.0);
    highp vec3 tmpvar_38;
    tmpvar_38 = mix (outColor_5.xyz, tmpvar_30, vec3((tmpvar_37 * _RGRatio)));
    rgColor_27 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (rgColor_27, tmpvar_36, vec3(float(_HRRimIntensity)));
    rgColor_27 = tmpvar_39;
    outColor_5.xyz = rgColor_27;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_40;
      N_40 = tmpvar_13;
      highp vec3 V_41;
      V_41 = V_2;
      mediump float rimLightDir_42;
      mediump vec3 lightDir_43;
      mediump float rim_44;
      mediump vec4 HRRimColor_45;
      mediump vec3 rgColor_46;
      mediump float tmpvar_47;
      highp float tmpvar_48;
      tmpvar_48 = pow (clamp ((1.001 - 
        dot (V_41, N_40)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_47 = (_RGBias + (tmpvar_48 * _RGScale));
      mediump vec3 tmpvar_49;
      tmpvar_49 = (tmpvar_47 * _RGColor).xyz;
      rgColor_46 = tmpvar_49;
      HRRimColor_45 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_45 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_45 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_45 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_45 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - max (0.0, dot (V_41, N_40)));
      rim_44 = tmpvar_50;
      highp vec3 tmpvar_51;
      tmpvar_51 = _WorldSpaceLightPos0.xyz;
      lightDir_43 = tmpvar_51;
      mediump vec3 tmpvar_52;
      tmpvar_52 = normalize(lightDir_43);
      highp float tmpvar_53;
      tmpvar_53 = dot (N_40, tmpvar_52);
      rimLightDir_42 = tmpvar_53;
      rim_44 = (rim_44 * (0.5 + rimLightDir_42));
      highp int tmpvar_54;
      if ((rim_44 > HRRimColor_45.w)) {
        tmpvar_54 = 1;
      } else {
        tmpvar_54 = 0;
      };
      rim_44 = float(tmpvar_54);
      mediump vec3 tmpvar_55;
      tmpvar_55 = (outColor_5.xyz + max ((
        (HRRimColor_45.xyz * rim_44)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_46 = (outColor_5.xyz + max (tmpvar_49, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_56;
      tmpvar_56 = mix (rgColor_46, tmpvar_55, vec3(float(_HRRimIntensity)));
      rgColor_46 = tmpvar_56;
      outColor_5.xyz = rgColor_46;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_57;
    scrpos_57 = xlv_TEXCOORD3;
    mediump float a_58;
    a_58 = xlv_TEXCOORD3.z;
    if ((a_58 < 0.95)) {
      scrpos_57.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_58 = (a_58 * 17.0);
      highp float tmpvar_59;
      tmpvar_59 = (scrpos_57.y / 4.0);
      highp float tmpvar_60;
      tmpvar_60 = (fract(abs(tmpvar_59)) * 4.0);
      highp float tmpvar_61;
      if ((tmpvar_59 >= 0.0)) {
        tmpvar_61 = tmpvar_60;
      } else {
        tmpvar_61 = -(tmpvar_60);
      };
      highp float tmpvar_62;
      tmpvar_62 = (scrpos_57.x / 4.0);
      highp float tmpvar_63;
      tmpvar_63 = (fract(abs(tmpvar_62)) * 4.0);
      highp float tmpvar_64;
      if ((tmpvar_62 >= 0.0)) {
        tmpvar_64 = tmpvar_63;
      } else {
        tmpvar_64 = -(tmpvar_63);
      };
      highp float x_65;
      x_65 = ((a_58 - _DITHERMATRIX[
        int(tmpvar_61)
      ][
        int(tmpvar_64)
      ]) - 0.01);
      if ((x_65 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_21;
    N_21 = tmpvar_13;
    highp vec3 V_22;
    V_22 = V_2;
    mediump float rimLightDir_23;
    mediump vec3 lightDir_24;
    mediump float rim_25;
    mediump vec4 HRRimColor_26;
    mediump vec3 rgColor_27;
    mediump float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = pow (clamp ((1.001 - 
      dot (V_22, N_21)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_28 = (_RGBias + (tmpvar_29 * _RGScale));
    mediump vec3 tmpvar_30;
    tmpvar_30 = (tmpvar_28 * _RGColor).xyz;
    rgColor_27 = tmpvar_30;
    HRRimColor_26 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_26 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_26 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_26 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_26 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_31;
    tmpvar_31 = (1.0 - max (0.0, dot (V_22, N_21)));
    rim_25 = tmpvar_31;
    highp vec3 tmpvar_32;
    tmpvar_32 = _WorldSpaceLightPos0.xyz;
    lightDir_24 = tmpvar_32;
    mediump vec3 tmpvar_33;
    tmpvar_33 = normalize(lightDir_24);
    highp float tmpvar_34;
    tmpvar_34 = dot (N_21, tmpvar_33);
    rimLightDir_23 = tmpvar_34;
    rim_25 = (rim_25 * (0.5 + rimLightDir_23));
    highp int tmpvar_35;
    if ((rim_25 > HRRimColor_26.w)) {
      tmpvar_35 = 1;
    } else {
      tmpvar_35 = 0;
    };
    rim_25 = float(tmpvar_35);
    mediump vec3 tmpvar_36;
    tmpvar_36 = (outColor_5.xyz + ((HRRimColor_26.xyz * rim_25) * _HRRimPower));
    mediump float tmpvar_37;
    tmpvar_37 = clamp (tmpvar_28, 0.0, 1.0);
    highp vec3 tmpvar_38;
    tmpvar_38 = mix (outColor_5.xyz, tmpvar_30, vec3((tmpvar_37 * _RGRatio)));
    rgColor_27 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (rgColor_27, tmpvar_36, vec3(float(_HRRimIntensity)));
    rgColor_27 = tmpvar_39;
    outColor_5.xyz = rgColor_27;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_40;
      N_40 = tmpvar_13;
      highp vec3 V_41;
      V_41 = V_2;
      mediump float rimLightDir_42;
      mediump vec3 lightDir_43;
      mediump float rim_44;
      mediump vec4 HRRimColor_45;
      mediump vec3 rgColor_46;
      mediump float tmpvar_47;
      highp float tmpvar_48;
      tmpvar_48 = pow (clamp ((1.001 - 
        dot (V_41, N_40)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_47 = (_RGBias + (tmpvar_48 * _RGScale));
      mediump vec3 tmpvar_49;
      tmpvar_49 = (tmpvar_47 * _RGColor).xyz;
      rgColor_46 = tmpvar_49;
      HRRimColor_45 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_45 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_45 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_45 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_45 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - max (0.0, dot (V_41, N_40)));
      rim_44 = tmpvar_50;
      highp vec3 tmpvar_51;
      tmpvar_51 = _WorldSpaceLightPos0.xyz;
      lightDir_43 = tmpvar_51;
      mediump vec3 tmpvar_52;
      tmpvar_52 = normalize(lightDir_43);
      highp float tmpvar_53;
      tmpvar_53 = dot (N_40, tmpvar_52);
      rimLightDir_42 = tmpvar_53;
      rim_44 = (rim_44 * (0.5 + rimLightDir_42));
      highp int tmpvar_54;
      if ((rim_44 > HRRimColor_45.w)) {
        tmpvar_54 = 1;
      } else {
        tmpvar_54 = 0;
      };
      rim_44 = float(tmpvar_54);
      mediump vec3 tmpvar_55;
      tmpvar_55 = (outColor_5.xyz + max ((
        (HRRimColor_45.xyz * rim_44)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_46 = (outColor_5.xyz + max (tmpvar_49, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_56;
      tmpvar_56 = mix (rgColor_46, tmpvar_55, vec3(float(_HRRimIntensity)));
      rgColor_46 = tmpvar_56;
      outColor_5.xyz = rgColor_46;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_57;
    scrpos_57 = xlv_TEXCOORD3;
    mediump float a_58;
    a_58 = xlv_TEXCOORD3.z;
    if ((a_58 < 0.95)) {
      scrpos_57.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_58 = (a_58 * 17.0);
      highp float tmpvar_59;
      tmpvar_59 = (scrpos_57.y / 4.0);
      highp float tmpvar_60;
      tmpvar_60 = (fract(abs(tmpvar_59)) * 4.0);
      highp float tmpvar_61;
      if ((tmpvar_59 >= 0.0)) {
        tmpvar_61 = tmpvar_60;
      } else {
        tmpvar_61 = -(tmpvar_60);
      };
      highp float tmpvar_62;
      tmpvar_62 = (scrpos_57.x / 4.0);
      highp float tmpvar_63;
      tmpvar_63 = (fract(abs(tmpvar_62)) * 4.0);
      highp float tmpvar_64;
      if ((tmpvar_62 >= 0.0)) {
        tmpvar_64 = tmpvar_63;
      } else {
        tmpvar_64 = -(tmpvar_63);
      };
      highp float x_65;
      x_65 = ((a_58 - _DITHERMATRIX[
        int(tmpvar_61)
      ][
        int(tmpvar_64)
      ]) - 0.01);
      if ((x_65 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_21;
    N_21 = tmpvar_13;
    highp vec3 V_22;
    V_22 = V_2;
    mediump float rimLightDir_23;
    mediump vec3 lightDir_24;
    mediump float rim_25;
    mediump vec4 HRRimColor_26;
    mediump vec3 rgColor_27;
    mediump float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = pow (clamp ((1.001 - 
      dot (V_22, N_21)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_28 = (_RGBias + (tmpvar_29 * _RGScale));
    mediump vec3 tmpvar_30;
    tmpvar_30 = (tmpvar_28 * _RGColor).xyz;
    rgColor_27 = tmpvar_30;
    HRRimColor_26 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_26 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_26 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_26 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_26 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_31;
    tmpvar_31 = (1.0 - max (0.0, dot (V_22, N_21)));
    rim_25 = tmpvar_31;
    highp vec3 tmpvar_32;
    tmpvar_32 = _WorldSpaceLightPos0.xyz;
    lightDir_24 = tmpvar_32;
    mediump vec3 tmpvar_33;
    tmpvar_33 = normalize(lightDir_24);
    highp float tmpvar_34;
    tmpvar_34 = dot (N_21, tmpvar_33);
    rimLightDir_23 = tmpvar_34;
    rim_25 = (rim_25 * (0.5 + rimLightDir_23));
    highp int tmpvar_35;
    if ((rim_25 > HRRimColor_26.w)) {
      tmpvar_35 = 1;
    } else {
      tmpvar_35 = 0;
    };
    rim_25 = float(tmpvar_35);
    mediump vec3 tmpvar_36;
    tmpvar_36 = (outColor_5.xyz + ((HRRimColor_26.xyz * rim_25) * _HRRimPower));
    mediump float tmpvar_37;
    tmpvar_37 = clamp (tmpvar_28, 0.0, 1.0);
    highp vec3 tmpvar_38;
    tmpvar_38 = mix (outColor_5.xyz, tmpvar_30, vec3((tmpvar_37 * _RGRatio)));
    rgColor_27 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (rgColor_27, tmpvar_36, vec3(float(_HRRimIntensity)));
    rgColor_27 = tmpvar_39;
    outColor_5.xyz = rgColor_27;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_40;
      N_40 = tmpvar_13;
      highp vec3 V_41;
      V_41 = V_2;
      mediump float rimLightDir_42;
      mediump vec3 lightDir_43;
      mediump float rim_44;
      mediump vec4 HRRimColor_45;
      mediump vec3 rgColor_46;
      mediump float tmpvar_47;
      highp float tmpvar_48;
      tmpvar_48 = pow (clamp ((1.001 - 
        dot (V_41, N_40)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_47 = (_RGBias + (tmpvar_48 * _RGScale));
      mediump vec3 tmpvar_49;
      tmpvar_49 = (tmpvar_47 * _RGColor).xyz;
      rgColor_46 = tmpvar_49;
      HRRimColor_45 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_45 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_45 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_45 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_45 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - max (0.0, dot (V_41, N_40)));
      rim_44 = tmpvar_50;
      highp vec3 tmpvar_51;
      tmpvar_51 = _WorldSpaceLightPos0.xyz;
      lightDir_43 = tmpvar_51;
      mediump vec3 tmpvar_52;
      tmpvar_52 = normalize(lightDir_43);
      highp float tmpvar_53;
      tmpvar_53 = dot (N_40, tmpvar_52);
      rimLightDir_42 = tmpvar_53;
      rim_44 = (rim_44 * (0.5 + rimLightDir_42));
      highp int tmpvar_54;
      if ((rim_44 > HRRimColor_45.w)) {
        tmpvar_54 = 1;
      } else {
        tmpvar_54 = 0;
      };
      rim_44 = float(tmpvar_54);
      mediump vec3 tmpvar_55;
      tmpvar_55 = (outColor_5.xyz + max ((
        (HRRimColor_45.xyz * rim_44)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_46 = (outColor_5.xyz + max (tmpvar_49, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_56;
      tmpvar_56 = mix (rgColor_46, tmpvar_55, vec3(float(_HRRimIntensity)));
      rgColor_46 = tmpvar_56;
      outColor_5.xyz = rgColor_46;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_57;
    scrpos_57 = xlv_TEXCOORD3;
    mediump float a_58;
    a_58 = xlv_TEXCOORD3.z;
    if ((a_58 < 0.95)) {
      scrpos_57.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_58 = (a_58 * 17.0);
      highp float tmpvar_59;
      tmpvar_59 = (scrpos_57.y / 4.0);
      highp float tmpvar_60;
      tmpvar_60 = (fract(abs(tmpvar_59)) * 4.0);
      highp float tmpvar_61;
      if ((tmpvar_59 >= 0.0)) {
        tmpvar_61 = tmpvar_60;
      } else {
        tmpvar_61 = -(tmpvar_60);
      };
      highp float tmpvar_62;
      tmpvar_62 = (scrpos_57.x / 4.0);
      highp float tmpvar_63;
      tmpvar_63 = (fract(abs(tmpvar_62)) * 4.0);
      highp float tmpvar_64;
      if ((tmpvar_62 >= 0.0)) {
        tmpvar_64 = tmpvar_63;
      } else {
        tmpvar_64 = -(tmpvar_63);
      };
      highp float x_65;
      x_65 = ((a_58 - _DITHERMATRIX[
        int(tmpvar_61)
      ][
        int(tmpvar_64)
      ]) - 0.01);
      if ((x_65 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_21;
    N_21 = tmpvar_13;
    highp vec3 V_22;
    V_22 = V_2;
    mediump float rimLightDir_23;
    mediump vec3 lightDir_24;
    mediump float rim_25;
    mediump vec4 HRRimColor_26;
    mediump vec3 rgColor_27;
    mediump float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = pow (clamp ((1.001 - 
      dot (V_22, N_21)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_28 = (_RGBias + (tmpvar_29 * _RGScale));
    mediump vec3 tmpvar_30;
    tmpvar_30 = (tmpvar_28 * _RGColor).xyz;
    rgColor_27 = tmpvar_30;
    HRRimColor_26 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_26 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_26 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_26 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_26 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_31;
    tmpvar_31 = (1.0 - max (0.0, dot (V_22, N_21)));
    rim_25 = tmpvar_31;
    highp vec3 tmpvar_32;
    tmpvar_32 = _WorldSpaceLightPos0.xyz;
    lightDir_24 = tmpvar_32;
    mediump vec3 tmpvar_33;
    tmpvar_33 = normalize(lightDir_24);
    highp float tmpvar_34;
    tmpvar_34 = dot (N_21, tmpvar_33);
    rimLightDir_23 = tmpvar_34;
    rim_25 = (rim_25 * (0.5 + rimLightDir_23));
    highp int tmpvar_35;
    if ((rim_25 > HRRimColor_26.w)) {
      tmpvar_35 = 1;
    } else {
      tmpvar_35 = 0;
    };
    rim_25 = float(tmpvar_35);
    mediump vec3 tmpvar_36;
    tmpvar_36 = (outColor_5.xyz + ((HRRimColor_26.xyz * rim_25) * _HRRimPower));
    mediump float tmpvar_37;
    tmpvar_37 = clamp (tmpvar_28, 0.0, 1.0);
    highp vec3 tmpvar_38;
    tmpvar_38 = mix (outColor_5.xyz, tmpvar_30, vec3((tmpvar_37 * _RGRatio)));
    rgColor_27 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (rgColor_27, tmpvar_36, vec3(float(_HRRimIntensity)));
    rgColor_27 = tmpvar_39;
    outColor_5.xyz = rgColor_27;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_40;
      N_40 = tmpvar_13;
      highp vec3 V_41;
      V_41 = V_2;
      mediump float rimLightDir_42;
      mediump vec3 lightDir_43;
      mediump float rim_44;
      mediump vec4 HRRimColor_45;
      mediump vec3 rgColor_46;
      mediump float tmpvar_47;
      highp float tmpvar_48;
      tmpvar_48 = pow (clamp ((1.001 - 
        dot (V_41, N_40)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_47 = (_RGBias + (tmpvar_48 * _RGScale));
      mediump vec3 tmpvar_49;
      tmpvar_49 = (tmpvar_47 * _RGColor).xyz;
      rgColor_46 = tmpvar_49;
      HRRimColor_45 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_45 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_45 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_45 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_45 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - max (0.0, dot (V_41, N_40)));
      rim_44 = tmpvar_50;
      highp vec3 tmpvar_51;
      tmpvar_51 = _WorldSpaceLightPos0.xyz;
      lightDir_43 = tmpvar_51;
      mediump vec3 tmpvar_52;
      tmpvar_52 = normalize(lightDir_43);
      highp float tmpvar_53;
      tmpvar_53 = dot (N_40, tmpvar_52);
      rimLightDir_42 = tmpvar_53;
      rim_44 = (rim_44 * (0.5 + rimLightDir_42));
      highp int tmpvar_54;
      if ((rim_44 > HRRimColor_45.w)) {
        tmpvar_54 = 1;
      } else {
        tmpvar_54 = 0;
      };
      rim_44 = float(tmpvar_54);
      mediump vec3 tmpvar_55;
      tmpvar_55 = (outColor_5.xyz + max ((
        (HRRimColor_45.xyz * rim_44)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_46 = (outColor_5.xyz + max (tmpvar_49, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_56;
      tmpvar_56 = mix (rgColor_46, tmpvar_55, vec3(float(_HRRimIntensity)));
      rgColor_46 = tmpvar_56;
      outColor_5.xyz = rgColor_46;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_57;
    scrpos_57 = xlv_TEXCOORD3;
    mediump float a_58;
    a_58 = xlv_TEXCOORD3.z;
    if ((a_58 < 0.95)) {
      scrpos_57.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_58 = (a_58 * 17.0);
      highp float tmpvar_59;
      tmpvar_59 = (scrpos_57.y / 4.0);
      highp float tmpvar_60;
      tmpvar_60 = (fract(abs(tmpvar_59)) * 4.0);
      highp float tmpvar_61;
      if ((tmpvar_59 >= 0.0)) {
        tmpvar_61 = tmpvar_60;
      } else {
        tmpvar_61 = -(tmpvar_60);
      };
      highp float tmpvar_62;
      tmpvar_62 = (scrpos_57.x / 4.0);
      highp float tmpvar_63;
      tmpvar_63 = (fract(abs(tmpvar_62)) * 4.0);
      highp float tmpvar_64;
      if ((tmpvar_62 >= 0.0)) {
        tmpvar_64 = tmpvar_63;
      } else {
        tmpvar_64 = -(tmpvar_63);
      };
      highp float x_65;
      x_65 = ((a_58 - _DITHERMATRIX[
        int(tmpvar_61)
      ][
        int(tmpvar_64)
      ]) - 0.01);
      if ((x_65 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_21;
    N_21 = tmpvar_13;
    highp vec3 V_22;
    V_22 = V_2;
    mediump float rimLightDir_23;
    mediump vec3 lightDir_24;
    mediump float rim_25;
    mediump vec4 HRRimColor_26;
    mediump vec3 rgColor_27;
    mediump float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = pow (clamp ((1.001 - 
      dot (V_22, N_21)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_28 = (_RGBias + (tmpvar_29 * _RGScale));
    mediump vec3 tmpvar_30;
    tmpvar_30 = (tmpvar_28 * _RGColor).xyz;
    rgColor_27 = tmpvar_30;
    HRRimColor_26 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_26 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_26 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_26 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_26 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_31;
    tmpvar_31 = (1.0 - max (0.0, dot (V_22, N_21)));
    rim_25 = tmpvar_31;
    highp vec3 tmpvar_32;
    tmpvar_32 = _WorldSpaceLightPos0.xyz;
    lightDir_24 = tmpvar_32;
    mediump vec3 tmpvar_33;
    tmpvar_33 = normalize(lightDir_24);
    highp float tmpvar_34;
    tmpvar_34 = dot (N_21, tmpvar_33);
    rimLightDir_23 = tmpvar_34;
    rim_25 = (rim_25 * (0.5 + rimLightDir_23));
    highp int tmpvar_35;
    if ((rim_25 > HRRimColor_26.w)) {
      tmpvar_35 = 1;
    } else {
      tmpvar_35 = 0;
    };
    rim_25 = float(tmpvar_35);
    mediump vec3 tmpvar_36;
    tmpvar_36 = (outColor_5.xyz + ((HRRimColor_26.xyz * rim_25) * _HRRimPower));
    mediump float tmpvar_37;
    tmpvar_37 = clamp (tmpvar_28, 0.0, 1.0);
    highp vec3 tmpvar_38;
    tmpvar_38 = mix (outColor_5.xyz, tmpvar_30, vec3((tmpvar_37 * _RGRatio)));
    rgColor_27 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (rgColor_27, tmpvar_36, vec3(float(_HRRimIntensity)));
    rgColor_27 = tmpvar_39;
    outColor_5.xyz = rgColor_27;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_40;
      N_40 = tmpvar_13;
      highp vec3 V_41;
      V_41 = V_2;
      mediump float rimLightDir_42;
      mediump vec3 lightDir_43;
      mediump float rim_44;
      mediump vec4 HRRimColor_45;
      mediump vec3 rgColor_46;
      mediump float tmpvar_47;
      highp float tmpvar_48;
      tmpvar_48 = pow (clamp ((1.001 - 
        dot (V_41, N_40)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_47 = (_RGBias + (tmpvar_48 * _RGScale));
      mediump vec3 tmpvar_49;
      tmpvar_49 = (tmpvar_47 * _RGColor).xyz;
      rgColor_46 = tmpvar_49;
      HRRimColor_45 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_45 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_45 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_45 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_45 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - max (0.0, dot (V_41, N_40)));
      rim_44 = tmpvar_50;
      highp vec3 tmpvar_51;
      tmpvar_51 = _WorldSpaceLightPos0.xyz;
      lightDir_43 = tmpvar_51;
      mediump vec3 tmpvar_52;
      tmpvar_52 = normalize(lightDir_43);
      highp float tmpvar_53;
      tmpvar_53 = dot (N_40, tmpvar_52);
      rimLightDir_42 = tmpvar_53;
      rim_44 = (rim_44 * (0.5 + rimLightDir_42));
      highp int tmpvar_54;
      if ((rim_44 > HRRimColor_45.w)) {
        tmpvar_54 = 1;
      } else {
        tmpvar_54 = 0;
      };
      rim_44 = float(tmpvar_54);
      mediump vec3 tmpvar_55;
      tmpvar_55 = (outColor_5.xyz + max ((
        (HRRimColor_45.xyz * rim_44)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_46 = (outColor_5.xyz + max (tmpvar_49, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_56;
      tmpvar_56 = mix (rgColor_46, tmpvar_55, vec3(float(_HRRimIntensity)));
      rgColor_46 = tmpvar_56;
      outColor_5.xyz = rgColor_46;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_57;
    scrpos_57 = xlv_TEXCOORD3;
    mediump float a_58;
    a_58 = xlv_TEXCOORD3.z;
    if ((a_58 < 0.95)) {
      scrpos_57.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_58 = (a_58 * 17.0);
      highp float tmpvar_59;
      tmpvar_59 = (scrpos_57.y / 4.0);
      highp float tmpvar_60;
      tmpvar_60 = (fract(abs(tmpvar_59)) * 4.0);
      highp float tmpvar_61;
      if ((tmpvar_59 >= 0.0)) {
        tmpvar_61 = tmpvar_60;
      } else {
        tmpvar_61 = -(tmpvar_60);
      };
      highp float tmpvar_62;
      tmpvar_62 = (scrpos_57.x / 4.0);
      highp float tmpvar_63;
      tmpvar_63 = (fract(abs(tmpvar_62)) * 4.0);
      highp float tmpvar_64;
      if ((tmpvar_62 >= 0.0)) {
        tmpvar_64 = tmpvar_63;
      } else {
        tmpvar_64 = -(tmpvar_63);
      };
      highp float x_65;
      x_65 = ((a_58 - _DITHERMATRIX[
        int(tmpvar_61)
      ][
        int(tmpvar_64)
      ]) - 0.01);
      if ((x_65 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_21;
    N_21 = tmpvar_13;
    highp vec3 V_22;
    V_22 = V_2;
    mediump float rimLightDir_23;
    mediump vec3 lightDir_24;
    mediump float rim_25;
    mediump vec4 HRRimColor_26;
    mediump vec3 rgColor_27;
    mediump float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = pow (clamp ((1.001 - 
      dot (V_22, N_21)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_28 = (_RGBias + (tmpvar_29 * _RGScale));
    mediump vec3 tmpvar_30;
    tmpvar_30 = (tmpvar_28 * _RGColor).xyz;
    rgColor_27 = tmpvar_30;
    HRRimColor_26 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_26 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_26 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_26 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_26 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_31;
    tmpvar_31 = (1.0 - max (0.0, dot (V_22, N_21)));
    rim_25 = tmpvar_31;
    highp vec3 tmpvar_32;
    tmpvar_32 = _WorldSpaceLightPos0.xyz;
    lightDir_24 = tmpvar_32;
    mediump vec3 tmpvar_33;
    tmpvar_33 = normalize(lightDir_24);
    highp float tmpvar_34;
    tmpvar_34 = dot (N_21, tmpvar_33);
    rimLightDir_23 = tmpvar_34;
    rim_25 = (rim_25 * (0.5 + rimLightDir_23));
    highp int tmpvar_35;
    if ((rim_25 > HRRimColor_26.w)) {
      tmpvar_35 = 1;
    } else {
      tmpvar_35 = 0;
    };
    rim_25 = float(tmpvar_35);
    mediump vec3 tmpvar_36;
    tmpvar_36 = (outColor_5.xyz + ((HRRimColor_26.xyz * rim_25) * _HRRimPower));
    mediump float tmpvar_37;
    tmpvar_37 = clamp (tmpvar_28, 0.0, 1.0);
    highp vec3 tmpvar_38;
    tmpvar_38 = mix (outColor_5.xyz, tmpvar_30, vec3((tmpvar_37 * _RGRatio)));
    rgColor_27 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (rgColor_27, tmpvar_36, vec3(float(_HRRimIntensity)));
    rgColor_27 = tmpvar_39;
    outColor_5.xyz = rgColor_27;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_40;
      N_40 = tmpvar_13;
      highp vec3 V_41;
      V_41 = V_2;
      mediump float rimLightDir_42;
      mediump vec3 lightDir_43;
      mediump float rim_44;
      mediump vec4 HRRimColor_45;
      mediump vec3 rgColor_46;
      mediump float tmpvar_47;
      highp float tmpvar_48;
      tmpvar_48 = pow (clamp ((1.001 - 
        dot (V_41, N_40)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_47 = (_RGBias + (tmpvar_48 * _RGScale));
      mediump vec3 tmpvar_49;
      tmpvar_49 = (tmpvar_47 * _RGColor).xyz;
      rgColor_46 = tmpvar_49;
      HRRimColor_45 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_45 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_45 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_45 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_45 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - max (0.0, dot (V_41, N_40)));
      rim_44 = tmpvar_50;
      highp vec3 tmpvar_51;
      tmpvar_51 = _WorldSpaceLightPos0.xyz;
      lightDir_43 = tmpvar_51;
      mediump vec3 tmpvar_52;
      tmpvar_52 = normalize(lightDir_43);
      highp float tmpvar_53;
      tmpvar_53 = dot (N_40, tmpvar_52);
      rimLightDir_42 = tmpvar_53;
      rim_44 = (rim_44 * (0.5 + rimLightDir_42));
      highp int tmpvar_54;
      if ((rim_44 > HRRimColor_45.w)) {
        tmpvar_54 = 1;
      } else {
        tmpvar_54 = 0;
      };
      rim_44 = float(tmpvar_54);
      mediump vec3 tmpvar_55;
      tmpvar_55 = (outColor_5.xyz + max ((
        (HRRimColor_45.xyz * rim_44)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_46 = (outColor_5.xyz + max (tmpvar_49, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_56;
      tmpvar_56 = mix (rgColor_46, tmpvar_55, vec3(float(_HRRimIntensity)));
      rgColor_46 = tmpvar_56;
      outColor_5.xyz = rgColor_46;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_57;
    scrpos_57 = xlv_TEXCOORD3;
    mediump float a_58;
    a_58 = xlv_TEXCOORD3.z;
    if ((a_58 < 0.95)) {
      scrpos_57.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_58 = (a_58 * 17.0);
      highp float tmpvar_59;
      tmpvar_59 = (scrpos_57.y / 4.0);
      highp float tmpvar_60;
      tmpvar_60 = (fract(abs(tmpvar_59)) * 4.0);
      highp float tmpvar_61;
      if ((tmpvar_59 >= 0.0)) {
        tmpvar_61 = tmpvar_60;
      } else {
        tmpvar_61 = -(tmpvar_60);
      };
      highp float tmpvar_62;
      tmpvar_62 = (scrpos_57.x / 4.0);
      highp float tmpvar_63;
      tmpvar_63 = (fract(abs(tmpvar_62)) * 4.0);
      highp float tmpvar_64;
      if ((tmpvar_62 >= 0.0)) {
        tmpvar_64 = tmpvar_63;
      } else {
        tmpvar_64 = -(tmpvar_63);
      };
      highp float x_65;
      x_65 = ((a_58 - _DITHERMATRIX[
        int(tmpvar_61)
      ][
        int(tmpvar_64)
      ]) - 0.01);
      if ((x_65 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if ((_RGBlendType == 1)) {
    highp vec3 N_31;
    N_31 = tmpvar_23;
    highp vec3 V_32;
    V_32 = V_2;
    mediump float rimLightDir_33;
    mediump vec3 lightDir_34;
    mediump float rim_35;
    mediump vec4 HRRimColor_36;
    mediump vec3 rgColor_37;
    mediump float tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow (clamp ((1.001 - 
      dot (V_32, N_31)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_38 = (_RGBias + (tmpvar_39 * _RGScale));
    mediump vec3 tmpvar_40;
    tmpvar_40 = (tmpvar_38 * _RGColor).xyz;
    rgColor_37 = tmpvar_40;
    HRRimColor_36 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_36 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_36 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_36 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_36 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_41;
    tmpvar_41 = (1.0 - max (0.0, dot (V_32, N_31)));
    rim_35 = tmpvar_41;
    highp vec3 tmpvar_42;
    tmpvar_42 = _WorldSpaceLightPos0.xyz;
    lightDir_34 = tmpvar_42;
    mediump vec3 tmpvar_43;
    tmpvar_43 = normalize(lightDir_34);
    highp float tmpvar_44;
    tmpvar_44 = dot (N_31, tmpvar_43);
    rimLightDir_33 = tmpvar_44;
    rim_35 = (rim_35 * (0.5 + rimLightDir_33));
    highp int tmpvar_45;
    if ((rim_35 > HRRimColor_36.w)) {
      tmpvar_45 = 1;
    } else {
      tmpvar_45 = 0;
    };
    rim_35 = float(tmpvar_45);
    mediump vec3 tmpvar_46;
    tmpvar_46 = (outColor_4.xyz + ((HRRimColor_36.xyz * rim_35) * _HRRimPower));
    mediump float tmpvar_47;
    tmpvar_47 = clamp (tmpvar_38, 0.0, 1.0);
    highp vec3 tmpvar_48;
    tmpvar_48 = mix (outColor_4.xyz, tmpvar_40, vec3((tmpvar_47 * _RGRatio)));
    rgColor_37 = tmpvar_48;
    highp vec3 tmpvar_49;
    tmpvar_49 = mix (rgColor_37, tmpvar_46, vec3(float(_HRRimIntensity)));
    rgColor_37 = tmpvar_49;
    outColor_4.xyz = rgColor_37;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_50;
      N_50 = tmpvar_23;
      highp vec3 V_51;
      V_51 = V_2;
      mediump float rimLightDir_52;
      mediump vec3 lightDir_53;
      mediump float rim_54;
      mediump vec4 HRRimColor_55;
      mediump vec3 rgColor_56;
      mediump float tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = pow (clamp ((1.001 - 
        dot (V_51, N_50)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_57 = (_RGBias + (tmpvar_58 * _RGScale));
      mediump vec3 tmpvar_59;
      tmpvar_59 = (tmpvar_57 * _RGColor).xyz;
      rgColor_56 = tmpvar_59;
      HRRimColor_55 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_55 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_55 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_55 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_55 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - max (0.0, dot (V_51, N_50)));
      rim_54 = tmpvar_60;
      highp vec3 tmpvar_61;
      tmpvar_61 = _WorldSpaceLightPos0.xyz;
      lightDir_53 = tmpvar_61;
      mediump vec3 tmpvar_62;
      tmpvar_62 = normalize(lightDir_53);
      highp float tmpvar_63;
      tmpvar_63 = dot (N_50, tmpvar_62);
      rimLightDir_52 = tmpvar_63;
      rim_54 = (rim_54 * (0.5 + rimLightDir_52));
      highp int tmpvar_64;
      if ((rim_54 > HRRimColor_55.w)) {
        tmpvar_64 = 1;
      } else {
        tmpvar_64 = 0;
      };
      rim_54 = float(tmpvar_64);
      mediump vec3 tmpvar_65;
      tmpvar_65 = (outColor_4.xyz + max ((
        (HRRimColor_55.xyz * rim_54)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_56 = (outColor_4.xyz + max (tmpvar_59, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_66;
      tmpvar_66 = mix (rgColor_56, tmpvar_65, vec3(float(_HRRimIntensity)));
      rgColor_56 = tmpvar_66;
      outColor_4.xyz = rgColor_56;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_67;
    scrpos_67 = xlv_TEXCOORD3;
    mediump float a_68;
    a_68 = xlv_TEXCOORD3.z;
    if ((a_68 < 0.95)) {
      scrpos_67.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_68 = (a_68 * 17.0);
      highp float tmpvar_69;
      tmpvar_69 = (scrpos_67.y / 4.0);
      highp float tmpvar_70;
      tmpvar_70 = (fract(abs(tmpvar_69)) * 4.0);
      highp float tmpvar_71;
      if ((tmpvar_69 >= 0.0)) {
        tmpvar_71 = tmpvar_70;
      } else {
        tmpvar_71 = -(tmpvar_70);
      };
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_67.x / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float x_75;
      x_75 = ((a_68 - _DITHERMATRIX[
        int(tmpvar_71)
      ][
        int(tmpvar_74)
      ]) - 0.01);
      if ((x_75 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if ((_RGBlendType == 1)) {
    highp vec3 N_31;
    N_31 = tmpvar_23;
    highp vec3 V_32;
    V_32 = V_2;
    mediump float rimLightDir_33;
    mediump vec3 lightDir_34;
    mediump float rim_35;
    mediump vec4 HRRimColor_36;
    mediump vec3 rgColor_37;
    mediump float tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow (clamp ((1.001 - 
      dot (V_32, N_31)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_38 = (_RGBias + (tmpvar_39 * _RGScale));
    mediump vec3 tmpvar_40;
    tmpvar_40 = (tmpvar_38 * _RGColor).xyz;
    rgColor_37 = tmpvar_40;
    HRRimColor_36 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_36 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_36 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_36 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_36 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_41;
    tmpvar_41 = (1.0 - max (0.0, dot (V_32, N_31)));
    rim_35 = tmpvar_41;
    highp vec3 tmpvar_42;
    tmpvar_42 = _WorldSpaceLightPos0.xyz;
    lightDir_34 = tmpvar_42;
    mediump vec3 tmpvar_43;
    tmpvar_43 = normalize(lightDir_34);
    highp float tmpvar_44;
    tmpvar_44 = dot (N_31, tmpvar_43);
    rimLightDir_33 = tmpvar_44;
    rim_35 = (rim_35 * (0.5 + rimLightDir_33));
    highp int tmpvar_45;
    if ((rim_35 > HRRimColor_36.w)) {
      tmpvar_45 = 1;
    } else {
      tmpvar_45 = 0;
    };
    rim_35 = float(tmpvar_45);
    mediump vec3 tmpvar_46;
    tmpvar_46 = (outColor_4.xyz + ((HRRimColor_36.xyz * rim_35) * _HRRimPower));
    mediump float tmpvar_47;
    tmpvar_47 = clamp (tmpvar_38, 0.0, 1.0);
    highp vec3 tmpvar_48;
    tmpvar_48 = mix (outColor_4.xyz, tmpvar_40, vec3((tmpvar_47 * _RGRatio)));
    rgColor_37 = tmpvar_48;
    highp vec3 tmpvar_49;
    tmpvar_49 = mix (rgColor_37, tmpvar_46, vec3(float(_HRRimIntensity)));
    rgColor_37 = tmpvar_49;
    outColor_4.xyz = rgColor_37;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_50;
      N_50 = tmpvar_23;
      highp vec3 V_51;
      V_51 = V_2;
      mediump float rimLightDir_52;
      mediump vec3 lightDir_53;
      mediump float rim_54;
      mediump vec4 HRRimColor_55;
      mediump vec3 rgColor_56;
      mediump float tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = pow (clamp ((1.001 - 
        dot (V_51, N_50)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_57 = (_RGBias + (tmpvar_58 * _RGScale));
      mediump vec3 tmpvar_59;
      tmpvar_59 = (tmpvar_57 * _RGColor).xyz;
      rgColor_56 = tmpvar_59;
      HRRimColor_55 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_55 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_55 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_55 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_55 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - max (0.0, dot (V_51, N_50)));
      rim_54 = tmpvar_60;
      highp vec3 tmpvar_61;
      tmpvar_61 = _WorldSpaceLightPos0.xyz;
      lightDir_53 = tmpvar_61;
      mediump vec3 tmpvar_62;
      tmpvar_62 = normalize(lightDir_53);
      highp float tmpvar_63;
      tmpvar_63 = dot (N_50, tmpvar_62);
      rimLightDir_52 = tmpvar_63;
      rim_54 = (rim_54 * (0.5 + rimLightDir_52));
      highp int tmpvar_64;
      if ((rim_54 > HRRimColor_55.w)) {
        tmpvar_64 = 1;
      } else {
        tmpvar_64 = 0;
      };
      rim_54 = float(tmpvar_64);
      mediump vec3 tmpvar_65;
      tmpvar_65 = (outColor_4.xyz + max ((
        (HRRimColor_55.xyz * rim_54)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_56 = (outColor_4.xyz + max (tmpvar_59, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_66;
      tmpvar_66 = mix (rgColor_56, tmpvar_65, vec3(float(_HRRimIntensity)));
      rgColor_56 = tmpvar_66;
      outColor_4.xyz = rgColor_56;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_67;
    scrpos_67 = xlv_TEXCOORD3;
    mediump float a_68;
    a_68 = xlv_TEXCOORD3.z;
    if ((a_68 < 0.95)) {
      scrpos_67.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_68 = (a_68 * 17.0);
      highp float tmpvar_69;
      tmpvar_69 = (scrpos_67.y / 4.0);
      highp float tmpvar_70;
      tmpvar_70 = (fract(abs(tmpvar_69)) * 4.0);
      highp float tmpvar_71;
      if ((tmpvar_69 >= 0.0)) {
        tmpvar_71 = tmpvar_70;
      } else {
        tmpvar_71 = -(tmpvar_70);
      };
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_67.x / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float x_75;
      x_75 = ((a_68 - _DITHERMATRIX[
        int(tmpvar_71)
      ][
        int(tmpvar_74)
      ]) - 0.01);
      if ((x_75 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if ((_RGBlendType == 1)) {
    highp vec3 N_31;
    N_31 = tmpvar_23;
    highp vec3 V_32;
    V_32 = V_2;
    mediump float rimLightDir_33;
    mediump vec3 lightDir_34;
    mediump float rim_35;
    mediump vec4 HRRimColor_36;
    mediump vec3 rgColor_37;
    mediump float tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow (clamp ((1.001 - 
      dot (V_32, N_31)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_38 = (_RGBias + (tmpvar_39 * _RGScale));
    mediump vec3 tmpvar_40;
    tmpvar_40 = (tmpvar_38 * _RGColor).xyz;
    rgColor_37 = tmpvar_40;
    HRRimColor_36 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_36 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_36 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_36 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_36 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_41;
    tmpvar_41 = (1.0 - max (0.0, dot (V_32, N_31)));
    rim_35 = tmpvar_41;
    highp vec3 tmpvar_42;
    tmpvar_42 = _WorldSpaceLightPos0.xyz;
    lightDir_34 = tmpvar_42;
    mediump vec3 tmpvar_43;
    tmpvar_43 = normalize(lightDir_34);
    highp float tmpvar_44;
    tmpvar_44 = dot (N_31, tmpvar_43);
    rimLightDir_33 = tmpvar_44;
    rim_35 = (rim_35 * (0.5 + rimLightDir_33));
    highp int tmpvar_45;
    if ((rim_35 > HRRimColor_36.w)) {
      tmpvar_45 = 1;
    } else {
      tmpvar_45 = 0;
    };
    rim_35 = float(tmpvar_45);
    mediump vec3 tmpvar_46;
    tmpvar_46 = (outColor_4.xyz + ((HRRimColor_36.xyz * rim_35) * _HRRimPower));
    mediump float tmpvar_47;
    tmpvar_47 = clamp (tmpvar_38, 0.0, 1.0);
    highp vec3 tmpvar_48;
    tmpvar_48 = mix (outColor_4.xyz, tmpvar_40, vec3((tmpvar_47 * _RGRatio)));
    rgColor_37 = tmpvar_48;
    highp vec3 tmpvar_49;
    tmpvar_49 = mix (rgColor_37, tmpvar_46, vec3(float(_HRRimIntensity)));
    rgColor_37 = tmpvar_49;
    outColor_4.xyz = rgColor_37;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_50;
      N_50 = tmpvar_23;
      highp vec3 V_51;
      V_51 = V_2;
      mediump float rimLightDir_52;
      mediump vec3 lightDir_53;
      mediump float rim_54;
      mediump vec4 HRRimColor_55;
      mediump vec3 rgColor_56;
      mediump float tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = pow (clamp ((1.001 - 
        dot (V_51, N_50)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_57 = (_RGBias + (tmpvar_58 * _RGScale));
      mediump vec3 tmpvar_59;
      tmpvar_59 = (tmpvar_57 * _RGColor).xyz;
      rgColor_56 = tmpvar_59;
      HRRimColor_55 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_55 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_55 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_55 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_55 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - max (0.0, dot (V_51, N_50)));
      rim_54 = tmpvar_60;
      highp vec3 tmpvar_61;
      tmpvar_61 = _WorldSpaceLightPos0.xyz;
      lightDir_53 = tmpvar_61;
      mediump vec3 tmpvar_62;
      tmpvar_62 = normalize(lightDir_53);
      highp float tmpvar_63;
      tmpvar_63 = dot (N_50, tmpvar_62);
      rimLightDir_52 = tmpvar_63;
      rim_54 = (rim_54 * (0.5 + rimLightDir_52));
      highp int tmpvar_64;
      if ((rim_54 > HRRimColor_55.w)) {
        tmpvar_64 = 1;
      } else {
        tmpvar_64 = 0;
      };
      rim_54 = float(tmpvar_64);
      mediump vec3 tmpvar_65;
      tmpvar_65 = (outColor_4.xyz + max ((
        (HRRimColor_55.xyz * rim_54)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_56 = (outColor_4.xyz + max (tmpvar_59, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_66;
      tmpvar_66 = mix (rgColor_56, tmpvar_65, vec3(float(_HRRimIntensity)));
      rgColor_56 = tmpvar_66;
      outColor_4.xyz = rgColor_56;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_67;
    scrpos_67 = xlv_TEXCOORD3;
    mediump float a_68;
    a_68 = xlv_TEXCOORD3.z;
    if ((a_68 < 0.95)) {
      scrpos_67.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_68 = (a_68 * 17.0);
      highp float tmpvar_69;
      tmpvar_69 = (scrpos_67.y / 4.0);
      highp float tmpvar_70;
      tmpvar_70 = (fract(abs(tmpvar_69)) * 4.0);
      highp float tmpvar_71;
      if ((tmpvar_69 >= 0.0)) {
        tmpvar_71 = tmpvar_70;
      } else {
        tmpvar_71 = -(tmpvar_70);
      };
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_67.x / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float x_75;
      x_75 = ((a_68 - _DITHERMATRIX[
        int(tmpvar_71)
      ][
        int(tmpvar_74)
      ]) - 0.01);
      if ((x_75 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_74;
    N_74 = tmpvar_66;
    highp vec3 V_75;
    V_75 = V_2;
    mediump float rimLightDir_76;
    mediump vec3 lightDir_77;
    mediump float rim_78;
    mediump vec4 HRRimColor_79;
    mediump vec3 rgColor_80;
    mediump float tmpvar_81;
    highp float tmpvar_82;
    tmpvar_82 = pow (clamp ((1.001 - 
      dot (V_75, N_74)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_81 = (_RGBias + (tmpvar_82 * _RGScale));
    mediump vec3 tmpvar_83;
    tmpvar_83 = (tmpvar_81 * _RGColor).xyz;
    rgColor_80 = tmpvar_83;
    HRRimColor_79 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_79 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_79 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_79 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_79 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_84;
    tmpvar_84 = (1.0 - max (0.0, dot (V_75, N_74)));
    rim_78 = tmpvar_84;
    highp vec3 tmpvar_85;
    tmpvar_85 = _WorldSpaceLightPos0.xyz;
    lightDir_77 = tmpvar_85;
    mediump vec3 tmpvar_86;
    tmpvar_86 = normalize(lightDir_77);
    highp float tmpvar_87;
    tmpvar_87 = dot (N_74, tmpvar_86);
    rimLightDir_76 = tmpvar_87;
    rim_78 = (rim_78 * (0.5 + rimLightDir_76));
    highp int tmpvar_88;
    if ((rim_78 > HRRimColor_79.w)) {
      tmpvar_88 = 1;
    } else {
      tmpvar_88 = 0;
    };
    rim_78 = float(tmpvar_88);
    mediump vec3 tmpvar_89;
    tmpvar_89 = (outColor_4.xyz + ((HRRimColor_79.xyz * rim_78) * _HRRimPower));
    mediump float tmpvar_90;
    tmpvar_90 = clamp (tmpvar_81, 0.0, 1.0);
    highp vec3 tmpvar_91;
    tmpvar_91 = mix (outColor_4.xyz, tmpvar_83, vec3((tmpvar_90 * _RGRatio)));
    rgColor_80 = tmpvar_91;
    highp vec3 tmpvar_92;
    tmpvar_92 = mix (rgColor_80, tmpvar_89, vec3(float(_HRRimIntensity)));
    rgColor_80 = tmpvar_92;
    outColor_4.xyz = rgColor_80;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_93;
      N_93 = tmpvar_66;
      highp vec3 V_94;
      V_94 = V_2;
      mediump float rimLightDir_95;
      mediump vec3 lightDir_96;
      mediump float rim_97;
      mediump vec4 HRRimColor_98;
      mediump vec3 rgColor_99;
      mediump float tmpvar_100;
      highp float tmpvar_101;
      tmpvar_101 = pow (clamp ((1.001 - 
        dot (V_94, N_93)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_100 = (_RGBias + (tmpvar_101 * _RGScale));
      mediump vec3 tmpvar_102;
      tmpvar_102 = (tmpvar_100 * _RGColor).xyz;
      rgColor_99 = tmpvar_102;
      HRRimColor_98 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_98 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_98 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_98 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_98 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_103;
      tmpvar_103 = (1.0 - max (0.0, dot (V_94, N_93)));
      rim_97 = tmpvar_103;
      highp vec3 tmpvar_104;
      tmpvar_104 = _WorldSpaceLightPos0.xyz;
      lightDir_96 = tmpvar_104;
      mediump vec3 tmpvar_105;
      tmpvar_105 = normalize(lightDir_96);
      highp float tmpvar_106;
      tmpvar_106 = dot (N_93, tmpvar_105);
      rimLightDir_95 = tmpvar_106;
      rim_97 = (rim_97 * (0.5 + rimLightDir_95));
      highp int tmpvar_107;
      if ((rim_97 > HRRimColor_98.w)) {
        tmpvar_107 = 1;
      } else {
        tmpvar_107 = 0;
      };
      rim_97 = float(tmpvar_107);
      mediump vec3 tmpvar_108;
      tmpvar_108 = (outColor_4.xyz + max ((
        (HRRimColor_98.xyz * rim_97)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_99 = (outColor_4.xyz + max (tmpvar_102, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_109;
      tmpvar_109 = mix (rgColor_99, tmpvar_108, vec3(float(_HRRimIntensity)));
      rgColor_99 = tmpvar_109;
      outColor_4.xyz = rgColor_99;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_110;
    scrpos_110 = xlv_TEXCOORD3;
    mediump float a_111;
    a_111 = xlv_TEXCOORD3.z;
    if ((a_111 < 0.95)) {
      scrpos_110.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_111 = (a_111 * 17.0);
      highp float tmpvar_112;
      tmpvar_112 = (scrpos_110.y / 4.0);
      highp float tmpvar_113;
      tmpvar_113 = (fract(abs(tmpvar_112)) * 4.0);
      highp float tmpvar_114;
      if ((tmpvar_112 >= 0.0)) {
        tmpvar_114 = tmpvar_113;
      } else {
        tmpvar_114 = -(tmpvar_113);
      };
      highp float tmpvar_115;
      tmpvar_115 = (scrpos_110.x / 4.0);
      highp float tmpvar_116;
      tmpvar_116 = (fract(abs(tmpvar_115)) * 4.0);
      highp float tmpvar_117;
      if ((tmpvar_115 >= 0.0)) {
        tmpvar_117 = tmpvar_116;
      } else {
        tmpvar_117 = -(tmpvar_116);
      };
      highp float x_118;
      x_118 = ((a_111 - _DITHERMATRIX[
        int(tmpvar_114)
      ][
        int(tmpvar_117)
      ]) - 0.01);
      if ((x_118 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_74;
    N_74 = tmpvar_66;
    highp vec3 V_75;
    V_75 = V_2;
    mediump float rimLightDir_76;
    mediump vec3 lightDir_77;
    mediump float rim_78;
    mediump vec4 HRRimColor_79;
    mediump vec3 rgColor_80;
    mediump float tmpvar_81;
    highp float tmpvar_82;
    tmpvar_82 = pow (clamp ((1.001 - 
      dot (V_75, N_74)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_81 = (_RGBias + (tmpvar_82 * _RGScale));
    mediump vec3 tmpvar_83;
    tmpvar_83 = (tmpvar_81 * _RGColor).xyz;
    rgColor_80 = tmpvar_83;
    HRRimColor_79 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_79 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_79 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_79 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_79 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_84;
    tmpvar_84 = (1.0 - max (0.0, dot (V_75, N_74)));
    rim_78 = tmpvar_84;
    highp vec3 tmpvar_85;
    tmpvar_85 = _WorldSpaceLightPos0.xyz;
    lightDir_77 = tmpvar_85;
    mediump vec3 tmpvar_86;
    tmpvar_86 = normalize(lightDir_77);
    highp float tmpvar_87;
    tmpvar_87 = dot (N_74, tmpvar_86);
    rimLightDir_76 = tmpvar_87;
    rim_78 = (rim_78 * (0.5 + rimLightDir_76));
    highp int tmpvar_88;
    if ((rim_78 > HRRimColor_79.w)) {
      tmpvar_88 = 1;
    } else {
      tmpvar_88 = 0;
    };
    rim_78 = float(tmpvar_88);
    mediump vec3 tmpvar_89;
    tmpvar_89 = (outColor_4.xyz + ((HRRimColor_79.xyz * rim_78) * _HRRimPower));
    mediump float tmpvar_90;
    tmpvar_90 = clamp (tmpvar_81, 0.0, 1.0);
    highp vec3 tmpvar_91;
    tmpvar_91 = mix (outColor_4.xyz, tmpvar_83, vec3((tmpvar_90 * _RGRatio)));
    rgColor_80 = tmpvar_91;
    highp vec3 tmpvar_92;
    tmpvar_92 = mix (rgColor_80, tmpvar_89, vec3(float(_HRRimIntensity)));
    rgColor_80 = tmpvar_92;
    outColor_4.xyz = rgColor_80;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_93;
      N_93 = tmpvar_66;
      highp vec3 V_94;
      V_94 = V_2;
      mediump float rimLightDir_95;
      mediump vec3 lightDir_96;
      mediump float rim_97;
      mediump vec4 HRRimColor_98;
      mediump vec3 rgColor_99;
      mediump float tmpvar_100;
      highp float tmpvar_101;
      tmpvar_101 = pow (clamp ((1.001 - 
        dot (V_94, N_93)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_100 = (_RGBias + (tmpvar_101 * _RGScale));
      mediump vec3 tmpvar_102;
      tmpvar_102 = (tmpvar_100 * _RGColor).xyz;
      rgColor_99 = tmpvar_102;
      HRRimColor_98 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_98 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_98 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_98 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_98 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_103;
      tmpvar_103 = (1.0 - max (0.0, dot (V_94, N_93)));
      rim_97 = tmpvar_103;
      highp vec3 tmpvar_104;
      tmpvar_104 = _WorldSpaceLightPos0.xyz;
      lightDir_96 = tmpvar_104;
      mediump vec3 tmpvar_105;
      tmpvar_105 = normalize(lightDir_96);
      highp float tmpvar_106;
      tmpvar_106 = dot (N_93, tmpvar_105);
      rimLightDir_95 = tmpvar_106;
      rim_97 = (rim_97 * (0.5 + rimLightDir_95));
      highp int tmpvar_107;
      if ((rim_97 > HRRimColor_98.w)) {
        tmpvar_107 = 1;
      } else {
        tmpvar_107 = 0;
      };
      rim_97 = float(tmpvar_107);
      mediump vec3 tmpvar_108;
      tmpvar_108 = (outColor_4.xyz + max ((
        (HRRimColor_98.xyz * rim_97)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_99 = (outColor_4.xyz + max (tmpvar_102, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_109;
      tmpvar_109 = mix (rgColor_99, tmpvar_108, vec3(float(_HRRimIntensity)));
      rgColor_99 = tmpvar_109;
      outColor_4.xyz = rgColor_99;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_110;
    scrpos_110 = xlv_TEXCOORD3;
    mediump float a_111;
    a_111 = xlv_TEXCOORD3.z;
    if ((a_111 < 0.95)) {
      scrpos_110.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_111 = (a_111 * 17.0);
      highp float tmpvar_112;
      tmpvar_112 = (scrpos_110.y / 4.0);
      highp float tmpvar_113;
      tmpvar_113 = (fract(abs(tmpvar_112)) * 4.0);
      highp float tmpvar_114;
      if ((tmpvar_112 >= 0.0)) {
        tmpvar_114 = tmpvar_113;
      } else {
        tmpvar_114 = -(tmpvar_113);
      };
      highp float tmpvar_115;
      tmpvar_115 = (scrpos_110.x / 4.0);
      highp float tmpvar_116;
      tmpvar_116 = (fract(abs(tmpvar_115)) * 4.0);
      highp float tmpvar_117;
      if ((tmpvar_115 >= 0.0)) {
        tmpvar_117 = tmpvar_116;
      } else {
        tmpvar_117 = -(tmpvar_116);
      };
      highp float x_118;
      x_118 = ((a_111 - _DITHERMATRIX[
        int(tmpvar_114)
      ][
        int(tmpvar_117)
      ]) - 0.01);
      if ((x_118 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_74;
    N_74 = tmpvar_66;
    highp vec3 V_75;
    V_75 = V_2;
    mediump float rimLightDir_76;
    mediump vec3 lightDir_77;
    mediump float rim_78;
    mediump vec4 HRRimColor_79;
    mediump vec3 rgColor_80;
    mediump float tmpvar_81;
    highp float tmpvar_82;
    tmpvar_82 = pow (clamp ((1.001 - 
      dot (V_75, N_74)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_81 = (_RGBias + (tmpvar_82 * _RGScale));
    mediump vec3 tmpvar_83;
    tmpvar_83 = (tmpvar_81 * _RGColor).xyz;
    rgColor_80 = tmpvar_83;
    HRRimColor_79 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_79 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_79 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_79 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_79 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_84;
    tmpvar_84 = (1.0 - max (0.0, dot (V_75, N_74)));
    rim_78 = tmpvar_84;
    highp vec3 tmpvar_85;
    tmpvar_85 = _WorldSpaceLightPos0.xyz;
    lightDir_77 = tmpvar_85;
    mediump vec3 tmpvar_86;
    tmpvar_86 = normalize(lightDir_77);
    highp float tmpvar_87;
    tmpvar_87 = dot (N_74, tmpvar_86);
    rimLightDir_76 = tmpvar_87;
    rim_78 = (rim_78 * (0.5 + rimLightDir_76));
    highp int tmpvar_88;
    if ((rim_78 > HRRimColor_79.w)) {
      tmpvar_88 = 1;
    } else {
      tmpvar_88 = 0;
    };
    rim_78 = float(tmpvar_88);
    mediump vec3 tmpvar_89;
    tmpvar_89 = (outColor_4.xyz + ((HRRimColor_79.xyz * rim_78) * _HRRimPower));
    mediump float tmpvar_90;
    tmpvar_90 = clamp (tmpvar_81, 0.0, 1.0);
    highp vec3 tmpvar_91;
    tmpvar_91 = mix (outColor_4.xyz, tmpvar_83, vec3((tmpvar_90 * _RGRatio)));
    rgColor_80 = tmpvar_91;
    highp vec3 tmpvar_92;
    tmpvar_92 = mix (rgColor_80, tmpvar_89, vec3(float(_HRRimIntensity)));
    rgColor_80 = tmpvar_92;
    outColor_4.xyz = rgColor_80;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_93;
      N_93 = tmpvar_66;
      highp vec3 V_94;
      V_94 = V_2;
      mediump float rimLightDir_95;
      mediump vec3 lightDir_96;
      mediump float rim_97;
      mediump vec4 HRRimColor_98;
      mediump vec3 rgColor_99;
      mediump float tmpvar_100;
      highp float tmpvar_101;
      tmpvar_101 = pow (clamp ((1.001 - 
        dot (V_94, N_93)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_100 = (_RGBias + (tmpvar_101 * _RGScale));
      mediump vec3 tmpvar_102;
      tmpvar_102 = (tmpvar_100 * _RGColor).xyz;
      rgColor_99 = tmpvar_102;
      HRRimColor_98 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_98 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_98 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_98 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_98 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_103;
      tmpvar_103 = (1.0 - max (0.0, dot (V_94, N_93)));
      rim_97 = tmpvar_103;
      highp vec3 tmpvar_104;
      tmpvar_104 = _WorldSpaceLightPos0.xyz;
      lightDir_96 = tmpvar_104;
      mediump vec3 tmpvar_105;
      tmpvar_105 = normalize(lightDir_96);
      highp float tmpvar_106;
      tmpvar_106 = dot (N_93, tmpvar_105);
      rimLightDir_95 = tmpvar_106;
      rim_97 = (rim_97 * (0.5 + rimLightDir_95));
      highp int tmpvar_107;
      if ((rim_97 > HRRimColor_98.w)) {
        tmpvar_107 = 1;
      } else {
        tmpvar_107 = 0;
      };
      rim_97 = float(tmpvar_107);
      mediump vec3 tmpvar_108;
      tmpvar_108 = (outColor_4.xyz + max ((
        (HRRimColor_98.xyz * rim_97)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_99 = (outColor_4.xyz + max (tmpvar_102, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_109;
      tmpvar_109 = mix (rgColor_99, tmpvar_108, vec3(float(_HRRimIntensity)));
      rgColor_99 = tmpvar_109;
      outColor_4.xyz = rgColor_99;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_110;
    scrpos_110 = xlv_TEXCOORD3;
    mediump float a_111;
    a_111 = xlv_TEXCOORD3.z;
    if ((a_111 < 0.95)) {
      scrpos_110.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_111 = (a_111 * 17.0);
      highp float tmpvar_112;
      tmpvar_112 = (scrpos_110.y / 4.0);
      highp float tmpvar_113;
      tmpvar_113 = (fract(abs(tmpvar_112)) * 4.0);
      highp float tmpvar_114;
      if ((tmpvar_112 >= 0.0)) {
        tmpvar_114 = tmpvar_113;
      } else {
        tmpvar_114 = -(tmpvar_113);
      };
      highp float tmpvar_115;
      tmpvar_115 = (scrpos_110.x / 4.0);
      highp float tmpvar_116;
      tmpvar_116 = (fract(abs(tmpvar_115)) * 4.0);
      highp float tmpvar_117;
      if ((tmpvar_115 >= 0.0)) {
        tmpvar_117 = tmpvar_116;
      } else {
        tmpvar_117 = -(tmpvar_116);
      };
      highp float x_118;
      x_118 = ((a_111 - _DITHERMATRIX[
        int(tmpvar_114)
      ][
        int(tmpvar_117)
      ]) - 0.01);
      if ((x_118 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_36;
    scrpos_36 = xlv_TEXCOORD3;
    mediump float a_37;
    a_37 = xlv_TEXCOORD3.z;
    if ((a_37 < 0.95)) {
      scrpos_36.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_37 = (a_37 * 17.0);
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_36.y / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float tmpvar_41;
      tmpvar_41 = (scrpos_36.x / 4.0);
      highp float tmpvar_42;
      tmpvar_42 = (fract(abs(tmpvar_41)) * 4.0);
      highp float tmpvar_43;
      if ((tmpvar_41 >= 0.0)) {
        tmpvar_43 = tmpvar_42;
      } else {
        tmpvar_43 = -(tmpvar_42);
      };
      highp float x_44;
      x_44 = ((a_37 - _DITHERMATRIX[
        int(tmpvar_40)
      ][
        int(tmpvar_43)
      ]) - 0.01);
      if ((x_44 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_36;
    scrpos_36 = xlv_TEXCOORD3;
    mediump float a_37;
    a_37 = xlv_TEXCOORD3.z;
    if ((a_37 < 0.95)) {
      scrpos_36.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_37 = (a_37 * 17.0);
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_36.y / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float tmpvar_41;
      tmpvar_41 = (scrpos_36.x / 4.0);
      highp float tmpvar_42;
      tmpvar_42 = (fract(abs(tmpvar_41)) * 4.0);
      highp float tmpvar_43;
      if ((tmpvar_41 >= 0.0)) {
        tmpvar_43 = tmpvar_42;
      } else {
        tmpvar_43 = -(tmpvar_42);
      };
      highp float x_44;
      x_44 = ((a_37 - _DITHERMATRIX[
        int(tmpvar_40)
      ][
        int(tmpvar_43)
      ]) - 0.01);
      if ((x_44 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_36;
    scrpos_36 = xlv_TEXCOORD3;
    mediump float a_37;
    a_37 = xlv_TEXCOORD3.z;
    if ((a_37 < 0.95)) {
      scrpos_36.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_37 = (a_37 * 17.0);
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_36.y / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float tmpvar_41;
      tmpvar_41 = (scrpos_36.x / 4.0);
      highp float tmpvar_42;
      tmpvar_42 = (fract(abs(tmpvar_41)) * 4.0);
      highp float tmpvar_43;
      if ((tmpvar_41 >= 0.0)) {
        tmpvar_43 = tmpvar_42;
      } else {
        tmpvar_43 = -(tmpvar_42);
      };
      highp float x_44;
      x_44 = ((a_37 - _DITHERMATRIX[
        int(tmpvar_40)
      ][
        int(tmpvar_43)
      ]) - 0.01);
      if ((x_44 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_36;
    scrpos_36 = xlv_TEXCOORD3;
    mediump float a_37;
    a_37 = xlv_TEXCOORD3.z;
    if ((a_37 < 0.95)) {
      scrpos_36.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_37 = (a_37 * 17.0);
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_36.y / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float tmpvar_41;
      tmpvar_41 = (scrpos_36.x / 4.0);
      highp float tmpvar_42;
      tmpvar_42 = (fract(abs(tmpvar_41)) * 4.0);
      highp float tmpvar_43;
      if ((tmpvar_41 >= 0.0)) {
        tmpvar_43 = tmpvar_42;
      } else {
        tmpvar_43 = -(tmpvar_42);
      };
      highp float x_44;
      x_44 = ((a_37 - _DITHERMATRIX[
        int(tmpvar_40)
      ][
        int(tmpvar_43)
      ]) - 0.01);
      if ((x_44 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_36;
    scrpos_36 = xlv_TEXCOORD3;
    mediump float a_37;
    a_37 = xlv_TEXCOORD3.z;
    if ((a_37 < 0.95)) {
      scrpos_36.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_37 = (a_37 * 17.0);
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_36.y / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float tmpvar_41;
      tmpvar_41 = (scrpos_36.x / 4.0);
      highp float tmpvar_42;
      tmpvar_42 = (fract(abs(tmpvar_41)) * 4.0);
      highp float tmpvar_43;
      if ((tmpvar_41 >= 0.0)) {
        tmpvar_43 = tmpvar_42;
      } else {
        tmpvar_43 = -(tmpvar_42);
      };
      highp float x_44;
      x_44 = ((a_37 - _DITHERMATRIX[
        int(tmpvar_40)
      ][
        int(tmpvar_43)
      ]) - 0.01);
      if ((x_44 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_36;
    scrpos_36 = xlv_TEXCOORD3;
    mediump float a_37;
    a_37 = xlv_TEXCOORD3.z;
    if ((a_37 < 0.95)) {
      scrpos_36.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_37 = (a_37 * 17.0);
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_36.y / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float tmpvar_41;
      tmpvar_41 = (scrpos_36.x / 4.0);
      highp float tmpvar_42;
      tmpvar_42 = (fract(abs(tmpvar_41)) * 4.0);
      highp float tmpvar_43;
      if ((tmpvar_41 >= 0.0)) {
        tmpvar_43 = tmpvar_42;
      } else {
        tmpvar_43 = -(tmpvar_42);
      };
      highp float x_44;
      x_44 = ((a_37 - _DITHERMATRIX[
        int(tmpvar_40)
      ][
        int(tmpvar_43)
      ]) - 0.01);
      if ((x_44 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_35 = tmpvar_36;
  spColor_35.w = (spColor_35.w * _SPOpaqueness);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * tmpvar_37.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (tmpvar_23, I_40)
   * tmpvar_23)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_44;
      tmpvar_44 = mix (spColor_35.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35.xyz = tmpvar_44;
    };
  };
  spColor_35.xyz = (spColor_35.xyz * _Color.xyz);
  highp vec4 tmpvar_45;
  tmpvar_45 = mix (outColor_4, spColor_35, vec4(xlat_mutable_SPIntensity));
  spColor_35 = tmpvar_45;
  outColor_4 = spColor_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_46;
    scrpos_46 = xlv_TEXCOORD3;
    mediump float a_47;
    a_47 = xlv_TEXCOORD3.z;
    if ((a_47 < 0.95)) {
      scrpos_46.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_47 = (a_47 * 17.0);
      highp float tmpvar_48;
      tmpvar_48 = (scrpos_46.y / 4.0);
      highp float tmpvar_49;
      tmpvar_49 = (fract(abs(tmpvar_48)) * 4.0);
      highp float tmpvar_50;
      if ((tmpvar_48 >= 0.0)) {
        tmpvar_50 = tmpvar_49;
      } else {
        tmpvar_50 = -(tmpvar_49);
      };
      highp float tmpvar_51;
      tmpvar_51 = (scrpos_46.x / 4.0);
      highp float tmpvar_52;
      tmpvar_52 = (fract(abs(tmpvar_51)) * 4.0);
      highp float tmpvar_53;
      if ((tmpvar_51 >= 0.0)) {
        tmpvar_53 = tmpvar_52;
      } else {
        tmpvar_53 = -(tmpvar_52);
      };
      highp float x_54;
      x_54 = ((a_47 - _DITHERMATRIX[
        int(tmpvar_50)
      ][
        int(tmpvar_53)
      ]) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_35.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_35 = tmpvar_36;
  spColor_35.w = (spColor_35.w * _SPOpaqueness);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * tmpvar_37.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (tmpvar_23, I_40)
   * tmpvar_23)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_44;
      tmpvar_44 = mix (spColor_35.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35.xyz = tmpvar_44;
    };
  };
  spColor_35.xyz = (spColor_35.xyz * _Color.xyz);
  highp vec4 tmpvar_45;
  tmpvar_45 = mix (outColor_4, spColor_35, vec4(xlat_mutable_SPIntensity));
  spColor_35 = tmpvar_45;
  outColor_4 = spColor_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_46;
    scrpos_46 = xlv_TEXCOORD3;
    mediump float a_47;
    a_47 = xlv_TEXCOORD3.z;
    if ((a_47 < 0.95)) {
      scrpos_46.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_47 = (a_47 * 17.0);
      highp float tmpvar_48;
      tmpvar_48 = (scrpos_46.y / 4.0);
      highp float tmpvar_49;
      tmpvar_49 = (fract(abs(tmpvar_48)) * 4.0);
      highp float tmpvar_50;
      if ((tmpvar_48 >= 0.0)) {
        tmpvar_50 = tmpvar_49;
      } else {
        tmpvar_50 = -(tmpvar_49);
      };
      highp float tmpvar_51;
      tmpvar_51 = (scrpos_46.x / 4.0);
      highp float tmpvar_52;
      tmpvar_52 = (fract(abs(tmpvar_51)) * 4.0);
      highp float tmpvar_53;
      if ((tmpvar_51 >= 0.0)) {
        tmpvar_53 = tmpvar_52;
      } else {
        tmpvar_53 = -(tmpvar_52);
      };
      highp float x_54;
      x_54 = ((a_47 - _DITHERMATRIX[
        int(tmpvar_50)
      ][
        int(tmpvar_53)
      ]) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_35.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_35 = tmpvar_36;
  spColor_35.w = (spColor_35.w * _SPOpaqueness);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * tmpvar_37.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (tmpvar_23, I_40)
   * tmpvar_23)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_44;
      tmpvar_44 = mix (spColor_35.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35.xyz = tmpvar_44;
    };
  };
  spColor_35.xyz = (spColor_35.xyz * _Color.xyz);
  highp vec4 tmpvar_45;
  tmpvar_45 = mix (outColor_4, spColor_35, vec4(xlat_mutable_SPIntensity));
  spColor_35 = tmpvar_45;
  outColor_4 = spColor_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_46;
    scrpos_46 = xlv_TEXCOORD3;
    mediump float a_47;
    a_47 = xlv_TEXCOORD3.z;
    if ((a_47 < 0.95)) {
      scrpos_46.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_47 = (a_47 * 17.0);
      highp float tmpvar_48;
      tmpvar_48 = (scrpos_46.y / 4.0);
      highp float tmpvar_49;
      tmpvar_49 = (fract(abs(tmpvar_48)) * 4.0);
      highp float tmpvar_50;
      if ((tmpvar_48 >= 0.0)) {
        tmpvar_50 = tmpvar_49;
      } else {
        tmpvar_50 = -(tmpvar_49);
      };
      highp float tmpvar_51;
      tmpvar_51 = (scrpos_46.x / 4.0);
      highp float tmpvar_52;
      tmpvar_52 = (fract(abs(tmpvar_51)) * 4.0);
      highp float tmpvar_53;
      if ((tmpvar_51 >= 0.0)) {
        tmpvar_53 = tmpvar_52;
      } else {
        tmpvar_53 = -(tmpvar_52);
      };
      highp float x_54;
      x_54 = ((a_47 - _DITHERMATRIX[
        int(tmpvar_50)
      ][
        int(tmpvar_53)
      ]) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_35.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_78 = tmpvar_79;
  spColor_78.w = (spColor_78.w * _SPOpaqueness);
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * tmpvar_80.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (tmpvar_66, I_83)
   * tmpvar_66)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_87;
      tmpvar_87 = mix (spColor_78.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78.xyz = tmpvar_87;
    };
  };
  spColor_78.xyz = (spColor_78.xyz * _Color.xyz);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (outColor_4, spColor_78, vec4(xlat_mutable_SPIntensity));
  spColor_78 = tmpvar_88;
  outColor_4 = spColor_78;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_89;
    scrpos_89 = xlv_TEXCOORD3;
    mediump float a_90;
    a_90 = xlv_TEXCOORD3.z;
    if ((a_90 < 0.95)) {
      scrpos_89.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_90 = (a_90 * 17.0);
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_89.y / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float tmpvar_94;
      tmpvar_94 = (scrpos_89.x / 4.0);
      highp float tmpvar_95;
      tmpvar_95 = (fract(abs(tmpvar_94)) * 4.0);
      highp float tmpvar_96;
      if ((tmpvar_94 >= 0.0)) {
        tmpvar_96 = tmpvar_95;
      } else {
        tmpvar_96 = -(tmpvar_95);
      };
      highp float x_97;
      x_97 = ((a_90 - _DITHERMATRIX[
        int(tmpvar_93)
      ][
        int(tmpvar_96)
      ]) - 0.01);
      if ((x_97 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_78.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_78 = tmpvar_79;
  spColor_78.w = (spColor_78.w * _SPOpaqueness);
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * tmpvar_80.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (tmpvar_66, I_83)
   * tmpvar_66)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_87;
      tmpvar_87 = mix (spColor_78.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78.xyz = tmpvar_87;
    };
  };
  spColor_78.xyz = (spColor_78.xyz * _Color.xyz);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (outColor_4, spColor_78, vec4(xlat_mutable_SPIntensity));
  spColor_78 = tmpvar_88;
  outColor_4 = spColor_78;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_89;
    scrpos_89 = xlv_TEXCOORD3;
    mediump float a_90;
    a_90 = xlv_TEXCOORD3.z;
    if ((a_90 < 0.95)) {
      scrpos_89.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_90 = (a_90 * 17.0);
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_89.y / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float tmpvar_94;
      tmpvar_94 = (scrpos_89.x / 4.0);
      highp float tmpvar_95;
      tmpvar_95 = (fract(abs(tmpvar_94)) * 4.0);
      highp float tmpvar_96;
      if ((tmpvar_94 >= 0.0)) {
        tmpvar_96 = tmpvar_95;
      } else {
        tmpvar_96 = -(tmpvar_95);
      };
      highp float x_97;
      x_97 = ((a_90 - _DITHERMATRIX[
        int(tmpvar_93)
      ][
        int(tmpvar_96)
      ]) - 0.01);
      if ((x_97 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_78.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_78 = tmpvar_79;
  spColor_78.w = (spColor_78.w * _SPOpaqueness);
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * tmpvar_80.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (tmpvar_66, I_83)
   * tmpvar_66)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_87;
      tmpvar_87 = mix (spColor_78.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78.xyz = tmpvar_87;
    };
  };
  spColor_78.xyz = (spColor_78.xyz * _Color.xyz);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (outColor_4, spColor_78, vec4(xlat_mutable_SPIntensity));
  spColor_78 = tmpvar_88;
  outColor_4 = spColor_78;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_89;
    scrpos_89 = xlv_TEXCOORD3;
    mediump float a_90;
    a_90 = xlv_TEXCOORD3.z;
    if ((a_90 < 0.95)) {
      scrpos_89.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_90 = (a_90 * 17.0);
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_89.y / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float tmpvar_94;
      tmpvar_94 = (scrpos_89.x / 4.0);
      highp float tmpvar_95;
      tmpvar_95 = (fract(abs(tmpvar_94)) * 4.0);
      highp float tmpvar_96;
      if ((tmpvar_94 >= 0.0)) {
        tmpvar_96 = tmpvar_95;
      } else {
        tmpvar_96 = -(tmpvar_95);
      };
      highp float x_97;
      x_97 = ((a_90 - _DITHERMATRIX[
        int(tmpvar_93)
      ][
        int(tmpvar_96)
      ]) - 0.01);
      if ((x_97 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_78.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if ((_RGBlendType == 1)) {
    highp vec3 N_36;
    N_36 = tmpvar_13;
    highp vec3 V_37;
    V_37 = V_2;
    mediump float rimLightDir_38;
    mediump vec3 lightDir_39;
    mediump float rim_40;
    mediump vec4 HRRimColor_41;
    mediump vec3 rgColor_42;
    mediump float tmpvar_43;
    highp float tmpvar_44;
    tmpvar_44 = pow (clamp ((1.001 - 
      dot (V_37, N_36)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_43 = (_RGBias + (tmpvar_44 * _RGScale));
    mediump vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_43 * _RGColor).xyz;
    rgColor_42 = tmpvar_45;
    HRRimColor_41 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_41 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_41 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_41 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_41 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_46;
    tmpvar_46 = (1.0 - max (0.0, dot (V_37, N_36)));
    rim_40 = tmpvar_46;
    highp vec3 tmpvar_47;
    tmpvar_47 = _WorldSpaceLightPos0.xyz;
    lightDir_39 = tmpvar_47;
    mediump vec3 tmpvar_48;
    tmpvar_48 = normalize(lightDir_39);
    highp float tmpvar_49;
    tmpvar_49 = dot (N_36, tmpvar_48);
    rimLightDir_38 = tmpvar_49;
    rim_40 = (rim_40 * (0.5 + rimLightDir_38));
    highp int tmpvar_50;
    if ((rim_40 > HRRimColor_41.w)) {
      tmpvar_50 = 1;
    } else {
      tmpvar_50 = 0;
    };
    rim_40 = float(tmpvar_50);
    mediump vec3 tmpvar_51;
    tmpvar_51 = (spColor_25.xyz + ((HRRimColor_41.xyz * rim_40) * _HRRimPower));
    mediump float tmpvar_52;
    tmpvar_52 = clamp (tmpvar_43, 0.0, 1.0);
    highp vec3 tmpvar_53;
    tmpvar_53 = mix (spColor_25.xyz, tmpvar_45, vec3((tmpvar_52 * _RGRatio)));
    rgColor_42 = tmpvar_53;
    highp vec3 tmpvar_54;
    tmpvar_54 = mix (rgColor_42, tmpvar_51, vec3(float(_HRRimIntensity)));
    rgColor_42 = tmpvar_54;
    outColor_5.xyz = rgColor_42;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_55;
      N_55 = tmpvar_13;
      highp vec3 V_56;
      V_56 = V_2;
      mediump float rimLightDir_57;
      mediump vec3 lightDir_58;
      mediump float rim_59;
      mediump vec4 HRRimColor_60;
      mediump vec3 rgColor_61;
      mediump float tmpvar_62;
      highp float tmpvar_63;
      tmpvar_63 = pow (clamp ((1.001 - 
        dot (V_56, N_55)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_62 = (_RGBias + (tmpvar_63 * _RGScale));
      mediump vec3 tmpvar_64;
      tmpvar_64 = (tmpvar_62 * _RGColor).xyz;
      rgColor_61 = tmpvar_64;
      HRRimColor_60 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_60 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_60 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_60 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_60 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - max (0.0, dot (V_56, N_55)));
      rim_59 = tmpvar_65;
      highp vec3 tmpvar_66;
      tmpvar_66 = _WorldSpaceLightPos0.xyz;
      lightDir_58 = tmpvar_66;
      mediump vec3 tmpvar_67;
      tmpvar_67 = normalize(lightDir_58);
      highp float tmpvar_68;
      tmpvar_68 = dot (N_55, tmpvar_67);
      rimLightDir_57 = tmpvar_68;
      rim_59 = (rim_59 * (0.5 + rimLightDir_57));
      highp int tmpvar_69;
      if ((rim_59 > HRRimColor_60.w)) {
        tmpvar_69 = 1;
      } else {
        tmpvar_69 = 0;
      };
      rim_59 = float(tmpvar_69);
      mediump vec3 tmpvar_70;
      tmpvar_70 = (outColor_5.xyz + max ((
        (HRRimColor_60.xyz * rim_59)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_61 = (outColor_5.xyz + max (tmpvar_64, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_71;
      tmpvar_71 = mix (rgColor_61, tmpvar_70, vec3(float(_HRRimIntensity)));
      rgColor_61 = tmpvar_71;
      outColor_5.xyz = rgColor_61;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_72;
    scrpos_72 = xlv_TEXCOORD3;
    mediump float a_73;
    a_73 = xlv_TEXCOORD3.z;
    if ((a_73 < 0.95)) {
      scrpos_72.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_73 = (a_73 * 17.0);
      highp float tmpvar_74;
      tmpvar_74 = (scrpos_72.y / 4.0);
      highp float tmpvar_75;
      tmpvar_75 = (fract(abs(tmpvar_74)) * 4.0);
      highp float tmpvar_76;
      if ((tmpvar_74 >= 0.0)) {
        tmpvar_76 = tmpvar_75;
      } else {
        tmpvar_76 = -(tmpvar_75);
      };
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_72.x / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float x_80;
      x_80 = ((a_73 - _DITHERMATRIX[
        int(tmpvar_76)
      ][
        int(tmpvar_79)
      ]) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if ((_RGBlendType == 1)) {
    highp vec3 N_36;
    N_36 = tmpvar_13;
    highp vec3 V_37;
    V_37 = V_2;
    mediump float rimLightDir_38;
    mediump vec3 lightDir_39;
    mediump float rim_40;
    mediump vec4 HRRimColor_41;
    mediump vec3 rgColor_42;
    mediump float tmpvar_43;
    highp float tmpvar_44;
    tmpvar_44 = pow (clamp ((1.001 - 
      dot (V_37, N_36)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_43 = (_RGBias + (tmpvar_44 * _RGScale));
    mediump vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_43 * _RGColor).xyz;
    rgColor_42 = tmpvar_45;
    HRRimColor_41 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_41 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_41 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_41 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_41 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_46;
    tmpvar_46 = (1.0 - max (0.0, dot (V_37, N_36)));
    rim_40 = tmpvar_46;
    highp vec3 tmpvar_47;
    tmpvar_47 = _WorldSpaceLightPos0.xyz;
    lightDir_39 = tmpvar_47;
    mediump vec3 tmpvar_48;
    tmpvar_48 = normalize(lightDir_39);
    highp float tmpvar_49;
    tmpvar_49 = dot (N_36, tmpvar_48);
    rimLightDir_38 = tmpvar_49;
    rim_40 = (rim_40 * (0.5 + rimLightDir_38));
    highp int tmpvar_50;
    if ((rim_40 > HRRimColor_41.w)) {
      tmpvar_50 = 1;
    } else {
      tmpvar_50 = 0;
    };
    rim_40 = float(tmpvar_50);
    mediump vec3 tmpvar_51;
    tmpvar_51 = (spColor_25.xyz + ((HRRimColor_41.xyz * rim_40) * _HRRimPower));
    mediump float tmpvar_52;
    tmpvar_52 = clamp (tmpvar_43, 0.0, 1.0);
    highp vec3 tmpvar_53;
    tmpvar_53 = mix (spColor_25.xyz, tmpvar_45, vec3((tmpvar_52 * _RGRatio)));
    rgColor_42 = tmpvar_53;
    highp vec3 tmpvar_54;
    tmpvar_54 = mix (rgColor_42, tmpvar_51, vec3(float(_HRRimIntensity)));
    rgColor_42 = tmpvar_54;
    outColor_5.xyz = rgColor_42;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_55;
      N_55 = tmpvar_13;
      highp vec3 V_56;
      V_56 = V_2;
      mediump float rimLightDir_57;
      mediump vec3 lightDir_58;
      mediump float rim_59;
      mediump vec4 HRRimColor_60;
      mediump vec3 rgColor_61;
      mediump float tmpvar_62;
      highp float tmpvar_63;
      tmpvar_63 = pow (clamp ((1.001 - 
        dot (V_56, N_55)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_62 = (_RGBias + (tmpvar_63 * _RGScale));
      mediump vec3 tmpvar_64;
      tmpvar_64 = (tmpvar_62 * _RGColor).xyz;
      rgColor_61 = tmpvar_64;
      HRRimColor_60 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_60 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_60 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_60 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_60 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - max (0.0, dot (V_56, N_55)));
      rim_59 = tmpvar_65;
      highp vec3 tmpvar_66;
      tmpvar_66 = _WorldSpaceLightPos0.xyz;
      lightDir_58 = tmpvar_66;
      mediump vec3 tmpvar_67;
      tmpvar_67 = normalize(lightDir_58);
      highp float tmpvar_68;
      tmpvar_68 = dot (N_55, tmpvar_67);
      rimLightDir_57 = tmpvar_68;
      rim_59 = (rim_59 * (0.5 + rimLightDir_57));
      highp int tmpvar_69;
      if ((rim_59 > HRRimColor_60.w)) {
        tmpvar_69 = 1;
      } else {
        tmpvar_69 = 0;
      };
      rim_59 = float(tmpvar_69);
      mediump vec3 tmpvar_70;
      tmpvar_70 = (outColor_5.xyz + max ((
        (HRRimColor_60.xyz * rim_59)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_61 = (outColor_5.xyz + max (tmpvar_64, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_71;
      tmpvar_71 = mix (rgColor_61, tmpvar_70, vec3(float(_HRRimIntensity)));
      rgColor_61 = tmpvar_71;
      outColor_5.xyz = rgColor_61;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_72;
    scrpos_72 = xlv_TEXCOORD3;
    mediump float a_73;
    a_73 = xlv_TEXCOORD3.z;
    if ((a_73 < 0.95)) {
      scrpos_72.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_73 = (a_73 * 17.0);
      highp float tmpvar_74;
      tmpvar_74 = (scrpos_72.y / 4.0);
      highp float tmpvar_75;
      tmpvar_75 = (fract(abs(tmpvar_74)) * 4.0);
      highp float tmpvar_76;
      if ((tmpvar_74 >= 0.0)) {
        tmpvar_76 = tmpvar_75;
      } else {
        tmpvar_76 = -(tmpvar_75);
      };
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_72.x / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float x_80;
      x_80 = ((a_73 - _DITHERMATRIX[
        int(tmpvar_76)
      ][
        int(tmpvar_79)
      ]) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if ((_RGBlendType == 1)) {
    highp vec3 N_36;
    N_36 = tmpvar_13;
    highp vec3 V_37;
    V_37 = V_2;
    mediump float rimLightDir_38;
    mediump vec3 lightDir_39;
    mediump float rim_40;
    mediump vec4 HRRimColor_41;
    mediump vec3 rgColor_42;
    mediump float tmpvar_43;
    highp float tmpvar_44;
    tmpvar_44 = pow (clamp ((1.001 - 
      dot (V_37, N_36)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_43 = (_RGBias + (tmpvar_44 * _RGScale));
    mediump vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_43 * _RGColor).xyz;
    rgColor_42 = tmpvar_45;
    HRRimColor_41 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_41 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_41 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_41 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_41 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_46;
    tmpvar_46 = (1.0 - max (0.0, dot (V_37, N_36)));
    rim_40 = tmpvar_46;
    highp vec3 tmpvar_47;
    tmpvar_47 = _WorldSpaceLightPos0.xyz;
    lightDir_39 = tmpvar_47;
    mediump vec3 tmpvar_48;
    tmpvar_48 = normalize(lightDir_39);
    highp float tmpvar_49;
    tmpvar_49 = dot (N_36, tmpvar_48);
    rimLightDir_38 = tmpvar_49;
    rim_40 = (rim_40 * (0.5 + rimLightDir_38));
    highp int tmpvar_50;
    if ((rim_40 > HRRimColor_41.w)) {
      tmpvar_50 = 1;
    } else {
      tmpvar_50 = 0;
    };
    rim_40 = float(tmpvar_50);
    mediump vec3 tmpvar_51;
    tmpvar_51 = (spColor_25.xyz + ((HRRimColor_41.xyz * rim_40) * _HRRimPower));
    mediump float tmpvar_52;
    tmpvar_52 = clamp (tmpvar_43, 0.0, 1.0);
    highp vec3 tmpvar_53;
    tmpvar_53 = mix (spColor_25.xyz, tmpvar_45, vec3((tmpvar_52 * _RGRatio)));
    rgColor_42 = tmpvar_53;
    highp vec3 tmpvar_54;
    tmpvar_54 = mix (rgColor_42, tmpvar_51, vec3(float(_HRRimIntensity)));
    rgColor_42 = tmpvar_54;
    outColor_5.xyz = rgColor_42;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_55;
      N_55 = tmpvar_13;
      highp vec3 V_56;
      V_56 = V_2;
      mediump float rimLightDir_57;
      mediump vec3 lightDir_58;
      mediump float rim_59;
      mediump vec4 HRRimColor_60;
      mediump vec3 rgColor_61;
      mediump float tmpvar_62;
      highp float tmpvar_63;
      tmpvar_63 = pow (clamp ((1.001 - 
        dot (V_56, N_55)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_62 = (_RGBias + (tmpvar_63 * _RGScale));
      mediump vec3 tmpvar_64;
      tmpvar_64 = (tmpvar_62 * _RGColor).xyz;
      rgColor_61 = tmpvar_64;
      HRRimColor_60 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_60 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_60 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_60 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_60 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - max (0.0, dot (V_56, N_55)));
      rim_59 = tmpvar_65;
      highp vec3 tmpvar_66;
      tmpvar_66 = _WorldSpaceLightPos0.xyz;
      lightDir_58 = tmpvar_66;
      mediump vec3 tmpvar_67;
      tmpvar_67 = normalize(lightDir_58);
      highp float tmpvar_68;
      tmpvar_68 = dot (N_55, tmpvar_67);
      rimLightDir_57 = tmpvar_68;
      rim_59 = (rim_59 * (0.5 + rimLightDir_57));
      highp int tmpvar_69;
      if ((rim_59 > HRRimColor_60.w)) {
        tmpvar_69 = 1;
      } else {
        tmpvar_69 = 0;
      };
      rim_59 = float(tmpvar_69);
      mediump vec3 tmpvar_70;
      tmpvar_70 = (outColor_5.xyz + max ((
        (HRRimColor_60.xyz * rim_59)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_61 = (outColor_5.xyz + max (tmpvar_64, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_71;
      tmpvar_71 = mix (rgColor_61, tmpvar_70, vec3(float(_HRRimIntensity)));
      rgColor_61 = tmpvar_71;
      outColor_5.xyz = rgColor_61;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_72;
    scrpos_72 = xlv_TEXCOORD3;
    mediump float a_73;
    a_73 = xlv_TEXCOORD3.z;
    if ((a_73 < 0.95)) {
      scrpos_72.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_73 = (a_73 * 17.0);
      highp float tmpvar_74;
      tmpvar_74 = (scrpos_72.y / 4.0);
      highp float tmpvar_75;
      tmpvar_75 = (fract(abs(tmpvar_74)) * 4.0);
      highp float tmpvar_76;
      if ((tmpvar_74 >= 0.0)) {
        tmpvar_76 = tmpvar_75;
      } else {
        tmpvar_76 = -(tmpvar_75);
      };
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_72.x / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float x_80;
      x_80 = ((a_73 - _DITHERMATRIX[
        int(tmpvar_76)
      ][
        int(tmpvar_79)
      ]) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if ((_RGBlendType == 1)) {
    highp vec3 N_36;
    N_36 = tmpvar_13;
    highp vec3 V_37;
    V_37 = V_2;
    mediump float rimLightDir_38;
    mediump vec3 lightDir_39;
    mediump float rim_40;
    mediump vec4 HRRimColor_41;
    mediump vec3 rgColor_42;
    mediump float tmpvar_43;
    highp float tmpvar_44;
    tmpvar_44 = pow (clamp ((1.001 - 
      dot (V_37, N_36)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_43 = (_RGBias + (tmpvar_44 * _RGScale));
    mediump vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_43 * _RGColor).xyz;
    rgColor_42 = tmpvar_45;
    HRRimColor_41 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_41 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_41 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_41 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_41 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_46;
    tmpvar_46 = (1.0 - max (0.0, dot (V_37, N_36)));
    rim_40 = tmpvar_46;
    highp vec3 tmpvar_47;
    tmpvar_47 = _WorldSpaceLightPos0.xyz;
    lightDir_39 = tmpvar_47;
    mediump vec3 tmpvar_48;
    tmpvar_48 = normalize(lightDir_39);
    highp float tmpvar_49;
    tmpvar_49 = dot (N_36, tmpvar_48);
    rimLightDir_38 = tmpvar_49;
    rim_40 = (rim_40 * (0.5 + rimLightDir_38));
    highp int tmpvar_50;
    if ((rim_40 > HRRimColor_41.w)) {
      tmpvar_50 = 1;
    } else {
      tmpvar_50 = 0;
    };
    rim_40 = float(tmpvar_50);
    mediump vec3 tmpvar_51;
    tmpvar_51 = (spColor_25.xyz + ((HRRimColor_41.xyz * rim_40) * _HRRimPower));
    mediump float tmpvar_52;
    tmpvar_52 = clamp (tmpvar_43, 0.0, 1.0);
    highp vec3 tmpvar_53;
    tmpvar_53 = mix (spColor_25.xyz, tmpvar_45, vec3((tmpvar_52 * _RGRatio)));
    rgColor_42 = tmpvar_53;
    highp vec3 tmpvar_54;
    tmpvar_54 = mix (rgColor_42, tmpvar_51, vec3(float(_HRRimIntensity)));
    rgColor_42 = tmpvar_54;
    outColor_5.xyz = rgColor_42;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_55;
      N_55 = tmpvar_13;
      highp vec3 V_56;
      V_56 = V_2;
      mediump float rimLightDir_57;
      mediump vec3 lightDir_58;
      mediump float rim_59;
      mediump vec4 HRRimColor_60;
      mediump vec3 rgColor_61;
      mediump float tmpvar_62;
      highp float tmpvar_63;
      tmpvar_63 = pow (clamp ((1.001 - 
        dot (V_56, N_55)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_62 = (_RGBias + (tmpvar_63 * _RGScale));
      mediump vec3 tmpvar_64;
      tmpvar_64 = (tmpvar_62 * _RGColor).xyz;
      rgColor_61 = tmpvar_64;
      HRRimColor_60 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_60 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_60 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_60 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_60 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - max (0.0, dot (V_56, N_55)));
      rim_59 = tmpvar_65;
      highp vec3 tmpvar_66;
      tmpvar_66 = _WorldSpaceLightPos0.xyz;
      lightDir_58 = tmpvar_66;
      mediump vec3 tmpvar_67;
      tmpvar_67 = normalize(lightDir_58);
      highp float tmpvar_68;
      tmpvar_68 = dot (N_55, tmpvar_67);
      rimLightDir_57 = tmpvar_68;
      rim_59 = (rim_59 * (0.5 + rimLightDir_57));
      highp int tmpvar_69;
      if ((rim_59 > HRRimColor_60.w)) {
        tmpvar_69 = 1;
      } else {
        tmpvar_69 = 0;
      };
      rim_59 = float(tmpvar_69);
      mediump vec3 tmpvar_70;
      tmpvar_70 = (outColor_5.xyz + max ((
        (HRRimColor_60.xyz * rim_59)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_61 = (outColor_5.xyz + max (tmpvar_64, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_71;
      tmpvar_71 = mix (rgColor_61, tmpvar_70, vec3(float(_HRRimIntensity)));
      rgColor_61 = tmpvar_71;
      outColor_5.xyz = rgColor_61;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_72;
    scrpos_72 = xlv_TEXCOORD3;
    mediump float a_73;
    a_73 = xlv_TEXCOORD3.z;
    if ((a_73 < 0.95)) {
      scrpos_72.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_73 = (a_73 * 17.0);
      highp float tmpvar_74;
      tmpvar_74 = (scrpos_72.y / 4.0);
      highp float tmpvar_75;
      tmpvar_75 = (fract(abs(tmpvar_74)) * 4.0);
      highp float tmpvar_76;
      if ((tmpvar_74 >= 0.0)) {
        tmpvar_76 = tmpvar_75;
      } else {
        tmpvar_76 = -(tmpvar_75);
      };
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_72.x / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float x_80;
      x_80 = ((a_73 - _DITHERMATRIX[
        int(tmpvar_76)
      ][
        int(tmpvar_79)
      ]) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if ((_RGBlendType == 1)) {
    highp vec3 N_36;
    N_36 = tmpvar_13;
    highp vec3 V_37;
    V_37 = V_2;
    mediump float rimLightDir_38;
    mediump vec3 lightDir_39;
    mediump float rim_40;
    mediump vec4 HRRimColor_41;
    mediump vec3 rgColor_42;
    mediump float tmpvar_43;
    highp float tmpvar_44;
    tmpvar_44 = pow (clamp ((1.001 - 
      dot (V_37, N_36)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_43 = (_RGBias + (tmpvar_44 * _RGScale));
    mediump vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_43 * _RGColor).xyz;
    rgColor_42 = tmpvar_45;
    HRRimColor_41 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_41 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_41 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_41 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_41 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_46;
    tmpvar_46 = (1.0 - max (0.0, dot (V_37, N_36)));
    rim_40 = tmpvar_46;
    highp vec3 tmpvar_47;
    tmpvar_47 = _WorldSpaceLightPos0.xyz;
    lightDir_39 = tmpvar_47;
    mediump vec3 tmpvar_48;
    tmpvar_48 = normalize(lightDir_39);
    highp float tmpvar_49;
    tmpvar_49 = dot (N_36, tmpvar_48);
    rimLightDir_38 = tmpvar_49;
    rim_40 = (rim_40 * (0.5 + rimLightDir_38));
    highp int tmpvar_50;
    if ((rim_40 > HRRimColor_41.w)) {
      tmpvar_50 = 1;
    } else {
      tmpvar_50 = 0;
    };
    rim_40 = float(tmpvar_50);
    mediump vec3 tmpvar_51;
    tmpvar_51 = (spColor_25.xyz + ((HRRimColor_41.xyz * rim_40) * _HRRimPower));
    mediump float tmpvar_52;
    tmpvar_52 = clamp (tmpvar_43, 0.0, 1.0);
    highp vec3 tmpvar_53;
    tmpvar_53 = mix (spColor_25.xyz, tmpvar_45, vec3((tmpvar_52 * _RGRatio)));
    rgColor_42 = tmpvar_53;
    highp vec3 tmpvar_54;
    tmpvar_54 = mix (rgColor_42, tmpvar_51, vec3(float(_HRRimIntensity)));
    rgColor_42 = tmpvar_54;
    outColor_5.xyz = rgColor_42;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_55;
      N_55 = tmpvar_13;
      highp vec3 V_56;
      V_56 = V_2;
      mediump float rimLightDir_57;
      mediump vec3 lightDir_58;
      mediump float rim_59;
      mediump vec4 HRRimColor_60;
      mediump vec3 rgColor_61;
      mediump float tmpvar_62;
      highp float tmpvar_63;
      tmpvar_63 = pow (clamp ((1.001 - 
        dot (V_56, N_55)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_62 = (_RGBias + (tmpvar_63 * _RGScale));
      mediump vec3 tmpvar_64;
      tmpvar_64 = (tmpvar_62 * _RGColor).xyz;
      rgColor_61 = tmpvar_64;
      HRRimColor_60 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_60 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_60 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_60 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_60 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - max (0.0, dot (V_56, N_55)));
      rim_59 = tmpvar_65;
      highp vec3 tmpvar_66;
      tmpvar_66 = _WorldSpaceLightPos0.xyz;
      lightDir_58 = tmpvar_66;
      mediump vec3 tmpvar_67;
      tmpvar_67 = normalize(lightDir_58);
      highp float tmpvar_68;
      tmpvar_68 = dot (N_55, tmpvar_67);
      rimLightDir_57 = tmpvar_68;
      rim_59 = (rim_59 * (0.5 + rimLightDir_57));
      highp int tmpvar_69;
      if ((rim_59 > HRRimColor_60.w)) {
        tmpvar_69 = 1;
      } else {
        tmpvar_69 = 0;
      };
      rim_59 = float(tmpvar_69);
      mediump vec3 tmpvar_70;
      tmpvar_70 = (outColor_5.xyz + max ((
        (HRRimColor_60.xyz * rim_59)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_61 = (outColor_5.xyz + max (tmpvar_64, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_71;
      tmpvar_71 = mix (rgColor_61, tmpvar_70, vec3(float(_HRRimIntensity)));
      rgColor_61 = tmpvar_71;
      outColor_5.xyz = rgColor_61;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_72;
    scrpos_72 = xlv_TEXCOORD3;
    mediump float a_73;
    a_73 = xlv_TEXCOORD3.z;
    if ((a_73 < 0.95)) {
      scrpos_72.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_73 = (a_73 * 17.0);
      highp float tmpvar_74;
      tmpvar_74 = (scrpos_72.y / 4.0);
      highp float tmpvar_75;
      tmpvar_75 = (fract(abs(tmpvar_74)) * 4.0);
      highp float tmpvar_76;
      if ((tmpvar_74 >= 0.0)) {
        tmpvar_76 = tmpvar_75;
      } else {
        tmpvar_76 = -(tmpvar_75);
      };
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_72.x / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float x_80;
      x_80 = ((a_73 - _DITHERMATRIX[
        int(tmpvar_76)
      ][
        int(tmpvar_79)
      ]) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if ((_RGBlendType == 1)) {
    highp vec3 N_36;
    N_36 = tmpvar_13;
    highp vec3 V_37;
    V_37 = V_2;
    mediump float rimLightDir_38;
    mediump vec3 lightDir_39;
    mediump float rim_40;
    mediump vec4 HRRimColor_41;
    mediump vec3 rgColor_42;
    mediump float tmpvar_43;
    highp float tmpvar_44;
    tmpvar_44 = pow (clamp ((1.001 - 
      dot (V_37, N_36)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_43 = (_RGBias + (tmpvar_44 * _RGScale));
    mediump vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_43 * _RGColor).xyz;
    rgColor_42 = tmpvar_45;
    HRRimColor_41 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_41 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_41 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_41 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_41 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_46;
    tmpvar_46 = (1.0 - max (0.0, dot (V_37, N_36)));
    rim_40 = tmpvar_46;
    highp vec3 tmpvar_47;
    tmpvar_47 = _WorldSpaceLightPos0.xyz;
    lightDir_39 = tmpvar_47;
    mediump vec3 tmpvar_48;
    tmpvar_48 = normalize(lightDir_39);
    highp float tmpvar_49;
    tmpvar_49 = dot (N_36, tmpvar_48);
    rimLightDir_38 = tmpvar_49;
    rim_40 = (rim_40 * (0.5 + rimLightDir_38));
    highp int tmpvar_50;
    if ((rim_40 > HRRimColor_41.w)) {
      tmpvar_50 = 1;
    } else {
      tmpvar_50 = 0;
    };
    rim_40 = float(tmpvar_50);
    mediump vec3 tmpvar_51;
    tmpvar_51 = (spColor_25.xyz + ((HRRimColor_41.xyz * rim_40) * _HRRimPower));
    mediump float tmpvar_52;
    tmpvar_52 = clamp (tmpvar_43, 0.0, 1.0);
    highp vec3 tmpvar_53;
    tmpvar_53 = mix (spColor_25.xyz, tmpvar_45, vec3((tmpvar_52 * _RGRatio)));
    rgColor_42 = tmpvar_53;
    highp vec3 tmpvar_54;
    tmpvar_54 = mix (rgColor_42, tmpvar_51, vec3(float(_HRRimIntensity)));
    rgColor_42 = tmpvar_54;
    outColor_5.xyz = rgColor_42;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_55;
      N_55 = tmpvar_13;
      highp vec3 V_56;
      V_56 = V_2;
      mediump float rimLightDir_57;
      mediump vec3 lightDir_58;
      mediump float rim_59;
      mediump vec4 HRRimColor_60;
      mediump vec3 rgColor_61;
      mediump float tmpvar_62;
      highp float tmpvar_63;
      tmpvar_63 = pow (clamp ((1.001 - 
        dot (V_56, N_55)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_62 = (_RGBias + (tmpvar_63 * _RGScale));
      mediump vec3 tmpvar_64;
      tmpvar_64 = (tmpvar_62 * _RGColor).xyz;
      rgColor_61 = tmpvar_64;
      HRRimColor_60 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_60 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_60 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_60 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_60 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - max (0.0, dot (V_56, N_55)));
      rim_59 = tmpvar_65;
      highp vec3 tmpvar_66;
      tmpvar_66 = _WorldSpaceLightPos0.xyz;
      lightDir_58 = tmpvar_66;
      mediump vec3 tmpvar_67;
      tmpvar_67 = normalize(lightDir_58);
      highp float tmpvar_68;
      tmpvar_68 = dot (N_55, tmpvar_67);
      rimLightDir_57 = tmpvar_68;
      rim_59 = (rim_59 * (0.5 + rimLightDir_57));
      highp int tmpvar_69;
      if ((rim_59 > HRRimColor_60.w)) {
        tmpvar_69 = 1;
      } else {
        tmpvar_69 = 0;
      };
      rim_59 = float(tmpvar_69);
      mediump vec3 tmpvar_70;
      tmpvar_70 = (outColor_5.xyz + max ((
        (HRRimColor_60.xyz * rim_59)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_61 = (outColor_5.xyz + max (tmpvar_64, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_71;
      tmpvar_71 = mix (rgColor_61, tmpvar_70, vec3(float(_HRRimIntensity)));
      rgColor_61 = tmpvar_71;
      outColor_5.xyz = rgColor_61;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_72;
    scrpos_72 = xlv_TEXCOORD3;
    mediump float a_73;
    a_73 = xlv_TEXCOORD3.z;
    if ((a_73 < 0.95)) {
      scrpos_72.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_73 = (a_73 * 17.0);
      highp float tmpvar_74;
      tmpvar_74 = (scrpos_72.y / 4.0);
      highp float tmpvar_75;
      tmpvar_75 = (fract(abs(tmpvar_74)) * 4.0);
      highp float tmpvar_76;
      if ((tmpvar_74 >= 0.0)) {
        tmpvar_76 = tmpvar_75;
      } else {
        tmpvar_76 = -(tmpvar_75);
      };
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_72.x / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float x_80;
      x_80 = ((a_73 - _DITHERMATRIX[
        int(tmpvar_76)
      ][
        int(tmpvar_79)
      ]) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_35 = tmpvar_36;
  spColor_35.w = (spColor_35.w * _SPOpaqueness);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * tmpvar_37.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (tmpvar_23, I_40)
   * tmpvar_23)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_44;
      tmpvar_44 = mix (spColor_35.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35.xyz = tmpvar_44;
    };
  };
  spColor_35.xyz = (spColor_35.xyz * _Color.xyz);
  highp vec4 tmpvar_45;
  tmpvar_45 = mix (outColor_4, spColor_35, vec4(xlat_mutable_SPIntensity));
  spColor_35 = tmpvar_45;
  outColor_4 = spColor_35;
  if ((_RGBlendType == 1)) {
    highp vec3 N_46;
    N_46 = tmpvar_23;
    highp vec3 V_47;
    V_47 = V_2;
    mediump float rimLightDir_48;
    mediump vec3 lightDir_49;
    mediump float rim_50;
    mediump vec4 HRRimColor_51;
    mediump vec3 rgColor_52;
    mediump float tmpvar_53;
    highp float tmpvar_54;
    tmpvar_54 = pow (clamp ((1.001 - 
      dot (V_47, N_46)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_53 = (_RGBias + (tmpvar_54 * _RGScale));
    mediump vec3 tmpvar_55;
    tmpvar_55 = (tmpvar_53 * _RGColor).xyz;
    rgColor_52 = tmpvar_55;
    HRRimColor_51 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_51 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_51 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_51 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_51 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_56;
    tmpvar_56 = (1.0 - max (0.0, dot (V_47, N_46)));
    rim_50 = tmpvar_56;
    highp vec3 tmpvar_57;
    tmpvar_57 = _WorldSpaceLightPos0.xyz;
    lightDir_49 = tmpvar_57;
    mediump vec3 tmpvar_58;
    tmpvar_58 = normalize(lightDir_49);
    highp float tmpvar_59;
    tmpvar_59 = dot (N_46, tmpvar_58);
    rimLightDir_48 = tmpvar_59;
    rim_50 = (rim_50 * (0.5 + rimLightDir_48));
    highp int tmpvar_60;
    if ((rim_50 > HRRimColor_51.w)) {
      tmpvar_60 = 1;
    } else {
      tmpvar_60 = 0;
    };
    rim_50 = float(tmpvar_60);
    mediump vec3 tmpvar_61;
    tmpvar_61 = (spColor_35.xyz + ((HRRimColor_51.xyz * rim_50) * _HRRimPower));
    mediump float tmpvar_62;
    tmpvar_62 = clamp (tmpvar_53, 0.0, 1.0);
    highp vec3 tmpvar_63;
    tmpvar_63 = mix (spColor_35.xyz, tmpvar_55, vec3((tmpvar_62 * _RGRatio)));
    rgColor_52 = tmpvar_63;
    highp vec3 tmpvar_64;
    tmpvar_64 = mix (rgColor_52, tmpvar_61, vec3(float(_HRRimIntensity)));
    rgColor_52 = tmpvar_64;
    outColor_4.xyz = rgColor_52;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_65;
      N_65 = tmpvar_23;
      highp vec3 V_66;
      V_66 = V_2;
      mediump float rimLightDir_67;
      mediump vec3 lightDir_68;
      mediump float rim_69;
      mediump vec4 HRRimColor_70;
      mediump vec3 rgColor_71;
      mediump float tmpvar_72;
      highp float tmpvar_73;
      tmpvar_73 = pow (clamp ((1.001 - 
        dot (V_66, N_65)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_72 = (_RGBias + (tmpvar_73 * _RGScale));
      mediump vec3 tmpvar_74;
      tmpvar_74 = (tmpvar_72 * _RGColor).xyz;
      rgColor_71 = tmpvar_74;
      HRRimColor_70 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_70 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_70 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_70 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_70 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_75;
      tmpvar_75 = (1.0 - max (0.0, dot (V_66, N_65)));
      rim_69 = tmpvar_75;
      highp vec3 tmpvar_76;
      tmpvar_76 = _WorldSpaceLightPos0.xyz;
      lightDir_68 = tmpvar_76;
      mediump vec3 tmpvar_77;
      tmpvar_77 = normalize(lightDir_68);
      highp float tmpvar_78;
      tmpvar_78 = dot (N_65, tmpvar_77);
      rimLightDir_67 = tmpvar_78;
      rim_69 = (rim_69 * (0.5 + rimLightDir_67));
      highp int tmpvar_79;
      if ((rim_69 > HRRimColor_70.w)) {
        tmpvar_79 = 1;
      } else {
        tmpvar_79 = 0;
      };
      rim_69 = float(tmpvar_79);
      mediump vec3 tmpvar_80;
      tmpvar_80 = (outColor_4.xyz + max ((
        (HRRimColor_70.xyz * rim_69)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_71 = (outColor_4.xyz + max (tmpvar_74, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_81;
      tmpvar_81 = mix (rgColor_71, tmpvar_80, vec3(float(_HRRimIntensity)));
      rgColor_71 = tmpvar_81;
      outColor_4.xyz = rgColor_71;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_82;
    scrpos_82 = xlv_TEXCOORD3;
    mediump float a_83;
    a_83 = xlv_TEXCOORD3.z;
    if ((a_83 < 0.95)) {
      scrpos_82.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_83 = (a_83 * 17.0);
      highp float tmpvar_84;
      tmpvar_84 = (scrpos_82.y / 4.0);
      highp float tmpvar_85;
      tmpvar_85 = (fract(abs(tmpvar_84)) * 4.0);
      highp float tmpvar_86;
      if ((tmpvar_84 >= 0.0)) {
        tmpvar_86 = tmpvar_85;
      } else {
        tmpvar_86 = -(tmpvar_85);
      };
      highp float tmpvar_87;
      tmpvar_87 = (scrpos_82.x / 4.0);
      highp float tmpvar_88;
      tmpvar_88 = (fract(abs(tmpvar_87)) * 4.0);
      highp float tmpvar_89;
      if ((tmpvar_87 >= 0.0)) {
        tmpvar_89 = tmpvar_88;
      } else {
        tmpvar_89 = -(tmpvar_88);
      };
      highp float x_90;
      x_90 = ((a_83 - _DITHERMATRIX[
        int(tmpvar_86)
      ][
        int(tmpvar_89)
      ]) - 0.01);
      if ((x_90 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_35.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_35 = tmpvar_36;
  spColor_35.w = (spColor_35.w * _SPOpaqueness);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * tmpvar_37.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (tmpvar_23, I_40)
   * tmpvar_23)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_44;
      tmpvar_44 = mix (spColor_35.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35.xyz = tmpvar_44;
    };
  };
  spColor_35.xyz = (spColor_35.xyz * _Color.xyz);
  highp vec4 tmpvar_45;
  tmpvar_45 = mix (outColor_4, spColor_35, vec4(xlat_mutable_SPIntensity));
  spColor_35 = tmpvar_45;
  outColor_4 = spColor_35;
  if ((_RGBlendType == 1)) {
    highp vec3 N_46;
    N_46 = tmpvar_23;
    highp vec3 V_47;
    V_47 = V_2;
    mediump float rimLightDir_48;
    mediump vec3 lightDir_49;
    mediump float rim_50;
    mediump vec4 HRRimColor_51;
    mediump vec3 rgColor_52;
    mediump float tmpvar_53;
    highp float tmpvar_54;
    tmpvar_54 = pow (clamp ((1.001 - 
      dot (V_47, N_46)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_53 = (_RGBias + (tmpvar_54 * _RGScale));
    mediump vec3 tmpvar_55;
    tmpvar_55 = (tmpvar_53 * _RGColor).xyz;
    rgColor_52 = tmpvar_55;
    HRRimColor_51 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_51 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_51 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_51 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_51 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_56;
    tmpvar_56 = (1.0 - max (0.0, dot (V_47, N_46)));
    rim_50 = tmpvar_56;
    highp vec3 tmpvar_57;
    tmpvar_57 = _WorldSpaceLightPos0.xyz;
    lightDir_49 = tmpvar_57;
    mediump vec3 tmpvar_58;
    tmpvar_58 = normalize(lightDir_49);
    highp float tmpvar_59;
    tmpvar_59 = dot (N_46, tmpvar_58);
    rimLightDir_48 = tmpvar_59;
    rim_50 = (rim_50 * (0.5 + rimLightDir_48));
    highp int tmpvar_60;
    if ((rim_50 > HRRimColor_51.w)) {
      tmpvar_60 = 1;
    } else {
      tmpvar_60 = 0;
    };
    rim_50 = float(tmpvar_60);
    mediump vec3 tmpvar_61;
    tmpvar_61 = (spColor_35.xyz + ((HRRimColor_51.xyz * rim_50) * _HRRimPower));
    mediump float tmpvar_62;
    tmpvar_62 = clamp (tmpvar_53, 0.0, 1.0);
    highp vec3 tmpvar_63;
    tmpvar_63 = mix (spColor_35.xyz, tmpvar_55, vec3((tmpvar_62 * _RGRatio)));
    rgColor_52 = tmpvar_63;
    highp vec3 tmpvar_64;
    tmpvar_64 = mix (rgColor_52, tmpvar_61, vec3(float(_HRRimIntensity)));
    rgColor_52 = tmpvar_64;
    outColor_4.xyz = rgColor_52;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_65;
      N_65 = tmpvar_23;
      highp vec3 V_66;
      V_66 = V_2;
      mediump float rimLightDir_67;
      mediump vec3 lightDir_68;
      mediump float rim_69;
      mediump vec4 HRRimColor_70;
      mediump vec3 rgColor_71;
      mediump float tmpvar_72;
      highp float tmpvar_73;
      tmpvar_73 = pow (clamp ((1.001 - 
        dot (V_66, N_65)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_72 = (_RGBias + (tmpvar_73 * _RGScale));
      mediump vec3 tmpvar_74;
      tmpvar_74 = (tmpvar_72 * _RGColor).xyz;
      rgColor_71 = tmpvar_74;
      HRRimColor_70 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_70 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_70 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_70 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_70 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_75;
      tmpvar_75 = (1.0 - max (0.0, dot (V_66, N_65)));
      rim_69 = tmpvar_75;
      highp vec3 tmpvar_76;
      tmpvar_76 = _WorldSpaceLightPos0.xyz;
      lightDir_68 = tmpvar_76;
      mediump vec3 tmpvar_77;
      tmpvar_77 = normalize(lightDir_68);
      highp float tmpvar_78;
      tmpvar_78 = dot (N_65, tmpvar_77);
      rimLightDir_67 = tmpvar_78;
      rim_69 = (rim_69 * (0.5 + rimLightDir_67));
      highp int tmpvar_79;
      if ((rim_69 > HRRimColor_70.w)) {
        tmpvar_79 = 1;
      } else {
        tmpvar_79 = 0;
      };
      rim_69 = float(tmpvar_79);
      mediump vec3 tmpvar_80;
      tmpvar_80 = (outColor_4.xyz + max ((
        (HRRimColor_70.xyz * rim_69)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_71 = (outColor_4.xyz + max (tmpvar_74, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_81;
      tmpvar_81 = mix (rgColor_71, tmpvar_80, vec3(float(_HRRimIntensity)));
      rgColor_71 = tmpvar_81;
      outColor_4.xyz = rgColor_71;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_82;
    scrpos_82 = xlv_TEXCOORD3;
    mediump float a_83;
    a_83 = xlv_TEXCOORD3.z;
    if ((a_83 < 0.95)) {
      scrpos_82.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_83 = (a_83 * 17.0);
      highp float tmpvar_84;
      tmpvar_84 = (scrpos_82.y / 4.0);
      highp float tmpvar_85;
      tmpvar_85 = (fract(abs(tmpvar_84)) * 4.0);
      highp float tmpvar_86;
      if ((tmpvar_84 >= 0.0)) {
        tmpvar_86 = tmpvar_85;
      } else {
        tmpvar_86 = -(tmpvar_85);
      };
      highp float tmpvar_87;
      tmpvar_87 = (scrpos_82.x / 4.0);
      highp float tmpvar_88;
      tmpvar_88 = (fract(abs(tmpvar_87)) * 4.0);
      highp float tmpvar_89;
      if ((tmpvar_87 >= 0.0)) {
        tmpvar_89 = tmpvar_88;
      } else {
        tmpvar_89 = -(tmpvar_88);
      };
      highp float x_90;
      x_90 = ((a_83 - _DITHERMATRIX[
        int(tmpvar_86)
      ][
        int(tmpvar_89)
      ]) - 0.01);
      if ((x_90 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_35.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_35 = tmpvar_36;
  spColor_35.w = (spColor_35.w * _SPOpaqueness);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * tmpvar_37.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (tmpvar_23, I_40)
   * tmpvar_23)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_44;
      tmpvar_44 = mix (spColor_35.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35.xyz = tmpvar_44;
    };
  };
  spColor_35.xyz = (spColor_35.xyz * _Color.xyz);
  highp vec4 tmpvar_45;
  tmpvar_45 = mix (outColor_4, spColor_35, vec4(xlat_mutable_SPIntensity));
  spColor_35 = tmpvar_45;
  outColor_4 = spColor_35;
  if ((_RGBlendType == 1)) {
    highp vec3 N_46;
    N_46 = tmpvar_23;
    highp vec3 V_47;
    V_47 = V_2;
    mediump float rimLightDir_48;
    mediump vec3 lightDir_49;
    mediump float rim_50;
    mediump vec4 HRRimColor_51;
    mediump vec3 rgColor_52;
    mediump float tmpvar_53;
    highp float tmpvar_54;
    tmpvar_54 = pow (clamp ((1.001 - 
      dot (V_47, N_46)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_53 = (_RGBias + (tmpvar_54 * _RGScale));
    mediump vec3 tmpvar_55;
    tmpvar_55 = (tmpvar_53 * _RGColor).xyz;
    rgColor_52 = tmpvar_55;
    HRRimColor_51 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_51 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_51 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_51 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_51 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_56;
    tmpvar_56 = (1.0 - max (0.0, dot (V_47, N_46)));
    rim_50 = tmpvar_56;
    highp vec3 tmpvar_57;
    tmpvar_57 = _WorldSpaceLightPos0.xyz;
    lightDir_49 = tmpvar_57;
    mediump vec3 tmpvar_58;
    tmpvar_58 = normalize(lightDir_49);
    highp float tmpvar_59;
    tmpvar_59 = dot (N_46, tmpvar_58);
    rimLightDir_48 = tmpvar_59;
    rim_50 = (rim_50 * (0.5 + rimLightDir_48));
    highp int tmpvar_60;
    if ((rim_50 > HRRimColor_51.w)) {
      tmpvar_60 = 1;
    } else {
      tmpvar_60 = 0;
    };
    rim_50 = float(tmpvar_60);
    mediump vec3 tmpvar_61;
    tmpvar_61 = (spColor_35.xyz + ((HRRimColor_51.xyz * rim_50) * _HRRimPower));
    mediump float tmpvar_62;
    tmpvar_62 = clamp (tmpvar_53, 0.0, 1.0);
    highp vec3 tmpvar_63;
    tmpvar_63 = mix (spColor_35.xyz, tmpvar_55, vec3((tmpvar_62 * _RGRatio)));
    rgColor_52 = tmpvar_63;
    highp vec3 tmpvar_64;
    tmpvar_64 = mix (rgColor_52, tmpvar_61, vec3(float(_HRRimIntensity)));
    rgColor_52 = tmpvar_64;
    outColor_4.xyz = rgColor_52;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_65;
      N_65 = tmpvar_23;
      highp vec3 V_66;
      V_66 = V_2;
      mediump float rimLightDir_67;
      mediump vec3 lightDir_68;
      mediump float rim_69;
      mediump vec4 HRRimColor_70;
      mediump vec3 rgColor_71;
      mediump float tmpvar_72;
      highp float tmpvar_73;
      tmpvar_73 = pow (clamp ((1.001 - 
        dot (V_66, N_65)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_72 = (_RGBias + (tmpvar_73 * _RGScale));
      mediump vec3 tmpvar_74;
      tmpvar_74 = (tmpvar_72 * _RGColor).xyz;
      rgColor_71 = tmpvar_74;
      HRRimColor_70 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_70 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_70 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_70 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_70 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_75;
      tmpvar_75 = (1.0 - max (0.0, dot (V_66, N_65)));
      rim_69 = tmpvar_75;
      highp vec3 tmpvar_76;
      tmpvar_76 = _WorldSpaceLightPos0.xyz;
      lightDir_68 = tmpvar_76;
      mediump vec3 tmpvar_77;
      tmpvar_77 = normalize(lightDir_68);
      highp float tmpvar_78;
      tmpvar_78 = dot (N_65, tmpvar_77);
      rimLightDir_67 = tmpvar_78;
      rim_69 = (rim_69 * (0.5 + rimLightDir_67));
      highp int tmpvar_79;
      if ((rim_69 > HRRimColor_70.w)) {
        tmpvar_79 = 1;
      } else {
        tmpvar_79 = 0;
      };
      rim_69 = float(tmpvar_79);
      mediump vec3 tmpvar_80;
      tmpvar_80 = (outColor_4.xyz + max ((
        (HRRimColor_70.xyz * rim_69)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_71 = (outColor_4.xyz + max (tmpvar_74, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_81;
      tmpvar_81 = mix (rgColor_71, tmpvar_80, vec3(float(_HRRimIntensity)));
      rgColor_71 = tmpvar_81;
      outColor_4.xyz = rgColor_71;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_82;
    scrpos_82 = xlv_TEXCOORD3;
    mediump float a_83;
    a_83 = xlv_TEXCOORD3.z;
    if ((a_83 < 0.95)) {
      scrpos_82.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_83 = (a_83 * 17.0);
      highp float tmpvar_84;
      tmpvar_84 = (scrpos_82.y / 4.0);
      highp float tmpvar_85;
      tmpvar_85 = (fract(abs(tmpvar_84)) * 4.0);
      highp float tmpvar_86;
      if ((tmpvar_84 >= 0.0)) {
        tmpvar_86 = tmpvar_85;
      } else {
        tmpvar_86 = -(tmpvar_85);
      };
      highp float tmpvar_87;
      tmpvar_87 = (scrpos_82.x / 4.0);
      highp float tmpvar_88;
      tmpvar_88 = (fract(abs(tmpvar_87)) * 4.0);
      highp float tmpvar_89;
      if ((tmpvar_87 >= 0.0)) {
        tmpvar_89 = tmpvar_88;
      } else {
        tmpvar_89 = -(tmpvar_88);
      };
      highp float x_90;
      x_90 = ((a_83 - _DITHERMATRIX[
        int(tmpvar_86)
      ][
        int(tmpvar_89)
      ]) - 0.01);
      if ((x_90 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_35.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_78 = tmpvar_79;
  spColor_78.w = (spColor_78.w * _SPOpaqueness);
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * tmpvar_80.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (tmpvar_66, I_83)
   * tmpvar_66)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_87;
      tmpvar_87 = mix (spColor_78.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78.xyz = tmpvar_87;
    };
  };
  spColor_78.xyz = (spColor_78.xyz * _Color.xyz);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (outColor_4, spColor_78, vec4(xlat_mutable_SPIntensity));
  spColor_78 = tmpvar_88;
  outColor_4 = spColor_78;
  if ((_RGBlendType == 1)) {
    highp vec3 N_89;
    N_89 = tmpvar_66;
    highp vec3 V_90;
    V_90 = V_2;
    mediump float rimLightDir_91;
    mediump vec3 lightDir_92;
    mediump float rim_93;
    mediump vec4 HRRimColor_94;
    mediump vec3 rgColor_95;
    mediump float tmpvar_96;
    highp float tmpvar_97;
    tmpvar_97 = pow (clamp ((1.001 - 
      dot (V_90, N_89)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_96 = (_RGBias + (tmpvar_97 * _RGScale));
    mediump vec3 tmpvar_98;
    tmpvar_98 = (tmpvar_96 * _RGColor).xyz;
    rgColor_95 = tmpvar_98;
    HRRimColor_94 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_94 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_94 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_94 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_94 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_99;
    tmpvar_99 = (1.0 - max (0.0, dot (V_90, N_89)));
    rim_93 = tmpvar_99;
    highp vec3 tmpvar_100;
    tmpvar_100 = _WorldSpaceLightPos0.xyz;
    lightDir_92 = tmpvar_100;
    mediump vec3 tmpvar_101;
    tmpvar_101 = normalize(lightDir_92);
    highp float tmpvar_102;
    tmpvar_102 = dot (N_89, tmpvar_101);
    rimLightDir_91 = tmpvar_102;
    rim_93 = (rim_93 * (0.5 + rimLightDir_91));
    highp int tmpvar_103;
    if ((rim_93 > HRRimColor_94.w)) {
      tmpvar_103 = 1;
    } else {
      tmpvar_103 = 0;
    };
    rim_93 = float(tmpvar_103);
    mediump vec3 tmpvar_104;
    tmpvar_104 = (spColor_78.xyz + ((HRRimColor_94.xyz * rim_93) * _HRRimPower));
    mediump float tmpvar_105;
    tmpvar_105 = clamp (tmpvar_96, 0.0, 1.0);
    highp vec3 tmpvar_106;
    tmpvar_106 = mix (spColor_78.xyz, tmpvar_98, vec3((tmpvar_105 * _RGRatio)));
    rgColor_95 = tmpvar_106;
    highp vec3 tmpvar_107;
    tmpvar_107 = mix (rgColor_95, tmpvar_104, vec3(float(_HRRimIntensity)));
    rgColor_95 = tmpvar_107;
    outColor_4.xyz = rgColor_95;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_108;
      N_108 = tmpvar_66;
      highp vec3 V_109;
      V_109 = V_2;
      mediump float rimLightDir_110;
      mediump vec3 lightDir_111;
      mediump float rim_112;
      mediump vec4 HRRimColor_113;
      mediump vec3 rgColor_114;
      mediump float tmpvar_115;
      highp float tmpvar_116;
      tmpvar_116 = pow (clamp ((1.001 - 
        dot (V_109, N_108)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_115 = (_RGBias + (tmpvar_116 * _RGScale));
      mediump vec3 tmpvar_117;
      tmpvar_117 = (tmpvar_115 * _RGColor).xyz;
      rgColor_114 = tmpvar_117;
      HRRimColor_113 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_113 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_113 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_113 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_113 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_118;
      tmpvar_118 = (1.0 - max (0.0, dot (V_109, N_108)));
      rim_112 = tmpvar_118;
      highp vec3 tmpvar_119;
      tmpvar_119 = _WorldSpaceLightPos0.xyz;
      lightDir_111 = tmpvar_119;
      mediump vec3 tmpvar_120;
      tmpvar_120 = normalize(lightDir_111);
      highp float tmpvar_121;
      tmpvar_121 = dot (N_108, tmpvar_120);
      rimLightDir_110 = tmpvar_121;
      rim_112 = (rim_112 * (0.5 + rimLightDir_110));
      highp int tmpvar_122;
      if ((rim_112 > HRRimColor_113.w)) {
        tmpvar_122 = 1;
      } else {
        tmpvar_122 = 0;
      };
      rim_112 = float(tmpvar_122);
      mediump vec3 tmpvar_123;
      tmpvar_123 = (outColor_4.xyz + max ((
        (HRRimColor_113.xyz * rim_112)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_114 = (outColor_4.xyz + max (tmpvar_117, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_124;
      tmpvar_124 = mix (rgColor_114, tmpvar_123, vec3(float(_HRRimIntensity)));
      rgColor_114 = tmpvar_124;
      outColor_4.xyz = rgColor_114;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_125;
    scrpos_125 = xlv_TEXCOORD3;
    mediump float a_126;
    a_126 = xlv_TEXCOORD3.z;
    if ((a_126 < 0.95)) {
      scrpos_125.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_126 = (a_126 * 17.0);
      highp float tmpvar_127;
      tmpvar_127 = (scrpos_125.y / 4.0);
      highp float tmpvar_128;
      tmpvar_128 = (fract(abs(tmpvar_127)) * 4.0);
      highp float tmpvar_129;
      if ((tmpvar_127 >= 0.0)) {
        tmpvar_129 = tmpvar_128;
      } else {
        tmpvar_129 = -(tmpvar_128);
      };
      highp float tmpvar_130;
      tmpvar_130 = (scrpos_125.x / 4.0);
      highp float tmpvar_131;
      tmpvar_131 = (fract(abs(tmpvar_130)) * 4.0);
      highp float tmpvar_132;
      if ((tmpvar_130 >= 0.0)) {
        tmpvar_132 = tmpvar_131;
      } else {
        tmpvar_132 = -(tmpvar_131);
      };
      highp float x_133;
      x_133 = ((a_126 - _DITHERMATRIX[
        int(tmpvar_129)
      ][
        int(tmpvar_132)
      ]) - 0.01);
      if ((x_133 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_78.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_78 = tmpvar_79;
  spColor_78.w = (spColor_78.w * _SPOpaqueness);
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * tmpvar_80.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (tmpvar_66, I_83)
   * tmpvar_66)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_87;
      tmpvar_87 = mix (spColor_78.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78.xyz = tmpvar_87;
    };
  };
  spColor_78.xyz = (spColor_78.xyz * _Color.xyz);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (outColor_4, spColor_78, vec4(xlat_mutable_SPIntensity));
  spColor_78 = tmpvar_88;
  outColor_4 = spColor_78;
  if ((_RGBlendType == 1)) {
    highp vec3 N_89;
    N_89 = tmpvar_66;
    highp vec3 V_90;
    V_90 = V_2;
    mediump float rimLightDir_91;
    mediump vec3 lightDir_92;
    mediump float rim_93;
    mediump vec4 HRRimColor_94;
    mediump vec3 rgColor_95;
    mediump float tmpvar_96;
    highp float tmpvar_97;
    tmpvar_97 = pow (clamp ((1.001 - 
      dot (V_90, N_89)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_96 = (_RGBias + (tmpvar_97 * _RGScale));
    mediump vec3 tmpvar_98;
    tmpvar_98 = (tmpvar_96 * _RGColor).xyz;
    rgColor_95 = tmpvar_98;
    HRRimColor_94 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_94 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_94 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_94 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_94 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_99;
    tmpvar_99 = (1.0 - max (0.0, dot (V_90, N_89)));
    rim_93 = tmpvar_99;
    highp vec3 tmpvar_100;
    tmpvar_100 = _WorldSpaceLightPos0.xyz;
    lightDir_92 = tmpvar_100;
    mediump vec3 tmpvar_101;
    tmpvar_101 = normalize(lightDir_92);
    highp float tmpvar_102;
    tmpvar_102 = dot (N_89, tmpvar_101);
    rimLightDir_91 = tmpvar_102;
    rim_93 = (rim_93 * (0.5 + rimLightDir_91));
    highp int tmpvar_103;
    if ((rim_93 > HRRimColor_94.w)) {
      tmpvar_103 = 1;
    } else {
      tmpvar_103 = 0;
    };
    rim_93 = float(tmpvar_103);
    mediump vec3 tmpvar_104;
    tmpvar_104 = (spColor_78.xyz + ((HRRimColor_94.xyz * rim_93) * _HRRimPower));
    mediump float tmpvar_105;
    tmpvar_105 = clamp (tmpvar_96, 0.0, 1.0);
    highp vec3 tmpvar_106;
    tmpvar_106 = mix (spColor_78.xyz, tmpvar_98, vec3((tmpvar_105 * _RGRatio)));
    rgColor_95 = tmpvar_106;
    highp vec3 tmpvar_107;
    tmpvar_107 = mix (rgColor_95, tmpvar_104, vec3(float(_HRRimIntensity)));
    rgColor_95 = tmpvar_107;
    outColor_4.xyz = rgColor_95;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_108;
      N_108 = tmpvar_66;
      highp vec3 V_109;
      V_109 = V_2;
      mediump float rimLightDir_110;
      mediump vec3 lightDir_111;
      mediump float rim_112;
      mediump vec4 HRRimColor_113;
      mediump vec3 rgColor_114;
      mediump float tmpvar_115;
      highp float tmpvar_116;
      tmpvar_116 = pow (clamp ((1.001 - 
        dot (V_109, N_108)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_115 = (_RGBias + (tmpvar_116 * _RGScale));
      mediump vec3 tmpvar_117;
      tmpvar_117 = (tmpvar_115 * _RGColor).xyz;
      rgColor_114 = tmpvar_117;
      HRRimColor_113 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_113 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_113 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_113 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_113 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_118;
      tmpvar_118 = (1.0 - max (0.0, dot (V_109, N_108)));
      rim_112 = tmpvar_118;
      highp vec3 tmpvar_119;
      tmpvar_119 = _WorldSpaceLightPos0.xyz;
      lightDir_111 = tmpvar_119;
      mediump vec3 tmpvar_120;
      tmpvar_120 = normalize(lightDir_111);
      highp float tmpvar_121;
      tmpvar_121 = dot (N_108, tmpvar_120);
      rimLightDir_110 = tmpvar_121;
      rim_112 = (rim_112 * (0.5 + rimLightDir_110));
      highp int tmpvar_122;
      if ((rim_112 > HRRimColor_113.w)) {
        tmpvar_122 = 1;
      } else {
        tmpvar_122 = 0;
      };
      rim_112 = float(tmpvar_122);
      mediump vec3 tmpvar_123;
      tmpvar_123 = (outColor_4.xyz + max ((
        (HRRimColor_113.xyz * rim_112)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_114 = (outColor_4.xyz + max (tmpvar_117, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_124;
      tmpvar_124 = mix (rgColor_114, tmpvar_123, vec3(float(_HRRimIntensity)));
      rgColor_114 = tmpvar_124;
      outColor_4.xyz = rgColor_114;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_125;
    scrpos_125 = xlv_TEXCOORD3;
    mediump float a_126;
    a_126 = xlv_TEXCOORD3.z;
    if ((a_126 < 0.95)) {
      scrpos_125.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_126 = (a_126 * 17.0);
      highp float tmpvar_127;
      tmpvar_127 = (scrpos_125.y / 4.0);
      highp float tmpvar_128;
      tmpvar_128 = (fract(abs(tmpvar_127)) * 4.0);
      highp float tmpvar_129;
      if ((tmpvar_127 >= 0.0)) {
        tmpvar_129 = tmpvar_128;
      } else {
        tmpvar_129 = -(tmpvar_128);
      };
      highp float tmpvar_130;
      tmpvar_130 = (scrpos_125.x / 4.0);
      highp float tmpvar_131;
      tmpvar_131 = (fract(abs(tmpvar_130)) * 4.0);
      highp float tmpvar_132;
      if ((tmpvar_130 >= 0.0)) {
        tmpvar_132 = tmpvar_131;
      } else {
        tmpvar_132 = -(tmpvar_131);
      };
      highp float x_133;
      x_133 = ((a_126 - _DITHERMATRIX[
        int(tmpvar_129)
      ][
        int(tmpvar_132)
      ]) - 0.01);
      if ((x_133 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_78.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_78 = tmpvar_79;
  spColor_78.w = (spColor_78.w * _SPOpaqueness);
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * tmpvar_80.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (tmpvar_66, I_83)
   * tmpvar_66)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_87;
      tmpvar_87 = mix (spColor_78.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78.xyz = tmpvar_87;
    };
  };
  spColor_78.xyz = (spColor_78.xyz * _Color.xyz);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (outColor_4, spColor_78, vec4(xlat_mutable_SPIntensity));
  spColor_78 = tmpvar_88;
  outColor_4 = spColor_78;
  if ((_RGBlendType == 1)) {
    highp vec3 N_89;
    N_89 = tmpvar_66;
    highp vec3 V_90;
    V_90 = V_2;
    mediump float rimLightDir_91;
    mediump vec3 lightDir_92;
    mediump float rim_93;
    mediump vec4 HRRimColor_94;
    mediump vec3 rgColor_95;
    mediump float tmpvar_96;
    highp float tmpvar_97;
    tmpvar_97 = pow (clamp ((1.001 - 
      dot (V_90, N_89)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_96 = (_RGBias + (tmpvar_97 * _RGScale));
    mediump vec3 tmpvar_98;
    tmpvar_98 = (tmpvar_96 * _RGColor).xyz;
    rgColor_95 = tmpvar_98;
    HRRimColor_94 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_94 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_94 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_94 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_94 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_99;
    tmpvar_99 = (1.0 - max (0.0, dot (V_90, N_89)));
    rim_93 = tmpvar_99;
    highp vec3 tmpvar_100;
    tmpvar_100 = _WorldSpaceLightPos0.xyz;
    lightDir_92 = tmpvar_100;
    mediump vec3 tmpvar_101;
    tmpvar_101 = normalize(lightDir_92);
    highp float tmpvar_102;
    tmpvar_102 = dot (N_89, tmpvar_101);
    rimLightDir_91 = tmpvar_102;
    rim_93 = (rim_93 * (0.5 + rimLightDir_91));
    highp int tmpvar_103;
    if ((rim_93 > HRRimColor_94.w)) {
      tmpvar_103 = 1;
    } else {
      tmpvar_103 = 0;
    };
    rim_93 = float(tmpvar_103);
    mediump vec3 tmpvar_104;
    tmpvar_104 = (spColor_78.xyz + ((HRRimColor_94.xyz * rim_93) * _HRRimPower));
    mediump float tmpvar_105;
    tmpvar_105 = clamp (tmpvar_96, 0.0, 1.0);
    highp vec3 tmpvar_106;
    tmpvar_106 = mix (spColor_78.xyz, tmpvar_98, vec3((tmpvar_105 * _RGRatio)));
    rgColor_95 = tmpvar_106;
    highp vec3 tmpvar_107;
    tmpvar_107 = mix (rgColor_95, tmpvar_104, vec3(float(_HRRimIntensity)));
    rgColor_95 = tmpvar_107;
    outColor_4.xyz = rgColor_95;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_108;
      N_108 = tmpvar_66;
      highp vec3 V_109;
      V_109 = V_2;
      mediump float rimLightDir_110;
      mediump vec3 lightDir_111;
      mediump float rim_112;
      mediump vec4 HRRimColor_113;
      mediump vec3 rgColor_114;
      mediump float tmpvar_115;
      highp float tmpvar_116;
      tmpvar_116 = pow (clamp ((1.001 - 
        dot (V_109, N_108)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_115 = (_RGBias + (tmpvar_116 * _RGScale));
      mediump vec3 tmpvar_117;
      tmpvar_117 = (tmpvar_115 * _RGColor).xyz;
      rgColor_114 = tmpvar_117;
      HRRimColor_113 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_113 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_113 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_113 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_113 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_118;
      tmpvar_118 = (1.0 - max (0.0, dot (V_109, N_108)));
      rim_112 = tmpvar_118;
      highp vec3 tmpvar_119;
      tmpvar_119 = _WorldSpaceLightPos0.xyz;
      lightDir_111 = tmpvar_119;
      mediump vec3 tmpvar_120;
      tmpvar_120 = normalize(lightDir_111);
      highp float tmpvar_121;
      tmpvar_121 = dot (N_108, tmpvar_120);
      rimLightDir_110 = tmpvar_121;
      rim_112 = (rim_112 * (0.5 + rimLightDir_110));
      highp int tmpvar_122;
      if ((rim_112 > HRRimColor_113.w)) {
        tmpvar_122 = 1;
      } else {
        tmpvar_122 = 0;
      };
      rim_112 = float(tmpvar_122);
      mediump vec3 tmpvar_123;
      tmpvar_123 = (outColor_4.xyz + max ((
        (HRRimColor_113.xyz * rim_112)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_114 = (outColor_4.xyz + max (tmpvar_117, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_124;
      tmpvar_124 = mix (rgColor_114, tmpvar_123, vec3(float(_HRRimIntensity)));
      rgColor_114 = tmpvar_124;
      outColor_4.xyz = rgColor_114;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_125;
    scrpos_125 = xlv_TEXCOORD3;
    mediump float a_126;
    a_126 = xlv_TEXCOORD3.z;
    if ((a_126 < 0.95)) {
      scrpos_125.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_126 = (a_126 * 17.0);
      highp float tmpvar_127;
      tmpvar_127 = (scrpos_125.y / 4.0);
      highp float tmpvar_128;
      tmpvar_128 = (fract(abs(tmpvar_127)) * 4.0);
      highp float tmpvar_129;
      if ((tmpvar_127 >= 0.0)) {
        tmpvar_129 = tmpvar_128;
      } else {
        tmpvar_129 = -(tmpvar_128);
      };
      highp float tmpvar_130;
      tmpvar_130 = (scrpos_125.x / 4.0);
      highp float tmpvar_131;
      tmpvar_131 = (fract(abs(tmpvar_130)) * 4.0);
      highp float tmpvar_132;
      if ((tmpvar_130 >= 0.0)) {
        tmpvar_132 = tmpvar_131;
      } else {
        tmpvar_132 = -(tmpvar_131);
      };
      highp float x_133;
      x_133 = ((a_126 - _DITHERMATRIX[
        int(tmpvar_129)
      ][
        int(tmpvar_132)
      ]) - 0.01);
      if ((x_133 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_78.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_21;
    scrpos_21 = xlv_TEXCOORD3;
    mediump float a_22;
    a_22 = xlv_TEXCOORD3.z;
    if ((a_22 < 0.95)) {
      scrpos_21.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_22 = (a_22 * 17.0);
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_21.y / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float tmpvar_26;
      tmpvar_26 = (scrpos_21.x / 4.0);
      highp float tmpvar_27;
      tmpvar_27 = (fract(abs(tmpvar_26)) * 4.0);
      highp float tmpvar_28;
      if ((tmpvar_26 >= 0.0)) {
        tmpvar_28 = tmpvar_27;
      } else {
        tmpvar_28 = -(tmpvar_27);
      };
      highp float x_29;
      x_29 = ((a_22 - _DITHERMATRIX[
        int(tmpvar_25)
      ][
        int(tmpvar_28)
      ]) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_21;
    scrpos_21 = xlv_TEXCOORD3;
    mediump float a_22;
    a_22 = xlv_TEXCOORD3.z;
    if ((a_22 < 0.95)) {
      scrpos_21.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_22 = (a_22 * 17.0);
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_21.y / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float tmpvar_26;
      tmpvar_26 = (scrpos_21.x / 4.0);
      highp float tmpvar_27;
      tmpvar_27 = (fract(abs(tmpvar_26)) * 4.0);
      highp float tmpvar_28;
      if ((tmpvar_26 >= 0.0)) {
        tmpvar_28 = tmpvar_27;
      } else {
        tmpvar_28 = -(tmpvar_27);
      };
      highp float x_29;
      x_29 = ((a_22 - _DITHERMATRIX[
        int(tmpvar_25)
      ][
        int(tmpvar_28)
      ]) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_21;
    scrpos_21 = xlv_TEXCOORD3;
    mediump float a_22;
    a_22 = xlv_TEXCOORD3.z;
    if ((a_22 < 0.95)) {
      scrpos_21.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_22 = (a_22 * 17.0);
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_21.y / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float tmpvar_26;
      tmpvar_26 = (scrpos_21.x / 4.0);
      highp float tmpvar_27;
      tmpvar_27 = (fract(abs(tmpvar_26)) * 4.0);
      highp float tmpvar_28;
      if ((tmpvar_26 >= 0.0)) {
        tmpvar_28 = tmpvar_27;
      } else {
        tmpvar_28 = -(tmpvar_27);
      };
      highp float x_29;
      x_29 = ((a_22 - _DITHERMATRIX[
        int(tmpvar_25)
      ][
        int(tmpvar_28)
      ]) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_21;
    scrpos_21 = xlv_TEXCOORD3;
    mediump float a_22;
    a_22 = xlv_TEXCOORD3.z;
    if ((a_22 < 0.95)) {
      scrpos_21.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_22 = (a_22 * 17.0);
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_21.y / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float tmpvar_26;
      tmpvar_26 = (scrpos_21.x / 4.0);
      highp float tmpvar_27;
      tmpvar_27 = (fract(abs(tmpvar_26)) * 4.0);
      highp float tmpvar_28;
      if ((tmpvar_26 >= 0.0)) {
        tmpvar_28 = tmpvar_27;
      } else {
        tmpvar_28 = -(tmpvar_27);
      };
      highp float x_29;
      x_29 = ((a_22 - _DITHERMATRIX[
        int(tmpvar_25)
      ][
        int(tmpvar_28)
      ]) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_21;
    scrpos_21 = xlv_TEXCOORD3;
    mediump float a_22;
    a_22 = xlv_TEXCOORD3.z;
    if ((a_22 < 0.95)) {
      scrpos_21.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_22 = (a_22 * 17.0);
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_21.y / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float tmpvar_26;
      tmpvar_26 = (scrpos_21.x / 4.0);
      highp float tmpvar_27;
      tmpvar_27 = (fract(abs(tmpvar_26)) * 4.0);
      highp float tmpvar_28;
      if ((tmpvar_26 >= 0.0)) {
        tmpvar_28 = tmpvar_27;
      } else {
        tmpvar_28 = -(tmpvar_27);
      };
      highp float x_29;
      x_29 = ((a_22 - _DITHERMATRIX[
        int(tmpvar_25)
      ][
        int(tmpvar_28)
      ]) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_21;
    scrpos_21 = xlv_TEXCOORD3;
    mediump float a_22;
    a_22 = xlv_TEXCOORD3.z;
    if ((a_22 < 0.95)) {
      scrpos_21.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_22 = (a_22 * 17.0);
      highp float tmpvar_23;
      tmpvar_23 = (scrpos_21.y / 4.0);
      highp float tmpvar_24;
      tmpvar_24 = (fract(abs(tmpvar_23)) * 4.0);
      highp float tmpvar_25;
      if ((tmpvar_23 >= 0.0)) {
        tmpvar_25 = tmpvar_24;
      } else {
        tmpvar_25 = -(tmpvar_24);
      };
      highp float tmpvar_26;
      tmpvar_26 = (scrpos_21.x / 4.0);
      highp float tmpvar_27;
      tmpvar_27 = (fract(abs(tmpvar_26)) * 4.0);
      highp float tmpvar_28;
      if ((tmpvar_26 >= 0.0)) {
        tmpvar_28 = tmpvar_27;
      } else {
        tmpvar_28 = -(tmpvar_27);
      };
      highp float x_29;
      x_29 = ((a_22 - _DITHERMATRIX[
        int(tmpvar_25)
      ][
        int(tmpvar_28)
      ]) - 0.01);
      if ((x_29 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_31;
    scrpos_31 = xlv_TEXCOORD3;
    mediump float a_32;
    a_32 = xlv_TEXCOORD3.z;
    if ((a_32 < 0.95)) {
      scrpos_31.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_32 = (a_32 * 17.0);
      highp float tmpvar_33;
      tmpvar_33 = (scrpos_31.y / 4.0);
      highp float tmpvar_34;
      tmpvar_34 = (fract(abs(tmpvar_33)) * 4.0);
      highp float tmpvar_35;
      if ((tmpvar_33 >= 0.0)) {
        tmpvar_35 = tmpvar_34;
      } else {
        tmpvar_35 = -(tmpvar_34);
      };
      highp float tmpvar_36;
      tmpvar_36 = (scrpos_31.x / 4.0);
      highp float tmpvar_37;
      tmpvar_37 = (fract(abs(tmpvar_36)) * 4.0);
      highp float tmpvar_38;
      if ((tmpvar_36 >= 0.0)) {
        tmpvar_38 = tmpvar_37;
      } else {
        tmpvar_38 = -(tmpvar_37);
      };
      highp float x_39;
      x_39 = ((a_32 - _DITHERMATRIX[
        int(tmpvar_35)
      ][
        int(tmpvar_38)
      ]) - 0.01);
      if ((x_39 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_31;
    scrpos_31 = xlv_TEXCOORD3;
    mediump float a_32;
    a_32 = xlv_TEXCOORD3.z;
    if ((a_32 < 0.95)) {
      scrpos_31.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_32 = (a_32 * 17.0);
      highp float tmpvar_33;
      tmpvar_33 = (scrpos_31.y / 4.0);
      highp float tmpvar_34;
      tmpvar_34 = (fract(abs(tmpvar_33)) * 4.0);
      highp float tmpvar_35;
      if ((tmpvar_33 >= 0.0)) {
        tmpvar_35 = tmpvar_34;
      } else {
        tmpvar_35 = -(tmpvar_34);
      };
      highp float tmpvar_36;
      tmpvar_36 = (scrpos_31.x / 4.0);
      highp float tmpvar_37;
      tmpvar_37 = (fract(abs(tmpvar_36)) * 4.0);
      highp float tmpvar_38;
      if ((tmpvar_36 >= 0.0)) {
        tmpvar_38 = tmpvar_37;
      } else {
        tmpvar_38 = -(tmpvar_37);
      };
      highp float x_39;
      x_39 = ((a_32 - _DITHERMATRIX[
        int(tmpvar_35)
      ][
        int(tmpvar_38)
      ]) - 0.01);
      if ((x_39 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_31;
    scrpos_31 = xlv_TEXCOORD3;
    mediump float a_32;
    a_32 = xlv_TEXCOORD3.z;
    if ((a_32 < 0.95)) {
      scrpos_31.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_32 = (a_32 * 17.0);
      highp float tmpvar_33;
      tmpvar_33 = (scrpos_31.y / 4.0);
      highp float tmpvar_34;
      tmpvar_34 = (fract(abs(tmpvar_33)) * 4.0);
      highp float tmpvar_35;
      if ((tmpvar_33 >= 0.0)) {
        tmpvar_35 = tmpvar_34;
      } else {
        tmpvar_35 = -(tmpvar_34);
      };
      highp float tmpvar_36;
      tmpvar_36 = (scrpos_31.x / 4.0);
      highp float tmpvar_37;
      tmpvar_37 = (fract(abs(tmpvar_36)) * 4.0);
      highp float tmpvar_38;
      if ((tmpvar_36 >= 0.0)) {
        tmpvar_38 = tmpvar_37;
      } else {
        tmpvar_38 = -(tmpvar_37);
      };
      highp float x_39;
      x_39 = ((a_32 - _DITHERMATRIX[
        int(tmpvar_35)
      ][
        int(tmpvar_38)
      ]) - 0.01);
      if ((x_39 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_74;
    scrpos_74 = xlv_TEXCOORD3;
    mediump float a_75;
    a_75 = xlv_TEXCOORD3.z;
    if ((a_75 < 0.95)) {
      scrpos_74.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_75 = (a_75 * 17.0);
      highp float tmpvar_76;
      tmpvar_76 = (scrpos_74.y / 4.0);
      highp float tmpvar_77;
      tmpvar_77 = (fract(abs(tmpvar_76)) * 4.0);
      highp float tmpvar_78;
      if ((tmpvar_76 >= 0.0)) {
        tmpvar_78 = tmpvar_77;
      } else {
        tmpvar_78 = -(tmpvar_77);
      };
      highp float tmpvar_79;
      tmpvar_79 = (scrpos_74.x / 4.0);
      highp float tmpvar_80;
      tmpvar_80 = (fract(abs(tmpvar_79)) * 4.0);
      highp float tmpvar_81;
      if ((tmpvar_79 >= 0.0)) {
        tmpvar_81 = tmpvar_80;
      } else {
        tmpvar_81 = -(tmpvar_80);
      };
      highp float x_82;
      x_82 = ((a_75 - _DITHERMATRIX[
        int(tmpvar_78)
      ][
        int(tmpvar_81)
      ]) - 0.01);
      if ((x_82 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_74;
    scrpos_74 = xlv_TEXCOORD3;
    mediump float a_75;
    a_75 = xlv_TEXCOORD3.z;
    if ((a_75 < 0.95)) {
      scrpos_74.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_75 = (a_75 * 17.0);
      highp float tmpvar_76;
      tmpvar_76 = (scrpos_74.y / 4.0);
      highp float tmpvar_77;
      tmpvar_77 = (fract(abs(tmpvar_76)) * 4.0);
      highp float tmpvar_78;
      if ((tmpvar_76 >= 0.0)) {
        tmpvar_78 = tmpvar_77;
      } else {
        tmpvar_78 = -(tmpvar_77);
      };
      highp float tmpvar_79;
      tmpvar_79 = (scrpos_74.x / 4.0);
      highp float tmpvar_80;
      tmpvar_80 = (fract(abs(tmpvar_79)) * 4.0);
      highp float tmpvar_81;
      if ((tmpvar_79 >= 0.0)) {
        tmpvar_81 = tmpvar_80;
      } else {
        tmpvar_81 = -(tmpvar_80);
      };
      highp float x_82;
      x_82 = ((a_75 - _DITHERMATRIX[
        int(tmpvar_78)
      ][
        int(tmpvar_81)
      ]) - 0.01);
      if ((x_82 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_74;
    scrpos_74 = xlv_TEXCOORD3;
    mediump float a_75;
    a_75 = xlv_TEXCOORD3.z;
    if ((a_75 < 0.95)) {
      scrpos_74.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_75 = (a_75 * 17.0);
      highp float tmpvar_76;
      tmpvar_76 = (scrpos_74.y / 4.0);
      highp float tmpvar_77;
      tmpvar_77 = (fract(abs(tmpvar_76)) * 4.0);
      highp float tmpvar_78;
      if ((tmpvar_76 >= 0.0)) {
        tmpvar_78 = tmpvar_77;
      } else {
        tmpvar_78 = -(tmpvar_77);
      };
      highp float tmpvar_79;
      tmpvar_79 = (scrpos_74.x / 4.0);
      highp float tmpvar_80;
      tmpvar_80 = (fract(abs(tmpvar_79)) * 4.0);
      highp float tmpvar_81;
      if ((tmpvar_79 >= 0.0)) {
        tmpvar_81 = tmpvar_80;
      } else {
        tmpvar_81 = -(tmpvar_80);
      };
      highp float x_82;
      x_82 = ((a_75 - _DITHERMATRIX[
        int(tmpvar_78)
      ][
        int(tmpvar_81)
      ]) - 0.01);
      if ((x_82 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_21;
    N_21 = tmpvar_13;
    highp vec3 V_22;
    V_22 = V_2;
    mediump float rimLightDir_23;
    mediump vec3 lightDir_24;
    mediump float rim_25;
    mediump vec4 HRRimColor_26;
    mediump vec3 rgColor_27;
    mediump float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = pow (clamp ((1.001 - 
      dot (V_22, N_21)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_28 = (_RGBias + (tmpvar_29 * _RGScale));
    mediump vec3 tmpvar_30;
    tmpvar_30 = (tmpvar_28 * _RGColor).xyz;
    rgColor_27 = tmpvar_30;
    HRRimColor_26 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_26 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_26 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_26 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_26 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_31;
    tmpvar_31 = (1.0 - max (0.0, dot (V_22, N_21)));
    rim_25 = tmpvar_31;
    highp vec3 tmpvar_32;
    tmpvar_32 = _WorldSpaceLightPos0.xyz;
    lightDir_24 = tmpvar_32;
    mediump vec3 tmpvar_33;
    tmpvar_33 = normalize(lightDir_24);
    highp float tmpvar_34;
    tmpvar_34 = dot (N_21, tmpvar_33);
    rimLightDir_23 = tmpvar_34;
    rim_25 = (rim_25 * (0.5 + rimLightDir_23));
    highp int tmpvar_35;
    if ((rim_25 > HRRimColor_26.w)) {
      tmpvar_35 = 1;
    } else {
      tmpvar_35 = 0;
    };
    rim_25 = float(tmpvar_35);
    mediump vec3 tmpvar_36;
    tmpvar_36 = (outColor_5.xyz + ((HRRimColor_26.xyz * rim_25) * _HRRimPower));
    mediump float tmpvar_37;
    tmpvar_37 = clamp (tmpvar_28, 0.0, 1.0);
    highp vec3 tmpvar_38;
    tmpvar_38 = mix (outColor_5.xyz, tmpvar_30, vec3((tmpvar_37 * _RGRatio)));
    rgColor_27 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (rgColor_27, tmpvar_36, vec3(float(_HRRimIntensity)));
    rgColor_27 = tmpvar_39;
    outColor_5.xyz = rgColor_27;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_40;
      N_40 = tmpvar_13;
      highp vec3 V_41;
      V_41 = V_2;
      mediump float rimLightDir_42;
      mediump vec3 lightDir_43;
      mediump float rim_44;
      mediump vec4 HRRimColor_45;
      mediump vec3 rgColor_46;
      mediump float tmpvar_47;
      highp float tmpvar_48;
      tmpvar_48 = pow (clamp ((1.001 - 
        dot (V_41, N_40)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_47 = (_RGBias + (tmpvar_48 * _RGScale));
      mediump vec3 tmpvar_49;
      tmpvar_49 = (tmpvar_47 * _RGColor).xyz;
      rgColor_46 = tmpvar_49;
      HRRimColor_45 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_45 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_45 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_45 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_45 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - max (0.0, dot (V_41, N_40)));
      rim_44 = tmpvar_50;
      highp vec3 tmpvar_51;
      tmpvar_51 = _WorldSpaceLightPos0.xyz;
      lightDir_43 = tmpvar_51;
      mediump vec3 tmpvar_52;
      tmpvar_52 = normalize(lightDir_43);
      highp float tmpvar_53;
      tmpvar_53 = dot (N_40, tmpvar_52);
      rimLightDir_42 = tmpvar_53;
      rim_44 = (rim_44 * (0.5 + rimLightDir_42));
      highp int tmpvar_54;
      if ((rim_44 > HRRimColor_45.w)) {
        tmpvar_54 = 1;
      } else {
        tmpvar_54 = 0;
      };
      rim_44 = float(tmpvar_54);
      mediump vec3 tmpvar_55;
      tmpvar_55 = (outColor_5.xyz + max ((
        (HRRimColor_45.xyz * rim_44)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_46 = (outColor_5.xyz + max (tmpvar_49, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_56;
      tmpvar_56 = mix (rgColor_46, tmpvar_55, vec3(float(_HRRimIntensity)));
      rgColor_46 = tmpvar_56;
      outColor_5.xyz = rgColor_46;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_57;
    scrpos_57 = xlv_TEXCOORD3;
    mediump float a_58;
    a_58 = xlv_TEXCOORD3.z;
    if ((a_58 < 0.95)) {
      scrpos_57.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_58 = (a_58 * 17.0);
      highp float tmpvar_59;
      tmpvar_59 = (scrpos_57.y / 4.0);
      highp float tmpvar_60;
      tmpvar_60 = (fract(abs(tmpvar_59)) * 4.0);
      highp float tmpvar_61;
      if ((tmpvar_59 >= 0.0)) {
        tmpvar_61 = tmpvar_60;
      } else {
        tmpvar_61 = -(tmpvar_60);
      };
      highp float tmpvar_62;
      tmpvar_62 = (scrpos_57.x / 4.0);
      highp float tmpvar_63;
      tmpvar_63 = (fract(abs(tmpvar_62)) * 4.0);
      highp float tmpvar_64;
      if ((tmpvar_62 >= 0.0)) {
        tmpvar_64 = tmpvar_63;
      } else {
        tmpvar_64 = -(tmpvar_63);
      };
      highp float x_65;
      x_65 = ((a_58 - _DITHERMATRIX[
        int(tmpvar_61)
      ][
        int(tmpvar_64)
      ]) - 0.01);
      if ((x_65 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_21;
    N_21 = tmpvar_13;
    highp vec3 V_22;
    V_22 = V_2;
    mediump float rimLightDir_23;
    mediump vec3 lightDir_24;
    mediump float rim_25;
    mediump vec4 HRRimColor_26;
    mediump vec3 rgColor_27;
    mediump float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = pow (clamp ((1.001 - 
      dot (V_22, N_21)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_28 = (_RGBias + (tmpvar_29 * _RGScale));
    mediump vec3 tmpvar_30;
    tmpvar_30 = (tmpvar_28 * _RGColor).xyz;
    rgColor_27 = tmpvar_30;
    HRRimColor_26 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_26 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_26 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_26 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_26 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_31;
    tmpvar_31 = (1.0 - max (0.0, dot (V_22, N_21)));
    rim_25 = tmpvar_31;
    highp vec3 tmpvar_32;
    tmpvar_32 = _WorldSpaceLightPos0.xyz;
    lightDir_24 = tmpvar_32;
    mediump vec3 tmpvar_33;
    tmpvar_33 = normalize(lightDir_24);
    highp float tmpvar_34;
    tmpvar_34 = dot (N_21, tmpvar_33);
    rimLightDir_23 = tmpvar_34;
    rim_25 = (rim_25 * (0.5 + rimLightDir_23));
    highp int tmpvar_35;
    if ((rim_25 > HRRimColor_26.w)) {
      tmpvar_35 = 1;
    } else {
      tmpvar_35 = 0;
    };
    rim_25 = float(tmpvar_35);
    mediump vec3 tmpvar_36;
    tmpvar_36 = (outColor_5.xyz + ((HRRimColor_26.xyz * rim_25) * _HRRimPower));
    mediump float tmpvar_37;
    tmpvar_37 = clamp (tmpvar_28, 0.0, 1.0);
    highp vec3 tmpvar_38;
    tmpvar_38 = mix (outColor_5.xyz, tmpvar_30, vec3((tmpvar_37 * _RGRatio)));
    rgColor_27 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (rgColor_27, tmpvar_36, vec3(float(_HRRimIntensity)));
    rgColor_27 = tmpvar_39;
    outColor_5.xyz = rgColor_27;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_40;
      N_40 = tmpvar_13;
      highp vec3 V_41;
      V_41 = V_2;
      mediump float rimLightDir_42;
      mediump vec3 lightDir_43;
      mediump float rim_44;
      mediump vec4 HRRimColor_45;
      mediump vec3 rgColor_46;
      mediump float tmpvar_47;
      highp float tmpvar_48;
      tmpvar_48 = pow (clamp ((1.001 - 
        dot (V_41, N_40)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_47 = (_RGBias + (tmpvar_48 * _RGScale));
      mediump vec3 tmpvar_49;
      tmpvar_49 = (tmpvar_47 * _RGColor).xyz;
      rgColor_46 = tmpvar_49;
      HRRimColor_45 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_45 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_45 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_45 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_45 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - max (0.0, dot (V_41, N_40)));
      rim_44 = tmpvar_50;
      highp vec3 tmpvar_51;
      tmpvar_51 = _WorldSpaceLightPos0.xyz;
      lightDir_43 = tmpvar_51;
      mediump vec3 tmpvar_52;
      tmpvar_52 = normalize(lightDir_43);
      highp float tmpvar_53;
      tmpvar_53 = dot (N_40, tmpvar_52);
      rimLightDir_42 = tmpvar_53;
      rim_44 = (rim_44 * (0.5 + rimLightDir_42));
      highp int tmpvar_54;
      if ((rim_44 > HRRimColor_45.w)) {
        tmpvar_54 = 1;
      } else {
        tmpvar_54 = 0;
      };
      rim_44 = float(tmpvar_54);
      mediump vec3 tmpvar_55;
      tmpvar_55 = (outColor_5.xyz + max ((
        (HRRimColor_45.xyz * rim_44)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_46 = (outColor_5.xyz + max (tmpvar_49, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_56;
      tmpvar_56 = mix (rgColor_46, tmpvar_55, vec3(float(_HRRimIntensity)));
      rgColor_46 = tmpvar_56;
      outColor_5.xyz = rgColor_46;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_57;
    scrpos_57 = xlv_TEXCOORD3;
    mediump float a_58;
    a_58 = xlv_TEXCOORD3.z;
    if ((a_58 < 0.95)) {
      scrpos_57.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_58 = (a_58 * 17.0);
      highp float tmpvar_59;
      tmpvar_59 = (scrpos_57.y / 4.0);
      highp float tmpvar_60;
      tmpvar_60 = (fract(abs(tmpvar_59)) * 4.0);
      highp float tmpvar_61;
      if ((tmpvar_59 >= 0.0)) {
        tmpvar_61 = tmpvar_60;
      } else {
        tmpvar_61 = -(tmpvar_60);
      };
      highp float tmpvar_62;
      tmpvar_62 = (scrpos_57.x / 4.0);
      highp float tmpvar_63;
      tmpvar_63 = (fract(abs(tmpvar_62)) * 4.0);
      highp float tmpvar_64;
      if ((tmpvar_62 >= 0.0)) {
        tmpvar_64 = tmpvar_63;
      } else {
        tmpvar_64 = -(tmpvar_63);
      };
      highp float x_65;
      x_65 = ((a_58 - _DITHERMATRIX[
        int(tmpvar_61)
      ][
        int(tmpvar_64)
      ]) - 0.01);
      if ((x_65 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_21;
    N_21 = tmpvar_13;
    highp vec3 V_22;
    V_22 = V_2;
    mediump float rimLightDir_23;
    mediump vec3 lightDir_24;
    mediump float rim_25;
    mediump vec4 HRRimColor_26;
    mediump vec3 rgColor_27;
    mediump float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = pow (clamp ((1.001 - 
      dot (V_22, N_21)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_28 = (_RGBias + (tmpvar_29 * _RGScale));
    mediump vec3 tmpvar_30;
    tmpvar_30 = (tmpvar_28 * _RGColor).xyz;
    rgColor_27 = tmpvar_30;
    HRRimColor_26 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_26 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_26 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_26 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_26 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_31;
    tmpvar_31 = (1.0 - max (0.0, dot (V_22, N_21)));
    rim_25 = tmpvar_31;
    highp vec3 tmpvar_32;
    tmpvar_32 = _WorldSpaceLightPos0.xyz;
    lightDir_24 = tmpvar_32;
    mediump vec3 tmpvar_33;
    tmpvar_33 = normalize(lightDir_24);
    highp float tmpvar_34;
    tmpvar_34 = dot (N_21, tmpvar_33);
    rimLightDir_23 = tmpvar_34;
    rim_25 = (rim_25 * (0.5 + rimLightDir_23));
    highp int tmpvar_35;
    if ((rim_25 > HRRimColor_26.w)) {
      tmpvar_35 = 1;
    } else {
      tmpvar_35 = 0;
    };
    rim_25 = float(tmpvar_35);
    mediump vec3 tmpvar_36;
    tmpvar_36 = (outColor_5.xyz + ((HRRimColor_26.xyz * rim_25) * _HRRimPower));
    mediump float tmpvar_37;
    tmpvar_37 = clamp (tmpvar_28, 0.0, 1.0);
    highp vec3 tmpvar_38;
    tmpvar_38 = mix (outColor_5.xyz, tmpvar_30, vec3((tmpvar_37 * _RGRatio)));
    rgColor_27 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (rgColor_27, tmpvar_36, vec3(float(_HRRimIntensity)));
    rgColor_27 = tmpvar_39;
    outColor_5.xyz = rgColor_27;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_40;
      N_40 = tmpvar_13;
      highp vec3 V_41;
      V_41 = V_2;
      mediump float rimLightDir_42;
      mediump vec3 lightDir_43;
      mediump float rim_44;
      mediump vec4 HRRimColor_45;
      mediump vec3 rgColor_46;
      mediump float tmpvar_47;
      highp float tmpvar_48;
      tmpvar_48 = pow (clamp ((1.001 - 
        dot (V_41, N_40)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_47 = (_RGBias + (tmpvar_48 * _RGScale));
      mediump vec3 tmpvar_49;
      tmpvar_49 = (tmpvar_47 * _RGColor).xyz;
      rgColor_46 = tmpvar_49;
      HRRimColor_45 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_45 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_45 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_45 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_45 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - max (0.0, dot (V_41, N_40)));
      rim_44 = tmpvar_50;
      highp vec3 tmpvar_51;
      tmpvar_51 = _WorldSpaceLightPos0.xyz;
      lightDir_43 = tmpvar_51;
      mediump vec3 tmpvar_52;
      tmpvar_52 = normalize(lightDir_43);
      highp float tmpvar_53;
      tmpvar_53 = dot (N_40, tmpvar_52);
      rimLightDir_42 = tmpvar_53;
      rim_44 = (rim_44 * (0.5 + rimLightDir_42));
      highp int tmpvar_54;
      if ((rim_44 > HRRimColor_45.w)) {
        tmpvar_54 = 1;
      } else {
        tmpvar_54 = 0;
      };
      rim_44 = float(tmpvar_54);
      mediump vec3 tmpvar_55;
      tmpvar_55 = (outColor_5.xyz + max ((
        (HRRimColor_45.xyz * rim_44)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_46 = (outColor_5.xyz + max (tmpvar_49, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_56;
      tmpvar_56 = mix (rgColor_46, tmpvar_55, vec3(float(_HRRimIntensity)));
      rgColor_46 = tmpvar_56;
      outColor_5.xyz = rgColor_46;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_57;
    scrpos_57 = xlv_TEXCOORD3;
    mediump float a_58;
    a_58 = xlv_TEXCOORD3.z;
    if ((a_58 < 0.95)) {
      scrpos_57.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_58 = (a_58 * 17.0);
      highp float tmpvar_59;
      tmpvar_59 = (scrpos_57.y / 4.0);
      highp float tmpvar_60;
      tmpvar_60 = (fract(abs(tmpvar_59)) * 4.0);
      highp float tmpvar_61;
      if ((tmpvar_59 >= 0.0)) {
        tmpvar_61 = tmpvar_60;
      } else {
        tmpvar_61 = -(tmpvar_60);
      };
      highp float tmpvar_62;
      tmpvar_62 = (scrpos_57.x / 4.0);
      highp float tmpvar_63;
      tmpvar_63 = (fract(abs(tmpvar_62)) * 4.0);
      highp float tmpvar_64;
      if ((tmpvar_62 >= 0.0)) {
        tmpvar_64 = tmpvar_63;
      } else {
        tmpvar_64 = -(tmpvar_63);
      };
      highp float x_65;
      x_65 = ((a_58 - _DITHERMATRIX[
        int(tmpvar_61)
      ][
        int(tmpvar_64)
      ]) - 0.01);
      if ((x_65 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_21;
    N_21 = tmpvar_13;
    highp vec3 V_22;
    V_22 = V_2;
    mediump float rimLightDir_23;
    mediump vec3 lightDir_24;
    mediump float rim_25;
    mediump vec4 HRRimColor_26;
    mediump vec3 rgColor_27;
    mediump float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = pow (clamp ((1.001 - 
      dot (V_22, N_21)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_28 = (_RGBias + (tmpvar_29 * _RGScale));
    mediump vec3 tmpvar_30;
    tmpvar_30 = (tmpvar_28 * _RGColor).xyz;
    rgColor_27 = tmpvar_30;
    HRRimColor_26 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_26 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_26 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_26 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_26 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_31;
    tmpvar_31 = (1.0 - max (0.0, dot (V_22, N_21)));
    rim_25 = tmpvar_31;
    highp vec3 tmpvar_32;
    tmpvar_32 = _WorldSpaceLightPos0.xyz;
    lightDir_24 = tmpvar_32;
    mediump vec3 tmpvar_33;
    tmpvar_33 = normalize(lightDir_24);
    highp float tmpvar_34;
    tmpvar_34 = dot (N_21, tmpvar_33);
    rimLightDir_23 = tmpvar_34;
    rim_25 = (rim_25 * (0.5 + rimLightDir_23));
    highp int tmpvar_35;
    if ((rim_25 > HRRimColor_26.w)) {
      tmpvar_35 = 1;
    } else {
      tmpvar_35 = 0;
    };
    rim_25 = float(tmpvar_35);
    mediump vec3 tmpvar_36;
    tmpvar_36 = (outColor_5.xyz + ((HRRimColor_26.xyz * rim_25) * _HRRimPower));
    mediump float tmpvar_37;
    tmpvar_37 = clamp (tmpvar_28, 0.0, 1.0);
    highp vec3 tmpvar_38;
    tmpvar_38 = mix (outColor_5.xyz, tmpvar_30, vec3((tmpvar_37 * _RGRatio)));
    rgColor_27 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (rgColor_27, tmpvar_36, vec3(float(_HRRimIntensity)));
    rgColor_27 = tmpvar_39;
    outColor_5.xyz = rgColor_27;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_40;
      N_40 = tmpvar_13;
      highp vec3 V_41;
      V_41 = V_2;
      mediump float rimLightDir_42;
      mediump vec3 lightDir_43;
      mediump float rim_44;
      mediump vec4 HRRimColor_45;
      mediump vec3 rgColor_46;
      mediump float tmpvar_47;
      highp float tmpvar_48;
      tmpvar_48 = pow (clamp ((1.001 - 
        dot (V_41, N_40)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_47 = (_RGBias + (tmpvar_48 * _RGScale));
      mediump vec3 tmpvar_49;
      tmpvar_49 = (tmpvar_47 * _RGColor).xyz;
      rgColor_46 = tmpvar_49;
      HRRimColor_45 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_45 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_45 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_45 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_45 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - max (0.0, dot (V_41, N_40)));
      rim_44 = tmpvar_50;
      highp vec3 tmpvar_51;
      tmpvar_51 = _WorldSpaceLightPos0.xyz;
      lightDir_43 = tmpvar_51;
      mediump vec3 tmpvar_52;
      tmpvar_52 = normalize(lightDir_43);
      highp float tmpvar_53;
      tmpvar_53 = dot (N_40, tmpvar_52);
      rimLightDir_42 = tmpvar_53;
      rim_44 = (rim_44 * (0.5 + rimLightDir_42));
      highp int tmpvar_54;
      if ((rim_44 > HRRimColor_45.w)) {
        tmpvar_54 = 1;
      } else {
        tmpvar_54 = 0;
      };
      rim_44 = float(tmpvar_54);
      mediump vec3 tmpvar_55;
      tmpvar_55 = (outColor_5.xyz + max ((
        (HRRimColor_45.xyz * rim_44)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_46 = (outColor_5.xyz + max (tmpvar_49, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_56;
      tmpvar_56 = mix (rgColor_46, tmpvar_55, vec3(float(_HRRimIntensity)));
      rgColor_46 = tmpvar_56;
      outColor_5.xyz = rgColor_46;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_57;
    scrpos_57 = xlv_TEXCOORD3;
    mediump float a_58;
    a_58 = xlv_TEXCOORD3.z;
    if ((a_58 < 0.95)) {
      scrpos_57.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_58 = (a_58 * 17.0);
      highp float tmpvar_59;
      tmpvar_59 = (scrpos_57.y / 4.0);
      highp float tmpvar_60;
      tmpvar_60 = (fract(abs(tmpvar_59)) * 4.0);
      highp float tmpvar_61;
      if ((tmpvar_59 >= 0.0)) {
        tmpvar_61 = tmpvar_60;
      } else {
        tmpvar_61 = -(tmpvar_60);
      };
      highp float tmpvar_62;
      tmpvar_62 = (scrpos_57.x / 4.0);
      highp float tmpvar_63;
      tmpvar_63 = (fract(abs(tmpvar_62)) * 4.0);
      highp float tmpvar_64;
      if ((tmpvar_62 >= 0.0)) {
        tmpvar_64 = tmpvar_63;
      } else {
        tmpvar_64 = -(tmpvar_63);
      };
      highp float x_65;
      x_65 = ((a_58 - _DITHERMATRIX[
        int(tmpvar_61)
      ][
        int(tmpvar_64)
      ]) - 0.01);
      if ((x_65 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_21;
    N_21 = tmpvar_13;
    highp vec3 V_22;
    V_22 = V_2;
    mediump float rimLightDir_23;
    mediump vec3 lightDir_24;
    mediump float rim_25;
    mediump vec4 HRRimColor_26;
    mediump vec3 rgColor_27;
    mediump float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = pow (clamp ((1.001 - 
      dot (V_22, N_21)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_28 = (_RGBias + (tmpvar_29 * _RGScale));
    mediump vec3 tmpvar_30;
    tmpvar_30 = (tmpvar_28 * _RGColor).xyz;
    rgColor_27 = tmpvar_30;
    HRRimColor_26 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_26 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_26 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_26 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_26 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_31;
    tmpvar_31 = (1.0 - max (0.0, dot (V_22, N_21)));
    rim_25 = tmpvar_31;
    highp vec3 tmpvar_32;
    tmpvar_32 = _WorldSpaceLightPos0.xyz;
    lightDir_24 = tmpvar_32;
    mediump vec3 tmpvar_33;
    tmpvar_33 = normalize(lightDir_24);
    highp float tmpvar_34;
    tmpvar_34 = dot (N_21, tmpvar_33);
    rimLightDir_23 = tmpvar_34;
    rim_25 = (rim_25 * (0.5 + rimLightDir_23));
    highp int tmpvar_35;
    if ((rim_25 > HRRimColor_26.w)) {
      tmpvar_35 = 1;
    } else {
      tmpvar_35 = 0;
    };
    rim_25 = float(tmpvar_35);
    mediump vec3 tmpvar_36;
    tmpvar_36 = (outColor_5.xyz + ((HRRimColor_26.xyz * rim_25) * _HRRimPower));
    mediump float tmpvar_37;
    tmpvar_37 = clamp (tmpvar_28, 0.0, 1.0);
    highp vec3 tmpvar_38;
    tmpvar_38 = mix (outColor_5.xyz, tmpvar_30, vec3((tmpvar_37 * _RGRatio)));
    rgColor_27 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (rgColor_27, tmpvar_36, vec3(float(_HRRimIntensity)));
    rgColor_27 = tmpvar_39;
    outColor_5.xyz = rgColor_27;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_40;
      N_40 = tmpvar_13;
      highp vec3 V_41;
      V_41 = V_2;
      mediump float rimLightDir_42;
      mediump vec3 lightDir_43;
      mediump float rim_44;
      mediump vec4 HRRimColor_45;
      mediump vec3 rgColor_46;
      mediump float tmpvar_47;
      highp float tmpvar_48;
      tmpvar_48 = pow (clamp ((1.001 - 
        dot (V_41, N_40)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_47 = (_RGBias + (tmpvar_48 * _RGScale));
      mediump vec3 tmpvar_49;
      tmpvar_49 = (tmpvar_47 * _RGColor).xyz;
      rgColor_46 = tmpvar_49;
      HRRimColor_45 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_45 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_45 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_45 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_45 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - max (0.0, dot (V_41, N_40)));
      rim_44 = tmpvar_50;
      highp vec3 tmpvar_51;
      tmpvar_51 = _WorldSpaceLightPos0.xyz;
      lightDir_43 = tmpvar_51;
      mediump vec3 tmpvar_52;
      tmpvar_52 = normalize(lightDir_43);
      highp float tmpvar_53;
      tmpvar_53 = dot (N_40, tmpvar_52);
      rimLightDir_42 = tmpvar_53;
      rim_44 = (rim_44 * (0.5 + rimLightDir_42));
      highp int tmpvar_54;
      if ((rim_44 > HRRimColor_45.w)) {
        tmpvar_54 = 1;
      } else {
        tmpvar_54 = 0;
      };
      rim_44 = float(tmpvar_54);
      mediump vec3 tmpvar_55;
      tmpvar_55 = (outColor_5.xyz + max ((
        (HRRimColor_45.xyz * rim_44)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_46 = (outColor_5.xyz + max (tmpvar_49, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_56;
      tmpvar_56 = mix (rgColor_46, tmpvar_55, vec3(float(_HRRimIntensity)));
      rgColor_46 = tmpvar_56;
      outColor_5.xyz = rgColor_46;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_57;
    scrpos_57 = xlv_TEXCOORD3;
    mediump float a_58;
    a_58 = xlv_TEXCOORD3.z;
    if ((a_58 < 0.95)) {
      scrpos_57.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_58 = (a_58 * 17.0);
      highp float tmpvar_59;
      tmpvar_59 = (scrpos_57.y / 4.0);
      highp float tmpvar_60;
      tmpvar_60 = (fract(abs(tmpvar_59)) * 4.0);
      highp float tmpvar_61;
      if ((tmpvar_59 >= 0.0)) {
        tmpvar_61 = tmpvar_60;
      } else {
        tmpvar_61 = -(tmpvar_60);
      };
      highp float tmpvar_62;
      tmpvar_62 = (scrpos_57.x / 4.0);
      highp float tmpvar_63;
      tmpvar_63 = (fract(abs(tmpvar_62)) * 4.0);
      highp float tmpvar_64;
      if ((tmpvar_62 >= 0.0)) {
        tmpvar_64 = tmpvar_63;
      } else {
        tmpvar_64 = -(tmpvar_63);
      };
      highp float x_65;
      x_65 = ((a_58 - _DITHERMATRIX[
        int(tmpvar_61)
      ][
        int(tmpvar_64)
      ]) - 0.01);
      if ((x_65 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_21;
    N_21 = tmpvar_13;
    highp vec3 V_22;
    V_22 = V_2;
    mediump float rimLightDir_23;
    mediump vec3 lightDir_24;
    mediump float rim_25;
    mediump vec4 HRRimColor_26;
    mediump vec3 rgColor_27;
    mediump float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = pow (clamp ((1.001 - 
      dot (V_22, N_21)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_28 = (_RGBias + (tmpvar_29 * _RGScale));
    mediump vec3 tmpvar_30;
    tmpvar_30 = (tmpvar_28 * _RGColor).xyz;
    rgColor_27 = tmpvar_30;
    HRRimColor_26 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_26 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_26 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_26 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_26 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_31;
    tmpvar_31 = (1.0 - max (0.0, dot (V_22, N_21)));
    rim_25 = tmpvar_31;
    highp vec3 tmpvar_32;
    tmpvar_32 = _WorldSpaceLightPos0.xyz;
    lightDir_24 = tmpvar_32;
    mediump vec3 tmpvar_33;
    tmpvar_33 = normalize(lightDir_24);
    highp float tmpvar_34;
    tmpvar_34 = dot (N_21, tmpvar_33);
    rimLightDir_23 = tmpvar_34;
    rim_25 = (rim_25 * (0.5 + rimLightDir_23));
    highp int tmpvar_35;
    if ((rim_25 > HRRimColor_26.w)) {
      tmpvar_35 = 1;
    } else {
      tmpvar_35 = 0;
    };
    rim_25 = float(tmpvar_35);
    mediump vec3 tmpvar_36;
    tmpvar_36 = (outColor_5.xyz + ((HRRimColor_26.xyz * rim_25) * _HRRimPower));
    mediump float tmpvar_37;
    tmpvar_37 = clamp (tmpvar_28, 0.0, 1.0);
    highp vec3 tmpvar_38;
    tmpvar_38 = mix (outColor_5.xyz, tmpvar_30, vec3((tmpvar_37 * _RGRatio)));
    rgColor_27 = tmpvar_38;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (rgColor_27, tmpvar_36, vec3(float(_HRRimIntensity)));
    rgColor_27 = tmpvar_39;
    outColor_5.xyz = rgColor_27;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_40;
      N_40 = tmpvar_13;
      highp vec3 V_41;
      V_41 = V_2;
      mediump float rimLightDir_42;
      mediump vec3 lightDir_43;
      mediump float rim_44;
      mediump vec4 HRRimColor_45;
      mediump vec3 rgColor_46;
      mediump float tmpvar_47;
      highp float tmpvar_48;
      tmpvar_48 = pow (clamp ((1.001 - 
        dot (V_41, N_40)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_47 = (_RGBias + (tmpvar_48 * _RGScale));
      mediump vec3 tmpvar_49;
      tmpvar_49 = (tmpvar_47 * _RGColor).xyz;
      rgColor_46 = tmpvar_49;
      HRRimColor_45 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_45 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_45 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_45 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_45 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - max (0.0, dot (V_41, N_40)));
      rim_44 = tmpvar_50;
      highp vec3 tmpvar_51;
      tmpvar_51 = _WorldSpaceLightPos0.xyz;
      lightDir_43 = tmpvar_51;
      mediump vec3 tmpvar_52;
      tmpvar_52 = normalize(lightDir_43);
      highp float tmpvar_53;
      tmpvar_53 = dot (N_40, tmpvar_52);
      rimLightDir_42 = tmpvar_53;
      rim_44 = (rim_44 * (0.5 + rimLightDir_42));
      highp int tmpvar_54;
      if ((rim_44 > HRRimColor_45.w)) {
        tmpvar_54 = 1;
      } else {
        tmpvar_54 = 0;
      };
      rim_44 = float(tmpvar_54);
      mediump vec3 tmpvar_55;
      tmpvar_55 = (outColor_5.xyz + max ((
        (HRRimColor_45.xyz * rim_44)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_46 = (outColor_5.xyz + max (tmpvar_49, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_56;
      tmpvar_56 = mix (rgColor_46, tmpvar_55, vec3(float(_HRRimIntensity)));
      rgColor_46 = tmpvar_56;
      outColor_5.xyz = rgColor_46;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_57;
    scrpos_57 = xlv_TEXCOORD3;
    mediump float a_58;
    a_58 = xlv_TEXCOORD3.z;
    if ((a_58 < 0.95)) {
      scrpos_57.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_58 = (a_58 * 17.0);
      highp float tmpvar_59;
      tmpvar_59 = (scrpos_57.y / 4.0);
      highp float tmpvar_60;
      tmpvar_60 = (fract(abs(tmpvar_59)) * 4.0);
      highp float tmpvar_61;
      if ((tmpvar_59 >= 0.0)) {
        tmpvar_61 = tmpvar_60;
      } else {
        tmpvar_61 = -(tmpvar_60);
      };
      highp float tmpvar_62;
      tmpvar_62 = (scrpos_57.x / 4.0);
      highp float tmpvar_63;
      tmpvar_63 = (fract(abs(tmpvar_62)) * 4.0);
      highp float tmpvar_64;
      if ((tmpvar_62 >= 0.0)) {
        tmpvar_64 = tmpvar_63;
      } else {
        tmpvar_64 = -(tmpvar_63);
      };
      highp float x_65;
      x_65 = ((a_58 - _DITHERMATRIX[
        int(tmpvar_61)
      ][
        int(tmpvar_64)
      ]) - 0.01);
      if ((x_65 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (outColor_5.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if ((_RGBlendType == 1)) {
    highp vec3 N_31;
    N_31 = tmpvar_23;
    highp vec3 V_32;
    V_32 = V_2;
    mediump float rimLightDir_33;
    mediump vec3 lightDir_34;
    mediump float rim_35;
    mediump vec4 HRRimColor_36;
    mediump vec3 rgColor_37;
    mediump float tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow (clamp ((1.001 - 
      dot (V_32, N_31)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_38 = (_RGBias + (tmpvar_39 * _RGScale));
    mediump vec3 tmpvar_40;
    tmpvar_40 = (tmpvar_38 * _RGColor).xyz;
    rgColor_37 = tmpvar_40;
    HRRimColor_36 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_36 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_36 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_36 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_36 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_41;
    tmpvar_41 = (1.0 - max (0.0, dot (V_32, N_31)));
    rim_35 = tmpvar_41;
    highp vec3 tmpvar_42;
    tmpvar_42 = _WorldSpaceLightPos0.xyz;
    lightDir_34 = tmpvar_42;
    mediump vec3 tmpvar_43;
    tmpvar_43 = normalize(lightDir_34);
    highp float tmpvar_44;
    tmpvar_44 = dot (N_31, tmpvar_43);
    rimLightDir_33 = tmpvar_44;
    rim_35 = (rim_35 * (0.5 + rimLightDir_33));
    highp int tmpvar_45;
    if ((rim_35 > HRRimColor_36.w)) {
      tmpvar_45 = 1;
    } else {
      tmpvar_45 = 0;
    };
    rim_35 = float(tmpvar_45);
    mediump vec3 tmpvar_46;
    tmpvar_46 = (outColor_4.xyz + ((HRRimColor_36.xyz * rim_35) * _HRRimPower));
    mediump float tmpvar_47;
    tmpvar_47 = clamp (tmpvar_38, 0.0, 1.0);
    highp vec3 tmpvar_48;
    tmpvar_48 = mix (outColor_4.xyz, tmpvar_40, vec3((tmpvar_47 * _RGRatio)));
    rgColor_37 = tmpvar_48;
    highp vec3 tmpvar_49;
    tmpvar_49 = mix (rgColor_37, tmpvar_46, vec3(float(_HRRimIntensity)));
    rgColor_37 = tmpvar_49;
    outColor_4.xyz = rgColor_37;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_50;
      N_50 = tmpvar_23;
      highp vec3 V_51;
      V_51 = V_2;
      mediump float rimLightDir_52;
      mediump vec3 lightDir_53;
      mediump float rim_54;
      mediump vec4 HRRimColor_55;
      mediump vec3 rgColor_56;
      mediump float tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = pow (clamp ((1.001 - 
        dot (V_51, N_50)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_57 = (_RGBias + (tmpvar_58 * _RGScale));
      mediump vec3 tmpvar_59;
      tmpvar_59 = (tmpvar_57 * _RGColor).xyz;
      rgColor_56 = tmpvar_59;
      HRRimColor_55 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_55 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_55 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_55 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_55 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - max (0.0, dot (V_51, N_50)));
      rim_54 = tmpvar_60;
      highp vec3 tmpvar_61;
      tmpvar_61 = _WorldSpaceLightPos0.xyz;
      lightDir_53 = tmpvar_61;
      mediump vec3 tmpvar_62;
      tmpvar_62 = normalize(lightDir_53);
      highp float tmpvar_63;
      tmpvar_63 = dot (N_50, tmpvar_62);
      rimLightDir_52 = tmpvar_63;
      rim_54 = (rim_54 * (0.5 + rimLightDir_52));
      highp int tmpvar_64;
      if ((rim_54 > HRRimColor_55.w)) {
        tmpvar_64 = 1;
      } else {
        tmpvar_64 = 0;
      };
      rim_54 = float(tmpvar_64);
      mediump vec3 tmpvar_65;
      tmpvar_65 = (outColor_4.xyz + max ((
        (HRRimColor_55.xyz * rim_54)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_56 = (outColor_4.xyz + max (tmpvar_59, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_66;
      tmpvar_66 = mix (rgColor_56, tmpvar_65, vec3(float(_HRRimIntensity)));
      rgColor_56 = tmpvar_66;
      outColor_4.xyz = rgColor_56;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_67;
    scrpos_67 = xlv_TEXCOORD3;
    mediump float a_68;
    a_68 = xlv_TEXCOORD3.z;
    if ((a_68 < 0.95)) {
      scrpos_67.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_68 = (a_68 * 17.0);
      highp float tmpvar_69;
      tmpvar_69 = (scrpos_67.y / 4.0);
      highp float tmpvar_70;
      tmpvar_70 = (fract(abs(tmpvar_69)) * 4.0);
      highp float tmpvar_71;
      if ((tmpvar_69 >= 0.0)) {
        tmpvar_71 = tmpvar_70;
      } else {
        tmpvar_71 = -(tmpvar_70);
      };
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_67.x / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float x_75;
      x_75 = ((a_68 - _DITHERMATRIX[
        int(tmpvar_71)
      ][
        int(tmpvar_74)
      ]) - 0.01);
      if ((x_75 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if ((_RGBlendType == 1)) {
    highp vec3 N_31;
    N_31 = tmpvar_23;
    highp vec3 V_32;
    V_32 = V_2;
    mediump float rimLightDir_33;
    mediump vec3 lightDir_34;
    mediump float rim_35;
    mediump vec4 HRRimColor_36;
    mediump vec3 rgColor_37;
    mediump float tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow (clamp ((1.001 - 
      dot (V_32, N_31)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_38 = (_RGBias + (tmpvar_39 * _RGScale));
    mediump vec3 tmpvar_40;
    tmpvar_40 = (tmpvar_38 * _RGColor).xyz;
    rgColor_37 = tmpvar_40;
    HRRimColor_36 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_36 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_36 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_36 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_36 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_41;
    tmpvar_41 = (1.0 - max (0.0, dot (V_32, N_31)));
    rim_35 = tmpvar_41;
    highp vec3 tmpvar_42;
    tmpvar_42 = _WorldSpaceLightPos0.xyz;
    lightDir_34 = tmpvar_42;
    mediump vec3 tmpvar_43;
    tmpvar_43 = normalize(lightDir_34);
    highp float tmpvar_44;
    tmpvar_44 = dot (N_31, tmpvar_43);
    rimLightDir_33 = tmpvar_44;
    rim_35 = (rim_35 * (0.5 + rimLightDir_33));
    highp int tmpvar_45;
    if ((rim_35 > HRRimColor_36.w)) {
      tmpvar_45 = 1;
    } else {
      tmpvar_45 = 0;
    };
    rim_35 = float(tmpvar_45);
    mediump vec3 tmpvar_46;
    tmpvar_46 = (outColor_4.xyz + ((HRRimColor_36.xyz * rim_35) * _HRRimPower));
    mediump float tmpvar_47;
    tmpvar_47 = clamp (tmpvar_38, 0.0, 1.0);
    highp vec3 tmpvar_48;
    tmpvar_48 = mix (outColor_4.xyz, tmpvar_40, vec3((tmpvar_47 * _RGRatio)));
    rgColor_37 = tmpvar_48;
    highp vec3 tmpvar_49;
    tmpvar_49 = mix (rgColor_37, tmpvar_46, vec3(float(_HRRimIntensity)));
    rgColor_37 = tmpvar_49;
    outColor_4.xyz = rgColor_37;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_50;
      N_50 = tmpvar_23;
      highp vec3 V_51;
      V_51 = V_2;
      mediump float rimLightDir_52;
      mediump vec3 lightDir_53;
      mediump float rim_54;
      mediump vec4 HRRimColor_55;
      mediump vec3 rgColor_56;
      mediump float tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = pow (clamp ((1.001 - 
        dot (V_51, N_50)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_57 = (_RGBias + (tmpvar_58 * _RGScale));
      mediump vec3 tmpvar_59;
      tmpvar_59 = (tmpvar_57 * _RGColor).xyz;
      rgColor_56 = tmpvar_59;
      HRRimColor_55 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_55 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_55 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_55 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_55 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - max (0.0, dot (V_51, N_50)));
      rim_54 = tmpvar_60;
      highp vec3 tmpvar_61;
      tmpvar_61 = _WorldSpaceLightPos0.xyz;
      lightDir_53 = tmpvar_61;
      mediump vec3 tmpvar_62;
      tmpvar_62 = normalize(lightDir_53);
      highp float tmpvar_63;
      tmpvar_63 = dot (N_50, tmpvar_62);
      rimLightDir_52 = tmpvar_63;
      rim_54 = (rim_54 * (0.5 + rimLightDir_52));
      highp int tmpvar_64;
      if ((rim_54 > HRRimColor_55.w)) {
        tmpvar_64 = 1;
      } else {
        tmpvar_64 = 0;
      };
      rim_54 = float(tmpvar_64);
      mediump vec3 tmpvar_65;
      tmpvar_65 = (outColor_4.xyz + max ((
        (HRRimColor_55.xyz * rim_54)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_56 = (outColor_4.xyz + max (tmpvar_59, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_66;
      tmpvar_66 = mix (rgColor_56, tmpvar_65, vec3(float(_HRRimIntensity)));
      rgColor_56 = tmpvar_66;
      outColor_4.xyz = rgColor_56;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_67;
    scrpos_67 = xlv_TEXCOORD3;
    mediump float a_68;
    a_68 = xlv_TEXCOORD3.z;
    if ((a_68 < 0.95)) {
      scrpos_67.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_68 = (a_68 * 17.0);
      highp float tmpvar_69;
      tmpvar_69 = (scrpos_67.y / 4.0);
      highp float tmpvar_70;
      tmpvar_70 = (fract(abs(tmpvar_69)) * 4.0);
      highp float tmpvar_71;
      if ((tmpvar_69 >= 0.0)) {
        tmpvar_71 = tmpvar_70;
      } else {
        tmpvar_71 = -(tmpvar_70);
      };
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_67.x / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float x_75;
      x_75 = ((a_68 - _DITHERMATRIX[
        int(tmpvar_71)
      ][
        int(tmpvar_74)
      ]) - 0.01);
      if ((x_75 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  if ((_RGBlendType == 1)) {
    highp vec3 N_31;
    N_31 = tmpvar_23;
    highp vec3 V_32;
    V_32 = V_2;
    mediump float rimLightDir_33;
    mediump vec3 lightDir_34;
    mediump float rim_35;
    mediump vec4 HRRimColor_36;
    mediump vec3 rgColor_37;
    mediump float tmpvar_38;
    highp float tmpvar_39;
    tmpvar_39 = pow (clamp ((1.001 - 
      dot (V_32, N_31)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_38 = (_RGBias + (tmpvar_39 * _RGScale));
    mediump vec3 tmpvar_40;
    tmpvar_40 = (tmpvar_38 * _RGColor).xyz;
    rgColor_37 = tmpvar_40;
    HRRimColor_36 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_36 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_36 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_36 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_36 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_41;
    tmpvar_41 = (1.0 - max (0.0, dot (V_32, N_31)));
    rim_35 = tmpvar_41;
    highp vec3 tmpvar_42;
    tmpvar_42 = _WorldSpaceLightPos0.xyz;
    lightDir_34 = tmpvar_42;
    mediump vec3 tmpvar_43;
    tmpvar_43 = normalize(lightDir_34);
    highp float tmpvar_44;
    tmpvar_44 = dot (N_31, tmpvar_43);
    rimLightDir_33 = tmpvar_44;
    rim_35 = (rim_35 * (0.5 + rimLightDir_33));
    highp int tmpvar_45;
    if ((rim_35 > HRRimColor_36.w)) {
      tmpvar_45 = 1;
    } else {
      tmpvar_45 = 0;
    };
    rim_35 = float(tmpvar_45);
    mediump vec3 tmpvar_46;
    tmpvar_46 = (outColor_4.xyz + ((HRRimColor_36.xyz * rim_35) * _HRRimPower));
    mediump float tmpvar_47;
    tmpvar_47 = clamp (tmpvar_38, 0.0, 1.0);
    highp vec3 tmpvar_48;
    tmpvar_48 = mix (outColor_4.xyz, tmpvar_40, vec3((tmpvar_47 * _RGRatio)));
    rgColor_37 = tmpvar_48;
    highp vec3 tmpvar_49;
    tmpvar_49 = mix (rgColor_37, tmpvar_46, vec3(float(_HRRimIntensity)));
    rgColor_37 = tmpvar_49;
    outColor_4.xyz = rgColor_37;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_50;
      N_50 = tmpvar_23;
      highp vec3 V_51;
      V_51 = V_2;
      mediump float rimLightDir_52;
      mediump vec3 lightDir_53;
      mediump float rim_54;
      mediump vec4 HRRimColor_55;
      mediump vec3 rgColor_56;
      mediump float tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = pow (clamp ((1.001 - 
        dot (V_51, N_50)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_57 = (_RGBias + (tmpvar_58 * _RGScale));
      mediump vec3 tmpvar_59;
      tmpvar_59 = (tmpvar_57 * _RGColor).xyz;
      rgColor_56 = tmpvar_59;
      HRRimColor_55 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_55 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_55 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_55 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_55 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - max (0.0, dot (V_51, N_50)));
      rim_54 = tmpvar_60;
      highp vec3 tmpvar_61;
      tmpvar_61 = _WorldSpaceLightPos0.xyz;
      lightDir_53 = tmpvar_61;
      mediump vec3 tmpvar_62;
      tmpvar_62 = normalize(lightDir_53);
      highp float tmpvar_63;
      tmpvar_63 = dot (N_50, tmpvar_62);
      rimLightDir_52 = tmpvar_63;
      rim_54 = (rim_54 * (0.5 + rimLightDir_52));
      highp int tmpvar_64;
      if ((rim_54 > HRRimColor_55.w)) {
        tmpvar_64 = 1;
      } else {
        tmpvar_64 = 0;
      };
      rim_54 = float(tmpvar_64);
      mediump vec3 tmpvar_65;
      tmpvar_65 = (outColor_4.xyz + max ((
        (HRRimColor_55.xyz * rim_54)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_56 = (outColor_4.xyz + max (tmpvar_59, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_66;
      tmpvar_66 = mix (rgColor_56, tmpvar_65, vec3(float(_HRRimIntensity)));
      rgColor_56 = tmpvar_66;
      outColor_4.xyz = rgColor_56;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_67;
    scrpos_67 = xlv_TEXCOORD3;
    mediump float a_68;
    a_68 = xlv_TEXCOORD3.z;
    if ((a_68 < 0.95)) {
      scrpos_67.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_68 = (a_68 * 17.0);
      highp float tmpvar_69;
      tmpvar_69 = (scrpos_67.y / 4.0);
      highp float tmpvar_70;
      tmpvar_70 = (fract(abs(tmpvar_69)) * 4.0);
      highp float tmpvar_71;
      if ((tmpvar_69 >= 0.0)) {
        tmpvar_71 = tmpvar_70;
      } else {
        tmpvar_71 = -(tmpvar_70);
      };
      highp float tmpvar_72;
      tmpvar_72 = (scrpos_67.x / 4.0);
      highp float tmpvar_73;
      tmpvar_73 = (fract(abs(tmpvar_72)) * 4.0);
      highp float tmpvar_74;
      if ((tmpvar_72 >= 0.0)) {
        tmpvar_74 = tmpvar_73;
      } else {
        tmpvar_74 = -(tmpvar_73);
      };
      highp float x_75;
      x_75 = ((a_68 - _DITHERMATRIX[
        int(tmpvar_71)
      ][
        int(tmpvar_74)
      ]) - 0.01);
      if ((x_75 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_74;
    N_74 = tmpvar_66;
    highp vec3 V_75;
    V_75 = V_2;
    mediump float rimLightDir_76;
    mediump vec3 lightDir_77;
    mediump float rim_78;
    mediump vec4 HRRimColor_79;
    mediump vec3 rgColor_80;
    mediump float tmpvar_81;
    highp float tmpvar_82;
    tmpvar_82 = pow (clamp ((1.001 - 
      dot (V_75, N_74)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_81 = (_RGBias + (tmpvar_82 * _RGScale));
    mediump vec3 tmpvar_83;
    tmpvar_83 = (tmpvar_81 * _RGColor).xyz;
    rgColor_80 = tmpvar_83;
    HRRimColor_79 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_79 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_79 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_79 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_79 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_84;
    tmpvar_84 = (1.0 - max (0.0, dot (V_75, N_74)));
    rim_78 = tmpvar_84;
    highp vec3 tmpvar_85;
    tmpvar_85 = _WorldSpaceLightPos0.xyz;
    lightDir_77 = tmpvar_85;
    mediump vec3 tmpvar_86;
    tmpvar_86 = normalize(lightDir_77);
    highp float tmpvar_87;
    tmpvar_87 = dot (N_74, tmpvar_86);
    rimLightDir_76 = tmpvar_87;
    rim_78 = (rim_78 * (0.5 + rimLightDir_76));
    highp int tmpvar_88;
    if ((rim_78 > HRRimColor_79.w)) {
      tmpvar_88 = 1;
    } else {
      tmpvar_88 = 0;
    };
    rim_78 = float(tmpvar_88);
    mediump vec3 tmpvar_89;
    tmpvar_89 = (outColor_4.xyz + ((HRRimColor_79.xyz * rim_78) * _HRRimPower));
    mediump float tmpvar_90;
    tmpvar_90 = clamp (tmpvar_81, 0.0, 1.0);
    highp vec3 tmpvar_91;
    tmpvar_91 = mix (outColor_4.xyz, tmpvar_83, vec3((tmpvar_90 * _RGRatio)));
    rgColor_80 = tmpvar_91;
    highp vec3 tmpvar_92;
    tmpvar_92 = mix (rgColor_80, tmpvar_89, vec3(float(_HRRimIntensity)));
    rgColor_80 = tmpvar_92;
    outColor_4.xyz = rgColor_80;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_93;
      N_93 = tmpvar_66;
      highp vec3 V_94;
      V_94 = V_2;
      mediump float rimLightDir_95;
      mediump vec3 lightDir_96;
      mediump float rim_97;
      mediump vec4 HRRimColor_98;
      mediump vec3 rgColor_99;
      mediump float tmpvar_100;
      highp float tmpvar_101;
      tmpvar_101 = pow (clamp ((1.001 - 
        dot (V_94, N_93)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_100 = (_RGBias + (tmpvar_101 * _RGScale));
      mediump vec3 tmpvar_102;
      tmpvar_102 = (tmpvar_100 * _RGColor).xyz;
      rgColor_99 = tmpvar_102;
      HRRimColor_98 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_98 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_98 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_98 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_98 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_103;
      tmpvar_103 = (1.0 - max (0.0, dot (V_94, N_93)));
      rim_97 = tmpvar_103;
      highp vec3 tmpvar_104;
      tmpvar_104 = _WorldSpaceLightPos0.xyz;
      lightDir_96 = tmpvar_104;
      mediump vec3 tmpvar_105;
      tmpvar_105 = normalize(lightDir_96);
      highp float tmpvar_106;
      tmpvar_106 = dot (N_93, tmpvar_105);
      rimLightDir_95 = tmpvar_106;
      rim_97 = (rim_97 * (0.5 + rimLightDir_95));
      highp int tmpvar_107;
      if ((rim_97 > HRRimColor_98.w)) {
        tmpvar_107 = 1;
      } else {
        tmpvar_107 = 0;
      };
      rim_97 = float(tmpvar_107);
      mediump vec3 tmpvar_108;
      tmpvar_108 = (outColor_4.xyz + max ((
        (HRRimColor_98.xyz * rim_97)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_99 = (outColor_4.xyz + max (tmpvar_102, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_109;
      tmpvar_109 = mix (rgColor_99, tmpvar_108, vec3(float(_HRRimIntensity)));
      rgColor_99 = tmpvar_109;
      outColor_4.xyz = rgColor_99;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_110;
    scrpos_110 = xlv_TEXCOORD3;
    mediump float a_111;
    a_111 = xlv_TEXCOORD3.z;
    if ((a_111 < 0.95)) {
      scrpos_110.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_111 = (a_111 * 17.0);
      highp float tmpvar_112;
      tmpvar_112 = (scrpos_110.y / 4.0);
      highp float tmpvar_113;
      tmpvar_113 = (fract(abs(tmpvar_112)) * 4.0);
      highp float tmpvar_114;
      if ((tmpvar_112 >= 0.0)) {
        tmpvar_114 = tmpvar_113;
      } else {
        tmpvar_114 = -(tmpvar_113);
      };
      highp float tmpvar_115;
      tmpvar_115 = (scrpos_110.x / 4.0);
      highp float tmpvar_116;
      tmpvar_116 = (fract(abs(tmpvar_115)) * 4.0);
      highp float tmpvar_117;
      if ((tmpvar_115 >= 0.0)) {
        tmpvar_117 = tmpvar_116;
      } else {
        tmpvar_117 = -(tmpvar_116);
      };
      highp float x_118;
      x_118 = ((a_111 - _DITHERMATRIX[
        int(tmpvar_114)
      ][
        int(tmpvar_117)
      ]) - 0.01);
      if ((x_118 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_74;
    N_74 = tmpvar_66;
    highp vec3 V_75;
    V_75 = V_2;
    mediump float rimLightDir_76;
    mediump vec3 lightDir_77;
    mediump float rim_78;
    mediump vec4 HRRimColor_79;
    mediump vec3 rgColor_80;
    mediump float tmpvar_81;
    highp float tmpvar_82;
    tmpvar_82 = pow (clamp ((1.001 - 
      dot (V_75, N_74)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_81 = (_RGBias + (tmpvar_82 * _RGScale));
    mediump vec3 tmpvar_83;
    tmpvar_83 = (tmpvar_81 * _RGColor).xyz;
    rgColor_80 = tmpvar_83;
    HRRimColor_79 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_79 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_79 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_79 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_79 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_84;
    tmpvar_84 = (1.0 - max (0.0, dot (V_75, N_74)));
    rim_78 = tmpvar_84;
    highp vec3 tmpvar_85;
    tmpvar_85 = _WorldSpaceLightPos0.xyz;
    lightDir_77 = tmpvar_85;
    mediump vec3 tmpvar_86;
    tmpvar_86 = normalize(lightDir_77);
    highp float tmpvar_87;
    tmpvar_87 = dot (N_74, tmpvar_86);
    rimLightDir_76 = tmpvar_87;
    rim_78 = (rim_78 * (0.5 + rimLightDir_76));
    highp int tmpvar_88;
    if ((rim_78 > HRRimColor_79.w)) {
      tmpvar_88 = 1;
    } else {
      tmpvar_88 = 0;
    };
    rim_78 = float(tmpvar_88);
    mediump vec3 tmpvar_89;
    tmpvar_89 = (outColor_4.xyz + ((HRRimColor_79.xyz * rim_78) * _HRRimPower));
    mediump float tmpvar_90;
    tmpvar_90 = clamp (tmpvar_81, 0.0, 1.0);
    highp vec3 tmpvar_91;
    tmpvar_91 = mix (outColor_4.xyz, tmpvar_83, vec3((tmpvar_90 * _RGRatio)));
    rgColor_80 = tmpvar_91;
    highp vec3 tmpvar_92;
    tmpvar_92 = mix (rgColor_80, tmpvar_89, vec3(float(_HRRimIntensity)));
    rgColor_80 = tmpvar_92;
    outColor_4.xyz = rgColor_80;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_93;
      N_93 = tmpvar_66;
      highp vec3 V_94;
      V_94 = V_2;
      mediump float rimLightDir_95;
      mediump vec3 lightDir_96;
      mediump float rim_97;
      mediump vec4 HRRimColor_98;
      mediump vec3 rgColor_99;
      mediump float tmpvar_100;
      highp float tmpvar_101;
      tmpvar_101 = pow (clamp ((1.001 - 
        dot (V_94, N_93)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_100 = (_RGBias + (tmpvar_101 * _RGScale));
      mediump vec3 tmpvar_102;
      tmpvar_102 = (tmpvar_100 * _RGColor).xyz;
      rgColor_99 = tmpvar_102;
      HRRimColor_98 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_98 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_98 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_98 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_98 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_103;
      tmpvar_103 = (1.0 - max (0.0, dot (V_94, N_93)));
      rim_97 = tmpvar_103;
      highp vec3 tmpvar_104;
      tmpvar_104 = _WorldSpaceLightPos0.xyz;
      lightDir_96 = tmpvar_104;
      mediump vec3 tmpvar_105;
      tmpvar_105 = normalize(lightDir_96);
      highp float tmpvar_106;
      tmpvar_106 = dot (N_93, tmpvar_105);
      rimLightDir_95 = tmpvar_106;
      rim_97 = (rim_97 * (0.5 + rimLightDir_95));
      highp int tmpvar_107;
      if ((rim_97 > HRRimColor_98.w)) {
        tmpvar_107 = 1;
      } else {
        tmpvar_107 = 0;
      };
      rim_97 = float(tmpvar_107);
      mediump vec3 tmpvar_108;
      tmpvar_108 = (outColor_4.xyz + max ((
        (HRRimColor_98.xyz * rim_97)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_99 = (outColor_4.xyz + max (tmpvar_102, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_109;
      tmpvar_109 = mix (rgColor_99, tmpvar_108, vec3(float(_HRRimIntensity)));
      rgColor_99 = tmpvar_109;
      outColor_4.xyz = rgColor_99;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_110;
    scrpos_110 = xlv_TEXCOORD3;
    mediump float a_111;
    a_111 = xlv_TEXCOORD3.z;
    if ((a_111 < 0.95)) {
      scrpos_110.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_111 = (a_111 * 17.0);
      highp float tmpvar_112;
      tmpvar_112 = (scrpos_110.y / 4.0);
      highp float tmpvar_113;
      tmpvar_113 = (fract(abs(tmpvar_112)) * 4.0);
      highp float tmpvar_114;
      if ((tmpvar_112 >= 0.0)) {
        tmpvar_114 = tmpvar_113;
      } else {
        tmpvar_114 = -(tmpvar_113);
      };
      highp float tmpvar_115;
      tmpvar_115 = (scrpos_110.x / 4.0);
      highp float tmpvar_116;
      tmpvar_116 = (fract(abs(tmpvar_115)) * 4.0);
      highp float tmpvar_117;
      if ((tmpvar_115 >= 0.0)) {
        tmpvar_117 = tmpvar_116;
      } else {
        tmpvar_117 = -(tmpvar_116);
      };
      highp float x_118;
      x_118 = ((a_111 - _DITHERMATRIX[
        int(tmpvar_114)
      ][
        int(tmpvar_117)
      ]) - 0.01);
      if ((x_118 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_14;
    highp vec4 tmpvar_15;
    tmpvar_15 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_16;
    tmpvar_16.x = tmpvar_15.x;
    tmpvar_16.y = (tmpvar_15.y * _ProjectionParams.x);
    o_14.xy = (tmpvar_16 + tmpvar_15.w);
    o_14.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_14.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  if ((_RGBlendType == 1)) {
    highp vec3 N_74;
    N_74 = tmpvar_66;
    highp vec3 V_75;
    V_75 = V_2;
    mediump float rimLightDir_76;
    mediump vec3 lightDir_77;
    mediump float rim_78;
    mediump vec4 HRRimColor_79;
    mediump vec3 rgColor_80;
    mediump float tmpvar_81;
    highp float tmpvar_82;
    tmpvar_82 = pow (clamp ((1.001 - 
      dot (V_75, N_74)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_81 = (_RGBias + (tmpvar_82 * _RGScale));
    mediump vec3 tmpvar_83;
    tmpvar_83 = (tmpvar_81 * _RGColor).xyz;
    rgColor_80 = tmpvar_83;
    HRRimColor_79 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_79 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_79 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_79 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_79 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_84;
    tmpvar_84 = (1.0 - max (0.0, dot (V_75, N_74)));
    rim_78 = tmpvar_84;
    highp vec3 tmpvar_85;
    tmpvar_85 = _WorldSpaceLightPos0.xyz;
    lightDir_77 = tmpvar_85;
    mediump vec3 tmpvar_86;
    tmpvar_86 = normalize(lightDir_77);
    highp float tmpvar_87;
    tmpvar_87 = dot (N_74, tmpvar_86);
    rimLightDir_76 = tmpvar_87;
    rim_78 = (rim_78 * (0.5 + rimLightDir_76));
    highp int tmpvar_88;
    if ((rim_78 > HRRimColor_79.w)) {
      tmpvar_88 = 1;
    } else {
      tmpvar_88 = 0;
    };
    rim_78 = float(tmpvar_88);
    mediump vec3 tmpvar_89;
    tmpvar_89 = (outColor_4.xyz + ((HRRimColor_79.xyz * rim_78) * _HRRimPower));
    mediump float tmpvar_90;
    tmpvar_90 = clamp (tmpvar_81, 0.0, 1.0);
    highp vec3 tmpvar_91;
    tmpvar_91 = mix (outColor_4.xyz, tmpvar_83, vec3((tmpvar_90 * _RGRatio)));
    rgColor_80 = tmpvar_91;
    highp vec3 tmpvar_92;
    tmpvar_92 = mix (rgColor_80, tmpvar_89, vec3(float(_HRRimIntensity)));
    rgColor_80 = tmpvar_92;
    outColor_4.xyz = rgColor_80;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_93;
      N_93 = tmpvar_66;
      highp vec3 V_94;
      V_94 = V_2;
      mediump float rimLightDir_95;
      mediump vec3 lightDir_96;
      mediump float rim_97;
      mediump vec4 HRRimColor_98;
      mediump vec3 rgColor_99;
      mediump float tmpvar_100;
      highp float tmpvar_101;
      tmpvar_101 = pow (clamp ((1.001 - 
        dot (V_94, N_93)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_100 = (_RGBias + (tmpvar_101 * _RGScale));
      mediump vec3 tmpvar_102;
      tmpvar_102 = (tmpvar_100 * _RGColor).xyz;
      rgColor_99 = tmpvar_102;
      HRRimColor_98 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_98 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_98 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_98 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_98 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_103;
      tmpvar_103 = (1.0 - max (0.0, dot (V_94, N_93)));
      rim_97 = tmpvar_103;
      highp vec3 tmpvar_104;
      tmpvar_104 = _WorldSpaceLightPos0.xyz;
      lightDir_96 = tmpvar_104;
      mediump vec3 tmpvar_105;
      tmpvar_105 = normalize(lightDir_96);
      highp float tmpvar_106;
      tmpvar_106 = dot (N_93, tmpvar_105);
      rimLightDir_95 = tmpvar_106;
      rim_97 = (rim_97 * (0.5 + rimLightDir_95));
      highp int tmpvar_107;
      if ((rim_97 > HRRimColor_98.w)) {
        tmpvar_107 = 1;
      } else {
        tmpvar_107 = 0;
      };
      rim_97 = float(tmpvar_107);
      mediump vec3 tmpvar_108;
      tmpvar_108 = (outColor_4.xyz + max ((
        (HRRimColor_98.xyz * rim_97)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_99 = (outColor_4.xyz + max (tmpvar_102, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_109;
      tmpvar_109 = mix (rgColor_99, tmpvar_108, vec3(float(_HRRimIntensity)));
      rgColor_99 = tmpvar_109;
      outColor_4.xyz = rgColor_99;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_110;
    scrpos_110 = xlv_TEXCOORD3;
    mediump float a_111;
    a_111 = xlv_TEXCOORD3.z;
    if ((a_111 < 0.95)) {
      scrpos_110.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_111 = (a_111 * 17.0);
      highp float tmpvar_112;
      tmpvar_112 = (scrpos_110.y / 4.0);
      highp float tmpvar_113;
      tmpvar_113 = (fract(abs(tmpvar_112)) * 4.0);
      highp float tmpvar_114;
      if ((tmpvar_112 >= 0.0)) {
        tmpvar_114 = tmpvar_113;
      } else {
        tmpvar_114 = -(tmpvar_113);
      };
      highp float tmpvar_115;
      tmpvar_115 = (scrpos_110.x / 4.0);
      highp float tmpvar_116;
      tmpvar_116 = (fract(abs(tmpvar_115)) * 4.0);
      highp float tmpvar_117;
      if ((tmpvar_115 >= 0.0)) {
        tmpvar_117 = tmpvar_116;
      } else {
        tmpvar_117 = -(tmpvar_116);
      };
      highp float x_118;
      x_118 = ((a_111 - _DITHERMATRIX[
        int(tmpvar_114)
      ][
        int(tmpvar_117)
      ]) - 0.01);
      if ((x_118 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_36;
    scrpos_36 = xlv_TEXCOORD3;
    mediump float a_37;
    a_37 = xlv_TEXCOORD3.z;
    if ((a_37 < 0.95)) {
      scrpos_36.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_37 = (a_37 * 17.0);
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_36.y / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float tmpvar_41;
      tmpvar_41 = (scrpos_36.x / 4.0);
      highp float tmpvar_42;
      tmpvar_42 = (fract(abs(tmpvar_41)) * 4.0);
      highp float tmpvar_43;
      if ((tmpvar_41 >= 0.0)) {
        tmpvar_43 = tmpvar_42;
      } else {
        tmpvar_43 = -(tmpvar_42);
      };
      highp float x_44;
      x_44 = ((a_37 - _DITHERMATRIX[
        int(tmpvar_40)
      ][
        int(tmpvar_43)
      ]) - 0.01);
      if ((x_44 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_36;
    scrpos_36 = xlv_TEXCOORD3;
    mediump float a_37;
    a_37 = xlv_TEXCOORD3.z;
    if ((a_37 < 0.95)) {
      scrpos_36.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_37 = (a_37 * 17.0);
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_36.y / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float tmpvar_41;
      tmpvar_41 = (scrpos_36.x / 4.0);
      highp float tmpvar_42;
      tmpvar_42 = (fract(abs(tmpvar_41)) * 4.0);
      highp float tmpvar_43;
      if ((tmpvar_41 >= 0.0)) {
        tmpvar_43 = tmpvar_42;
      } else {
        tmpvar_43 = -(tmpvar_42);
      };
      highp float x_44;
      x_44 = ((a_37 - _DITHERMATRIX[
        int(tmpvar_40)
      ][
        int(tmpvar_43)
      ]) - 0.01);
      if ((x_44 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_36;
    scrpos_36 = xlv_TEXCOORD3;
    mediump float a_37;
    a_37 = xlv_TEXCOORD3.z;
    if ((a_37 < 0.95)) {
      scrpos_36.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_37 = (a_37 * 17.0);
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_36.y / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float tmpvar_41;
      tmpvar_41 = (scrpos_36.x / 4.0);
      highp float tmpvar_42;
      tmpvar_42 = (fract(abs(tmpvar_41)) * 4.0);
      highp float tmpvar_43;
      if ((tmpvar_41 >= 0.0)) {
        tmpvar_43 = tmpvar_42;
      } else {
        tmpvar_43 = -(tmpvar_42);
      };
      highp float x_44;
      x_44 = ((a_37 - _DITHERMATRIX[
        int(tmpvar_40)
      ][
        int(tmpvar_43)
      ]) - 0.01);
      if ((x_44 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_36;
    scrpos_36 = xlv_TEXCOORD3;
    mediump float a_37;
    a_37 = xlv_TEXCOORD3.z;
    if ((a_37 < 0.95)) {
      scrpos_36.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_37 = (a_37 * 17.0);
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_36.y / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float tmpvar_41;
      tmpvar_41 = (scrpos_36.x / 4.0);
      highp float tmpvar_42;
      tmpvar_42 = (fract(abs(tmpvar_41)) * 4.0);
      highp float tmpvar_43;
      if ((tmpvar_41 >= 0.0)) {
        tmpvar_43 = tmpvar_42;
      } else {
        tmpvar_43 = -(tmpvar_42);
      };
      highp float x_44;
      x_44 = ((a_37 - _DITHERMATRIX[
        int(tmpvar_40)
      ][
        int(tmpvar_43)
      ]) - 0.01);
      if ((x_44 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_36;
    scrpos_36 = xlv_TEXCOORD3;
    mediump float a_37;
    a_37 = xlv_TEXCOORD3.z;
    if ((a_37 < 0.95)) {
      scrpos_36.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_37 = (a_37 * 17.0);
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_36.y / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float tmpvar_41;
      tmpvar_41 = (scrpos_36.x / 4.0);
      highp float tmpvar_42;
      tmpvar_42 = (fract(abs(tmpvar_41)) * 4.0);
      highp float tmpvar_43;
      if ((tmpvar_41 >= 0.0)) {
        tmpvar_43 = tmpvar_42;
      } else {
        tmpvar_43 = -(tmpvar_42);
      };
      highp float x_44;
      x_44 = ((a_37 - _DITHERMATRIX[
        int(tmpvar_40)
      ][
        int(tmpvar_43)
      ]) - 0.01);
      if ((x_44 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_36;
    scrpos_36 = xlv_TEXCOORD3;
    mediump float a_37;
    a_37 = xlv_TEXCOORD3.z;
    if ((a_37 < 0.95)) {
      scrpos_36.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_37 = (a_37 * 17.0);
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_36.y / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float tmpvar_41;
      tmpvar_41 = (scrpos_36.x / 4.0);
      highp float tmpvar_42;
      tmpvar_42 = (fract(abs(tmpvar_41)) * 4.0);
      highp float tmpvar_43;
      if ((tmpvar_41 >= 0.0)) {
        tmpvar_43 = tmpvar_42;
      } else {
        tmpvar_43 = -(tmpvar_42);
      };
      highp float x_44;
      x_44 = ((a_37 - _DITHERMATRIX[
        int(tmpvar_40)
      ][
        int(tmpvar_43)
      ]) - 0.01);
      if ((x_44 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_35 = tmpvar_36;
  spColor_35.w = (spColor_35.w * _SPOpaqueness);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * tmpvar_37.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (tmpvar_23, I_40)
   * tmpvar_23)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_44;
      tmpvar_44 = mix (spColor_35.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35.xyz = tmpvar_44;
    };
  };
  spColor_35.xyz = (spColor_35.xyz * _Color.xyz);
  highp vec4 tmpvar_45;
  tmpvar_45 = mix (outColor_4, spColor_35, vec4(xlat_mutable_SPIntensity));
  spColor_35 = tmpvar_45;
  outColor_4 = spColor_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_46;
    scrpos_46 = xlv_TEXCOORD3;
    mediump float a_47;
    a_47 = xlv_TEXCOORD3.z;
    if ((a_47 < 0.95)) {
      scrpos_46.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_47 = (a_47 * 17.0);
      highp float tmpvar_48;
      tmpvar_48 = (scrpos_46.y / 4.0);
      highp float tmpvar_49;
      tmpvar_49 = (fract(abs(tmpvar_48)) * 4.0);
      highp float tmpvar_50;
      if ((tmpvar_48 >= 0.0)) {
        tmpvar_50 = tmpvar_49;
      } else {
        tmpvar_50 = -(tmpvar_49);
      };
      highp float tmpvar_51;
      tmpvar_51 = (scrpos_46.x / 4.0);
      highp float tmpvar_52;
      tmpvar_52 = (fract(abs(tmpvar_51)) * 4.0);
      highp float tmpvar_53;
      if ((tmpvar_51 >= 0.0)) {
        tmpvar_53 = tmpvar_52;
      } else {
        tmpvar_53 = -(tmpvar_52);
      };
      highp float x_54;
      x_54 = ((a_47 - _DITHERMATRIX[
        int(tmpvar_50)
      ][
        int(tmpvar_53)
      ]) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_35.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_35 = tmpvar_36;
  spColor_35.w = (spColor_35.w * _SPOpaqueness);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * tmpvar_37.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (tmpvar_23, I_40)
   * tmpvar_23)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_44;
      tmpvar_44 = mix (spColor_35.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35.xyz = tmpvar_44;
    };
  };
  spColor_35.xyz = (spColor_35.xyz * _Color.xyz);
  highp vec4 tmpvar_45;
  tmpvar_45 = mix (outColor_4, spColor_35, vec4(xlat_mutable_SPIntensity));
  spColor_35 = tmpvar_45;
  outColor_4 = spColor_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_46;
    scrpos_46 = xlv_TEXCOORD3;
    mediump float a_47;
    a_47 = xlv_TEXCOORD3.z;
    if ((a_47 < 0.95)) {
      scrpos_46.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_47 = (a_47 * 17.0);
      highp float tmpvar_48;
      tmpvar_48 = (scrpos_46.y / 4.0);
      highp float tmpvar_49;
      tmpvar_49 = (fract(abs(tmpvar_48)) * 4.0);
      highp float tmpvar_50;
      if ((tmpvar_48 >= 0.0)) {
        tmpvar_50 = tmpvar_49;
      } else {
        tmpvar_50 = -(tmpvar_49);
      };
      highp float tmpvar_51;
      tmpvar_51 = (scrpos_46.x / 4.0);
      highp float tmpvar_52;
      tmpvar_52 = (fract(abs(tmpvar_51)) * 4.0);
      highp float tmpvar_53;
      if ((tmpvar_51 >= 0.0)) {
        tmpvar_53 = tmpvar_52;
      } else {
        tmpvar_53 = -(tmpvar_52);
      };
      highp float x_54;
      x_54 = ((a_47 - _DITHERMATRIX[
        int(tmpvar_50)
      ][
        int(tmpvar_53)
      ]) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_35.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_35 = tmpvar_36;
  spColor_35.w = (spColor_35.w * _SPOpaqueness);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * tmpvar_37.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (tmpvar_23, I_40)
   * tmpvar_23)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_44;
      tmpvar_44 = mix (spColor_35.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35.xyz = tmpvar_44;
    };
  };
  spColor_35.xyz = (spColor_35.xyz * _Color.xyz);
  highp vec4 tmpvar_45;
  tmpvar_45 = mix (outColor_4, spColor_35, vec4(xlat_mutable_SPIntensity));
  spColor_35 = tmpvar_45;
  outColor_4 = spColor_35;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_46;
    scrpos_46 = xlv_TEXCOORD3;
    mediump float a_47;
    a_47 = xlv_TEXCOORD3.z;
    if ((a_47 < 0.95)) {
      scrpos_46.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_47 = (a_47 * 17.0);
      highp float tmpvar_48;
      tmpvar_48 = (scrpos_46.y / 4.0);
      highp float tmpvar_49;
      tmpvar_49 = (fract(abs(tmpvar_48)) * 4.0);
      highp float tmpvar_50;
      if ((tmpvar_48 >= 0.0)) {
        tmpvar_50 = tmpvar_49;
      } else {
        tmpvar_50 = -(tmpvar_49);
      };
      highp float tmpvar_51;
      tmpvar_51 = (scrpos_46.x / 4.0);
      highp float tmpvar_52;
      tmpvar_52 = (fract(abs(tmpvar_51)) * 4.0);
      highp float tmpvar_53;
      if ((tmpvar_51 >= 0.0)) {
        tmpvar_53 = tmpvar_52;
      } else {
        tmpvar_53 = -(tmpvar_52);
      };
      highp float x_54;
      x_54 = ((a_47 - _DITHERMATRIX[
        int(tmpvar_50)
      ][
        int(tmpvar_53)
      ]) - 0.01);
      if ((x_54 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_35.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_78 = tmpvar_79;
  spColor_78.w = (spColor_78.w * _SPOpaqueness);
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * tmpvar_80.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (tmpvar_66, I_83)
   * tmpvar_66)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_87;
      tmpvar_87 = mix (spColor_78.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78.xyz = tmpvar_87;
    };
  };
  spColor_78.xyz = (spColor_78.xyz * _Color.xyz);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (outColor_4, spColor_78, vec4(xlat_mutable_SPIntensity));
  spColor_78 = tmpvar_88;
  outColor_4 = spColor_78;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_89;
    scrpos_89 = xlv_TEXCOORD3;
    mediump float a_90;
    a_90 = xlv_TEXCOORD3.z;
    if ((a_90 < 0.95)) {
      scrpos_89.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_90 = (a_90 * 17.0);
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_89.y / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float tmpvar_94;
      tmpvar_94 = (scrpos_89.x / 4.0);
      highp float tmpvar_95;
      tmpvar_95 = (fract(abs(tmpvar_94)) * 4.0);
      highp float tmpvar_96;
      if ((tmpvar_94 >= 0.0)) {
        tmpvar_96 = tmpvar_95;
      } else {
        tmpvar_96 = -(tmpvar_95);
      };
      highp float x_97;
      x_97 = ((a_90 - _DITHERMATRIX[
        int(tmpvar_93)
      ][
        int(tmpvar_96)
      ]) - 0.01);
      if ((x_97 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_78.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_78 = tmpvar_79;
  spColor_78.w = (spColor_78.w * _SPOpaqueness);
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * tmpvar_80.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (tmpvar_66, I_83)
   * tmpvar_66)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_87;
      tmpvar_87 = mix (spColor_78.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78.xyz = tmpvar_87;
    };
  };
  spColor_78.xyz = (spColor_78.xyz * _Color.xyz);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (outColor_4, spColor_78, vec4(xlat_mutable_SPIntensity));
  spColor_78 = tmpvar_88;
  outColor_4 = spColor_78;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_89;
    scrpos_89 = xlv_TEXCOORD3;
    mediump float a_90;
    a_90 = xlv_TEXCOORD3.z;
    if ((a_90 < 0.95)) {
      scrpos_89.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_90 = (a_90 * 17.0);
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_89.y / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float tmpvar_94;
      tmpvar_94 = (scrpos_89.x / 4.0);
      highp float tmpvar_95;
      tmpvar_95 = (fract(abs(tmpvar_94)) * 4.0);
      highp float tmpvar_96;
      if ((tmpvar_94 >= 0.0)) {
        tmpvar_96 = tmpvar_95;
      } else {
        tmpvar_96 = -(tmpvar_95);
      };
      highp float x_97;
      x_97 = ((a_90 - _DITHERMATRIX[
        int(tmpvar_93)
      ][
        int(tmpvar_96)
      ]) - 0.01);
      if ((x_97 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_78.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_78 = tmpvar_79;
  spColor_78.w = (spColor_78.w * _SPOpaqueness);
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * tmpvar_80.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (tmpvar_66, I_83)
   * tmpvar_66)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_87;
      tmpvar_87 = mix (spColor_78.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78.xyz = tmpvar_87;
    };
  };
  spColor_78.xyz = (spColor_78.xyz * _Color.xyz);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (outColor_4, spColor_78, vec4(xlat_mutable_SPIntensity));
  spColor_78 = tmpvar_88;
  outColor_4 = spColor_78;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_89;
    scrpos_89 = xlv_TEXCOORD3;
    mediump float a_90;
    a_90 = xlv_TEXCOORD3.z;
    if ((a_90 < 0.95)) {
      scrpos_89.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_90 = (a_90 * 17.0);
      highp float tmpvar_91;
      tmpvar_91 = (scrpos_89.y / 4.0);
      highp float tmpvar_92;
      tmpvar_92 = (fract(abs(tmpvar_91)) * 4.0);
      highp float tmpvar_93;
      if ((tmpvar_91 >= 0.0)) {
        tmpvar_93 = tmpvar_92;
      } else {
        tmpvar_93 = -(tmpvar_92);
      };
      highp float tmpvar_94;
      tmpvar_94 = (scrpos_89.x / 4.0);
      highp float tmpvar_95;
      tmpvar_95 = (fract(abs(tmpvar_94)) * 4.0);
      highp float tmpvar_96;
      if ((tmpvar_94 >= 0.0)) {
        tmpvar_96 = tmpvar_95;
      } else {
        tmpvar_96 = -(tmpvar_95);
      };
      highp float x_97;
      x_97 = ((a_90 - _DITHERMATRIX[
        int(tmpvar_93)
      ][
        int(tmpvar_96)
      ]) - 0.01);
      if ((x_97 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_78.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if ((_RGBlendType == 1)) {
    highp vec3 N_36;
    N_36 = tmpvar_13;
    highp vec3 V_37;
    V_37 = V_2;
    mediump float rimLightDir_38;
    mediump vec3 lightDir_39;
    mediump float rim_40;
    mediump vec4 HRRimColor_41;
    mediump vec3 rgColor_42;
    mediump float tmpvar_43;
    highp float tmpvar_44;
    tmpvar_44 = pow (clamp ((1.001 - 
      dot (V_37, N_36)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_43 = (_RGBias + (tmpvar_44 * _RGScale));
    mediump vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_43 * _RGColor).xyz;
    rgColor_42 = tmpvar_45;
    HRRimColor_41 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_41 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_41 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_41 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_41 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_46;
    tmpvar_46 = (1.0 - max (0.0, dot (V_37, N_36)));
    rim_40 = tmpvar_46;
    highp vec3 tmpvar_47;
    tmpvar_47 = _WorldSpaceLightPos0.xyz;
    lightDir_39 = tmpvar_47;
    mediump vec3 tmpvar_48;
    tmpvar_48 = normalize(lightDir_39);
    highp float tmpvar_49;
    tmpvar_49 = dot (N_36, tmpvar_48);
    rimLightDir_38 = tmpvar_49;
    rim_40 = (rim_40 * (0.5 + rimLightDir_38));
    highp int tmpvar_50;
    if ((rim_40 > HRRimColor_41.w)) {
      tmpvar_50 = 1;
    } else {
      tmpvar_50 = 0;
    };
    rim_40 = float(tmpvar_50);
    mediump vec3 tmpvar_51;
    tmpvar_51 = (spColor_25.xyz + ((HRRimColor_41.xyz * rim_40) * _HRRimPower));
    mediump float tmpvar_52;
    tmpvar_52 = clamp (tmpvar_43, 0.0, 1.0);
    highp vec3 tmpvar_53;
    tmpvar_53 = mix (spColor_25.xyz, tmpvar_45, vec3((tmpvar_52 * _RGRatio)));
    rgColor_42 = tmpvar_53;
    highp vec3 tmpvar_54;
    tmpvar_54 = mix (rgColor_42, tmpvar_51, vec3(float(_HRRimIntensity)));
    rgColor_42 = tmpvar_54;
    outColor_5.xyz = rgColor_42;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_55;
      N_55 = tmpvar_13;
      highp vec3 V_56;
      V_56 = V_2;
      mediump float rimLightDir_57;
      mediump vec3 lightDir_58;
      mediump float rim_59;
      mediump vec4 HRRimColor_60;
      mediump vec3 rgColor_61;
      mediump float tmpvar_62;
      highp float tmpvar_63;
      tmpvar_63 = pow (clamp ((1.001 - 
        dot (V_56, N_55)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_62 = (_RGBias + (tmpvar_63 * _RGScale));
      mediump vec3 tmpvar_64;
      tmpvar_64 = (tmpvar_62 * _RGColor).xyz;
      rgColor_61 = tmpvar_64;
      HRRimColor_60 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_60 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_60 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_60 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_60 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - max (0.0, dot (V_56, N_55)));
      rim_59 = tmpvar_65;
      highp vec3 tmpvar_66;
      tmpvar_66 = _WorldSpaceLightPos0.xyz;
      lightDir_58 = tmpvar_66;
      mediump vec3 tmpvar_67;
      tmpvar_67 = normalize(lightDir_58);
      highp float tmpvar_68;
      tmpvar_68 = dot (N_55, tmpvar_67);
      rimLightDir_57 = tmpvar_68;
      rim_59 = (rim_59 * (0.5 + rimLightDir_57));
      highp int tmpvar_69;
      if ((rim_59 > HRRimColor_60.w)) {
        tmpvar_69 = 1;
      } else {
        tmpvar_69 = 0;
      };
      rim_59 = float(tmpvar_69);
      mediump vec3 tmpvar_70;
      tmpvar_70 = (outColor_5.xyz + max ((
        (HRRimColor_60.xyz * rim_59)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_61 = (outColor_5.xyz + max (tmpvar_64, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_71;
      tmpvar_71 = mix (rgColor_61, tmpvar_70, vec3(float(_HRRimIntensity)));
      rgColor_61 = tmpvar_71;
      outColor_5.xyz = rgColor_61;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_72;
    scrpos_72 = xlv_TEXCOORD3;
    mediump float a_73;
    a_73 = xlv_TEXCOORD3.z;
    if ((a_73 < 0.95)) {
      scrpos_72.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_73 = (a_73 * 17.0);
      highp float tmpvar_74;
      tmpvar_74 = (scrpos_72.y / 4.0);
      highp float tmpvar_75;
      tmpvar_75 = (fract(abs(tmpvar_74)) * 4.0);
      highp float tmpvar_76;
      if ((tmpvar_74 >= 0.0)) {
        tmpvar_76 = tmpvar_75;
      } else {
        tmpvar_76 = -(tmpvar_75);
      };
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_72.x / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float x_80;
      x_80 = ((a_73 - _DITHERMATRIX[
        int(tmpvar_76)
      ][
        int(tmpvar_79)
      ]) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if ((_RGBlendType == 1)) {
    highp vec3 N_36;
    N_36 = tmpvar_13;
    highp vec3 V_37;
    V_37 = V_2;
    mediump float rimLightDir_38;
    mediump vec3 lightDir_39;
    mediump float rim_40;
    mediump vec4 HRRimColor_41;
    mediump vec3 rgColor_42;
    mediump float tmpvar_43;
    highp float tmpvar_44;
    tmpvar_44 = pow (clamp ((1.001 - 
      dot (V_37, N_36)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_43 = (_RGBias + (tmpvar_44 * _RGScale));
    mediump vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_43 * _RGColor).xyz;
    rgColor_42 = tmpvar_45;
    HRRimColor_41 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_41 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_41 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_41 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_41 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_46;
    tmpvar_46 = (1.0 - max (0.0, dot (V_37, N_36)));
    rim_40 = tmpvar_46;
    highp vec3 tmpvar_47;
    tmpvar_47 = _WorldSpaceLightPos0.xyz;
    lightDir_39 = tmpvar_47;
    mediump vec3 tmpvar_48;
    tmpvar_48 = normalize(lightDir_39);
    highp float tmpvar_49;
    tmpvar_49 = dot (N_36, tmpvar_48);
    rimLightDir_38 = tmpvar_49;
    rim_40 = (rim_40 * (0.5 + rimLightDir_38));
    highp int tmpvar_50;
    if ((rim_40 > HRRimColor_41.w)) {
      tmpvar_50 = 1;
    } else {
      tmpvar_50 = 0;
    };
    rim_40 = float(tmpvar_50);
    mediump vec3 tmpvar_51;
    tmpvar_51 = (spColor_25.xyz + ((HRRimColor_41.xyz * rim_40) * _HRRimPower));
    mediump float tmpvar_52;
    tmpvar_52 = clamp (tmpvar_43, 0.0, 1.0);
    highp vec3 tmpvar_53;
    tmpvar_53 = mix (spColor_25.xyz, tmpvar_45, vec3((tmpvar_52 * _RGRatio)));
    rgColor_42 = tmpvar_53;
    highp vec3 tmpvar_54;
    tmpvar_54 = mix (rgColor_42, tmpvar_51, vec3(float(_HRRimIntensity)));
    rgColor_42 = tmpvar_54;
    outColor_5.xyz = rgColor_42;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_55;
      N_55 = tmpvar_13;
      highp vec3 V_56;
      V_56 = V_2;
      mediump float rimLightDir_57;
      mediump vec3 lightDir_58;
      mediump float rim_59;
      mediump vec4 HRRimColor_60;
      mediump vec3 rgColor_61;
      mediump float tmpvar_62;
      highp float tmpvar_63;
      tmpvar_63 = pow (clamp ((1.001 - 
        dot (V_56, N_55)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_62 = (_RGBias + (tmpvar_63 * _RGScale));
      mediump vec3 tmpvar_64;
      tmpvar_64 = (tmpvar_62 * _RGColor).xyz;
      rgColor_61 = tmpvar_64;
      HRRimColor_60 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_60 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_60 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_60 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_60 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - max (0.0, dot (V_56, N_55)));
      rim_59 = tmpvar_65;
      highp vec3 tmpvar_66;
      tmpvar_66 = _WorldSpaceLightPos0.xyz;
      lightDir_58 = tmpvar_66;
      mediump vec3 tmpvar_67;
      tmpvar_67 = normalize(lightDir_58);
      highp float tmpvar_68;
      tmpvar_68 = dot (N_55, tmpvar_67);
      rimLightDir_57 = tmpvar_68;
      rim_59 = (rim_59 * (0.5 + rimLightDir_57));
      highp int tmpvar_69;
      if ((rim_59 > HRRimColor_60.w)) {
        tmpvar_69 = 1;
      } else {
        tmpvar_69 = 0;
      };
      rim_59 = float(tmpvar_69);
      mediump vec3 tmpvar_70;
      tmpvar_70 = (outColor_5.xyz + max ((
        (HRRimColor_60.xyz * rim_59)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_61 = (outColor_5.xyz + max (tmpvar_64, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_71;
      tmpvar_71 = mix (rgColor_61, tmpvar_70, vec3(float(_HRRimIntensity)));
      rgColor_61 = tmpvar_71;
      outColor_5.xyz = rgColor_61;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_72;
    scrpos_72 = xlv_TEXCOORD3;
    mediump float a_73;
    a_73 = xlv_TEXCOORD3.z;
    if ((a_73 < 0.95)) {
      scrpos_72.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_73 = (a_73 * 17.0);
      highp float tmpvar_74;
      tmpvar_74 = (scrpos_72.y / 4.0);
      highp float tmpvar_75;
      tmpvar_75 = (fract(abs(tmpvar_74)) * 4.0);
      highp float tmpvar_76;
      if ((tmpvar_74 >= 0.0)) {
        tmpvar_76 = tmpvar_75;
      } else {
        tmpvar_76 = -(tmpvar_75);
      };
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_72.x / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float x_80;
      x_80 = ((a_73 - _DITHERMATRIX[
        int(tmpvar_76)
      ][
        int(tmpvar_79)
      ]) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if ((_RGBlendType == 1)) {
    highp vec3 N_36;
    N_36 = tmpvar_13;
    highp vec3 V_37;
    V_37 = V_2;
    mediump float rimLightDir_38;
    mediump vec3 lightDir_39;
    mediump float rim_40;
    mediump vec4 HRRimColor_41;
    mediump vec3 rgColor_42;
    mediump float tmpvar_43;
    highp float tmpvar_44;
    tmpvar_44 = pow (clamp ((1.001 - 
      dot (V_37, N_36)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_43 = (_RGBias + (tmpvar_44 * _RGScale));
    mediump vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_43 * _RGColor).xyz;
    rgColor_42 = tmpvar_45;
    HRRimColor_41 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_41 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_41 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_41 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_41 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_46;
    tmpvar_46 = (1.0 - max (0.0, dot (V_37, N_36)));
    rim_40 = tmpvar_46;
    highp vec3 tmpvar_47;
    tmpvar_47 = _WorldSpaceLightPos0.xyz;
    lightDir_39 = tmpvar_47;
    mediump vec3 tmpvar_48;
    tmpvar_48 = normalize(lightDir_39);
    highp float tmpvar_49;
    tmpvar_49 = dot (N_36, tmpvar_48);
    rimLightDir_38 = tmpvar_49;
    rim_40 = (rim_40 * (0.5 + rimLightDir_38));
    highp int tmpvar_50;
    if ((rim_40 > HRRimColor_41.w)) {
      tmpvar_50 = 1;
    } else {
      tmpvar_50 = 0;
    };
    rim_40 = float(tmpvar_50);
    mediump vec3 tmpvar_51;
    tmpvar_51 = (spColor_25.xyz + ((HRRimColor_41.xyz * rim_40) * _HRRimPower));
    mediump float tmpvar_52;
    tmpvar_52 = clamp (tmpvar_43, 0.0, 1.0);
    highp vec3 tmpvar_53;
    tmpvar_53 = mix (spColor_25.xyz, tmpvar_45, vec3((tmpvar_52 * _RGRatio)));
    rgColor_42 = tmpvar_53;
    highp vec3 tmpvar_54;
    tmpvar_54 = mix (rgColor_42, tmpvar_51, vec3(float(_HRRimIntensity)));
    rgColor_42 = tmpvar_54;
    outColor_5.xyz = rgColor_42;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_55;
      N_55 = tmpvar_13;
      highp vec3 V_56;
      V_56 = V_2;
      mediump float rimLightDir_57;
      mediump vec3 lightDir_58;
      mediump float rim_59;
      mediump vec4 HRRimColor_60;
      mediump vec3 rgColor_61;
      mediump float tmpvar_62;
      highp float tmpvar_63;
      tmpvar_63 = pow (clamp ((1.001 - 
        dot (V_56, N_55)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_62 = (_RGBias + (tmpvar_63 * _RGScale));
      mediump vec3 tmpvar_64;
      tmpvar_64 = (tmpvar_62 * _RGColor).xyz;
      rgColor_61 = tmpvar_64;
      HRRimColor_60 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_60 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_60 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_60 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_60 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - max (0.0, dot (V_56, N_55)));
      rim_59 = tmpvar_65;
      highp vec3 tmpvar_66;
      tmpvar_66 = _WorldSpaceLightPos0.xyz;
      lightDir_58 = tmpvar_66;
      mediump vec3 tmpvar_67;
      tmpvar_67 = normalize(lightDir_58);
      highp float tmpvar_68;
      tmpvar_68 = dot (N_55, tmpvar_67);
      rimLightDir_57 = tmpvar_68;
      rim_59 = (rim_59 * (0.5 + rimLightDir_57));
      highp int tmpvar_69;
      if ((rim_59 > HRRimColor_60.w)) {
        tmpvar_69 = 1;
      } else {
        tmpvar_69 = 0;
      };
      rim_59 = float(tmpvar_69);
      mediump vec3 tmpvar_70;
      tmpvar_70 = (outColor_5.xyz + max ((
        (HRRimColor_60.xyz * rim_59)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_61 = (outColor_5.xyz + max (tmpvar_64, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_71;
      tmpvar_71 = mix (rgColor_61, tmpvar_70, vec3(float(_HRRimIntensity)));
      rgColor_61 = tmpvar_71;
      outColor_5.xyz = rgColor_61;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_72;
    scrpos_72 = xlv_TEXCOORD3;
    mediump float a_73;
    a_73 = xlv_TEXCOORD3.z;
    if ((a_73 < 0.95)) {
      scrpos_72.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_73 = (a_73 * 17.0);
      highp float tmpvar_74;
      tmpvar_74 = (scrpos_72.y / 4.0);
      highp float tmpvar_75;
      tmpvar_75 = (fract(abs(tmpvar_74)) * 4.0);
      highp float tmpvar_76;
      if ((tmpvar_74 >= 0.0)) {
        tmpvar_76 = tmpvar_75;
      } else {
        tmpvar_76 = -(tmpvar_75);
      };
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_72.x / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float x_80;
      x_80 = ((a_73 - _DITHERMATRIX[
        int(tmpvar_76)
      ][
        int(tmpvar_79)
      ]) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if ((_RGBlendType == 1)) {
    highp vec3 N_36;
    N_36 = tmpvar_13;
    highp vec3 V_37;
    V_37 = V_2;
    mediump float rimLightDir_38;
    mediump vec3 lightDir_39;
    mediump float rim_40;
    mediump vec4 HRRimColor_41;
    mediump vec3 rgColor_42;
    mediump float tmpvar_43;
    highp float tmpvar_44;
    tmpvar_44 = pow (clamp ((1.001 - 
      dot (V_37, N_36)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_43 = (_RGBias + (tmpvar_44 * _RGScale));
    mediump vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_43 * _RGColor).xyz;
    rgColor_42 = tmpvar_45;
    HRRimColor_41 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_41 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_41 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_41 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_41 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_46;
    tmpvar_46 = (1.0 - max (0.0, dot (V_37, N_36)));
    rim_40 = tmpvar_46;
    highp vec3 tmpvar_47;
    tmpvar_47 = _WorldSpaceLightPos0.xyz;
    lightDir_39 = tmpvar_47;
    mediump vec3 tmpvar_48;
    tmpvar_48 = normalize(lightDir_39);
    highp float tmpvar_49;
    tmpvar_49 = dot (N_36, tmpvar_48);
    rimLightDir_38 = tmpvar_49;
    rim_40 = (rim_40 * (0.5 + rimLightDir_38));
    highp int tmpvar_50;
    if ((rim_40 > HRRimColor_41.w)) {
      tmpvar_50 = 1;
    } else {
      tmpvar_50 = 0;
    };
    rim_40 = float(tmpvar_50);
    mediump vec3 tmpvar_51;
    tmpvar_51 = (spColor_25.xyz + ((HRRimColor_41.xyz * rim_40) * _HRRimPower));
    mediump float tmpvar_52;
    tmpvar_52 = clamp (tmpvar_43, 0.0, 1.0);
    highp vec3 tmpvar_53;
    tmpvar_53 = mix (spColor_25.xyz, tmpvar_45, vec3((tmpvar_52 * _RGRatio)));
    rgColor_42 = tmpvar_53;
    highp vec3 tmpvar_54;
    tmpvar_54 = mix (rgColor_42, tmpvar_51, vec3(float(_HRRimIntensity)));
    rgColor_42 = tmpvar_54;
    outColor_5.xyz = rgColor_42;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_55;
      N_55 = tmpvar_13;
      highp vec3 V_56;
      V_56 = V_2;
      mediump float rimLightDir_57;
      mediump vec3 lightDir_58;
      mediump float rim_59;
      mediump vec4 HRRimColor_60;
      mediump vec3 rgColor_61;
      mediump float tmpvar_62;
      highp float tmpvar_63;
      tmpvar_63 = pow (clamp ((1.001 - 
        dot (V_56, N_55)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_62 = (_RGBias + (tmpvar_63 * _RGScale));
      mediump vec3 tmpvar_64;
      tmpvar_64 = (tmpvar_62 * _RGColor).xyz;
      rgColor_61 = tmpvar_64;
      HRRimColor_60 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_60 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_60 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_60 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_60 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - max (0.0, dot (V_56, N_55)));
      rim_59 = tmpvar_65;
      highp vec3 tmpvar_66;
      tmpvar_66 = _WorldSpaceLightPos0.xyz;
      lightDir_58 = tmpvar_66;
      mediump vec3 tmpvar_67;
      tmpvar_67 = normalize(lightDir_58);
      highp float tmpvar_68;
      tmpvar_68 = dot (N_55, tmpvar_67);
      rimLightDir_57 = tmpvar_68;
      rim_59 = (rim_59 * (0.5 + rimLightDir_57));
      highp int tmpvar_69;
      if ((rim_59 > HRRimColor_60.w)) {
        tmpvar_69 = 1;
      } else {
        tmpvar_69 = 0;
      };
      rim_59 = float(tmpvar_69);
      mediump vec3 tmpvar_70;
      tmpvar_70 = (outColor_5.xyz + max ((
        (HRRimColor_60.xyz * rim_59)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_61 = (outColor_5.xyz + max (tmpvar_64, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_71;
      tmpvar_71 = mix (rgColor_61, tmpvar_70, vec3(float(_HRRimIntensity)));
      rgColor_61 = tmpvar_71;
      outColor_5.xyz = rgColor_61;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_72;
    scrpos_72 = xlv_TEXCOORD3;
    mediump float a_73;
    a_73 = xlv_TEXCOORD3.z;
    if ((a_73 < 0.95)) {
      scrpos_72.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_73 = (a_73 * 17.0);
      highp float tmpvar_74;
      tmpvar_74 = (scrpos_72.y / 4.0);
      highp float tmpvar_75;
      tmpvar_75 = (fract(abs(tmpvar_74)) * 4.0);
      highp float tmpvar_76;
      if ((tmpvar_74 >= 0.0)) {
        tmpvar_76 = tmpvar_75;
      } else {
        tmpvar_76 = -(tmpvar_75);
      };
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_72.x / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float x_80;
      x_80 = ((a_73 - _DITHERMATRIX[
        int(tmpvar_76)
      ][
        int(tmpvar_79)
      ]) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if ((_RGBlendType == 1)) {
    highp vec3 N_36;
    N_36 = tmpvar_13;
    highp vec3 V_37;
    V_37 = V_2;
    mediump float rimLightDir_38;
    mediump vec3 lightDir_39;
    mediump float rim_40;
    mediump vec4 HRRimColor_41;
    mediump vec3 rgColor_42;
    mediump float tmpvar_43;
    highp float tmpvar_44;
    tmpvar_44 = pow (clamp ((1.001 - 
      dot (V_37, N_36)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_43 = (_RGBias + (tmpvar_44 * _RGScale));
    mediump vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_43 * _RGColor).xyz;
    rgColor_42 = tmpvar_45;
    HRRimColor_41 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_41 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_41 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_41 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_41 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_46;
    tmpvar_46 = (1.0 - max (0.0, dot (V_37, N_36)));
    rim_40 = tmpvar_46;
    highp vec3 tmpvar_47;
    tmpvar_47 = _WorldSpaceLightPos0.xyz;
    lightDir_39 = tmpvar_47;
    mediump vec3 tmpvar_48;
    tmpvar_48 = normalize(lightDir_39);
    highp float tmpvar_49;
    tmpvar_49 = dot (N_36, tmpvar_48);
    rimLightDir_38 = tmpvar_49;
    rim_40 = (rim_40 * (0.5 + rimLightDir_38));
    highp int tmpvar_50;
    if ((rim_40 > HRRimColor_41.w)) {
      tmpvar_50 = 1;
    } else {
      tmpvar_50 = 0;
    };
    rim_40 = float(tmpvar_50);
    mediump vec3 tmpvar_51;
    tmpvar_51 = (spColor_25.xyz + ((HRRimColor_41.xyz * rim_40) * _HRRimPower));
    mediump float tmpvar_52;
    tmpvar_52 = clamp (tmpvar_43, 0.0, 1.0);
    highp vec3 tmpvar_53;
    tmpvar_53 = mix (spColor_25.xyz, tmpvar_45, vec3((tmpvar_52 * _RGRatio)));
    rgColor_42 = tmpvar_53;
    highp vec3 tmpvar_54;
    tmpvar_54 = mix (rgColor_42, tmpvar_51, vec3(float(_HRRimIntensity)));
    rgColor_42 = tmpvar_54;
    outColor_5.xyz = rgColor_42;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_55;
      N_55 = tmpvar_13;
      highp vec3 V_56;
      V_56 = V_2;
      mediump float rimLightDir_57;
      mediump vec3 lightDir_58;
      mediump float rim_59;
      mediump vec4 HRRimColor_60;
      mediump vec3 rgColor_61;
      mediump float tmpvar_62;
      highp float tmpvar_63;
      tmpvar_63 = pow (clamp ((1.001 - 
        dot (V_56, N_55)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_62 = (_RGBias + (tmpvar_63 * _RGScale));
      mediump vec3 tmpvar_64;
      tmpvar_64 = (tmpvar_62 * _RGColor).xyz;
      rgColor_61 = tmpvar_64;
      HRRimColor_60 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_60 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_60 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_60 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_60 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - max (0.0, dot (V_56, N_55)));
      rim_59 = tmpvar_65;
      highp vec3 tmpvar_66;
      tmpvar_66 = _WorldSpaceLightPos0.xyz;
      lightDir_58 = tmpvar_66;
      mediump vec3 tmpvar_67;
      tmpvar_67 = normalize(lightDir_58);
      highp float tmpvar_68;
      tmpvar_68 = dot (N_55, tmpvar_67);
      rimLightDir_57 = tmpvar_68;
      rim_59 = (rim_59 * (0.5 + rimLightDir_57));
      highp int tmpvar_69;
      if ((rim_59 > HRRimColor_60.w)) {
        tmpvar_69 = 1;
      } else {
        tmpvar_69 = 0;
      };
      rim_59 = float(tmpvar_69);
      mediump vec3 tmpvar_70;
      tmpvar_70 = (outColor_5.xyz + max ((
        (HRRimColor_60.xyz * rim_59)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_61 = (outColor_5.xyz + max (tmpvar_64, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_71;
      tmpvar_71 = mix (rgColor_61, tmpvar_70, vec3(float(_HRRimIntensity)));
      rgColor_61 = tmpvar_71;
      outColor_5.xyz = rgColor_61;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_72;
    scrpos_72 = xlv_TEXCOORD3;
    mediump float a_73;
    a_73 = xlv_TEXCOORD3.z;
    if ((a_73 < 0.95)) {
      scrpos_72.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_73 = (a_73 * 17.0);
      highp float tmpvar_74;
      tmpvar_74 = (scrpos_72.y / 4.0);
      highp float tmpvar_75;
      tmpvar_75 = (fract(abs(tmpvar_74)) * 4.0);
      highp float tmpvar_76;
      if ((tmpvar_74 >= 0.0)) {
        tmpvar_76 = tmpvar_75;
      } else {
        tmpvar_76 = -(tmpvar_75);
      };
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_72.x / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float x_80;
      x_80 = ((a_73 - _DITHERMATRIX[
        int(tmpvar_76)
      ][
        int(tmpvar_79)
      ]) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec4 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1.x + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1.x + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (((diffColor_11 * _Color.xyz) * _EnvColor.xyz) + color_16);
  outColor_5.w = (xlv_COLOR1.y * baseTexColor_3.w);
  mediump vec3 reflection_21;
  mediump vec3 R_22;
  mediump float intensity_23;
  mediump vec4 noiseTex_24;
  mediump vec4 spColor_25;
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_25 = tmpvar_26;
  spColor_25.w = (spColor_25.w * _SPOpaqueness);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_24 = tmpvar_27;
  highp float tmpvar_28;
  tmpvar_28 = (((1.99 * tmpvar_27.x) * _SPNoiseScaler) - 1.0);
  intensity_23 = tmpvar_28;
  highp vec3 tmpvar_29;
  highp vec3 I_30;
  I_30 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_24 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_29 = (I_30 - (2.0 * (
    dot (tmpvar_13, I_30)
   * tmpvar_13)));
  R_22 = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = textureCube (_SPCubeMap, R_22).xyz;
  reflection_21 = tmpvar_31;
  highp vec3 tmpvar_32;
  mediump vec3 x_33;
  x_33 = (spColor_25.xyz * _SPOldColor.xyz);
  tmpvar_32 = mix (x_33, ((reflection_21 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_25.xyz = tmpvar_32;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_23 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_23 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_34;
      tmpvar_34 = mix (spColor_25.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_23) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_25.xyz = tmpvar_34;
    };
  };
  spColor_25.xyz = (spColor_25.xyz * _Color.xyz);
  highp vec4 tmpvar_35;
  tmpvar_35 = mix (outColor_5, spColor_25, vec4(xlat_mutable_SPIntensity));
  spColor_25 = tmpvar_35;
  outColor_5 = spColor_25;
  if ((_RGBlendType == 1)) {
    highp vec3 N_36;
    N_36 = tmpvar_13;
    highp vec3 V_37;
    V_37 = V_2;
    mediump float rimLightDir_38;
    mediump vec3 lightDir_39;
    mediump float rim_40;
    mediump vec4 HRRimColor_41;
    mediump vec3 rgColor_42;
    mediump float tmpvar_43;
    highp float tmpvar_44;
    tmpvar_44 = pow (clamp ((1.001 - 
      dot (V_37, N_36)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_43 = (_RGBias + (tmpvar_44 * _RGScale));
    mediump vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_43 * _RGColor).xyz;
    rgColor_42 = tmpvar_45;
    HRRimColor_41 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
        HRRimColor_41 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
          HRRimColor_41 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
            HRRimColor_41 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
              HRRimColor_41 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_46;
    tmpvar_46 = (1.0 - max (0.0, dot (V_37, N_36)));
    rim_40 = tmpvar_46;
    highp vec3 tmpvar_47;
    tmpvar_47 = _WorldSpaceLightPos0.xyz;
    lightDir_39 = tmpvar_47;
    mediump vec3 tmpvar_48;
    tmpvar_48 = normalize(lightDir_39);
    highp float tmpvar_49;
    tmpvar_49 = dot (N_36, tmpvar_48);
    rimLightDir_38 = tmpvar_49;
    rim_40 = (rim_40 * (0.5 + rimLightDir_38));
    highp int tmpvar_50;
    if ((rim_40 > HRRimColor_41.w)) {
      tmpvar_50 = 1;
    } else {
      tmpvar_50 = 0;
    };
    rim_40 = float(tmpvar_50);
    mediump vec3 tmpvar_51;
    tmpvar_51 = (spColor_25.xyz + ((HRRimColor_41.xyz * rim_40) * _HRRimPower));
    mediump float tmpvar_52;
    tmpvar_52 = clamp (tmpvar_43, 0.0, 1.0);
    highp vec3 tmpvar_53;
    tmpvar_53 = mix (spColor_25.xyz, tmpvar_45, vec3((tmpvar_52 * _RGRatio)));
    rgColor_42 = tmpvar_53;
    highp vec3 tmpvar_54;
    tmpvar_54 = mix (rgColor_42, tmpvar_51, vec3(float(_HRRimIntensity)));
    rgColor_42 = tmpvar_54;
    outColor_5.xyz = rgColor_42;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_55;
      N_55 = tmpvar_13;
      highp vec3 V_56;
      V_56 = V_2;
      mediump float rimLightDir_57;
      mediump vec3 lightDir_58;
      mediump float rim_59;
      mediump vec4 HRRimColor_60;
      mediump vec3 rgColor_61;
      mediump float tmpvar_62;
      highp float tmpvar_63;
      tmpvar_63 = pow (clamp ((1.001 - 
        dot (V_56, N_55)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_62 = (_RGBias + (tmpvar_63 * _RGScale));
      mediump vec3 tmpvar_64;
      tmpvar_64 = (tmpvar_62 * _RGColor).xyz;
      rgColor_61 = tmpvar_64;
      HRRimColor_60 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_4.w + 0.1) >= 0.8)) {
          HRRimColor_60 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_4.w + 0.1) >= 0.4) && ((tex_Light_Color_4.w + 0.1) < 0.6))) {
            HRRimColor_60 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_4.w + 0.1) >= 0.2) && ((tex_Light_Color_4.w + 0.1) < 0.4))) {
              HRRimColor_60 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_4.w + 0.1) >= 0.6) && ((tex_Light_Color_4.w + 0.1) < 0.8))) {
                HRRimColor_60 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - max (0.0, dot (V_56, N_55)));
      rim_59 = tmpvar_65;
      highp vec3 tmpvar_66;
      tmpvar_66 = _WorldSpaceLightPos0.xyz;
      lightDir_58 = tmpvar_66;
      mediump vec3 tmpvar_67;
      tmpvar_67 = normalize(lightDir_58);
      highp float tmpvar_68;
      tmpvar_68 = dot (N_55, tmpvar_67);
      rimLightDir_57 = tmpvar_68;
      rim_59 = (rim_59 * (0.5 + rimLightDir_57));
      highp int tmpvar_69;
      if ((rim_59 > HRRimColor_60.w)) {
        tmpvar_69 = 1;
      } else {
        tmpvar_69 = 0;
      };
      rim_59 = float(tmpvar_69);
      mediump vec3 tmpvar_70;
      tmpvar_70 = (outColor_5.xyz + max ((
        (HRRimColor_60.xyz * rim_59)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_61 = (outColor_5.xyz + max (tmpvar_64, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_71;
      tmpvar_71 = mix (rgColor_61, tmpvar_70, vec3(float(_HRRimIntensity)));
      rgColor_61 = tmpvar_71;
      outColor_5.xyz = rgColor_61;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_72;
    scrpos_72 = xlv_TEXCOORD3;
    mediump float a_73;
    a_73 = xlv_TEXCOORD3.z;
    if ((a_73 < 0.95)) {
      scrpos_72.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_73 = (a_73 * 17.0);
      highp float tmpvar_74;
      tmpvar_74 = (scrpos_72.y / 4.0);
      highp float tmpvar_75;
      tmpvar_75 = (fract(abs(tmpvar_74)) * 4.0);
      highp float tmpvar_76;
      if ((tmpvar_74 >= 0.0)) {
        tmpvar_76 = tmpvar_75;
      } else {
        tmpvar_76 = -(tmpvar_75);
      };
      highp float tmpvar_77;
      tmpvar_77 = (scrpos_72.x / 4.0);
      highp float tmpvar_78;
      tmpvar_78 = (fract(abs(tmpvar_77)) * 4.0);
      highp float tmpvar_79;
      if ((tmpvar_77 >= 0.0)) {
        tmpvar_79 = tmpvar_78;
      } else {
        tmpvar_79 = -(tmpvar_78);
      };
      highp float x_80;
      x_80 = ((a_73 - _DITHERMATRIX[
        int(tmpvar_76)
      ][
        int(tmpvar_79)
      ]) - 0.01);
      if ((x_80 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_25.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_35 = tmpvar_36;
  spColor_35.w = (spColor_35.w * _SPOpaqueness);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * tmpvar_37.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (tmpvar_23, I_40)
   * tmpvar_23)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_44;
      tmpvar_44 = mix (spColor_35.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35.xyz = tmpvar_44;
    };
  };
  spColor_35.xyz = (spColor_35.xyz * _Color.xyz);
  highp vec4 tmpvar_45;
  tmpvar_45 = mix (outColor_4, spColor_35, vec4(xlat_mutable_SPIntensity));
  spColor_35 = tmpvar_45;
  outColor_4 = spColor_35;
  if ((_RGBlendType == 1)) {
    highp vec3 N_46;
    N_46 = tmpvar_23;
    highp vec3 V_47;
    V_47 = V_2;
    mediump float rimLightDir_48;
    mediump vec3 lightDir_49;
    mediump float rim_50;
    mediump vec4 HRRimColor_51;
    mediump vec3 rgColor_52;
    mediump float tmpvar_53;
    highp float tmpvar_54;
    tmpvar_54 = pow (clamp ((1.001 - 
      dot (V_47, N_46)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_53 = (_RGBias + (tmpvar_54 * _RGScale));
    mediump vec3 tmpvar_55;
    tmpvar_55 = (tmpvar_53 * _RGColor).xyz;
    rgColor_52 = tmpvar_55;
    HRRimColor_51 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_51 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_51 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_51 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_51 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_56;
    tmpvar_56 = (1.0 - max (0.0, dot (V_47, N_46)));
    rim_50 = tmpvar_56;
    highp vec3 tmpvar_57;
    tmpvar_57 = _WorldSpaceLightPos0.xyz;
    lightDir_49 = tmpvar_57;
    mediump vec3 tmpvar_58;
    tmpvar_58 = normalize(lightDir_49);
    highp float tmpvar_59;
    tmpvar_59 = dot (N_46, tmpvar_58);
    rimLightDir_48 = tmpvar_59;
    rim_50 = (rim_50 * (0.5 + rimLightDir_48));
    highp int tmpvar_60;
    if ((rim_50 > HRRimColor_51.w)) {
      tmpvar_60 = 1;
    } else {
      tmpvar_60 = 0;
    };
    rim_50 = float(tmpvar_60);
    mediump vec3 tmpvar_61;
    tmpvar_61 = (spColor_35.xyz + ((HRRimColor_51.xyz * rim_50) * _HRRimPower));
    mediump float tmpvar_62;
    tmpvar_62 = clamp (tmpvar_53, 0.0, 1.0);
    highp vec3 tmpvar_63;
    tmpvar_63 = mix (spColor_35.xyz, tmpvar_55, vec3((tmpvar_62 * _RGRatio)));
    rgColor_52 = tmpvar_63;
    highp vec3 tmpvar_64;
    tmpvar_64 = mix (rgColor_52, tmpvar_61, vec3(float(_HRRimIntensity)));
    rgColor_52 = tmpvar_64;
    outColor_4.xyz = rgColor_52;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_65;
      N_65 = tmpvar_23;
      highp vec3 V_66;
      V_66 = V_2;
      mediump float rimLightDir_67;
      mediump vec3 lightDir_68;
      mediump float rim_69;
      mediump vec4 HRRimColor_70;
      mediump vec3 rgColor_71;
      mediump float tmpvar_72;
      highp float tmpvar_73;
      tmpvar_73 = pow (clamp ((1.001 - 
        dot (V_66, N_65)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_72 = (_RGBias + (tmpvar_73 * _RGScale));
      mediump vec3 tmpvar_74;
      tmpvar_74 = (tmpvar_72 * _RGColor).xyz;
      rgColor_71 = tmpvar_74;
      HRRimColor_70 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_70 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_70 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_70 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_70 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_75;
      tmpvar_75 = (1.0 - max (0.0, dot (V_66, N_65)));
      rim_69 = tmpvar_75;
      highp vec3 tmpvar_76;
      tmpvar_76 = _WorldSpaceLightPos0.xyz;
      lightDir_68 = tmpvar_76;
      mediump vec3 tmpvar_77;
      tmpvar_77 = normalize(lightDir_68);
      highp float tmpvar_78;
      tmpvar_78 = dot (N_65, tmpvar_77);
      rimLightDir_67 = tmpvar_78;
      rim_69 = (rim_69 * (0.5 + rimLightDir_67));
      highp int tmpvar_79;
      if ((rim_69 > HRRimColor_70.w)) {
        tmpvar_79 = 1;
      } else {
        tmpvar_79 = 0;
      };
      rim_69 = float(tmpvar_79);
      mediump vec3 tmpvar_80;
      tmpvar_80 = (outColor_4.xyz + max ((
        (HRRimColor_70.xyz * rim_69)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_71 = (outColor_4.xyz + max (tmpvar_74, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_81;
      tmpvar_81 = mix (rgColor_71, tmpvar_80, vec3(float(_HRRimIntensity)));
      rgColor_71 = tmpvar_81;
      outColor_4.xyz = rgColor_71;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_82;
    scrpos_82 = xlv_TEXCOORD3;
    mediump float a_83;
    a_83 = xlv_TEXCOORD3.z;
    if ((a_83 < 0.95)) {
      scrpos_82.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_83 = (a_83 * 17.0);
      highp float tmpvar_84;
      tmpvar_84 = (scrpos_82.y / 4.0);
      highp float tmpvar_85;
      tmpvar_85 = (fract(abs(tmpvar_84)) * 4.0);
      highp float tmpvar_86;
      if ((tmpvar_84 >= 0.0)) {
        tmpvar_86 = tmpvar_85;
      } else {
        tmpvar_86 = -(tmpvar_85);
      };
      highp float tmpvar_87;
      tmpvar_87 = (scrpos_82.x / 4.0);
      highp float tmpvar_88;
      tmpvar_88 = (fract(abs(tmpvar_87)) * 4.0);
      highp float tmpvar_89;
      if ((tmpvar_87 >= 0.0)) {
        tmpvar_89 = tmpvar_88;
      } else {
        tmpvar_89 = -(tmpvar_88);
      };
      highp float x_90;
      x_90 = ((a_83 - _DITHERMATRIX[
        int(tmpvar_86)
      ][
        int(tmpvar_89)
      ]) - 0.01);
      if ((x_90 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_35.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_35 = tmpvar_36;
  spColor_35.w = (spColor_35.w * _SPOpaqueness);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * tmpvar_37.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (tmpvar_23, I_40)
   * tmpvar_23)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_44;
      tmpvar_44 = mix (spColor_35.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35.xyz = tmpvar_44;
    };
  };
  spColor_35.xyz = (spColor_35.xyz * _Color.xyz);
  highp vec4 tmpvar_45;
  tmpvar_45 = mix (outColor_4, spColor_35, vec4(xlat_mutable_SPIntensity));
  spColor_35 = tmpvar_45;
  outColor_4 = spColor_35;
  if ((_RGBlendType == 1)) {
    highp vec3 N_46;
    N_46 = tmpvar_23;
    highp vec3 V_47;
    V_47 = V_2;
    mediump float rimLightDir_48;
    mediump vec3 lightDir_49;
    mediump float rim_50;
    mediump vec4 HRRimColor_51;
    mediump vec3 rgColor_52;
    mediump float tmpvar_53;
    highp float tmpvar_54;
    tmpvar_54 = pow (clamp ((1.001 - 
      dot (V_47, N_46)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_53 = (_RGBias + (tmpvar_54 * _RGScale));
    mediump vec3 tmpvar_55;
    tmpvar_55 = (tmpvar_53 * _RGColor).xyz;
    rgColor_52 = tmpvar_55;
    HRRimColor_51 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_51 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_51 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_51 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_51 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_56;
    tmpvar_56 = (1.0 - max (0.0, dot (V_47, N_46)));
    rim_50 = tmpvar_56;
    highp vec3 tmpvar_57;
    tmpvar_57 = _WorldSpaceLightPos0.xyz;
    lightDir_49 = tmpvar_57;
    mediump vec3 tmpvar_58;
    tmpvar_58 = normalize(lightDir_49);
    highp float tmpvar_59;
    tmpvar_59 = dot (N_46, tmpvar_58);
    rimLightDir_48 = tmpvar_59;
    rim_50 = (rim_50 * (0.5 + rimLightDir_48));
    highp int tmpvar_60;
    if ((rim_50 > HRRimColor_51.w)) {
      tmpvar_60 = 1;
    } else {
      tmpvar_60 = 0;
    };
    rim_50 = float(tmpvar_60);
    mediump vec3 tmpvar_61;
    tmpvar_61 = (spColor_35.xyz + ((HRRimColor_51.xyz * rim_50) * _HRRimPower));
    mediump float tmpvar_62;
    tmpvar_62 = clamp (tmpvar_53, 0.0, 1.0);
    highp vec3 tmpvar_63;
    tmpvar_63 = mix (spColor_35.xyz, tmpvar_55, vec3((tmpvar_62 * _RGRatio)));
    rgColor_52 = tmpvar_63;
    highp vec3 tmpvar_64;
    tmpvar_64 = mix (rgColor_52, tmpvar_61, vec3(float(_HRRimIntensity)));
    rgColor_52 = tmpvar_64;
    outColor_4.xyz = rgColor_52;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_65;
      N_65 = tmpvar_23;
      highp vec3 V_66;
      V_66 = V_2;
      mediump float rimLightDir_67;
      mediump vec3 lightDir_68;
      mediump float rim_69;
      mediump vec4 HRRimColor_70;
      mediump vec3 rgColor_71;
      mediump float tmpvar_72;
      highp float tmpvar_73;
      tmpvar_73 = pow (clamp ((1.001 - 
        dot (V_66, N_65)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_72 = (_RGBias + (tmpvar_73 * _RGScale));
      mediump vec3 tmpvar_74;
      tmpvar_74 = (tmpvar_72 * _RGColor).xyz;
      rgColor_71 = tmpvar_74;
      HRRimColor_70 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_70 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_70 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_70 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_70 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_75;
      tmpvar_75 = (1.0 - max (0.0, dot (V_66, N_65)));
      rim_69 = tmpvar_75;
      highp vec3 tmpvar_76;
      tmpvar_76 = _WorldSpaceLightPos0.xyz;
      lightDir_68 = tmpvar_76;
      mediump vec3 tmpvar_77;
      tmpvar_77 = normalize(lightDir_68);
      highp float tmpvar_78;
      tmpvar_78 = dot (N_65, tmpvar_77);
      rimLightDir_67 = tmpvar_78;
      rim_69 = (rim_69 * (0.5 + rimLightDir_67));
      highp int tmpvar_79;
      if ((rim_69 > HRRimColor_70.w)) {
        tmpvar_79 = 1;
      } else {
        tmpvar_79 = 0;
      };
      rim_69 = float(tmpvar_79);
      mediump vec3 tmpvar_80;
      tmpvar_80 = (outColor_4.xyz + max ((
        (HRRimColor_70.xyz * rim_69)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_71 = (outColor_4.xyz + max (tmpvar_74, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_81;
      tmpvar_81 = mix (rgColor_71, tmpvar_80, vec3(float(_HRRimIntensity)));
      rgColor_71 = tmpvar_81;
      outColor_4.xyz = rgColor_71;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_82;
    scrpos_82 = xlv_TEXCOORD3;
    mediump float a_83;
    a_83 = xlv_TEXCOORD3.z;
    if ((a_83 < 0.95)) {
      scrpos_82.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_83 = (a_83 * 17.0);
      highp float tmpvar_84;
      tmpvar_84 = (scrpos_82.y / 4.0);
      highp float tmpvar_85;
      tmpvar_85 = (fract(abs(tmpvar_84)) * 4.0);
      highp float tmpvar_86;
      if ((tmpvar_84 >= 0.0)) {
        tmpvar_86 = tmpvar_85;
      } else {
        tmpvar_86 = -(tmpvar_85);
      };
      highp float tmpvar_87;
      tmpvar_87 = (scrpos_82.x / 4.0);
      highp float tmpvar_88;
      tmpvar_88 = (fract(abs(tmpvar_87)) * 4.0);
      highp float tmpvar_89;
      if ((tmpvar_87 >= 0.0)) {
        tmpvar_89 = tmpvar_88;
      } else {
        tmpvar_89 = -(tmpvar_88);
      };
      highp float x_90;
      x_90 = ((a_83 - _DITHERMATRIX[
        int(tmpvar_86)
      ][
        int(tmpvar_89)
      ]) - 0.01);
      if ((x_90 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_35.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  highp vec2 uv_6;
  uv_6 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_factorTex, uv_6);
  mediump vec4 tmpvar_8;
  tmpvar_8 = tmpvar_7;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_indexTex, uv_6);
  mediump float tmpvar_10;
  tmpvar_10 = tmpvar_9.w;
  mediump vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = tmpvar_10;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_tableTex, tmpvar_11).xyz;
  mediump vec3 tmpvar_13;
  tmpvar_13 = tmpvar_12;
  mediump vec2 tmpvar_14;
  tmpvar_14.y = 1.0;
  tmpvar_14.x = tmpvar_10;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_tableTex, tmpvar_14).xyz;
  mediump vec3 tmpvar_16;
  tmpvar_16 = tmpvar_15;
  mediump vec4 tmpvar_17;
  tmpvar_17.xyz = mix (tmpvar_13, tmpvar_16, tmpvar_8.xxx);
  tmpvar_17.w = tmpvar_8.y;
  mediump vec3 baseTexColor_18;
  baseTexColor_18 = tmpvar_17.xyz;
  mediump float threshold_19;
  mediump float D_20;
  mediump vec3 diffColor_21;
  diffColor_21 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_22;
  tmpvar_22 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_20 = tmpvar_22;
  threshold_19 = 0.0;
  if ((tmpvar_22 < 0.09)) {
    threshold_19 = ((xlv_COLOR1.x + tmpvar_22) * 0.5);
    if ((threshold_19 < _SecondShadow)) {
      diffColor_21 = (tmpvar_17.xyz * _SecondShadowMultColor);
    } else {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_22 >= 0.5)) {
      D_20 = ((tmpvar_22 * 1.2) - 0.1);
    } else {
      D_20 = ((D_20 * 1.25) - 0.125);
    };
    threshold_19 = ((xlv_COLOR1.x + D_20) * 0.5);
    if ((threshold_19 < _LightArea)) {
      diffColor_21 = (tmpvar_17.xyz * _FirstShadowMultColor);
    } else {
      diffColor_21 = baseTexColor_18;
    };
  };
  mediump vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_25;
  mediump vec3 color_26;
  mediump vec3 H_27;
  H_27 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_28 = tmpvar_29;
    H_27 = normalize((_CustomLightDir.xyz + V_28));
  };
  mediump float tmpvar_30;
  tmpvar_30 = pow (max (dot (tmpvar_23, H_27), 0.0), _Shininess);
  if ((tmpvar_30 >= (1.0 - tex_Light_Color_3.z))) {
    color_26 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_26 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_21 * _Color.xyz) * _EnvColor.xyz) + color_26);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_8.y);
  mediump vec3 reflection_31;
  mediump vec3 R_32;
  mediump float intensity_33;
  mediump vec4 noiseTex_34;
  mediump vec4 spColor_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_35 = tmpvar_36;
  spColor_35.w = (spColor_35.w * _SPOpaqueness);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_34 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = (((1.99 * tmpvar_37.x) * _SPNoiseScaler) - 1.0);
  intensity_33 = tmpvar_38;
  highp vec3 tmpvar_39;
  highp vec3 I_40;
  I_40 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_34 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_39 = (I_40 - (2.0 * (
    dot (tmpvar_23, I_40)
   * tmpvar_23)));
  R_32 = tmpvar_39;
  lowp vec3 tmpvar_41;
  tmpvar_41 = textureCube (_SPCubeMap, R_32).xyz;
  reflection_31 = tmpvar_41;
  highp vec3 tmpvar_42;
  mediump vec3 x_43;
  x_43 = (spColor_35.xyz * _SPOldColor.xyz);
  tmpvar_42 = mix (x_43, ((reflection_31 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_35.xyz = tmpvar_42;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_33 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_33 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_44;
      tmpvar_44 = mix (spColor_35.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_33) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_35.xyz = tmpvar_44;
    };
  };
  spColor_35.xyz = (spColor_35.xyz * _Color.xyz);
  highp vec4 tmpvar_45;
  tmpvar_45 = mix (outColor_4, spColor_35, vec4(xlat_mutable_SPIntensity));
  spColor_35 = tmpvar_45;
  outColor_4 = spColor_35;
  if ((_RGBlendType == 1)) {
    highp vec3 N_46;
    N_46 = tmpvar_23;
    highp vec3 V_47;
    V_47 = V_2;
    mediump float rimLightDir_48;
    mediump vec3 lightDir_49;
    mediump float rim_50;
    mediump vec4 HRRimColor_51;
    mediump vec3 rgColor_52;
    mediump float tmpvar_53;
    highp float tmpvar_54;
    tmpvar_54 = pow (clamp ((1.001 - 
      dot (V_47, N_46)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_53 = (_RGBias + (tmpvar_54 * _RGScale));
    mediump vec3 tmpvar_55;
    tmpvar_55 = (tmpvar_53 * _RGColor).xyz;
    rgColor_52 = tmpvar_55;
    HRRimColor_51 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_51 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_51 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_51 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_51 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_56;
    tmpvar_56 = (1.0 - max (0.0, dot (V_47, N_46)));
    rim_50 = tmpvar_56;
    highp vec3 tmpvar_57;
    tmpvar_57 = _WorldSpaceLightPos0.xyz;
    lightDir_49 = tmpvar_57;
    mediump vec3 tmpvar_58;
    tmpvar_58 = normalize(lightDir_49);
    highp float tmpvar_59;
    tmpvar_59 = dot (N_46, tmpvar_58);
    rimLightDir_48 = tmpvar_59;
    rim_50 = (rim_50 * (0.5 + rimLightDir_48));
    highp int tmpvar_60;
    if ((rim_50 > HRRimColor_51.w)) {
      tmpvar_60 = 1;
    } else {
      tmpvar_60 = 0;
    };
    rim_50 = float(tmpvar_60);
    mediump vec3 tmpvar_61;
    tmpvar_61 = (spColor_35.xyz + ((HRRimColor_51.xyz * rim_50) * _HRRimPower));
    mediump float tmpvar_62;
    tmpvar_62 = clamp (tmpvar_53, 0.0, 1.0);
    highp vec3 tmpvar_63;
    tmpvar_63 = mix (spColor_35.xyz, tmpvar_55, vec3((tmpvar_62 * _RGRatio)));
    rgColor_52 = tmpvar_63;
    highp vec3 tmpvar_64;
    tmpvar_64 = mix (rgColor_52, tmpvar_61, vec3(float(_HRRimIntensity)));
    rgColor_52 = tmpvar_64;
    outColor_4.xyz = rgColor_52;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_65;
      N_65 = tmpvar_23;
      highp vec3 V_66;
      V_66 = V_2;
      mediump float rimLightDir_67;
      mediump vec3 lightDir_68;
      mediump float rim_69;
      mediump vec4 HRRimColor_70;
      mediump vec3 rgColor_71;
      mediump float tmpvar_72;
      highp float tmpvar_73;
      tmpvar_73 = pow (clamp ((1.001 - 
        dot (V_66, N_65)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_72 = (_RGBias + (tmpvar_73 * _RGScale));
      mediump vec3 tmpvar_74;
      tmpvar_74 = (tmpvar_72 * _RGColor).xyz;
      rgColor_71 = tmpvar_74;
      HRRimColor_70 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_70 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_70 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_70 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_70 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_75;
      tmpvar_75 = (1.0 - max (0.0, dot (V_66, N_65)));
      rim_69 = tmpvar_75;
      highp vec3 tmpvar_76;
      tmpvar_76 = _WorldSpaceLightPos0.xyz;
      lightDir_68 = tmpvar_76;
      mediump vec3 tmpvar_77;
      tmpvar_77 = normalize(lightDir_68);
      highp float tmpvar_78;
      tmpvar_78 = dot (N_65, tmpvar_77);
      rimLightDir_67 = tmpvar_78;
      rim_69 = (rim_69 * (0.5 + rimLightDir_67));
      highp int tmpvar_79;
      if ((rim_69 > HRRimColor_70.w)) {
        tmpvar_79 = 1;
      } else {
        tmpvar_79 = 0;
      };
      rim_69 = float(tmpvar_79);
      mediump vec3 tmpvar_80;
      tmpvar_80 = (outColor_4.xyz + max ((
        (HRRimColor_70.xyz * rim_69)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_71 = (outColor_4.xyz + max (tmpvar_74, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_81;
      tmpvar_81 = mix (rgColor_71, tmpvar_80, vec3(float(_HRRimIntensity)));
      rgColor_71 = tmpvar_81;
      outColor_4.xyz = rgColor_71;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_82;
    scrpos_82 = xlv_TEXCOORD3;
    mediump float a_83;
    a_83 = xlv_TEXCOORD3.z;
    if ((a_83 < 0.95)) {
      scrpos_82.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_83 = (a_83 * 17.0);
      highp float tmpvar_84;
      tmpvar_84 = (scrpos_82.y / 4.0);
      highp float tmpvar_85;
      tmpvar_85 = (fract(abs(tmpvar_84)) * 4.0);
      highp float tmpvar_86;
      if ((tmpvar_84 >= 0.0)) {
        tmpvar_86 = tmpvar_85;
      } else {
        tmpvar_86 = -(tmpvar_85);
      };
      highp float tmpvar_87;
      tmpvar_87 = (scrpos_82.x / 4.0);
      highp float tmpvar_88;
      tmpvar_88 = (fract(abs(tmpvar_87)) * 4.0);
      highp float tmpvar_89;
      if ((tmpvar_87 >= 0.0)) {
        tmpvar_89 = tmpvar_88;
      } else {
        tmpvar_89 = -(tmpvar_88);
      };
      highp float x_90;
      x_90 = ((a_83 - _DITHERMATRIX[
        int(tmpvar_86)
      ][
        int(tmpvar_89)
      ]) - 0.01);
      if ((x_90 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_35.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_78 = tmpvar_79;
  spColor_78.w = (spColor_78.w * _SPOpaqueness);
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * tmpvar_80.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (tmpvar_66, I_83)
   * tmpvar_66)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_87;
      tmpvar_87 = mix (spColor_78.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78.xyz = tmpvar_87;
    };
  };
  spColor_78.xyz = (spColor_78.xyz * _Color.xyz);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (outColor_4, spColor_78, vec4(xlat_mutable_SPIntensity));
  spColor_78 = tmpvar_88;
  outColor_4 = spColor_78;
  if ((_RGBlendType == 1)) {
    highp vec3 N_89;
    N_89 = tmpvar_66;
    highp vec3 V_90;
    V_90 = V_2;
    mediump float rimLightDir_91;
    mediump vec3 lightDir_92;
    mediump float rim_93;
    mediump vec4 HRRimColor_94;
    mediump vec3 rgColor_95;
    mediump float tmpvar_96;
    highp float tmpvar_97;
    tmpvar_97 = pow (clamp ((1.001 - 
      dot (V_90, N_89)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_96 = (_RGBias + (tmpvar_97 * _RGScale));
    mediump vec3 tmpvar_98;
    tmpvar_98 = (tmpvar_96 * _RGColor).xyz;
    rgColor_95 = tmpvar_98;
    HRRimColor_94 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_94 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_94 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_94 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_94 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_99;
    tmpvar_99 = (1.0 - max (0.0, dot (V_90, N_89)));
    rim_93 = tmpvar_99;
    highp vec3 tmpvar_100;
    tmpvar_100 = _WorldSpaceLightPos0.xyz;
    lightDir_92 = tmpvar_100;
    mediump vec3 tmpvar_101;
    tmpvar_101 = normalize(lightDir_92);
    highp float tmpvar_102;
    tmpvar_102 = dot (N_89, tmpvar_101);
    rimLightDir_91 = tmpvar_102;
    rim_93 = (rim_93 * (0.5 + rimLightDir_91));
    highp int tmpvar_103;
    if ((rim_93 > HRRimColor_94.w)) {
      tmpvar_103 = 1;
    } else {
      tmpvar_103 = 0;
    };
    rim_93 = float(tmpvar_103);
    mediump vec3 tmpvar_104;
    tmpvar_104 = (spColor_78.xyz + ((HRRimColor_94.xyz * rim_93) * _HRRimPower));
    mediump float tmpvar_105;
    tmpvar_105 = clamp (tmpvar_96, 0.0, 1.0);
    highp vec3 tmpvar_106;
    tmpvar_106 = mix (spColor_78.xyz, tmpvar_98, vec3((tmpvar_105 * _RGRatio)));
    rgColor_95 = tmpvar_106;
    highp vec3 tmpvar_107;
    tmpvar_107 = mix (rgColor_95, tmpvar_104, vec3(float(_HRRimIntensity)));
    rgColor_95 = tmpvar_107;
    outColor_4.xyz = rgColor_95;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_108;
      N_108 = tmpvar_66;
      highp vec3 V_109;
      V_109 = V_2;
      mediump float rimLightDir_110;
      mediump vec3 lightDir_111;
      mediump float rim_112;
      mediump vec4 HRRimColor_113;
      mediump vec3 rgColor_114;
      mediump float tmpvar_115;
      highp float tmpvar_116;
      tmpvar_116 = pow (clamp ((1.001 - 
        dot (V_109, N_108)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_115 = (_RGBias + (tmpvar_116 * _RGScale));
      mediump vec3 tmpvar_117;
      tmpvar_117 = (tmpvar_115 * _RGColor).xyz;
      rgColor_114 = tmpvar_117;
      HRRimColor_113 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_113 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_113 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_113 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_113 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_118;
      tmpvar_118 = (1.0 - max (0.0, dot (V_109, N_108)));
      rim_112 = tmpvar_118;
      highp vec3 tmpvar_119;
      tmpvar_119 = _WorldSpaceLightPos0.xyz;
      lightDir_111 = tmpvar_119;
      mediump vec3 tmpvar_120;
      tmpvar_120 = normalize(lightDir_111);
      highp float tmpvar_121;
      tmpvar_121 = dot (N_108, tmpvar_120);
      rimLightDir_110 = tmpvar_121;
      rim_112 = (rim_112 * (0.5 + rimLightDir_110));
      highp int tmpvar_122;
      if ((rim_112 > HRRimColor_113.w)) {
        tmpvar_122 = 1;
      } else {
        tmpvar_122 = 0;
      };
      rim_112 = float(tmpvar_122);
      mediump vec3 tmpvar_123;
      tmpvar_123 = (outColor_4.xyz + max ((
        (HRRimColor_113.xyz * rim_112)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_114 = (outColor_4.xyz + max (tmpvar_117, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_124;
      tmpvar_124 = mix (rgColor_114, tmpvar_123, vec3(float(_HRRimIntensity)));
      rgColor_114 = tmpvar_124;
      outColor_4.xyz = rgColor_114;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_125;
    scrpos_125 = xlv_TEXCOORD3;
    mediump float a_126;
    a_126 = xlv_TEXCOORD3.z;
    if ((a_126 < 0.95)) {
      scrpos_125.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_126 = (a_126 * 17.0);
      highp float tmpvar_127;
      tmpvar_127 = (scrpos_125.y / 4.0);
      highp float tmpvar_128;
      tmpvar_128 = (fract(abs(tmpvar_127)) * 4.0);
      highp float tmpvar_129;
      if ((tmpvar_127 >= 0.0)) {
        tmpvar_129 = tmpvar_128;
      } else {
        tmpvar_129 = -(tmpvar_128);
      };
      highp float tmpvar_130;
      tmpvar_130 = (scrpos_125.x / 4.0);
      highp float tmpvar_131;
      tmpvar_131 = (fract(abs(tmpvar_130)) * 4.0);
      highp float tmpvar_132;
      if ((tmpvar_130 >= 0.0)) {
        tmpvar_132 = tmpvar_131;
      } else {
        tmpvar_132 = -(tmpvar_131);
      };
      highp float x_133;
      x_133 = ((a_126 - _DITHERMATRIX[
        int(tmpvar_129)
      ][
        int(tmpvar_132)
      ]) - 0.01);
      if ((x_133 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_78.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_78 = tmpvar_79;
  spColor_78.w = (spColor_78.w * _SPOpaqueness);
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * tmpvar_80.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (tmpvar_66, I_83)
   * tmpvar_66)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_87;
      tmpvar_87 = mix (spColor_78.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78.xyz = tmpvar_87;
    };
  };
  spColor_78.xyz = (spColor_78.xyz * _Color.xyz);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (outColor_4, spColor_78, vec4(xlat_mutable_SPIntensity));
  spColor_78 = tmpvar_88;
  outColor_4 = spColor_78;
  if ((_RGBlendType == 1)) {
    highp vec3 N_89;
    N_89 = tmpvar_66;
    highp vec3 V_90;
    V_90 = V_2;
    mediump float rimLightDir_91;
    mediump vec3 lightDir_92;
    mediump float rim_93;
    mediump vec4 HRRimColor_94;
    mediump vec3 rgColor_95;
    mediump float tmpvar_96;
    highp float tmpvar_97;
    tmpvar_97 = pow (clamp ((1.001 - 
      dot (V_90, N_89)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_96 = (_RGBias + (tmpvar_97 * _RGScale));
    mediump vec3 tmpvar_98;
    tmpvar_98 = (tmpvar_96 * _RGColor).xyz;
    rgColor_95 = tmpvar_98;
    HRRimColor_94 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_94 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_94 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_94 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_94 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_99;
    tmpvar_99 = (1.0 - max (0.0, dot (V_90, N_89)));
    rim_93 = tmpvar_99;
    highp vec3 tmpvar_100;
    tmpvar_100 = _WorldSpaceLightPos0.xyz;
    lightDir_92 = tmpvar_100;
    mediump vec3 tmpvar_101;
    tmpvar_101 = normalize(lightDir_92);
    highp float tmpvar_102;
    tmpvar_102 = dot (N_89, tmpvar_101);
    rimLightDir_91 = tmpvar_102;
    rim_93 = (rim_93 * (0.5 + rimLightDir_91));
    highp int tmpvar_103;
    if ((rim_93 > HRRimColor_94.w)) {
      tmpvar_103 = 1;
    } else {
      tmpvar_103 = 0;
    };
    rim_93 = float(tmpvar_103);
    mediump vec3 tmpvar_104;
    tmpvar_104 = (spColor_78.xyz + ((HRRimColor_94.xyz * rim_93) * _HRRimPower));
    mediump float tmpvar_105;
    tmpvar_105 = clamp (tmpvar_96, 0.0, 1.0);
    highp vec3 tmpvar_106;
    tmpvar_106 = mix (spColor_78.xyz, tmpvar_98, vec3((tmpvar_105 * _RGRatio)));
    rgColor_95 = tmpvar_106;
    highp vec3 tmpvar_107;
    tmpvar_107 = mix (rgColor_95, tmpvar_104, vec3(float(_HRRimIntensity)));
    rgColor_95 = tmpvar_107;
    outColor_4.xyz = rgColor_95;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_108;
      N_108 = tmpvar_66;
      highp vec3 V_109;
      V_109 = V_2;
      mediump float rimLightDir_110;
      mediump vec3 lightDir_111;
      mediump float rim_112;
      mediump vec4 HRRimColor_113;
      mediump vec3 rgColor_114;
      mediump float tmpvar_115;
      highp float tmpvar_116;
      tmpvar_116 = pow (clamp ((1.001 - 
        dot (V_109, N_108)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_115 = (_RGBias + (tmpvar_116 * _RGScale));
      mediump vec3 tmpvar_117;
      tmpvar_117 = (tmpvar_115 * _RGColor).xyz;
      rgColor_114 = tmpvar_117;
      HRRimColor_113 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_113 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_113 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_113 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_113 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_118;
      tmpvar_118 = (1.0 - max (0.0, dot (V_109, N_108)));
      rim_112 = tmpvar_118;
      highp vec3 tmpvar_119;
      tmpvar_119 = _WorldSpaceLightPos0.xyz;
      lightDir_111 = tmpvar_119;
      mediump vec3 tmpvar_120;
      tmpvar_120 = normalize(lightDir_111);
      highp float tmpvar_121;
      tmpvar_121 = dot (N_108, tmpvar_120);
      rimLightDir_110 = tmpvar_121;
      rim_112 = (rim_112 * (0.5 + rimLightDir_110));
      highp int tmpvar_122;
      if ((rim_112 > HRRimColor_113.w)) {
        tmpvar_122 = 1;
      } else {
        tmpvar_122 = 0;
      };
      rim_112 = float(tmpvar_122);
      mediump vec3 tmpvar_123;
      tmpvar_123 = (outColor_4.xyz + max ((
        (HRRimColor_113.xyz * rim_112)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_114 = (outColor_4.xyz + max (tmpvar_117, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_124;
      tmpvar_124 = mix (rgColor_114, tmpvar_123, vec3(float(_HRRimIntensity)));
      rgColor_114 = tmpvar_124;
      outColor_4.xyz = rgColor_114;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_125;
    scrpos_125 = xlv_TEXCOORD3;
    mediump float a_126;
    a_126 = xlv_TEXCOORD3.z;
    if ((a_126 < 0.95)) {
      scrpos_125.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_126 = (a_126 * 17.0);
      highp float tmpvar_127;
      tmpvar_127 = (scrpos_125.y / 4.0);
      highp float tmpvar_128;
      tmpvar_128 = (fract(abs(tmpvar_127)) * 4.0);
      highp float tmpvar_129;
      if ((tmpvar_127 >= 0.0)) {
        tmpvar_129 = tmpvar_128;
      } else {
        tmpvar_129 = -(tmpvar_128);
      };
      highp float tmpvar_130;
      tmpvar_130 = (scrpos_125.x / 4.0);
      highp float tmpvar_131;
      tmpvar_131 = (fract(abs(tmpvar_130)) * 4.0);
      highp float tmpvar_132;
      if ((tmpvar_130 >= 0.0)) {
        tmpvar_132 = tmpvar_131;
      } else {
        tmpvar_132 = -(tmpvar_131);
      };
      highp float x_133;
      x_133 = ((a_126 - _DITHERMATRIX[
        int(tmpvar_129)
      ][
        int(tmpvar_132)
      ]) - 0.01);
      if ((x_133 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_78.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump vec3 L_13;
  L_13 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_13 = _CustomLightDir.xyz;
  };
  tmpvar_7.x = ((dot (tmpvar_4, L_13) * 0.4975) + 0.5);
  tmpvar_7.y = _Opaqueness;
  highp vec4 spuvs_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = (_glesVertex * 0.5);
  spuvs_14.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_16;
  tmpvar_16.x = (tmpvar_15.x + (tmpvar_15.z * tmpvar_15.z));
  tmpvar_16.y = ((tmpvar_15.y + (0.5 * tmpvar_15.z)) + ((0.5 * tmpvar_15.x) * tmpvar_15.x));
  spuvs_14.zw = ((tmpvar_16 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_17;
    highp vec4 tmpvar_18;
    tmpvar_18 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_19;
    tmpvar_19.x = tmpvar_18.x;
    tmpvar_19.y = (tmpvar_18.y * _ProjectionParams.x);
    o_17.xy = (tmpvar_19 + tmpvar_18.w);
    o_17.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_17.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_14;
  xlv_COLOR1 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform highp int _RGBlendType;
uniform mediump vec4 _HRRimColor2;
uniform mediump vec4 _HRRimColor3;
uniform mediump vec4 _HRRimColor4;
uniform mediump vec4 _HRRimColor5;
uniform mediump float _HRRimPower;
uniform highp int _HRRimIntensity;
uniform highp int _MoreHardRimColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 tex_Light_Color_3;
  mediump vec4 outColor_4;
  outColor_4 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_LightMapTex, xlv_TEXCOORD0);
  tex_Light_Color_3 = tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  highp vec2 pixelSize_8;
  pixelSize_8 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_9;
  tmpvar_9 = ((uv_7 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10 = floor(tmpvar_9);
  highp vec2 tmpvar_11;
  tmpvar_11 = fract(tmpvar_9);
  highp vec2 uv_12;
  uv_12 = ((tmpvar_10 + vec2(0.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_factorTex, uv_12);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_indexTex, uv_12);
  mediump float tmpvar_16;
  tmpvar_16 = tmpvar_15.w;
  mediump vec2 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_tableTex, tmpvar_17).xyz;
  mediump vec3 tmpvar_19;
  tmpvar_19 = tmpvar_18;
  mediump vec2 tmpvar_20;
  tmpvar_20.y = 1.0;
  tmpvar_20.x = tmpvar_16;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_tableTex, tmpvar_20).xyz;
  mediump vec3 tmpvar_22;
  tmpvar_22 = tmpvar_21;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = mix (tmpvar_19, tmpvar_22, tmpvar_14.xxx);
  tmpvar_23.w = tmpvar_14.y;
  highp vec2 uv_24;
  uv_24 = ((tmpvar_10 + vec2(1.5, 0.5)) * pixelSize_8);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_factorTex, uv_24);
  mediump vec4 tmpvar_26;
  tmpvar_26 = tmpvar_25;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_indexTex, uv_24);
  mediump float tmpvar_28;
  tmpvar_28 = tmpvar_27.w;
  mediump vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = tmpvar_28;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_tableTex, tmpvar_29).xyz;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_30;
  mediump vec2 tmpvar_32;
  tmpvar_32.y = 1.0;
  tmpvar_32.x = tmpvar_28;
  lowp vec3 tmpvar_33;
  tmpvar_33 = texture2D (_tableTex, tmpvar_32).xyz;
  mediump vec3 tmpvar_34;
  tmpvar_34 = tmpvar_33;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = mix (tmpvar_31, tmpvar_34, tmpvar_26.xxx);
  tmpvar_35.w = tmpvar_26.y;
  highp vec2 uv_36;
  uv_36 = ((tmpvar_10 + vec2(0.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture2D (_factorTex, uv_36);
  mediump vec4 tmpvar_38;
  tmpvar_38 = tmpvar_37;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_indexTex, uv_36);
  mediump float tmpvar_40;
  tmpvar_40 = tmpvar_39.w;
  mediump vec2 tmpvar_41;
  tmpvar_41.y = 0.0;
  tmpvar_41.x = tmpvar_40;
  lowp vec3 tmpvar_42;
  tmpvar_42 = texture2D (_tableTex, tmpvar_41).xyz;
  mediump vec3 tmpvar_43;
  tmpvar_43 = tmpvar_42;
  mediump vec2 tmpvar_44;
  tmpvar_44.y = 1.0;
  tmpvar_44.x = tmpvar_40;
  lowp vec3 tmpvar_45;
  tmpvar_45 = texture2D (_tableTex, tmpvar_44).xyz;
  mediump vec3 tmpvar_46;
  tmpvar_46 = tmpvar_45;
  mediump vec4 tmpvar_47;
  tmpvar_47.xyz = mix (tmpvar_43, tmpvar_46, tmpvar_38.xxx);
  tmpvar_47.w = tmpvar_38.y;
  highp vec2 uv_48;
  uv_48 = ((tmpvar_10 + vec2(1.5, 1.5)) * pixelSize_8);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_factorTex, uv_48);
  mediump vec4 tmpvar_50;
  tmpvar_50 = tmpvar_49;
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_indexTex, uv_48);
  mediump float tmpvar_52;
  tmpvar_52 = tmpvar_51.w;
  mediump vec2 tmpvar_53;
  tmpvar_53.y = 0.0;
  tmpvar_53.x = tmpvar_52;
  lowp vec3 tmpvar_54;
  tmpvar_54 = texture2D (_tableTex, tmpvar_53).xyz;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_54;
  mediump vec2 tmpvar_56;
  tmpvar_56.y = 1.0;
  tmpvar_56.x = tmpvar_52;
  lowp vec3 tmpvar_57;
  tmpvar_57 = texture2D (_tableTex, tmpvar_56).xyz;
  mediump vec3 tmpvar_58;
  tmpvar_58 = tmpvar_57;
  mediump vec4 tmpvar_59;
  tmpvar_59.xyz = mix (tmpvar_55, tmpvar_58, tmpvar_50.xxx);
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (mix (tmpvar_23, tmpvar_35, tmpvar_11.xxxx), mix (tmpvar_47, tmpvar_59, tmpvar_11.xxxx), tmpvar_11.yyyy);
  tmpvar_6 = tmpvar_60;
  mediump vec3 baseTexColor_61;
  baseTexColor_61 = tmpvar_6.xyz;
  mediump float threshold_62;
  mediump float D_63;
  mediump vec3 diffColor_64;
  diffColor_64 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_65;
  tmpvar_65 = (xlv_COLOR0.x * tex_Light_Color_3.y);
  D_63 = tmpvar_65;
  threshold_62 = 0.0;
  if ((tmpvar_65 < 0.09)) {
    threshold_62 = ((xlv_COLOR1.x + tmpvar_65) * 0.5);
    if ((threshold_62 < _SecondShadow)) {
      diffColor_64 = (tmpvar_6.xyz * _SecondShadowMultColor);
    } else {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_65 >= 0.5)) {
      D_63 = ((tmpvar_65 * 1.2) - 0.1);
    } else {
      D_63 = ((D_63 * 1.25) - 0.125);
    };
    threshold_62 = ((xlv_COLOR1.x + D_63) * 0.5);
    if ((threshold_62 < _LightArea)) {
      diffColor_64 = (tmpvar_6.xyz * _FirstShadowMultColor);
    } else {
      diffColor_64 = baseTexColor_61;
    };
  };
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_68;
  mediump vec3 color_69;
  mediump vec3 H_70;
  H_70 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_71;
    highp vec3 tmpvar_72;
    tmpvar_72 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_71 = tmpvar_72;
    H_70 = normalize((_CustomLightDir.xyz + V_71));
  };
  mediump float tmpvar_73;
  tmpvar_73 = pow (max (dot (tmpvar_66, H_70), 0.0), _Shininess);
  if ((tmpvar_73 >= (1.0 - tex_Light_Color_3.z))) {
    color_69 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_3.x);
  } else {
    color_69 = vec3(0.0, 0.0, 0.0);
  };
  outColor_4.xyz = (((diffColor_64 * _Color.xyz) * _EnvColor.xyz) + color_69);
  outColor_4.w = (xlv_COLOR1.y * tmpvar_6.w);
  mediump vec3 reflection_74;
  mediump vec3 R_75;
  mediump float intensity_76;
  mediump vec4 noiseTex_77;
  mediump vec4 spColor_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_78 = tmpvar_79;
  spColor_78.w = (spColor_78.w * _SPOpaqueness);
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_77 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (((1.99 * tmpvar_80.x) * _SPNoiseScaler) - 1.0);
  intensity_76 = tmpvar_81;
  highp vec3 tmpvar_82;
  highp vec3 I_83;
  I_83 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_77 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_82 = (I_83 - (2.0 * (
    dot (tmpvar_66, I_83)
   * tmpvar_66)));
  R_75 = tmpvar_82;
  lowp vec3 tmpvar_84;
  tmpvar_84 = textureCube (_SPCubeMap, R_75).xyz;
  reflection_74 = tmpvar_84;
  highp vec3 tmpvar_85;
  mediump vec3 x_86;
  x_86 = (spColor_78.xyz * _SPOldColor.xyz);
  tmpvar_85 = mix (x_86, ((reflection_74 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_78.xyz = tmpvar_85;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_76 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_76 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_87;
      tmpvar_87 = mix (spColor_78.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_76) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_78.xyz = tmpvar_87;
    };
  };
  spColor_78.xyz = (spColor_78.xyz * _Color.xyz);
  highp vec4 tmpvar_88;
  tmpvar_88 = mix (outColor_4, spColor_78, vec4(xlat_mutable_SPIntensity));
  spColor_78 = tmpvar_88;
  outColor_4 = spColor_78;
  if ((_RGBlendType == 1)) {
    highp vec3 N_89;
    N_89 = tmpvar_66;
    highp vec3 V_90;
    V_90 = V_2;
    mediump float rimLightDir_91;
    mediump vec3 lightDir_92;
    mediump float rim_93;
    mediump vec4 HRRimColor_94;
    mediump vec3 rgColor_95;
    mediump float tmpvar_96;
    highp float tmpvar_97;
    tmpvar_97 = pow (clamp ((1.001 - 
      dot (V_90, N_89)
    ), 0.001, 1.0), _RGShininess);
    tmpvar_96 = (_RGBias + (tmpvar_97 * _RGScale));
    mediump vec3 tmpvar_98;
    tmpvar_98 = (tmpvar_96 * _RGColor).xyz;
    rgColor_95 = tmpvar_98;
    HRRimColor_94 = _RGColor;
    if (bool(_MoreHardRimColor)) {
      if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
        HRRimColor_94 = _HRRimColor5;
      } else {
        if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
          HRRimColor_94 = _HRRimColor3;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
            HRRimColor_94 = _HRRimColor2;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
              HRRimColor_94 = _HRRimColor4;
            };
          };
        };
      };
    };
    highp float tmpvar_99;
    tmpvar_99 = (1.0 - max (0.0, dot (V_90, N_89)));
    rim_93 = tmpvar_99;
    highp vec3 tmpvar_100;
    tmpvar_100 = _WorldSpaceLightPos0.xyz;
    lightDir_92 = tmpvar_100;
    mediump vec3 tmpvar_101;
    tmpvar_101 = normalize(lightDir_92);
    highp float tmpvar_102;
    tmpvar_102 = dot (N_89, tmpvar_101);
    rimLightDir_91 = tmpvar_102;
    rim_93 = (rim_93 * (0.5 + rimLightDir_91));
    highp int tmpvar_103;
    if ((rim_93 > HRRimColor_94.w)) {
      tmpvar_103 = 1;
    } else {
      tmpvar_103 = 0;
    };
    rim_93 = float(tmpvar_103);
    mediump vec3 tmpvar_104;
    tmpvar_104 = (spColor_78.xyz + ((HRRimColor_94.xyz * rim_93) * _HRRimPower));
    mediump float tmpvar_105;
    tmpvar_105 = clamp (tmpvar_96, 0.0, 1.0);
    highp vec3 tmpvar_106;
    tmpvar_106 = mix (spColor_78.xyz, tmpvar_98, vec3((tmpvar_105 * _RGRatio)));
    rgColor_95 = tmpvar_106;
    highp vec3 tmpvar_107;
    tmpvar_107 = mix (rgColor_95, tmpvar_104, vec3(float(_HRRimIntensity)));
    rgColor_95 = tmpvar_107;
    outColor_4.xyz = rgColor_95;
  } else {
    if ((_RGBlendType == 2)) {
      highp vec3 N_108;
      N_108 = tmpvar_66;
      highp vec3 V_109;
      V_109 = V_2;
      mediump float rimLightDir_110;
      mediump vec3 lightDir_111;
      mediump float rim_112;
      mediump vec4 HRRimColor_113;
      mediump vec3 rgColor_114;
      mediump float tmpvar_115;
      highp float tmpvar_116;
      tmpvar_116 = pow (clamp ((1.001 - 
        dot (V_109, N_108)
      ), 0.001, 1.0), _RGShininess);
      tmpvar_115 = (_RGBias + (tmpvar_116 * _RGScale));
      mediump vec3 tmpvar_117;
      tmpvar_117 = (tmpvar_115 * _RGColor).xyz;
      rgColor_114 = tmpvar_117;
      HRRimColor_113 = _RGColor;
      if (bool(_MoreHardRimColor)) {
        if (((tex_Light_Color_3.w + 0.1) >= 0.8)) {
          HRRimColor_113 = _HRRimColor5;
        } else {
          if ((((tex_Light_Color_3.w + 0.1) >= 0.4) && ((tex_Light_Color_3.w + 0.1) < 0.6))) {
            HRRimColor_113 = _HRRimColor3;
          } else {
            if ((((tex_Light_Color_3.w + 0.1) >= 0.2) && ((tex_Light_Color_3.w + 0.1) < 0.4))) {
              HRRimColor_113 = _HRRimColor2;
            } else {
              if ((((tex_Light_Color_3.w + 0.1) >= 0.6) && ((tex_Light_Color_3.w + 0.1) < 0.8))) {
                HRRimColor_113 = _HRRimColor4;
              };
            };
          };
        };
      };
      highp float tmpvar_118;
      tmpvar_118 = (1.0 - max (0.0, dot (V_109, N_108)));
      rim_112 = tmpvar_118;
      highp vec3 tmpvar_119;
      tmpvar_119 = _WorldSpaceLightPos0.xyz;
      lightDir_111 = tmpvar_119;
      mediump vec3 tmpvar_120;
      tmpvar_120 = normalize(lightDir_111);
      highp float tmpvar_121;
      tmpvar_121 = dot (N_108, tmpvar_120);
      rimLightDir_110 = tmpvar_121;
      rim_112 = (rim_112 * (0.5 + rimLightDir_110));
      highp int tmpvar_122;
      if ((rim_112 > HRRimColor_113.w)) {
        tmpvar_122 = 1;
      } else {
        tmpvar_122 = 0;
      };
      rim_112 = float(tmpvar_122);
      mediump vec3 tmpvar_123;
      tmpvar_123 = (outColor_4.xyz + max ((
        (HRRimColor_113.xyz * rim_112)
       * _HRRimPower), vec3(0.0, 0.0, 0.0)));
      rgColor_114 = (outColor_4.xyz + max (tmpvar_117, vec3(0.0, 0.0, 0.0)));
      highp vec3 tmpvar_124;
      tmpvar_124 = mix (rgColor_114, tmpvar_123, vec3(float(_HRRimIntensity)));
      rgColor_114 = tmpvar_124;
      outColor_4.xyz = rgColor_114;
    };
  };
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_125;
    scrpos_125 = xlv_TEXCOORD3;
    mediump float a_126;
    a_126 = xlv_TEXCOORD3.z;
    if ((a_126 < 0.95)) {
      scrpos_125.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_126 = (a_126 * 17.0);
      highp float tmpvar_127;
      tmpvar_127 = (scrpos_125.y / 4.0);
      highp float tmpvar_128;
      tmpvar_128 = (fract(abs(tmpvar_127)) * 4.0);
      highp float tmpvar_129;
      if ((tmpvar_127 >= 0.0)) {
        tmpvar_129 = tmpvar_128;
      } else {
        tmpvar_129 = -(tmpvar_128);
      };
      highp float tmpvar_130;
      tmpvar_130 = (scrpos_125.x / 4.0);
      highp float tmpvar_131;
      tmpvar_131 = (fract(abs(tmpvar_130)) * 4.0);
      highp float tmpvar_132;
      if ((tmpvar_130 >= 0.0)) {
        tmpvar_132 = tmpvar_131;
      } else {
        tmpvar_132 = -(tmpvar_131);
      };
      highp float x_133;
      x_133 = ((a_126 - _DITHERMATRIX[
        int(tmpvar_129)
      ][
        int(tmpvar_132)
      ]) - 0.01);
      if ((x_133 < 0.0)) {
        discard;
      };
    };
  };
  outColor_4.w = clamp (spColor_78.w, 0.0, 1.0);
  gl_FragData[0] = outColor_4;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
}
}
 Pass {
  Name "COMPLEX"
  LOD 200
  Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "OutlineType" = "Complex" "QUEUE" = "Transparent" "Reflected" = "Reflected" "RenderType" = "Transparent" }
  Cull Front
  GpuProgramID 160302
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_12;
    highp vec4 tmpvar_13;
    tmpvar_13 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_14;
    tmpvar_14.x = tmpvar_13.x;
    tmpvar_14.y = (tmpvar_13.y * _ProjectionParams.x);
    o_12.xy = (tmpvar_14 + tmpvar_13.w);
    o_12.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_12.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _Opaqueness;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1.xyz = (xlv_COLOR0.xyz * _Color.xyz);
  color_1.w = (xlv_COLOR0.w * _Opaqueness);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_2;
    scrpos_2 = xlv_TEXCOORD3;
    mediump float a_3;
    a_3 = xlv_TEXCOORD3.z;
    if ((a_3 < 0.95)) {
      scrpos_2.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_3 = (a_3 * 17.0);
      highp float tmpvar_4;
      tmpvar_4 = (scrpos_2.y / 4.0);
      highp float tmpvar_5;
      tmpvar_5 = (fract(abs(tmpvar_4)) * 4.0);
      highp float tmpvar_6;
      if ((tmpvar_4 >= 0.0)) {
        tmpvar_6 = tmpvar_5;
      } else {
        tmpvar_6 = -(tmpvar_5);
      };
      highp float tmpvar_7;
      tmpvar_7 = (scrpos_2.x / 4.0);
      highp float tmpvar_8;
      tmpvar_8 = (fract(abs(tmpvar_7)) * 4.0);
      highp float tmpvar_9;
      if ((tmpvar_7 >= 0.0)) {
        tmpvar_9 = tmpvar_8;
      } else {
        tmpvar_9 = -(tmpvar_8);
      };
      highp float x_10;
      x_10 = ((a_3 - _DITHERMATRIX[
        int(tmpvar_6)
      ][
        int(tmpvar_9)
      ]) - 0.01);
      if ((x_10 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (color_1.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_12;
    highp vec4 tmpvar_13;
    tmpvar_13 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_14;
    tmpvar_14.x = tmpvar_13.x;
    tmpvar_14.y = (tmpvar_13.y * _ProjectionParams.x);
    o_12.xy = (tmpvar_14 + tmpvar_13.w);
    o_12.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_12.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _Opaqueness;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1.xyz = (xlv_COLOR0.xyz * _Color.xyz);
  color_1.w = (xlv_COLOR0.w * _Opaqueness);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_2;
    scrpos_2 = xlv_TEXCOORD3;
    mediump float a_3;
    a_3 = xlv_TEXCOORD3.z;
    if ((a_3 < 0.95)) {
      scrpos_2.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_3 = (a_3 * 17.0);
      highp float tmpvar_4;
      tmpvar_4 = (scrpos_2.y / 4.0);
      highp float tmpvar_5;
      tmpvar_5 = (fract(abs(tmpvar_4)) * 4.0);
      highp float tmpvar_6;
      if ((tmpvar_4 >= 0.0)) {
        tmpvar_6 = tmpvar_5;
      } else {
        tmpvar_6 = -(tmpvar_5);
      };
      highp float tmpvar_7;
      tmpvar_7 = (scrpos_2.x / 4.0);
      highp float tmpvar_8;
      tmpvar_8 = (fract(abs(tmpvar_7)) * 4.0);
      highp float tmpvar_9;
      if ((tmpvar_7 >= 0.0)) {
        tmpvar_9 = tmpvar_8;
      } else {
        tmpvar_9 = -(tmpvar_8);
      };
      highp float x_10;
      x_10 = ((a_3 - _DITHERMATRIX[
        int(tmpvar_6)
      ][
        int(tmpvar_9)
      ]) - 0.01);
      if ((x_10 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (color_1.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_12;
    highp vec4 tmpvar_13;
    tmpvar_13 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_14;
    tmpvar_14.x = tmpvar_13.x;
    tmpvar_14.y = (tmpvar_13.y * _ProjectionParams.x);
    o_12.xy = (tmpvar_14 + tmpvar_13.w);
    o_12.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_12.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _Opaqueness;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1.xyz = (xlv_COLOR0.xyz * _Color.xyz);
  color_1.w = (xlv_COLOR0.w * _Opaqueness);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_2;
    scrpos_2 = xlv_TEXCOORD3;
    mediump float a_3;
    a_3 = xlv_TEXCOORD3.z;
    if ((a_3 < 0.95)) {
      scrpos_2.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_3 = (a_3 * 17.0);
      highp float tmpvar_4;
      tmpvar_4 = (scrpos_2.y / 4.0);
      highp float tmpvar_5;
      tmpvar_5 = (fract(abs(tmpvar_4)) * 4.0);
      highp float tmpvar_6;
      if ((tmpvar_4 >= 0.0)) {
        tmpvar_6 = tmpvar_5;
      } else {
        tmpvar_6 = -(tmpvar_5);
      };
      highp float tmpvar_7;
      tmpvar_7 = (scrpos_2.x / 4.0);
      highp float tmpvar_8;
      tmpvar_8 = (fract(abs(tmpvar_7)) * 4.0);
      highp float tmpvar_9;
      if ((tmpvar_7 >= 0.0)) {
        tmpvar_9 = tmpvar_8;
      } else {
        tmpvar_9 = -(tmpvar_8);
      };
      highp float x_10;
      x_10 = ((a_3 - _DITHERMATRIX[
        int(tmpvar_6)
      ][
        int(tmpvar_9)
      ]) - 0.01);
      if ((x_10 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (color_1.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  highp vec2 spnoiseuv_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = (_glesVertex * 0.5);
  highp vec2 tmpvar_14;
  tmpvar_14.x = (tmpvar_13.x + (tmpvar_13.z * tmpvar_13.z));
  tmpvar_14.y = ((tmpvar_13.y + (0.5 * tmpvar_13.z)) + ((0.5 * tmpvar_13.x) * tmpvar_13.x));
  spnoiseuv_12 = ((tmpvar_14 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_15.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = spnoiseuv_12;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _Opaqueness;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1 = xlv_COLOR0;
  mediump float intensity_2;
  mediump vec4 outColor_3;
  outColor_3 = _SPOutlineColor;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_SPNoiseTex, xlv_TEXCOORD0);
  highp float tmpvar_5;
  tmpvar_5 = (((1.99 * tmpvar_4.x) * _SPNoiseScaler) - 1.0);
  intensity_2 = tmpvar_5;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_2 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_3 = xlv_COLOR0;
  };
  color_1.xyz = (outColor_3.xyz * _Color.xyz);
  color_1.w = (outColor_3.w * _Opaqueness);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD3;
    mediump float a_7;
    a_7 = xlv_TEXCOORD3.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (color_1.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  highp vec2 spnoiseuv_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = (_glesVertex * 0.5);
  highp vec2 tmpvar_14;
  tmpvar_14.x = (tmpvar_13.x + (tmpvar_13.z * tmpvar_13.z));
  tmpvar_14.y = ((tmpvar_13.y + (0.5 * tmpvar_13.z)) + ((0.5 * tmpvar_13.x) * tmpvar_13.x));
  spnoiseuv_12 = ((tmpvar_14 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_15.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = spnoiseuv_12;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _Opaqueness;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1 = xlv_COLOR0;
  mediump float intensity_2;
  mediump vec4 outColor_3;
  outColor_3 = _SPOutlineColor;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_SPNoiseTex, xlv_TEXCOORD0);
  highp float tmpvar_5;
  tmpvar_5 = (((1.99 * tmpvar_4.x) * _SPNoiseScaler) - 1.0);
  intensity_2 = tmpvar_5;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_2 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_3 = xlv_COLOR0;
  };
  color_1.xyz = (outColor_3.xyz * _Color.xyz);
  color_1.w = (outColor_3.w * _Opaqueness);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD3;
    mediump float a_7;
    a_7 = xlv_TEXCOORD3.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (color_1.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  highp vec2 spnoiseuv_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = (_glesVertex * 0.5);
  highp vec2 tmpvar_14;
  tmpvar_14.x = (tmpvar_13.x + (tmpvar_13.z * tmpvar_13.z));
  tmpvar_14.y = ((tmpvar_13.y + (0.5 * tmpvar_13.z)) + ((0.5 * tmpvar_13.x) * tmpvar_13.x));
  spnoiseuv_12 = ((tmpvar_14 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_15.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = spnoiseuv_12;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump float _Opaqueness;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1 = xlv_COLOR0;
  mediump float intensity_2;
  mediump vec4 outColor_3;
  outColor_3 = _SPOutlineColor;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_SPNoiseTex, xlv_TEXCOORD0);
  highp float tmpvar_5;
  tmpvar_5 = (((1.99 * tmpvar_4.x) * _SPNoiseScaler) - 1.0);
  intensity_2 = tmpvar_5;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_2 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_3 = xlv_COLOR0;
  };
  color_1.xyz = (outColor_3.xyz * _Color.xyz);
  color_1.w = (outColor_3.w * _Opaqueness);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_6;
    scrpos_6 = xlv_TEXCOORD3;
    mediump float a_7;
    a_7 = xlv_TEXCOORD3.z;
    if ((a_7 < 0.95)) {
      scrpos_6.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_7 = (a_7 * 17.0);
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_6.y / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float tmpvar_11;
      tmpvar_11 = (scrpos_6.x / 4.0);
      highp float tmpvar_12;
      tmpvar_12 = (fract(abs(tmpvar_11)) * 4.0);
      highp float tmpvar_13;
      if ((tmpvar_11 >= 0.0)) {
        tmpvar_13 = tmpvar_12;
      } else {
        tmpvar_13 = -(tmpvar_12);
      };
      highp float x_14;
      x_14 = ((a_7 - _DITHERMATRIX[
        int(tmpvar_10)
      ][
        int(tmpvar_13)
      ]) - 0.01);
      if ((x_14 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (color_1.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
""
}
}
}
 Pass {
  Name "CONSTANT_REPLACE_NOCUTOFF"
  LOD 200
  Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "OutlineType" = "Complex" "QUEUE" = "Transparent" "Reflected" = "Reflected" "RenderType" = "Transparent" }
  GpuProgramID 239230
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
}


#endif
#ifdef FRAGMENT
uniform mediump float _BloomFactor;
void main ()
{
  mediump vec4 color_1;
  color_1.xyz = vec3(0.0, 0.0, 0.0);
  color_1.w = _BloomFactor;
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
}


#endif
#ifdef FRAGMENT
uniform mediump float _BloomFactor;
void main ()
{
  mediump vec4 color_1;
  color_1.xyz = vec3(0.0, 0.0, 0.0);
  color_1.w = _BloomFactor;
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
}


#endif
#ifdef FRAGMENT
uniform mediump float _BloomFactor;
void main ()
{
  mediump vec4 color_1;
  color_1.xyz = vec3(0.0, 0.0, 0.0);
  color_1.w = _BloomFactor;
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_glesVertex * 0.5);
  highp vec2 tmpvar_3;
  tmpvar_3.x = (tmpvar_2.x + (tmpvar_2.z * tmpvar_2.z));
  tmpvar_3.y = ((tmpvar_2.y + (0.5 * tmpvar_2.z)) + ((0.5 * tmpvar_2.x) * tmpvar_2.x));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD1 = ((tmpvar_3 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}


#endif
#ifdef FRAGMENT
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionBloomFactor;
uniform mediump float _BloomFactor;
highp float xlat_mutable_SPTransition;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 color_1;
  color_1.xyz = vec3(0.0, 0.0, 0.0);
  color_1.w = _BloomFactor;
  mediump float intensity_2;
  mediump float outBloomFactor_3;
  outBloomFactor_3 = color_1.w;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_5;
  tmpvar_5 = (((1.99 * tmpvar_4.x) * _SPNoiseScaler) - 1.0);
  intensity_2 = tmpvar_5;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if (((intensity_2 >= (1.5 * xlat_mutable_SPTransition)) && (intensity_2 < (1.7 * xlat_mutable_SPTransition)))) {
    highp float tmpvar_6;
    tmpvar_6 = mix (_BloomFactor, _SPTransitionBloomFactor, clamp ((10.0 * 
      (-(intensity_2) + (1.7 * xlat_mutable_SPTransition))
    ), 0.0, 1.0));
    outBloomFactor_3 = tmpvar_6;
  } else {
    if ((intensity_2 < (1.5 * xlat_mutable_SPTransition))) {
      outBloomFactor_3 = (outBloomFactor_3 * _SPOpaqueness);
    };
  };
  color_1.w = outBloomFactor_3;
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_glesVertex * 0.5);
  highp vec2 tmpvar_3;
  tmpvar_3.x = (tmpvar_2.x + (tmpvar_2.z * tmpvar_2.z));
  tmpvar_3.y = ((tmpvar_2.y + (0.5 * tmpvar_2.z)) + ((0.5 * tmpvar_2.x) * tmpvar_2.x));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD1 = ((tmpvar_3 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}


#endif
#ifdef FRAGMENT
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionBloomFactor;
uniform mediump float _BloomFactor;
highp float xlat_mutable_SPTransition;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 color_1;
  color_1.xyz = vec3(0.0, 0.0, 0.0);
  color_1.w = _BloomFactor;
  mediump float intensity_2;
  mediump float outBloomFactor_3;
  outBloomFactor_3 = color_1.w;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_5;
  tmpvar_5 = (((1.99 * tmpvar_4.x) * _SPNoiseScaler) - 1.0);
  intensity_2 = tmpvar_5;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if (((intensity_2 >= (1.5 * xlat_mutable_SPTransition)) && (intensity_2 < (1.7 * xlat_mutable_SPTransition)))) {
    highp float tmpvar_6;
    tmpvar_6 = mix (_BloomFactor, _SPTransitionBloomFactor, clamp ((10.0 * 
      (-(intensity_2) + (1.7 * xlat_mutable_SPTransition))
    ), 0.0, 1.0));
    outBloomFactor_3 = tmpvar_6;
  } else {
    if ((intensity_2 < (1.5 * xlat_mutable_SPTransition))) {
      outBloomFactor_3 = (outBloomFactor_3 * _SPOpaqueness);
    };
  };
  color_1.w = outBloomFactor_3;
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPNoiseTex_ST;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_glesVertex * 0.5);
  highp vec2 tmpvar_3;
  tmpvar_3.x = (tmpvar_2.x + (tmpvar_2.z * tmpvar_2.z));
  tmpvar_3.y = ((tmpvar_2.y + (0.5 * tmpvar_2.z)) + ((0.5 * tmpvar_2.x) * tmpvar_2.x));
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
  xlv_TEXCOORD1 = ((tmpvar_3 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
}


#endif
#ifdef FRAGMENT
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionBloomFactor;
uniform mediump float _BloomFactor;
highp float xlat_mutable_SPTransition;
varying highp vec2 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 color_1;
  color_1.xyz = vec3(0.0, 0.0, 0.0);
  color_1.w = _BloomFactor;
  mediump float intensity_2;
  mediump float outBloomFactor_3;
  outBloomFactor_3 = color_1.w;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_5;
  tmpvar_5 = (((1.99 * tmpvar_4.x) * _SPNoiseScaler) - 1.0);
  intensity_2 = tmpvar_5;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if (((intensity_2 >= (1.5 * xlat_mutable_SPTransition)) && (intensity_2 < (1.7 * xlat_mutable_SPTransition)))) {
    highp float tmpvar_6;
    tmpvar_6 = mix (_BloomFactor, _SPTransitionBloomFactor, clamp ((10.0 * 
      (-(intensity_2) + (1.7 * xlat_mutable_SPTransition))
    ), 0.0, 1.0));
    outBloomFactor_3 = tmpvar_6;
  } else {
    if ((intensity_2 < (1.5 * xlat_mutable_SPTransition))) {
      outBloomFactor_3 = (outBloomFactor_3 * _SPOpaqueness);
    };
  };
  color_1.w = outBloomFactor_3;
  gl_FragData[0] = color_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
""
}
}
}
}
CustomEditor "MoleMole.CharacterShaderEditorBase"
}